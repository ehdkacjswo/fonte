is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,18,import org.joda.time.base.BaseSingleFieldPeriod;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,19,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,20,import org.joda.time.format.ISOPeriodFormat;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,21,import org.joda.time.format.PeriodFormatter;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,24,* An immutable time period representing a number of days.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,25,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,26,* <code>Days</code> is an immutable period that can only store days.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,27,"* It does not store years, months or hours for example. As such it is a"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,28,* type-safe way of representing a number of days in an application.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,29,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,30,"* The number of days is set in the constructor, and may be queried using"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,31,* <code>getDays()</code>. Basic mathematical operations are provided -
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,32,"* <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,33,* <code>dividedBy()</code>.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,34,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,35,* <code>Days</code> is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,37,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,38,* @since 1.4
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,40,public final class Days extends BaseSingleFieldPeriod {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,42,/** Constant representing zero days. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,43,public static final Days ZERO = new Days(0);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,44,/** Constant representing one day. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,45,public static final Days ONE = new Days(1);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,46,/** Constant representing two days. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,47,public static final Days TWO = new Days(2);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,48,/** Constant representing three days. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,49,public static final Days THREE = new Days(3);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,50,/** Constant representing four days. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,51,public static final Days FOUR = new Days(4);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,52,/** Constant representing five days. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,53,public static final Days FIVE = new Days(5);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,54,/** Constant representing six days. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,55,public static final Days SIX = new Days(6);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,56,/** Constant representing seven days. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,57,public static final Days SEVEN = new Days(7);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,58,/** Constant representing the maximum nuber of days that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,59,public static final Days MAX_VALUE = new Days(Integer.MAX_VALUE);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,60,/** Constant representing the minimum nuber of days that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,61,public static final Days MIN_VALUE = new Days(Integer.MIN_VALUE);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,63,/** The paser to use for this class. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,64,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.days());
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,65,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,66,private static final long serialVersionUID = 87525275727380865L;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,70,* Obtains an instance of <code>Days</code> that may be cached.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,71,"* <code>Days</code> is immutable, so instances can be cached and shared."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,72,* This factory method provides access to shared instances.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,74,* @param days  the number of days to obtain an instance for
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,75,* @return the instance of Days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,77,public static Days days(int days) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,78,switch (days) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,79,case 0:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,80,return ZERO;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,81,case 1:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,82,return ONE;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,83,case 2:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,84,return TWO;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,85,case 3:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,86,return THREE;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,87,case 4:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,88,return FOUR;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,89,case 5:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,90,return FIVE;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,91,case 6:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,92,return SIX;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,93,case 7:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,94,return SEVEN;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,95,case Integer.MAX_VALUE:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,96,return MAX_VALUE;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,97,case Integer.MIN_VALUE:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,98,return MIN_VALUE;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,99,default:
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,100,return new Days(days);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,106,* Creates a <code>Days</code> representing the number of whole days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,107,* between the two specified datetimes. This method corectly handles
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,108,* any daylight savings time changes that may occur during the interval.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,110,"* @param start  the start instant, must not be null"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,111,"* @param end  the end instant, must not be null"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,112,* @return the period in days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,113,* @throws IllegalArgumentException if the instants are null or invalid
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,115,"public static Days daysBetween(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,116,"int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.days());"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,117,return Days.days(amount);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,121,* Creates a <code>Days</code> representing the number of whole days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,122,* between the two specified partial datetimes.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,123,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,124,"* The two partials must contain the same fields, for example you can specify"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,125,* two <code>LocalDate</code> objects.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,127,"* @param start  the start partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,128,"* @param end  the end partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,129,* @return the period in days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,130,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,132,"public static Days daysBetween(ReadablePartial start, ReadablePartial end) {"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,133,if (start instanceof LocalDate && end instanceof LocalDate)   {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,134,Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,135,int days = chrono.days().getDifference(
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,136,"((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,137,return Days.days(days);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,139,"int amount = BaseSingleFieldPeriod.between(start, end, ZERO);"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,140,return Days.days(amount);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,144,* Creates a <code>Days</code> representing the number of whole days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,145,* in the specified interval. This method corectly handles any daylight
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,146,* savings time changes that may occur during the interval.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,148,"* @param interval  the interval to extract days from, null returns zero"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,149,* @return the period in days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,150,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,152,public static Days daysIn(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,153,if (interval == null)   {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,154,return Days.ZERO;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,156,"int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.days());"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,157,return Days.days(amount);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,161,* Creates a new <code>Days</code> representing the number of complete
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,162,* standard length days in the specified period.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,163,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,164,* This factory method converts all fields from the period to hours using standardised
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,165,* durations for each field. Only those fields which have a precise duration in
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,166,* the ISO UTC chronology can be converted.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,167,* <ul>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,168,* <li>One week consists of 7 days.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,169,* <li>One day consists of 24 hours.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,170,* <li>One hour consists of 60 minutes.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,171,* <li>One minute consists of 60 seconds.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,172,* <li>One second consists of 1000 milliseconds.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,173,* </ul>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,174,* Months and Years are imprecise and periods containing these values cannot be converted.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,176,"* @param period  the period to get the number of hours from, null returns zero"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,177,* @return the period in days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,178,* @throws IllegalArgumentException if the period contains imprecise duration values
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,180,public static Days standardDaysIn(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,181,"int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,182,return Days.days(amount);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,186,* Creates a new <code>Days</code> by parsing a string in the ISO8601 format 'PnD'.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,187,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,188,* The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,189,"* days component may be non-zero. If any other component is non-zero, an exception"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,190,* will be thrown.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,192,"* @param periodStr  the period string, null returns zero"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,193,* @return the period in days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,194,* @throws IllegalArgumentException if the string format is invalid
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,196,public static Days parseDays(String periodStr) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,197,if (periodStr == null) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,198,return Days.ZERO;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,200,Period p = PARSER.parsePeriod(periodStr);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,201,return Days.days(p.getDays());
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,206,* Creates a new instance representing a number of days.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,207,* You should consider using the factory method {@link #days(int)}
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,208,* instead of the constructor.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,210,* @param days  the number of days to represent
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,212,private Days(int days) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,213,super(days);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,217,* Resolves singletons.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,219,* @return the singleton instance
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,221,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,222,return Days.days(getValue());
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,227,"* Gets the duration field type, which is <code>days</code>."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,229,* @return the period type
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,231,public DurationFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,232,return DurationFieldType.days();
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,236,"* Gets the period type, which is <code>days</code>."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,238,* @return the period type
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,240,public PeriodType getPeriodType() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,241,return PeriodType.days();
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,246,* Converts this period in days to a period in weeks assuming a
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,247,* 7 day week.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,248,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,249,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,250,* However to achieve this it makes the assumption that all weeks are
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,251,* 7 days long.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,252,"* This may not be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,253,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,255,* @return a period representing the number of weeks for this number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,257,public Weeks toStandardWeeks() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,258,return Weeks.weeks(getValue() / DateTimeConstants.DAYS_PER_WEEK);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,262,* Converts this period in days to a period in hours assuming a
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,263,* 24 hour day.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,264,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,265,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,266,* However to achieve this it makes the assumption that all days are 24 hours long.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,267,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,268,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,269,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,271,* @return a period representing the number of hours for this number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,272,* @throws ArithmeticException if the number of hours is too large to be represented
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,274,public Hours toStandardHours() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,275,"return Hours.hours(FieldUtils.safeMultiply(getValue(), DateTimeConstants.HOURS_PER_DAY));"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,279,* Converts this period in days to a period in minutes assuming a
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,280,* 24 hour day and 60 minute hour.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,281,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,282,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,283,* However to achieve this it makes the assumption that all days are 24 hours
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,284,* long and all hours are 60 minutes long.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,285,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,286,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,287,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,289,* @return a period representing the number of minutes for this number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,290,* @throws ArithmeticException if the number of minutes is too large to be represented
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,292,public Minutes toStandardMinutes() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,293,"return Minutes.minutes(FieldUtils.safeMultiply(getValue(), DateTimeConstants.MINUTES_PER_DAY));"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,297,* Converts this period in days to a period in seconds assuming a
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,298,"* 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,299,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,300,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,301,* However to achieve this it makes the assumption that all days are 24 hours
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,302,"* long, all hours are 60 minutes long and all minutes are 60 seconds long."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,303,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,304,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,305,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,307,* @return a period representing the number of seconds for this number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,308,* @throws ArithmeticException if the number of seconds is too large to be represented
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,310,public Seconds toStandardSeconds() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,311,"return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_DAY));"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,316,* Converts this period in days to a duration in milliseconds assuming a
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,317,"* 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,318,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,319,* This method allows you to convert from a period to a duration.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,320,* However to achieve this it makes the assumption that all days are 24 hours
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,321,"* long, all hours are 60 minutes and all minutes are 60 seconds."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,322,"* This is not true when daylight savings time is considered, and may also"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,323,"* not be true for some unusual chronologies. However, it is included as it"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,324,* is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,326,* @return a period representing the number of hours for this number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,328,public Duration toStandardDuration() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,329,long days = getValue();  // assign to a long
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,330,return new Duration(days * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,335,* Gets the number of days that this period represents.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,337,* @return the number of days in the period
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,339,public int getDays() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,340,return getValue();
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,345,* Returns a new instance with the specified number of days added.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,346,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,347,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,349,"* @param days  the amount of days to add, may be negative"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,350,* @return the new period plus the specified number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,351,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,353,public Days plus(int days) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,354,if (days == 0) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,355,return this;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,357,"return Days.days(FieldUtils.safeAdd(getValue(), days));"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,361,* Returns a new instance with the specified number of days added.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,362,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,363,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,365,"* @param days  the amount of days to add, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,366,* @return the new period plus the specified number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,367,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,369,public Days plus(Days days) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,370,if (days == null) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,371,return this;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,373,return plus(days.getValue());
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,378,* Returns a new instance with the specified number of days taken away.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,379,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,380,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,382,"* @param days  the amount of days to take away, may be negative"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,383,* @return the new period minus the specified number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,384,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,386,public Days minus(int days) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,387,return plus(FieldUtils.safeNegate(days));
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,391,* Returns a new instance with the specified number of days taken away.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,392,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,393,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,395,"* @param days  the amount of days to take away, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,396,* @return the new period minus the specified number of days
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,397,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,399,public Days minus(Days days) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,400,if (days == null) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,401,return this;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,403,return minus(days.getValue());
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,408,* Returns a new instance with the days multiplied by the specified scalar.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,409,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,410,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,412,"* @param scalar  the amount to multiply by, may be negative"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,413,* @return the new period multiplied by the specified scalar
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,414,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,416,public Days multipliedBy(int scalar) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,417,"return Days.days(FieldUtils.safeMultiply(getValue(), scalar));"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,421,* Returns a new instance with the days divided by the specified divisor.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,422,"* The calculation uses integer division, thus 3 divided by 2 is 1."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,423,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,424,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,426,"* @param divisor  the amount to divide by, may be negative"
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,427,* @return the new period divided by the specified divisor
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,428,* @throws ArithmeticException if the divisor is zero
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,430,public Days dividedBy(int divisor) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,431,if (divisor == 1) {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,432,return this;
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,434,return Days.days(getValue() / divisor);
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,439,* Negates the number of days in this period.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,441,* @return the new period with a negated value
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,442,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,444,public Days negate() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,445,return Days.days(FieldUtils.safeNegate(getValue()));
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,450,* Gets this instance as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,451,* <p>
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,452,"* For example, ""P4D"" represents 4 days."
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,454,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,456,public String toString() {
True,JodaTime/src/java/org/joda/time/Days.java,JodaTime/src/java/org/joda/time/Days.java,457,"return ""P"" + String.valueOf(getValue()) + ""D"";"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,18,import org.joda.time.base.BaseSingleFieldPeriod;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,19,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,20,import org.joda.time.format.ISOPeriodFormat;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,21,import org.joda.time.format.PeriodFormatter;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,24,* An immutable time period representing a number of hours.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,25,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,26,* <code>Hours</code> is an immutable period that can only store hours.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,27,"* It does not store years, months or minutes for example. As such it is a"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,28,* type-safe way of representing a number of hours in an application.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,29,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,30,"* The number of hours is set in the constructor, and may be queried using"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,31,* <code>getHours()</code>. Basic mathematical operations are provided -
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,32,"* <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,33,* <code>dividedBy()</code>.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,34,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,35,* <code>Hours</code> is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,37,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,38,* @since 1.4
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,40,public final class Hours extends BaseSingleFieldPeriod {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,42,/** Constant representing zero hours. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,43,public static final Hours ZERO = new Hours(0);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,44,/** Constant representing one hour. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,45,public static final Hours ONE = new Hours(1);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,46,/** Constant representing two hours. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,47,public static final Hours TWO = new Hours(2);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,48,/** Constant representing three hours. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,49,public static final Hours THREE = new Hours(3);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,50,/** Constant representing four hours. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,51,public static final Hours FOUR = new Hours(4);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,52,/** Constant representing five hours. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,53,public static final Hours FIVE = new Hours(5);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,54,/** Constant representing six hours. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,55,public static final Hours SIX = new Hours(6);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,56,/** Constant representing seven hours. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,57,public static final Hours SEVEN = new Hours(7);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,58,/** Constant representing seven hours. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,59,public static final Hours EIGHT = new Hours(8);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,60,/** Constant representing the maximum nuber of hours that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,61,public static final Hours MAX_VALUE = new Hours(Integer.MAX_VALUE);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,62,/** Constant representing the minimum nuber of hours that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,63,public static final Hours MIN_VALUE = new Hours(Integer.MIN_VALUE);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,65,/** The paser to use for this class. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,66,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.hours());
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,67,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,68,private static final long serialVersionUID = 87525275727380864L;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,72,* Obtains an instance of <code>Hours</code> that may be cached.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,73,"* <code>Hours</code> is immutable, so instances can be cached and shared."
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,74,* This factory method provides access to shared instances.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,76,* @param hours  the number of hours to obtain an instance for
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,77,* @return the instance of Hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,79,public static Hours hours(int hours) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,80,switch (hours) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,81,case 0:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,82,return ZERO;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,83,case 1:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,84,return ONE;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,85,case 2:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,86,return TWO;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,87,case 3:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,88,return THREE;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,89,case 4:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,90,return FOUR;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,91,case 5:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,92,return FIVE;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,93,case 6:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,94,return SIX;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,95,case 7:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,96,return SEVEN;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,97,case 8:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,98,return EIGHT;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,99,case Integer.MAX_VALUE:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,100,return MAX_VALUE;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,101,case Integer.MIN_VALUE:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,102,return MIN_VALUE;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,103,default:
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,104,return new Hours(hours);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,110,* Creates a <code>Hours</code> representing the number of whole hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,111,* between the two specified datetimes.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,113,"* @param start  the start instant, must not be null"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,114,"* @param end  the end instant, must not be null"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,115,* @return the period in hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,116,* @throws IllegalArgumentException if the instants are null or invalid
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,118,"public static Hours hoursBetween(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,119,"int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.hours());"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,120,return Hours.hours(amount);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,124,* Creates a <code>Hours</code> representing the number of whole hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,125,* between the two specified partial datetimes.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,126,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,127,"* The two partials must contain the same fields, for example you can specify"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,128,* two <code>LocalTime</code> objects.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,130,"* @param start  the start partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,131,"* @param end  the end partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,132,* @return the period in hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,133,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,135,"public static Hours hoursBetween(ReadablePartial start, ReadablePartial end) {"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,136,if (start instanceof LocalTime && end instanceof LocalTime)   {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,137,Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,138,int hours = chrono.hours().getDifference(
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,139,"((LocalTime) end).getLocalMillis(), ((LocalTime) start).getLocalMillis());"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,140,return Hours.hours(hours);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,142,"int amount = BaseSingleFieldPeriod.between(start, end, ZERO);"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,143,return Hours.hours(amount);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,147,* Creates a <code>Hours</code> representing the number of whole hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,148,* in the specified interval.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,150,"* @param interval  the interval to extract hours from, null returns zero"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,151,* @return the period in hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,152,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,154,public static Hours hoursIn(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,155,if (interval == null)   {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,156,return Hours.ZERO;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,158,"int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.hours());"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,159,return Hours.hours(amount);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,163,* Creates a new <code>Hours</code> representing the number of complete
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,164,* standard length hours in the specified period.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,165,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,166,* This factory method converts all fields from the period to hours using standardised
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,167,* durations for each field. Only those fields which have a precise duration in
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,168,* the ISO UTC chronology can be converted.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,169,* <ul>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,170,* <li>One week consists of 7 days.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,171,* <li>One day consists of 24 hours.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,172,* <li>One hour consists of 60 minutes.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,173,* <li>One minute consists of 60 seconds.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,174,* <li>One second consists of 1000 milliseconds.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,175,* </ul>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,176,* Months and Years are imprecise and periods containing these values cannot be converted.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,178,"* @param period  the period to get the number of hours from, null returns zero"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,179,* @return the period in hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,180,* @throws IllegalArgumentException if the period contains imprecise duration values
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,182,public static Hours standardHoursIn(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,183,"int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_HOUR);"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,184,return Hours.hours(amount);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,188,* Creates a new <code>Hours</code> by parsing a string in the ISO8601 format 'PTnH'.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,189,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,190,* The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,191,"* hours component may be non-zero. If any other component is non-zero, an exception"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,192,* will be thrown.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,194,"* @param periodStr  the period string, null returns zero"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,195,* @return the period in hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,196,* @throws IllegalArgumentException if the string format is invalid
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,198,public static Hours parseHours(String periodStr) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,199,if (periodStr == null) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,200,return Hours.ZERO;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,202,Period p = PARSER.parsePeriod(periodStr);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,203,return Hours.hours(p.getHours());
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,208,* Creates a new instance representing a number of hours.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,209,* You should consider using the factory method {@link #hours(int)}
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,210,* instead of the constructor.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,212,* @param hours  the number of hours to represent
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,214,private Hours(int hours) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,215,super(hours);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,219,* Resolves singletons.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,221,* @return the singleton instance
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,223,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,224,return Hours.hours(getValue());
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,229,"* Gets the duration field type, which is <code>hours</code>."
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,231,* @return the period type
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,233,public DurationFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,234,return DurationFieldType.hours();
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,238,"* Gets the period type, which is <code>hours</code>."
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,240,* @return the period type
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,242,public PeriodType getPeriodType() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,243,return PeriodType.hours();
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,248,* Converts this period in hours to a period in weeks assuming a
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,249,* 7 day week and 24 hour day.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,250,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,251,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,252,* However to achieve this it makes the assumption that all weeks are 7 days
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,253,* long and all days are 24 hours long.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,254,"* This is not true when daylight savings time is considered, and may also"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,255,"* not be true for some unusual chronologies. However, it is included as it"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,256,* is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,258,* @return a period representing the number of whole weeks for this number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,260,public Weeks toStandardWeeks() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,261,return Weeks.weeks(getValue() / DateTimeConstants.HOURS_PER_WEEK);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,265,* Converts this period in hours to a period in days assuming a
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,266,* 24 hour day.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,267,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,268,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,269,* However to achieve this it makes the assumption that all days are 24 hours long.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,270,"* This is not true when daylight savings time is considered, and may also"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,271,"* not be true for some unusual chronologies. However, it is included as it"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,272,* is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,274,* @return a period representing the number of whole days for this number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,276,public Days toStandardDays() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,277,return Days.days(getValue() / DateTimeConstants.HOURS_PER_DAY);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,281,* Converts this period in hours to a period in minutes assuming a
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,282,* 60 minute hour.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,283,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,284,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,285,* However to achieve this it makes the assumption that all hours are 60 minutes long.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,286,"* This may not be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,287,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,289,* @return a period representing the number of minutes for this number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,290,* @throws ArithmeticException if the number of minutes is too large to be represented
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,292,public Minutes toStandardMinutes() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,293,"return Minutes.minutes(FieldUtils.safeMultiply(getValue(), DateTimeConstants.MINUTES_PER_HOUR));"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,297,* Converts this period in hours to a period in seconds assuming a
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,298,* 60 minute hour and 60 second minute.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,299,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,300,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,301,* However to achieve this it makes the assumption that all hours are
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,302,* 60 minutes long and all minutes are 60 seconds long.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,303,"* This may not be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,304,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,306,* @return a period representing the number of seconds for this number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,307,* @throws ArithmeticException if the number of seconds is too large to be represented
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,309,public Seconds toStandardSeconds() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,310,"return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_HOUR));"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,315,* Converts this period in hours to a duration in milliseconds assuming a
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,316,* 60 minute hour and 60 second minute.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,317,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,318,* This method allows you to convert from a period to a duration.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,319,* However to achieve this it makes the assumption that all hours are
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,320,* 60 minutes and all minutes are 60 seconds. This might not be true for an
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,321,"* unusual chronology, for example one that takes leap seconds into account."
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,322,"* However, the method is included as it is a useful operation for many"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,323,* applications and business rules.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,325,* @return a period representing the number of hours for this number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,327,public Duration toStandardDuration() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,328,long hours = getValue();  // assign to a long
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,329,return new Duration(hours * DateTimeConstants.MILLIS_PER_HOUR);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,334,* Gets the number of hours that this period represents.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,336,* @return the number of hours in the period
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,338,public int getHours() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,339,return getValue();
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,344,* Returns a new instance with the specified number of hours added.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,345,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,346,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,348,"* @param hours  the amount of hours to add, may be negative"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,349,* @return the new period plus the specified number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,350,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,352,public Hours plus(int hours) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,353,if (hours == 0) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,354,return this;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,356,"return Hours.hours(FieldUtils.safeAdd(getValue(), hours));"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,360,* Returns a new instance with the specified number of hours added.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,361,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,362,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,364,"* @param hours  the amount of hours to add, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,365,* @return the new period plus the specified number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,366,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,368,public Hours plus(Hours hours) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,369,if (hours == null) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,370,return this;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,372,return plus(hours.getValue());
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,377,* Returns a new instance with the specified number of hours taken away.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,378,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,379,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,381,"* @param hours  the amount of hours to take away, may be negative"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,382,* @return the new period minus the specified number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,383,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,385,public Hours minus(int hours) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,386,return plus(FieldUtils.safeNegate(hours));
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,390,* Returns a new instance with the specified number of hours taken away.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,391,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,392,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,394,"* @param hours  the amount of hours to take away, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,395,* @return the new period minus the specified number of hours
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,396,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,398,public Hours minus(Hours hours) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,399,if (hours == null) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,400,return this;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,402,return minus(hours.getValue());
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,407,* Returns a new instance with the hours multiplied by the specified scalar.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,408,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,409,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,411,"* @param scalar  the amount to multiply by, may be negative"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,412,* @return the new period multiplied by the specified scalar
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,413,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,415,public Hours multipliedBy(int scalar) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,416,"return Hours.hours(FieldUtils.safeMultiply(getValue(), scalar));"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,420,* Returns a new instance with the hours divided by the specified divisor.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,421,"* The calculation uses integer division, thus 3 divided by 2 is 1."
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,422,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,423,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,425,"* @param divisor  the amount to divide by, may be negative"
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,426,* @return the new period divided by the specified divisor
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,427,* @throws ArithmeticException if the divisor is zero
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,429,public Hours dividedBy(int divisor) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,430,if (divisor == 1) {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,431,return this;
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,433,return Hours.hours(getValue() / divisor);
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,438,* Negates the number of hours in this period.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,440,* @return the new period with a negated value
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,441,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,443,public Hours negate() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,444,return Hours.hours(FieldUtils.safeNegate(getValue()));
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,449,* Gets this instance as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,450,* <p>
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,451,"* For example, ""PT4H"" represents 4 hours."
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,453,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,455,public String toString() {
True,JodaTime/src/java/org/joda/time/Hours.java,JodaTime/src/java/org/joda/time/Hours.java,456,"return ""PT"" + String.valueOf(getValue()) + ""H"";"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,18,import org.joda.time.base.BaseSingleFieldPeriod;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,19,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,20,import org.joda.time.format.ISOPeriodFormat;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,21,import org.joda.time.format.PeriodFormatter;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,24,* An immutable time period representing a number of minutes.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,25,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,26,* <code>Minutes</code> is an immutable period that can only store minutes.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,27,"* It does not store years, months or hours for example. As such it is a"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,28,* type-safe way of representing a number of minutes in an application.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,29,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,30,"* The number of minutes is set in the constructor, and may be queried using"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,31,* <code>getMinutes()</code>. Basic mathematical operations are provided -
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,32,"* <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,33,* <code>dividedBy()</code>.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,34,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,35,* <code>Minutes</code> is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,37,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,38,* @since 1.4
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,40,public final class Minutes extends BaseSingleFieldPeriod {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,42,/** Constant representing zero minutes. */
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,43,public static final Minutes ZERO = new Minutes(0);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,44,/** Constant representing one minute. */
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,45,public static final Minutes ONE = new Minutes(1);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,46,/** Constant representing two minutes. */
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,47,public static final Minutes TWO = new Minutes(2);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,48,/** Constant representing three minutes. */
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,49,public static final Minutes THREE = new Minutes(3);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,50,/** Constant representing the maximum nuber of minutes that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,51,public static final Minutes MAX_VALUE = new Minutes(Integer.MAX_VALUE);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,52,/** Constant representing the minimum nuber of minutes that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,53,public static final Minutes MIN_VALUE = new Minutes(Integer.MIN_VALUE);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,55,/** The paser to use for this class. */
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,56,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.minutes());
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,57,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,58,private static final long serialVersionUID = 87525275727380863L;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,62,* Obtains an instance of <code>Minutes</code> that may be cached.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,63,"* <code>Minutes</code> is immutable, so instances can be cached and shared."
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,64,* This factory method provides access to shared instances.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,66,* @param minutes  the number of minutes to obtain an instance for
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,67,* @return the instance of Minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,69,public static Minutes minutes(int minutes) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,70,switch (minutes) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,71,case 0:
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,72,return ZERO;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,73,case 1:
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,74,return ONE;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,75,case 2:
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,76,return TWO;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,77,case 3:
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,78,return THREE;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,79,case Integer.MAX_VALUE:
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,80,return MAX_VALUE;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,81,case Integer.MIN_VALUE:
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,82,return MIN_VALUE;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,83,default:
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,84,return new Minutes(minutes);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,90,* Creates a <code>Minutes</code> representing the number of whole minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,91,* between the two specified datetimes.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,93,"* @param start  the start instant, must not be null"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,94,"* @param end  the end instant, must not be null"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,95,* @return the period in minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,96,* @throws IllegalArgumentException if the instants are null or invalid
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,98,"public static Minutes minutesBetween(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,99,"int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.minutes());"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,100,return Minutes.minutes(amount);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,104,* Creates a <code>Minutes</code> representing the number of whole minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,105,* between the two specified partial datetimes.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,106,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,107,"* The two partials must contain the same fields, for example you can specify"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,108,* two <code>LocalTime</code> objects.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,110,"* @param start  the start partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,111,"* @param end  the end partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,112,* @return the period in minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,113,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,115,"public static Minutes minutesBetween(ReadablePartial start, ReadablePartial end) {"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,116,if (start instanceof LocalTime && end instanceof LocalTime)   {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,117,Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,118,int minutes = chrono.minutes().getDifference(
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,119,"((LocalTime) end).getLocalMillis(), ((LocalTime) start).getLocalMillis());"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,120,return Minutes.minutes(minutes);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,122,"int amount = BaseSingleFieldPeriod.between(start, end, ZERO);"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,123,return Minutes.minutes(amount);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,127,* Creates a <code>Minutes</code> representing the number of whole minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,128,* in the specified interval.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,130,"* @param interval  the interval to extract minutes from, null returns zero"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,131,* @return the period in minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,132,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,134,public static Minutes minutesIn(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,135,if (interval == null)   {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,136,return Minutes.ZERO;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,138,"int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.minutes());"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,139,return Minutes.minutes(amount);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,143,* Creates a new <code>Minutes</code> representing the number of complete
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,144,* standard length minutes in the specified period.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,145,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,146,* This factory method converts all fields from the period to minutes using standardised
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,147,* durations for each field. Only those fields which have a precise duration in
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,148,* the ISO UTC chronology can be converted.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,149,* <ul>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,150,* <li>One week consists of 7 days.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,151,* <li>One day consists of 24 hours.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,152,* <li>One hour consists of 60 minutes.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,153,* <li>One minute consists of 60 seconds.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,154,* <li>One second consists of 1000 milliseconds.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,155,* </ul>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,156,* Months and Years are imprecise and periods containing these values cannot be converted.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,158,"* @param period  the period to get the number of minutes from, null returns zero"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,159,* @return the period in minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,160,* @throws IllegalArgumentException if the period contains imprecise duration values
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,162,public static Minutes standardMinutesIn(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,163,"int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_MINUTE);"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,164,return Minutes.minutes(amount);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,168,* Creates a new <code>Minutes</code> by parsing a string in the ISO8601 format 'PTnM'.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,169,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,170,* The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,171,"* minutes component may be non-zero. If any other component is non-zero, an exception"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,172,* will be thrown.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,174,"* @param periodStr  the period string, null returns zero"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,175,* @return the period in minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,176,* @throws IllegalArgumentException if the string format is invalid
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,178,public static Minutes parseMinutes(String periodStr) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,179,if (periodStr == null) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,180,return Minutes.ZERO;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,182,Period p = PARSER.parsePeriod(periodStr);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,183,return Minutes.minutes(p.getMinutes());
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,188,* Creates a new instance representing a number of minutes.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,189,* You should consider using the factory method {@link #minutes(int)}
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,190,* instead of the constructor.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,192,* @param minutes  the number of minutes to represent
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,194,private Minutes(int minutes) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,195,super(minutes);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,199,* Resolves singletons.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,201,* @return the singleton instance
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,203,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,204,return Minutes.minutes(getValue());
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,209,"* Gets the duration field type, which is <code>minutes</code>."
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,211,* @return the period type
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,213,public DurationFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,214,return DurationFieldType.minutes();
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,218,"* Gets the period type, which is <code>minutes</code>."
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,220,* @return the period type
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,222,public PeriodType getPeriodType() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,223,return PeriodType.minutes();
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,228,* Converts this period in minutes to a period in weeks assuming a
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,229,"* 7 days week, 24 hour day and 60 minute hour."
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,230,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,231,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,232,* However to achieve this it makes the assumption that all weeks are
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,233,"* 7 days long, all days are 24 hours long and all hours are 60 minutes long."
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,234,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,235,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,236,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,238,* @return a period representing the number of whole weeks for this number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,240,public Weeks toStandardWeeks() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,241,return Weeks.weeks(getValue() / DateTimeConstants.MINUTES_PER_WEEK);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,245,* Converts this period in minutes to a period in days assuming a
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,246,* 24 hour day and 60 minute hour.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,247,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,248,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,249,* However to achieve this it makes the assumption that all days are
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,250,* 24 hours long and all hours are 60 minutes long.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,251,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,252,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,253,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,255,* @return a period representing the number of whole days for this number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,257,public Days toStandardDays() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,258,return Days.days(getValue() / DateTimeConstants.MINUTES_PER_DAY);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,262,* Converts this period in minutes to a period in hours assuming a
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,263,* 60 minute hour.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,264,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,265,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,266,* However to achieve this it makes the assumption that all hours are
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,267,* 60 minutes long.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,268,"* This may not be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,269,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,271,* @return a period representing the number of hours for this number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,273,public Hours toStandardHours() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,274,return Hours.hours(getValue() / DateTimeConstants.MINUTES_PER_HOUR);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,278,* Converts this period in minutes to a period in seconds assuming a
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,279,* 60 second minute.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,280,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,281,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,282,* However to achieve this it makes the assumption that all minutes are
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,283,* 60 seconds long.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,284,"* This may not be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,285,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,287,* @return a period representing the number of seconds for this number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,288,* @throws ArithmeticException if the number of seconds is too large to be represented
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,290,public Seconds toStandardSeconds() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,291,"return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_MINUTE));"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,296,* Converts this period in minutes to a duration in milliseconds assuming a
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,297,* 60 second minute.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,298,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,299,* This method allows you to convert from a period to a duration.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,300,* However to achieve this it makes the assumption that all minutes are
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,301,"* 60 seconds long. This might not be true for an unusual chronology,"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,302,* for example one that takes leap seconds into account.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,303,"* However, the method is included as it is a useful operation for many"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,304,* applications and business rules.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,306,* @return a period representing the number of minutes for this number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,308,public Duration toStandardDuration() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,309,long minutes = getValue();  // assign to a long
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,310,return new Duration(minutes * DateTimeConstants.MILLIS_PER_MINUTE);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,315,* Gets the number of minutes that this period represents.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,317,* @return the number of minutes in the period
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,319,public int getMinutes() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,320,return getValue();
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,325,* Returns a new instance with the specified number of minutes added.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,326,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,327,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,329,"* @param minutes  the amount of minutes to add, may be negative"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,330,* @return the new period plus the specified number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,331,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,333,public Minutes plus(int minutes) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,334,if (minutes == 0) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,335,return this;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,337,"return Minutes.minutes(FieldUtils.safeAdd(getValue(), minutes));"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,341,* Returns a new instance with the specified number of minutes added.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,342,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,343,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,345,"* @param minutes  the amount of minutes to add, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,346,* @return the new period plus the specified number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,347,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,349,public Minutes plus(Minutes minutes) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,350,if (minutes == null) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,351,return this;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,353,return plus(minutes.getValue());
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,358,* Returns a new instance with the specified number of minutes taken away.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,359,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,360,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,362,"* @param minutes  the amount of minutes to take away, may be negative"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,363,* @return the new period minus the specified number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,364,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,366,public Minutes minus(int minutes) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,367,return plus(FieldUtils.safeNegate(minutes));
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,371,* Returns a new instance with the specified number of minutes taken away.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,372,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,373,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,375,"* @param minutes  the amount of minutes to take away, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,376,* @return the new period minus the specified number of minutes
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,377,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,379,public Minutes minus(Minutes minutes) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,380,if (minutes == null) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,381,return this;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,383,return minus(minutes.getValue());
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,388,* Returns a new instance with the minutes multiplied by the specified scalar.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,389,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,390,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,392,"* @param scalar  the amount to multiply by, may be negative"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,393,* @return the new period multiplied by the specified scalar
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,394,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,396,public Minutes multipliedBy(int scalar) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,397,"return Minutes.minutes(FieldUtils.safeMultiply(getValue(), scalar));"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,401,* Returns a new instance with the minutes divided by the specified divisor.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,402,"* The calculation uses integer division, thus 3 divided by 2 is 1."
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,403,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,404,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,406,"* @param divisor  the amount to divide by, may be negative"
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,407,* @return the new period divided by the specified divisor
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,408,* @throws ArithmeticException if the divisor is zero
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,410,public Minutes dividedBy(int divisor) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,411,if (divisor == 1) {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,412,return this;
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,414,return Minutes.minutes(getValue() / divisor);
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,419,* Negates the number of minutes in this period.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,421,* @return the new period with a negated value
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,422,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,424,public Minutes negate() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,425,return Minutes.minutes(FieldUtils.safeNegate(getValue()));
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,430,* Gets this instance as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,431,* <p>
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,432,"* For example, ""PT4M"" represents 4 minutes."
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,434,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,436,public String toString() {
True,JodaTime/src/java/org/joda/time/Minutes.java,JodaTime/src/java/org/joda/time/Minutes.java,437,"return ""PT"" + String.valueOf(getValue()) + ""M"";"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,18,import org.joda.time.base.BaseSingleFieldPeriod;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,19,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,20,import org.joda.time.format.ISOPeriodFormat;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,21,import org.joda.time.format.PeriodFormatter;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,24,* An immutable time period representing a number of months.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,25,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,26,* <code>Months</code> is an immutable period that can only store months.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,27,"* It does not store years, days or hours for example. As such it is a"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,28,* type-safe way of representing a number of months in an application.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,29,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,30,"* The number of months is set in the constructor, and may be queried using"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,31,* <code>getMonths()</code>. Basic mathematical operations are provided -
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,32,"* <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,33,* <code>dividedBy()</code>.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,34,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,35,* <code>Months</code> is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,37,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,38,* @since 1.4
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,40,public final class Months extends BaseSingleFieldPeriod {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,42,/** Constant representing zero months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,43,public static final Months ZERO = new Months(0);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,44,/** Constant representing one day. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,45,public static final Months ONE = new Months(1);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,46,/** Constant representing two months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,47,public static final Months TWO = new Months(2);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,48,/** Constant representing three months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,49,public static final Months THREE = new Months(3);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,50,/** Constant representing four months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,51,public static final Months FOUR = new Months(4);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,52,/** Constant representing five months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,53,public static final Months FIVE = new Months(5);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,54,/** Constant representing six months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,55,public static final Months SIX = new Months(6);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,56,/** Constant representing seven months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,57,public static final Months SEVEN = new Months(7);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,58,/** Constant representing eight months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,59,public static final Months EIGHT = new Months(8);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,60,/** Constant representing nine months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,61,public static final Months NINE = new Months(9);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,62,/** Constant representing ten months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,63,public static final Months TEN = new Months(10);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,64,/** Constant representing eleven months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,65,public static final Months ELEVEN = new Months(11);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,66,/** Constant representing twelve months. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,67,public static final Months TWELVE = new Months(12);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,68,/** Constant representing the maximum nuber of months that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,69,public static final Months MAX_VALUE = new Months(Integer.MAX_VALUE);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,70,/** Constant representing the minimum nuber of months that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,71,public static final Months MIN_VALUE = new Months(Integer.MIN_VALUE);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,73,/** The paser to use for this class. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,74,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.months());
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,75,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,76,private static final long serialVersionUID = 87525275727380867L;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,80,* Obtains an instance of <code>Months</code> that may be cached.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,81,"* <code>Months</code> is immutable, so instances can be cached and shared."
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,82,* This factory method provides access to shared instances.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,84,* @param months  the number of months to obtain an instance for
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,85,* @return the instance of Months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,87,public static Months months(int months) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,88,switch (months) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,89,case 0:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,90,return ZERO;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,91,case 1:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,92,return ONE;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,93,case 2:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,94,return TWO;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,95,case 3:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,96,return THREE;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,97,case 4:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,98,return FOUR;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,99,case 5:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,100,return FIVE;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,101,case 6:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,102,return SIX;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,103,case 7:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,104,return SEVEN;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,105,case 8:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,106,return EIGHT;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,107,case 9:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,108,return NINE;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,109,case 10:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,110,return TEN;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,111,case 11:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,112,return ELEVEN;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,113,case 12:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,114,return TWELVE;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,115,case Integer.MAX_VALUE:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,116,return MAX_VALUE;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,117,case Integer.MIN_VALUE:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,118,return MIN_VALUE;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,119,default:
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,120,return new Months(months);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,126,* Creates a <code>Months</code> representing the number of whole months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,127,* between the two specified datetimes. This method corectly handles
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,128,* any daylight savings time changes that may occur during the interval.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,130,"* @param start  the start instant, must not be null"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,131,"* @param end  the end instant, must not be null"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,132,* @return the period in months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,133,* @throws IllegalArgumentException if the instants are null or invalid
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,135,"public static Months monthsBetween(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,136,"int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.months());"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,137,return Months.months(amount);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,141,* Creates a <code>Months</code> representing the number of whole months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,142,* between the two specified partial datetimes.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,143,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,144,"* The two partials must contain the same fields, for example you can specify"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,145,* two <code>LocalDate</code> objects.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,147,"* @param start  the start partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,148,"* @param end  the end partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,149,* @return the period in months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,150,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,152,"public static Months monthsBetween(ReadablePartial start, ReadablePartial end) {"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,153,if (start instanceof LocalDate && end instanceof LocalDate)   {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,154,Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,155,int months = chrono.months().getDifference(
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,156,"((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,157,return Months.months(months);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,159,"int amount = BaseSingleFieldPeriod.between(start, end, ZERO);"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,160,return Months.months(amount);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,164,* Creates a <code>Months</code> representing the number of whole months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,165,* in the specified interval. This method corectly handles any daylight
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,166,* savings time changes that may occur during the interval.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,168,"* @param interval  the interval to extract months from, null returns zero"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,169,* @return the period in months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,170,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,172,public static Months monthsIn(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,173,if (interval == null)   {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,174,return Months.ZERO;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,176,"int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.months());"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,177,return Months.months(amount);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,181,* Creates a new <code>Months</code> by parsing a string in the ISO8601 format 'PnM'.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,182,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,183,* The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,184,"* months component may be non-zero. If any other component is non-zero, an exception"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,185,* will be thrown.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,187,"* @param periodStr  the period string, null returns zero"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,188,* @return the period in months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,189,* @throws IllegalArgumentException if the string format is invalid
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,191,public static Months parseMonths(String periodStr) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,192,if (periodStr == null) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,193,return Months.ZERO;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,195,Period p = PARSER.parsePeriod(periodStr);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,196,return Months.months(p.getMonths());
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,201,* Creates a new instance representing a number of months.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,202,* You should consider using the factory method {@link #months(int)}
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,203,* instead of the constructor.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,205,* @param months  the number of months to represent
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,207,private Months(int months) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,208,super(months);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,212,* Resolves singletons.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,214,* @return the singleton instance
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,216,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,217,return Months.months(getValue());
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,222,"* Gets the duration field type, which is <code>months</code>."
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,224,* @return the period type
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,226,public DurationFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,227,return DurationFieldType.months();
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,231,"* Gets the period type, which is <code>months</code>."
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,233,* @return the period type
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,235,public PeriodType getPeriodType() {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,236,return PeriodType.months();
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,241,* Gets the number of months that this period represents.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,243,* @return the number of months in the period
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,245,public int getMonths() {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,246,return getValue();
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,251,* Returns a new instance with the specified number of months added.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,252,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,253,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,255,"* @param months  the amount of months to add, may be negative"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,256,* @return the new period plus the specified number of months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,257,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,259,public Months plus(int months) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,260,if (months == 0) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,261,return this;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,263,"return Months.months(FieldUtils.safeAdd(getValue(), months));"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,267,* Returns a new instance with the specified number of months added.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,268,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,269,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,271,"* @param months  the amount of months to add, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,272,* @return the new period plus the specified number of months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,273,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,275,public Months plus(Months months) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,276,if (months == null) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,277,return this;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,279,return plus(months.getValue());
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,284,* Returns a new instance with the specified number of months taken away.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,285,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,286,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,288,"* @param months  the amount of months to take away, may be negative"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,289,* @return the new period minus the specified number of months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,290,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,292,public Months minus(int months) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,293,return plus(FieldUtils.safeNegate(months));
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,297,* Returns a new instance with the specified number of months taken away.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,298,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,299,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,301,"* @param months  the amount of months to take away, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,302,* @return the new period minus the specified number of months
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,303,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,305,public Months minus(Months months) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,306,if (months == null) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,307,return this;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,309,return minus(months.getValue());
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,314,* Returns a new instance with the months multiplied by the specified scalar.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,315,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,316,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,318,"* @param scalar  the amount to multiply by, may be negative"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,319,* @return the new period multiplied by the specified scalar
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,320,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,322,public Months multipliedBy(int scalar) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,323,"return Months.months(FieldUtils.safeMultiply(getValue(), scalar));"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,327,* Returns a new instance with the months divided by the specified divisor.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,328,"* The calculation uses integer division, thus 3 divided by 2 is 1."
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,329,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,330,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,332,"* @param divisor  the amount to divide by, may be negative"
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,333,* @return the new period divided by the specified divisor
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,334,* @throws ArithmeticException if the divisor is zero
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,336,public Months dividedBy(int divisor) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,337,if (divisor == 1) {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,338,return this;
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,340,return Months.months(getValue() / divisor);
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,345,* Negates the number of months in this period.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,347,* @return the new period with a negated value
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,348,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,350,public Months negate() {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,351,return Months.months(FieldUtils.safeNegate(getValue()));
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,356,* Gets this instance as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,357,* <p>
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,358,"* For example, ""P4M"" represents 4 months."
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,360,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,362,public String toString() {
True,JodaTime/src/java/org/joda/time/Months.java,JodaTime/src/java/org/joda/time/Months.java,363,"return ""P"" + String.valueOf(getValue()) + ""M"";"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,18,import org.joda.time.base.BaseSingleFieldPeriod;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,19,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,20,import org.joda.time.format.ISOPeriodFormat;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,21,import org.joda.time.format.PeriodFormatter;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,24,* An immutable time period representing a number of seconds.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,25,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,26,* <code>Seconds</code> is an immutable period that can only store seconds.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,27,"* It does not store years, months or hours for example. As such it is a"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,28,* type-safe way of representing a number of seconds in an application.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,29,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,30,"* The number of seconds is set in the constructor, and may be queried using"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,31,* <code>getSeconds()</code>. Basic mathematical operations are provided -
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,32,"* <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,33,* <code>dividedBy()</code>.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,34,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,35,* <code>Seconds</code> is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,37,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,38,* @since 1.4
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,40,public final class Seconds extends BaseSingleFieldPeriod {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,42,/** Constant representing zero seconds. */
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,43,public static final Seconds ZERO = new Seconds(0);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,44,/** Constant representing one second. */
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,45,public static final Seconds ONE = new Seconds(1);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,46,/** Constant representing two seconds. */
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,47,public static final Seconds TWO = new Seconds(2);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,48,/** Constant representing three seconds. */
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,49,public static final Seconds THREE = new Seconds(3);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,50,/** Constant representing the maximum nuber of seconds that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,51,public static final Seconds MAX_VALUE = new Seconds(Integer.MAX_VALUE);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,52,/** Constant representing the minimum nuber of seconds that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,53,public static final Seconds MIN_VALUE = new Seconds(Integer.MIN_VALUE);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,55,/** The paser to use for this class. */
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,56,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.seconds());
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,57,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,58,private static final long serialVersionUID = 87525275727380862L;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,62,* Obtains an instance of <code>Seconds</code> that may be cached.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,63,"* <code>Seconds</code> is immutable, so instances can be cached and shared."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,64,* This factory method provides access to shared instances.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,66,* @param seconds  the number of seconds to obtain an instance for
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,67,* @return the instance of Seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,69,public static Seconds seconds(int seconds) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,70,switch (seconds) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,71,case 0:
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,72,return ZERO;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,73,case 1:
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,74,return ONE;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,75,case 2:
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,76,return TWO;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,77,case 3:
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,78,return THREE;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,79,case Integer.MAX_VALUE:
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,80,return MAX_VALUE;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,81,case Integer.MIN_VALUE:
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,82,return MIN_VALUE;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,83,default:
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,84,return new Seconds(seconds);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,90,* Creates a <code>Seconds</code> representing the number of whole seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,91,* between the two specified datetimes.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,93,"* @param start  the start instant, must not be null"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,94,"* @param end  the end instant, must not be null"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,95,* @return the period in seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,96,* @throws IllegalArgumentException if the instants are null or invalid
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,98,"public static Seconds secondsBetween(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,99,"int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.seconds());"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,100,return Seconds.seconds(amount);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,104,* Creates a <code>Seconds</code> representing the number of whole seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,105,* between the two specified partial datetimes.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,106,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,107,"* The two partials must contain the same fields, for example you can specify"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,108,* two <code>LocalTime</code> objects.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,110,"* @param start  the start partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,111,"* @param end  the end partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,112,* @return the period in seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,113,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,115,"public static Seconds secondsBetween(ReadablePartial start, ReadablePartial end) {"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,116,if (start instanceof LocalTime && end instanceof LocalTime)   {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,117,Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,118,int seconds = chrono.seconds().getDifference(
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,119,"((LocalTime) end).getLocalMillis(), ((LocalTime) start).getLocalMillis());"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,120,return Seconds.seconds(seconds);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,122,"int amount = BaseSingleFieldPeriod.between(start, end, ZERO);"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,123,return Seconds.seconds(amount);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,127,* Creates a <code>Seconds</code> representing the number of whole seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,128,* in the specified interval.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,130,"* @param interval  the interval to extract seconds from, null returns zero"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,131,* @return the period in seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,132,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,134,public static Seconds secondsIn(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,135,if (interval == null)   {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,136,return Seconds.ZERO;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,138,"int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.seconds());"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,139,return Seconds.seconds(amount);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,143,* Creates a new <code>Seconds</code> representing the number of complete
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,144,* standard length seconds in the specified period.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,145,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,146,* This factory method converts all fields from the period to hours using standardised
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,147,* durations for each field. Only those fields which have a precise duration in
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,148,* the ISO UTC chronology can be converted.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,149,* <ul>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,150,* <li>One week consists of 7 seconds.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,151,* <li>One day consists of 24 hours.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,152,* <li>One hour consists of 60 minutes.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,153,* <li>One minute consists of 60 seconds.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,154,* <li>One second consists of 1000 milliseconds.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,155,* </ul>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,156,* Months and Years are imprecise and periods containing these values cannot be converted.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,158,"* @param period  the period to get the number of hours from, null returns zero"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,159,* @return the period in seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,160,* @throws IllegalArgumentException if the period contains imprecise duration values
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,162,public static Seconds standardSecondsIn(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,163,"int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_SECOND);"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,164,return Seconds.seconds(amount);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,168,* Creates a new <code>Seconds</code> by parsing a string in the ISO8601 format 'PTnS'.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,169,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,170,* The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,171,"* seconds component may be non-zero. If any other component is non-zero, an exception"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,172,* will be thrown.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,174,"* @param periodStr  the period string, null returns zero"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,175,* @return the period in seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,176,* @throws IllegalArgumentException if the string format is invalid
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,178,public static Seconds parseSeconds(String periodStr) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,179,if (periodStr == null) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,180,return Seconds.ZERO;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,182,Period p = PARSER.parsePeriod(periodStr);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,183,return Seconds.seconds(p.getSeconds());
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,188,* Creates a new instance representing a number of seconds.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,189,* You should consider using the factory method {@link #seconds(int)}
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,190,* instead of the constructor.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,192,* @param seconds  the number of seconds to represent
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,194,private Seconds(int seconds) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,195,super(seconds);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,199,* Resolves singletons.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,201,* @return the singleton instance
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,203,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,204,return Seconds.seconds(getValue());
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,209,"* Gets the duration field type, which is <code>seconds</code>."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,211,* @return the period type
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,213,public DurationFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,214,return DurationFieldType.seconds();
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,218,"* Gets the period type, which is <code>seconds</code>."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,220,* @return the period type
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,222,public PeriodType getPeriodType() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,223,return PeriodType.seconds();
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,228,* Converts this period in seconds to a period in weeks assuming a
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,229,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,230,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,231,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,232,* However to achieve this it makes the assumption that all weeks are 7 days
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,233,"* long, all days are 24 hours long, all hours are 60 minutes long and"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,234,* all minutes are 60 seconds long.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,235,"* This is not true when daylight savings time is considered, and may also"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,236,"* not be true for some unusual chronologies. However, it is included as it"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,237,* is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,239,* @return a period representing the number of whole weeks for this number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,241,public Weeks toStandardWeeks() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,242,return Weeks.weeks(getValue() / DateTimeConstants.SECONDS_PER_WEEK);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,246,* Converts this period in seconds to a period in days assuming a
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,247,"* 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,248,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,249,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,250,* However to achieve this it makes the assumption that all days are 24 hours
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,251,"* long, all hours are 60 minutes long and all minutes are 60 seconds long."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,252,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,253,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,254,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,256,* @return a period representing the number of days for this number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,258,public Days toStandardDays() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,259,return Days.days(getValue() / DateTimeConstants.SECONDS_PER_DAY);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,263,* Converts this period in seconds to a period in hours assuming a
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,264,* 60 minute hour and 60 second minute.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,265,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,266,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,267,* However to achieve this it makes the assumption that all hours are
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,268,* 60 minutes long and all minutes are 60 seconds long.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,269,"* This may not be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,270,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,272,* @return a period representing the number of hours for this number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,274,public Hours toStandardHours() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,275,return Hours.hours(getValue() / DateTimeConstants.SECONDS_PER_HOUR);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,279,* Converts this period in seconds to a period in minutes assuming a
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,280,* 60 second minute.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,281,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,282,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,283,* However to achieve this it makes the assumption that all minutes are
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,284,* 60 seconds long.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,285,"* This may not be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,286,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,288,* @return a period representing the number of minutes for this number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,290,public Minutes toStandardMinutes() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,291,return Minutes.minutes(getValue() / DateTimeConstants.SECONDS_PER_MINUTE);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,296,* Converts this period in seconds to a duration in milliseconds assuming a
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,297,"* 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,298,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,299,* This method allows you to convert from a period to a duration.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,300,* However to achieve this it makes the assumption that all seconds are 24 hours
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,301,"* long, all hours are 60 minutes and all minutes are 60 seconds."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,302,"* This is not true when daylight savings time is considered, and may also"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,303,"* not be true for some unusual chronologies. However, it is included as it"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,304,* is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,306,* @return a period representing the number of hours for this number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,308,public Duration toStandardDuration() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,309,long seconds = getValue();  // assign to a long
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,310,return new Duration(seconds * DateTimeConstants.MILLIS_PER_SECOND);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,315,* Gets the number of seconds that this period represents.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,317,* @return the number of seconds in the period
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,319,public int getSeconds() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,320,return getValue();
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,325,* Returns a new instance with the specified number of seconds added.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,326,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,327,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,329,"* @param seconds  the amount of seconds to add, may be negative"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,330,* @return the new period plus the specified number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,331,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,333,public Seconds plus(int seconds) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,334,if (seconds == 0) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,335,return this;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,337,"return Seconds.seconds(FieldUtils.safeAdd(getValue(), seconds));"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,341,* Returns a new instance with the specified number of seconds added.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,342,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,343,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,345,"* @param seconds  the amount of seconds to add, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,346,* @return the new period plus the specified number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,347,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,349,public Seconds plus(Seconds seconds) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,350,if (seconds == null) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,351,return this;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,353,return plus(seconds.getValue());
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,358,* Returns a new instance with the specified number of seconds taken away.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,359,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,360,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,362,"* @param seconds  the amount of seconds to take away, may be negative"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,363,* @return the new period minus the specified number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,364,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,366,public Seconds minus(int seconds) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,367,return plus(FieldUtils.safeNegate(seconds));
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,371,* Returns a new instance with the specified number of seconds taken away.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,372,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,373,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,375,"* @param seconds  the amount of seconds to take away, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,376,* @return the new period minus the specified number of seconds
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,377,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,379,public Seconds minus(Seconds seconds) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,380,if (seconds == null) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,381,return this;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,383,return minus(seconds.getValue());
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,388,* Returns a new instance with the seconds multiplied by the specified scalar.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,389,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,390,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,392,"* @param scalar  the amount to multiply by, may be negative"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,393,* @return the new period multiplied by the specified scalar
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,394,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,396,public Seconds multipliedBy(int scalar) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,397,"return Seconds.seconds(FieldUtils.safeMultiply(getValue(), scalar));"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,401,* Returns a new instance with the seconds divided by the specified divisor.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,402,"* The calculation uses integer division, thus 3 divided by 2 is 1."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,403,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,404,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,406,"* @param divisor  the amount to divide by, may be negative"
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,407,* @return the new period divided by the specified divisor
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,408,* @throws ArithmeticException if the divisor is zero
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,410,public Seconds dividedBy(int divisor) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,411,if (divisor == 1) {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,412,return this;
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,414,return Seconds.seconds(getValue() / divisor);
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,419,* Negates the number of seconds in this period.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,421,* @return the new period with a negated value
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,422,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,424,public Seconds negate() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,425,return Seconds.seconds(FieldUtils.safeNegate(getValue()));
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,430,* Gets this instance as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,431,* <p>
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,432,"* For example, ""PT4S"" represents 4 seconds."
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,434,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,436,public String toString() {
True,JodaTime/src/java/org/joda/time/Seconds.java,JodaTime/src/java/org/joda/time/Seconds.java,437,"return ""PT"" + String.valueOf(getValue()) + ""S"";"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,18,import org.joda.time.base.BaseSingleFieldPeriod;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,19,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,20,import org.joda.time.format.ISOPeriodFormat;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,21,import org.joda.time.format.PeriodFormatter;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,24,* An immutable time period representing a number of weeks.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,25,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,26,* <code>Weeks</code> is an immutable period that can only store weeks.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,27,"* It does not store years, months or hours for example. As such it is a"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,28,* type-safe way of representing a number of weeks in an application.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,29,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,30,"* The number of weeks is set in the constructor, and may be queried using"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,31,* <code>getWeeks()</code>. Basic mathematical operations are provided -
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,32,"* <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,33,* <code>dividedBy()</code>.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,34,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,35,* <code>Weeks</code> is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,37,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,38,* @since 1.4
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,40,public final class Weeks extends BaseSingleFieldPeriod {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,42,/** Constant representing zero weeks. */
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,43,public static final Weeks ZERO = new Weeks(0);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,44,/** Constant representing one week. */
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,45,public static final Weeks ONE = new Weeks(1);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,46,/** Constant representing two weeks. */
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,47,public static final Weeks TWO = new Weeks(2);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,48,/** Constant representing three weeks. */
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,49,public static final Weeks THREE = new Weeks(3);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,50,/** Constant representing the maximum nuber of weeks that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,51,public static final Weeks MAX_VALUE = new Weeks(Integer.MAX_VALUE);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,52,/** Constant representing the minimum nuber of weeks that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,53,public static final Weeks MIN_VALUE = new Weeks(Integer.MIN_VALUE);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,55,/** The paser to use for this class. */
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,56,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.weeks());
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,57,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,58,private static final long serialVersionUID = 87525275727380866L;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,62,* Obtains an instance of <code>Weeks</code> that may be cached.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,63,"* <code>Weeks</code> is immutable, so instances can be cached and shared."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,64,* This factory method provides access to shared instances.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,66,* @param weeks  the number of weeks to obtain an instance for
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,67,* @return the instance of Weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,69,public static Weeks weeks(int weeks) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,70,switch (weeks) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,71,case 0:
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,72,return ZERO;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,73,case 1:
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,74,return ONE;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,75,case 2:
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,76,return TWO;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,77,case 3:
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,78,return THREE;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,79,case Integer.MAX_VALUE:
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,80,return MAX_VALUE;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,81,case Integer.MIN_VALUE:
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,82,return MIN_VALUE;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,83,default:
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,84,return new Weeks(weeks);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,90,* Creates a <code>Weeks</code> representing the number of whole weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,91,* between the two specified datetimes.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,93,"* @param start  the start instant, must not be null"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,94,"* @param end  the end instant, must not be null"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,95,* @return the period in weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,96,* @throws IllegalArgumentException if the instants are null or invalid
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,98,"public static Weeks weeksBetween(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,99,"int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.weeks());"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,100,return Weeks.weeks(amount);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,104,* Creates a <code>Weeks</code> representing the number of whole weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,105,* between the two specified partial datetimes.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,106,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,107,"* The two partials must contain the same fields, for example you can specify"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,108,* two <code>LocalDate</code> objects.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,110,"* @param start  the start partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,111,"* @param end  the end partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,112,* @return the period in weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,113,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,115,"public static Weeks weeksBetween(ReadablePartial start, ReadablePartial end) {"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,116,if (start instanceof LocalDate && end instanceof LocalDate)   {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,117,Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,118,int weeks = chrono.weeks().getDifference(
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,119,"((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,120,return Weeks.weeks(weeks);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,122,"int amount = BaseSingleFieldPeriod.between(start, end, ZERO);"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,123,return Weeks.weeks(amount);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,127,* Creates a <code>Weeks</code> representing the number of whole weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,128,* in the specified interval.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,130,"* @param interval  the interval to extract weeks from, null returns zero"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,131,* @return the period in weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,132,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,134,public static Weeks weeksIn(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,135,if (interval == null)   {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,136,return Weeks.ZERO;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,138,"int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.weeks());"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,139,return Weeks.weeks(amount);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,143,* Creates a new <code>Weeks</code> representing the number of complete
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,144,* standard length weeks in the specified period.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,145,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,146,* This factory method converts all fields from the period to hours using standardised
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,147,* durations for each field. Only those fields which have a precise duration in
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,148,* the ISO UTC chronology can be converted.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,149,* <ul>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,150,* <li>One week consists of 7 days.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,151,* <li>One day consists of 24 hours.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,152,* <li>One hour consists of 60 minutes.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,153,* <li>One minute consists of 60 weeks.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,154,* <li>One second consists of 1000 milliseconds.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,155,* </ul>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,156,* Months and Years are imprecise and periods containing these values cannot be converted.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,158,"* @param period  the period to get the number of hours from, null returns zero"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,159,* @return the period in weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,160,* @throws IllegalArgumentException if the period contains imprecise duration values
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,162,public static Weeks standardWeeksIn(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,163,"int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_WEEK);"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,164,return Weeks.weeks(amount);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,168,* Creates a new <code>Weeks</code> by parsing a string in the ISO8601 format 'PnW'.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,169,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,170,* The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,171,"* weeks component may be non-zero. If any other component is non-zero, an exception"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,172,* will be thrown.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,174,"* @param periodStr  the period string, null returns zero"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,175,* @return the period in weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,176,* @throws IllegalArgumentException if the string format is invalid
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,178,public static Weeks parseWeeks(String periodStr) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,179,if (periodStr == null) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,180,return Weeks.ZERO;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,182,Period p = PARSER.parsePeriod(periodStr);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,183,return Weeks.weeks(p.getWeeks());
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,188,* Creates a new instance representing a number of weeks.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,189,* You should consider using the factory method {@link #weeks(int)}
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,190,* instead of the constructor.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,192,* @param weeks  the number of weeks to represent
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,194,private Weeks(int weeks) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,195,super(weeks);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,199,* Resolves singletons.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,201,* @return the singleton instance
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,203,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,204,return Weeks.weeks(getValue());
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,209,"* Gets the duration field type, which is <code>weeks</code>."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,211,* @return the period type
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,213,public DurationFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,214,return DurationFieldType.weeks();
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,218,"* Gets the period type, which is <code>weeks</code>."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,220,* @return the period type
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,222,public PeriodType getPeriodType() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,223,return PeriodType.weeks();
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,228,* Converts this period in weeks to a period in days assuming a
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,229,* 7 day week.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,230,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,231,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,232,* However to achieve this it makes the assumption that all weeks are
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,233,* 7 days long.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,234,"* This may not be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,235,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,237,* @return a period representing the number of days for this number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,238,* @throws ArithmeticException if the number of days is too large to be represented
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,240,public Days toStandardDays() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,241,"return Days.days(FieldUtils.safeMultiply(getValue(), DateTimeConstants.DAYS_PER_WEEK));"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,245,* Converts this period in weeks to a period in hours assuming a
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,246,* 7 day week and 24 hour day.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,247,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,248,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,249,* However to achieve this it makes the assumption that all weeks are
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,250,* 7 days long and all days are 24 hours long.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,251,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,252,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,253,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,255,* @return a period representing the number of hours for this number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,256,* @throws ArithmeticException if the number of hours is too large to be represented
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,258,public Hours toStandardHours() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,259,"return Hours.hours(FieldUtils.safeMultiply(getValue(), DateTimeConstants.HOURS_PER_WEEK));"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,263,* Converts this period in weeks to a period in minutes assuming a
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,264,"* 7 day week, 24 hour day and 60 minute hour."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,265,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,266,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,267,* However to achieve this it makes the assumption that all weeks are
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,268,"* 7 days long, all days are 24 hours long and all hours are 60 minutes long."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,269,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,270,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,271,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,273,* @return a period representing the number of minutes for this number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,274,* @throws ArithmeticException if the number of minutes is too large to be represented
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,276,public Minutes toStandardMinutes() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,277,"return Minutes.minutes(FieldUtils.safeMultiply(getValue(), DateTimeConstants.MINUTES_PER_WEEK));"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,281,* Converts this period in weeks to a period in seconds assuming a
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,282,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,283,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,284,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,285,* However to achieve this it makes the assumption that all weeks are
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,286,"* 7 days long, all days are 24 hours long, all hours are 60 minutes long"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,287,* and all minutes are 60 seconds long.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,288,* This is not true when daylight savings is considered and may also not
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,289,"* be true for some unusual chronologies. However, it is included"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,290,* as it is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,292,* @return a period representing the number of seconds for this number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,293,* @throws ArithmeticException if the number of seconds is too large to be represented
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,295,public Seconds toStandardSeconds() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,296,"return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_WEEK));"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,301,* Converts this period in weeks to a duration in milliweeks assuming a
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,302,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,303,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,304,* This method allows you to convert from a period to a duration.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,305,* However to achieve this it makes the assumption that all weeks are
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,306,"* 7 days long, all days are 24 hours long, all hours are 60 minutes long"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,307,* and all minutes are 60 seconds long.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,308,"* This is not true when daylight savings time is considered, and may also"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,309,"* not be true for some unusual chronologies. However, it is included as it"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,310,* is a useful operation for many applications and business rules.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,312,* @return a period representing the number of hours for this number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,314,public Duration toStandardDuration() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,315,long weeks = getValue();  // assign to a long
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,316,return new Duration(weeks * DateTimeConstants.MILLIS_PER_WEEK);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,321,* Gets the number of weeks that this period represents.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,323,* @return the number of weeks in the period
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,325,public int getWeeks() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,326,return getValue();
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,331,* Returns a new instance with the specified number of weeks added.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,332,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,333,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,335,"* @param weeks  the amount of weeks to add, may be negative"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,336,* @return the new period plus the specified number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,337,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,339,public Weeks plus(int weeks) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,340,if (weeks == 0) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,341,return this;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,343,"return Weeks.weeks(FieldUtils.safeAdd(getValue(), weeks));"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,347,* Returns a new instance with the specified number of weeks added.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,348,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,349,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,351,"* @param weeks  the amount of weeks to add, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,352,* @return the new period plus the specified number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,353,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,355,public Weeks plus(Weeks weeks) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,356,if (weeks == null) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,357,return this;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,359,return plus(weeks.getValue());
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,364,* Returns a new instance with the specified number of weeks taken away.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,365,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,366,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,368,"* @param weeks  the amount of weeks to take away, may be negative"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,369,* @return the new period minus the specified number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,370,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,372,public Weeks minus(int weeks) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,373,return plus(FieldUtils.safeNegate(weeks));
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,377,* Returns a new instance with the specified number of weeks taken away.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,378,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,379,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,381,"* @param weeks  the amount of weeks to take away, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,382,* @return the new period minus the specified number of weeks
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,383,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,385,public Weeks minus(Weeks weeks) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,386,if (weeks == null) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,387,return this;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,389,return minus(weeks.getValue());
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,394,* Returns a new instance with the weeks multiplied by the specified scalar.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,395,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,396,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,398,"* @param scalar  the amount to multiply by, may be negative"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,399,* @return the new period multiplied by the specified scalar
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,400,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,402,public Weeks multipliedBy(int scalar) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,403,"return Weeks.weeks(FieldUtils.safeMultiply(getValue(), scalar));"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,407,* Returns a new instance with the weeks divided by the specified divisor.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,408,"* The calculation uses integer division, thus 3 divided by 2 is 1."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,409,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,410,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,412,"* @param divisor  the amount to divide by, may be negative"
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,413,* @return the new period divided by the specified divisor
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,414,* @throws ArithmeticException if the divisor is zero
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,416,public Weeks dividedBy(int divisor) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,417,if (divisor == 1) {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,418,return this;
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,420,return Weeks.weeks(getValue() / divisor);
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,425,* Negates the number of weeks in this period.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,427,* @return the new period with a negated value
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,428,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,430,public Weeks negate() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,431,return Weeks.weeks(FieldUtils.safeNegate(getValue()));
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,436,* Gets this instance as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,437,* <p>
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,438,"* For example, ""P4W"" represents 4 weeks."
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,440,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,442,public String toString() {
True,JodaTime/src/java/org/joda/time/Weeks.java,JodaTime/src/java/org/joda/time/Weeks.java,443,"return ""P"" + String.valueOf(getValue()) + ""W"";"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,18,import org.joda.time.base.BaseSingleFieldPeriod;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,19,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,20,import org.joda.time.format.ISOPeriodFormat;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,21,import org.joda.time.format.PeriodFormatter;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,24,* An immutable time period representing a number of years.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,25,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,26,* <code>Years</code> is an immutable period that can only store years.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,27,"* It does not store years, days or hours for example. As such it is a"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,28,* type-safe way of representing a number of years in an application.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,29,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,30,"* The number of years is set in the constructor, and may be queried using"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,31,* <code>getYears()</code>. Basic mathematical operations are provided -
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,32,"* <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,33,* <code>dividedBy()</code>.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,34,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,35,* <code>Years</code> is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,37,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,38,* @since 1.4
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,40,public final class Years extends BaseSingleFieldPeriod {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,42,/** Constant representing zero years. */
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,43,public static final Years ZERO = new Years(0);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,44,/** Constant representing one day. */
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,45,public static final Years ONE = new Years(1);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,46,/** Constant representing two years. */
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,47,public static final Years TWO = new Years(2);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,48,/** Constant representing three years. */
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,49,public static final Years THREE = new Years(3);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,50,/** Constant representing the maximum nuber of years that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,51,public static final Years MAX_VALUE = new Years(Integer.MAX_VALUE);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,52,/** Constant representing the minimum nuber of years that can be stored in this object. */
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,53,public static final Years MIN_VALUE = new Years(Integer.MIN_VALUE);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,55,/** The paser to use for this class. */
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,56,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.years());
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,57,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,58,private static final long serialVersionUID = 87525275727380868L;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,62,* Obtains an instance of <code>Years</code> that may be cached.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,63,"* <code>Years</code> is immutable, so instances can be cached and shared."
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,64,* This factory method provides access to shared instances.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,66,* @param years  the number of years to obtain an instance for
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,67,* @return the instance of Years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,69,public static Years years(int years) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,70,switch (years) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,71,case 0:
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,72,return ZERO;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,73,case 1:
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,74,return ONE;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,75,case 2:
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,76,return TWO;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,77,case 3:
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,78,return THREE;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,79,case Integer.MAX_VALUE:
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,80,return MAX_VALUE;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,81,case Integer.MIN_VALUE:
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,82,return MIN_VALUE;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,83,default:
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,84,return new Years(years);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,90,* Creates a <code>Years</code> representing the number of whole years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,91,* between the two specified datetimes. This method corectly handles
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,92,* any daylight savings time changes that may occur during the interval.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,94,"* @param start  the start instant, must not be null"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,95,"* @param end  the end instant, must not be null"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,96,* @return the period in years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,97,* @throws IllegalArgumentException if the instants are null or invalid
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,99,"public static Years yearsBetween(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,100,"int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.years());"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,101,return Years.years(amount);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,105,* Creates a <code>Years</code> representing the number of whole years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,106,* between the two specified partial datetimes.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,107,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,108,"* The two partials must contain the same fields, for example you can specify"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,109,* two <code>LocalDate</code> objects.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,111,"* @param start  the start partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,112,"* @param end  the end partial date, must not be null"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,113,* @return the period in years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,114,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,116,"public static Years yearsBetween(ReadablePartial start, ReadablePartial end) {"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,117,if (start instanceof LocalDate && end instanceof LocalDate)   {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,118,Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,119,int years = chrono.years().getDifference(
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,120,"((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,121,return Years.years(years);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,123,"int amount = BaseSingleFieldPeriod.between(start, end, ZERO);"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,124,return Years.years(amount);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,128,* Creates a <code>Years</code> representing the number of whole years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,129,* in the specified interval. This method corectly handles any daylight
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,130,* savings time changes that may occur during the interval.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,132,"* @param interval  the interval to extract years from, null returns zero"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,133,* @return the period in years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,134,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,136,public static Years yearsIn(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,137,if (interval == null)   {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,138,return Years.ZERO;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,140,"int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.years());"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,141,return Years.years(amount);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,145,* Creates a new <code>Years</code> by parsing a string in the ISO8601 format 'PnY'.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,146,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,147,* The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,148,"* years component may be non-zero. If any other component is non-zero, an exception"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,149,* will be thrown.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,151,"* @param periodStr  the period string, null returns zero"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,152,* @return the period in years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,153,* @throws IllegalArgumentException if the string format is invalid
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,155,public static Years parseYears(String periodStr) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,156,if (periodStr == null) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,157,return Years.ZERO;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,159,Period p = PARSER.parsePeriod(periodStr);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,160,return Years.years(p.getYears());
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,165,* Creates a new instance representing a number of years.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,166,* You should consider using the factory method {@link #years(int)}
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,167,* instead of the constructor.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,169,* @param years  the number of years to represent
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,171,private Years(int years) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,172,super(years);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,176,* Resolves singletons.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,178,* @return the singleton instance
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,180,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,181,return Years.years(getValue());
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,186,"* Gets the duration field type, which is <code>years</code>."
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,188,* @return the period type
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,190,public DurationFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,191,return DurationFieldType.years();
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,195,"* Gets the period type, which is <code>years</code>."
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,197,* @return the period type
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,199,public PeriodType getPeriodType() {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,200,return PeriodType.years();
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,205,* Gets the number of years that this period represents.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,207,* @return the number of years in the period
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,209,public int getYears() {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,210,return getValue();
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,215,* Returns a new instance with the specified number of years added.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,216,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,217,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,219,"* @param years  the amount of years to add, may be negative"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,220,* @return the new period plus the specified number of years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,221,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,223,public Years plus(int years) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,224,if (years == 0) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,225,return this;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,227,"return Years.years(FieldUtils.safeAdd(getValue(), years));"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,231,* Returns a new instance with the specified number of years added.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,232,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,233,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,235,"* @param years  the amount of years to add, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,236,* @return the new period plus the specified number of years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,237,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,239,public Years plus(Years years) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,240,if (years == null) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,241,return this;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,243,return plus(years.getValue());
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,248,* Returns a new instance with the specified number of years taken away.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,249,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,250,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,252,"* @param years  the amount of years to take away, may be negative"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,253,* @return the new period minus the specified number of years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,254,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,256,public Years minus(int years) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,257,return plus(FieldUtils.safeNegate(years));
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,261,* Returns a new instance with the specified number of years taken away.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,262,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,263,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,265,"* @param years  the amount of years to take away, may be negative, null means zero"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,266,* @return the new period minus the specified number of years
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,267,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,269,public Years minus(Years years) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,270,if (years == null) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,271,return this;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,273,return minus(years.getValue());
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,278,* Returns a new instance with the years multiplied by the specified scalar.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,279,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,280,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,282,"* @param scalar  the amount to multiply by, may be negative"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,283,* @return the new period multiplied by the specified scalar
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,284,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,286,public Years multipliedBy(int scalar) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,287,"return Years.years(FieldUtils.safeMultiply(getValue(), scalar));"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,291,* Returns a new instance with the years divided by the specified divisor.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,292,"* The calculation uses integer division, thus 3 divided by 2 is 1."
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,293,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,294,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,296,"* @param divisor  the amount to divide by, may be negative"
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,297,* @return the new period divided by the specified divisor
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,298,* @throws ArithmeticException if the divisor is zero
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,300,public Years dividedBy(int divisor) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,301,if (divisor == 1) {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,302,return this;
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,304,return Years.years(getValue() / divisor);
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,309,* Negates the number of years in this period.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,311,* @return the new period with a negated value
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,312,* @throws ArithmeticException if the result overflows an int
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,314,public Years negate() {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,315,return Years.years(FieldUtils.safeNegate(getValue()));
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,320,* Gets this instance as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,321,* <p>
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,322,"* For example, ""P4Y"" represents 4 years."
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,324,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,326,public String toString() {
True,JodaTime/src/java/org/joda/time/Years.java,JodaTime/src/java/org/joda/time/Years.java,327,"return ""P"" + String.valueOf(getValue()) + ""Y"";"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,16,package org.joda.time.base;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,18,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,20,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,21,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,22,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,23,import org.joda.time.DurationFieldType;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,24,import org.joda.time.MutablePeriod;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,25,import org.joda.time.Period;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,26,import org.joda.time.PeriodType;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,27,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,28,import org.joda.time.ReadablePartial;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,29,import org.joda.time.ReadablePeriod;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,30,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,31,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,34,* BaseSingleFieldPeriod is an abstract implementation of ReadablePeriod that
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,35,"* manages a single duration field, such as days or minutes."
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,36,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,37,* This class should generally not be used directly by API users.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,38,* The {@link ReadablePeriod} interface should be used when different
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,39,* kinds of period objects are to be referenced.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,40,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,41,* BaseSingleFieldPeriod subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,43,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,44,* @since 1.4
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,46,public abstract class BaseSingleFieldPeriod
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,47,"implements ReadablePeriod, Comparable, Serializable {"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,49,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,50,private static final long serialVersionUID = 9386874258972L;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,52,/** The period in the units of this period. */
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,53,private int iPeriod;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,57,* Calculates the number of whole units between the two specified datetimes.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,59,"* @param start  the start instant, validated to not be null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,60,"* @param end  the end instant, validated to not be null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,61,"* @param field  the field type to use, must not be null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,62,* @return the period
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,63,* @throws IllegalArgumentException if the instants are null or invalid
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,65,"protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field) {"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,66,if (start == null || end == null) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,67,"throw new IllegalArgumentException(""ReadableInstant objects must not be null"");"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,69,Chronology chrono = DateTimeUtils.getInstantChronology(start);
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,70,"int amount = field.getField(chrono).getDifference(end.getMillis(), start.getMillis());"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,71,return amount;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,76,* Calculates the number of whole units between the two specified partial datetimes.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,77,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,78,"* The two partials must contain the same fields, for example you can specify"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,79,* two <code>LocalDate</code> objects.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,81,"* @param start  the start partial date, validated to not be null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,82,"* @param end  the end partial date, validated to not be null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,83,"* @param zeroInstance  the zero instance constant, must not be null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,84,* @return the period
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,85,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,87,"protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,88,if (start == null || end == null) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,89,"throw new IllegalArgumentException(""ReadablePartial objects must not be null"");"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,91,if (start.size() != end.size()) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,92,"throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,94,"for (int i = 0, isize = start.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,95,if (start.getFieldType(i) != end.getFieldType(i)) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,96,"throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,99,if (DateTimeUtils.isContiguous(start) == false) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,100,"throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,102,Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,103,"int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,104,return values[0];
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,108,* Creates a new instance representing the number of complete standard length units
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,109,* in the specified period.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,110,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,111,* This factory method converts all fields from the period to hours using standardised
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,112,* durations for each field. Only those fields which have a precise duration in
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,113,* the ISO UTC chronology can be converted.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,114,* <ul>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,115,* <li>One week consists of 7 days.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,116,* <li>One day consists of 24 hours.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,117,* <li>One hour consists of 60 minutes.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,118,* <li>One minute consists of 60 seconds.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,119,* <li>One second consists of 1000 milliseconds.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,120,* </ul>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,121,* Months and Years are imprecise and periods containing these values cannot be converted.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,123,"* @param period  the period to get the number of hours from, must not be null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,124,* @param millisPerUnit  the number of milliseconds in one standard unit of this period
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,125,* @throws IllegalArgumentException if the period contains imprecise duration values
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,127,"protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit) {"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,128,if (period == null) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,129,return 0;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,131,Chronology iso = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,132,long duration = 0L;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,133,for (int i = 0; i < period.size(); i++) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,134,int value = period.getValue(i);
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,135,if (value != 0) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,136,DurationField field = period.getFieldType(i).getField(iso);
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,137,if (field.isPrecise() == false) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,138,throw new IllegalArgumentException(
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,139,"""Cannot convert period to duration as "" + field.getName() +"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,140,""" is not precise in the period "" + period);"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,142,"duration = FieldUtils.safeAdd(duration, FieldUtils.safeMultiply(field.getUnitMillis(), value));"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,145,return FieldUtils.safeToInt(duration / millisPerUnit);
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,150,* Creates a new instance representing the specified period.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,152,* @param period  the period to represent
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,154,protected BaseSingleFieldPeriod(int period) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,155,super();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,156,iPeriod = period;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,161,* Gets the amount of this period.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,163,* @return the period value
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,165,protected int getValue() {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,166,return iPeriod;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,170,* Sets the amount of this period.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,171,"* To make a subclass immutable you must declare it final, or block this method."
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,173,* @param vaue  the period value
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,175,protected void setValue(int value) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,176,iPeriod = value;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,181,* Gets the single duration field type.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,183,"* @return the duration field type, not null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,185,public abstract DurationFieldType getFieldType();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,188,* Gets the period type which matches the duration field type.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,190,"* @return the period type, not null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,192,public abstract PeriodType getPeriodType();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,196,"* Gets the number of fields that this period supports, which is one."
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,198,"* @return the number of fields supported, which is one"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,200,public int size() {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,201,return 1;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,205,* Gets the field type at the specified index.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,206,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,207,* The only index supported by this period is zero which returns the
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,208,* field type of this class.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,210,"* @param index  the index to retrieve, which must be zero"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,211,* @return the field at the specified index
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,212,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,214,public DurationFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,215,if (index != 0) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,216,throw new IndexOutOfBoundsException(String.valueOf(index));
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,218,return getFieldType();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,222,* Gets the value at the specified index.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,223,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,224,* The only index supported by this period is zero.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,226,"* @param index  the index to retrieve, which must be zero"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,227,* @return the value of the field at the specified index
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,228,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,230,public int getValue(int index) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,231,if (index != 0) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,232,throw new IndexOutOfBoundsException(String.valueOf(index));
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,234,return getValue();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,238,* Gets the value of a duration field represented by this period.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,239,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,240,* If the field type specified does not match the type used by this class
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,241,* then zero is returned.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,243,"* @param type  the field type to query, null returns zero"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,244,"* @return the value of that field, zero if field not supported"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,246,public int get(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,247,if (type == getFieldType()) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,248,return getValue();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,250,return 0;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,254,* Checks whether the duration field specified is supported by this period.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,256,"* @param type  the type to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,257,* @return true if the field is supported
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,259,public boolean isSupported(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,260,return (type == getFieldType());
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,265,* Get this period as an immutable <code>Period</code> object.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,266,* The period will use <code>PeriodType.standard()</code>.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,268,* @return a <code>Period</code> representing the same number of days
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,270,public Period toPeriod() {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,271,return Period.ZERO.withFields(this);
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,275,* Get this object as a <code>MutablePeriod</code>.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,276,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,277,* This will always return a new <code>MutablePeriod</code> with the same fields.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,278,* The period will use <code>PeriodType.standard()</code>.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,280,* @return a MutablePeriod using the same field set and values
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,282,public MutablePeriod toMutablePeriod() {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,283,MutablePeriod period = new MutablePeriod();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,284,period.add(this);
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,285,return period;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,290,* Compares this object with the specified object for equality based on the
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,291,"* value of each field. All ReadablePeriod instances are accepted, but only"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,292,* those with a matching <code>PeriodType</code> can return true.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,294,* @param period  a readable period to check against
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,295,"* @return true if all the field values are equal, false if"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,296,*  not or the period is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,298,public boolean equals(Object period) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,299,if (this == period) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,300,return true;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,302,if (period instanceof ReadablePeriod == false) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,303,return false;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,305,ReadablePeriod other = (ReadablePeriod) period;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,306,return (other.getPeriodType() == getPeriodType() && other.getValue(0) == getValue());
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,310,* Gets a hash code for the period as defined by ReadablePeriod.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,312,* @return a hash code
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,314,public int hashCode() {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,315,int total = 17;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,316,total = 27 * total + getValue();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,317,total = 27 * total + getFieldType().hashCode();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,318,return total;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,322,* Compares this period to another object of the same class.
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,324,"* @param other  the other period, must not be null"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,325,"* @return zero if equal, positive if greater, negative if less"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,327,public int compareTo(Object other) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,328,if (other.getClass() != getClass()) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,329,"throw new ClassCastException(getClass() + "" cannot be compared to "" + other.getClass());"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,331,int otherValue = ((BaseSingleFieldPeriod) other).getValue();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,332,int thisValue = getValue();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,333,if (thisValue > otherValue) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,334,return 1;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,336,if (thisValue < otherValue) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,337,return -1;
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,339,return 0;
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,87,suite.addTest(TestBaseSingleFieldPeriod.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,88,suite.addTest(TestYears.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,89,suite.addTest(TestMonths.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,90,suite.addTest(TestWeeks.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,91,suite.addTest(TestDays.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,92,suite.addTest(TestHours.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,93,suite.addTest(TestMinutes.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,94,suite.addTest(TestSeconds.suite());
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,18,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,19,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,21,import org.joda.time.base.BaseSingleFieldPeriod;
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,24,* This class is a Junit unit test for BaseSingleFieldPeriod.
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,26,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,28,public class TestBaseSingleFieldPeriod extends TestCase {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,29,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,30,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,31,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,33,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,34,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,37,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,38,return new TestSuite(TestBaseSingleFieldPeriod.class);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,41,public TestBaseSingleFieldPeriod(String name) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,42,super(name);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,45,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,48,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,52,public void testFactory_between_RInstant() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,53,// test using Days
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,54,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,55,"DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,56,"DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,58,"assertEquals(3, Single.between(start, end1, DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,59,"assertEquals(0, Single.between(start, start, DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,60,"assertEquals(0, Single.between(end1, end1, DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,61,"assertEquals(-3, Single.between(end1, start, DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,62,"assertEquals(6, Single.between(start, end2, DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,63,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,64,"Single.between(start, (ReadableInstant) null, DurationFieldType.days());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,65,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,66,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,67,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,69,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,70,"Single.between((ReadableInstant) null, end1, DurationFieldType.days());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,71,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,72,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,73,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,75,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,76,"Single.between((ReadableInstant) null, (ReadableInstant) null, DurationFieldType.days());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,77,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,78,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,79,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,83,public void testFactory_between_RPartial() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,84,"LocalDate start = new LocalDate(2006, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,85,"LocalDate end1 = new LocalDate(2006, 6, 12);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,86,"YearMonthDay end2 = new YearMonthDay(2006, 6, 15);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,88,Single zero = new Single(0);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,89,"assertEquals(3, Single.between(start, end1, zero));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,90,"assertEquals(0, Single.between(start, start, zero));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,91,"assertEquals(0, Single.between(end1, end1, zero));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,92,"assertEquals(-3, Single.between(end1, start, zero));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,93,"assertEquals(6, Single.between(start, end2, zero));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,94,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,95,"Single.between(start, (ReadablePartial) null, zero);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,96,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,97,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,98,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,100,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,101,"Single.between((ReadablePartial) null, end1, zero);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,102,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,103,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,104,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,106,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,107,"Single.between((ReadablePartial) null, (ReadablePartial) null, zero);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,108,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,109,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,110,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,112,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,113,"Single.between(start, new TimeOfDay(), zero);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,114,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,115,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,116,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,118,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,119,"Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,120,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,121,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,122,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,124,Partial p = new Partial(
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,125,"new DateTimeFieldType[] {DateTimeFieldType.year(), DateTimeFieldType.hourOfDay()},"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,126,"new int[] {1, 2});"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,127,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,128,"Single.between(p, p, zero);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,129,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,130,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,131,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,135,public void testFactory_standardPeriodIn_RPeriod() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,136,"assertEquals(0, Single.standardPeriodIn((ReadablePeriod) null, DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,137,"assertEquals(0, Single.standardPeriodIn(Period.ZERO, DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,138,"assertEquals(1, Single.standardPeriodIn(new Period(0, 0, 0, 1, 0, 0, 0, 0), DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,139,"assertEquals(123, Single.standardPeriodIn(Period.days(123), DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,140,"assertEquals(-987, Single.standardPeriodIn(Period.days(-987), DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,141,"assertEquals(1, Single.standardPeriodIn(Period.hours(47), DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,142,"assertEquals(2, Single.standardPeriodIn(Period.hours(48), DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,143,"assertEquals(2, Single.standardPeriodIn(Period.hours(49), DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,144,"assertEquals(14, Single.standardPeriodIn(Period.weeks(2), DateTimeConstants.MILLIS_PER_DAY));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,145,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,146,"Single.standardPeriodIn(Period.months(1), DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,147,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,148,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,149,// expeceted
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,154,public void testValueIndexMethods() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,155,Single test = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,156,"assertEquals(1, test.size());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,157,"assertEquals(20, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,158,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,159,test.getValue(1);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,160,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,161,} catch (IndexOutOfBoundsException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,162,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,166,public void testFieldTypeIndexMethods() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,167,Single test = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,168,"assertEquals(1, test.size());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,169,"assertEquals(DurationFieldType.days(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,170,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,171,test.getFieldType(1);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,172,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,173,} catch (IndexOutOfBoundsException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,174,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,178,public void testIsSupported() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,179,Single test = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,180,"assertEquals(false, test.isSupported(DurationFieldType.years()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,181,"assertEquals(false, test.isSupported(DurationFieldType.months()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,182,"assertEquals(false, test.isSupported(DurationFieldType.weeks()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,183,"assertEquals(true, test.isSupported(DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,184,"assertEquals(false, test.isSupported(DurationFieldType.hours()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,185,"assertEquals(false, test.isSupported(DurationFieldType.minutes()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,186,"assertEquals(false, test.isSupported(DurationFieldType.seconds()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,187,"assertEquals(false, test.isSupported(DurationFieldType.millis()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,190,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,191,Single test = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,192,"assertEquals(0, test.get(DurationFieldType.years()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,193,"assertEquals(0, test.get(DurationFieldType.months()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,194,"assertEquals(0, test.get(DurationFieldType.weeks()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,195,"assertEquals(20, test.get(DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,196,"assertEquals(0, test.get(DurationFieldType.hours()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,197,"assertEquals(0, test.get(DurationFieldType.minutes()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,198,"assertEquals(0, test.get(DurationFieldType.seconds()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,199,"assertEquals(0, test.get(DurationFieldType.millis()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,203,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,204,Single testA = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,205,Single testB = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,206,"assertEquals(true, testA.equals(testB));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,207,"assertEquals(true, testB.equals(testA));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,208,"assertEquals(true, testA.equals(testA));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,209,"assertEquals(true, testB.equals(testB));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,210,"assertEquals(true, testA.hashCode() == testB.hashCode());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,211,"assertEquals(true, testA.hashCode() == testA.hashCode());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,212,"assertEquals(true, testB.hashCode() == testB.hashCode());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,214,Single testC = new Single(30);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,215,"assertEquals(false, testA.equals(testC));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,216,"assertEquals(false, testB.equals(testC));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,217,"assertEquals(false, testC.equals(testA));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,218,"assertEquals(false, testC.equals(testB));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,219,"assertEquals(false, testA.hashCode() == testC.hashCode());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,220,"assertEquals(false, testB.hashCode() == testC.hashCode());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,222,"assertEquals(true, testA.equals(Days.days(20)));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,223,"assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days())));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,224,"assertEquals(false, testA.equals(Period.days(2)));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,225,"assertEquals(false, testA.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,226,"assertEquals(false, testA.equals(Hours.hours(2)));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,227,"assertEquals(false, testA.equals(null));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,230,public void testCompareTo() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,231,Single test1 = new Single(21);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,232,Single test2 = new Single(22);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,233,Single test3 = new Single(23);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,234,"assertEquals(true, test1.compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,235,"assertEquals(true, test1.compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,236,"assertEquals(true, test1.compareTo(test3) < 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,237,"assertEquals(true, test2.compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,238,"assertEquals(true, test2.compareTo(test2) == 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,239,"assertEquals(true, test2.compareTo(test3) < 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,240,"assertEquals(true, test3.compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,241,"assertEquals(true, test3.compareTo(test2) > 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,242,"assertEquals(true, test3.compareTo(test3) == 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,244,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,245,"test1.compareTo(""Hello"");"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,246,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,247,} catch (ClassCastException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,248,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,250,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,251,"test1.compareTo(new Period(0, 0, 0, 21, 0, 0, 0, 0, PeriodType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,252,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,253,} catch (ClassCastException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,254,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,256,try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,257,test1.compareTo(null);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,258,fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,259,} catch (NullPointerException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,260,// expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,265,public void testToPeriod() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,266,Single test = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,267,Period expected = Period.days(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,268,"assertEquals(expected, test.toPeriod());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,271,public void testToMutablePeriod() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,272,Single test = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,273,"MutablePeriod expected = new MutablePeriod(0, 0, 0, 20, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,274,"assertEquals(expected, test.toMutablePeriod());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,277,//    public void testToDurationFrom() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,278,//        Period test = new Period(123L);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,279,"//        assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L)));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,282,//    public void testToDurationTo() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,283,//        Period test = new Period(123L);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,284,"//        assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L)));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,289,public void testGetSetValue() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,290,Single test = new Single(20);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,291,"assertEquals(20, test.getValue());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,292,test.setValue(10);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,293,"assertEquals(10, test.getValue());"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,297,/** Test class. */
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,298,static class Single extends BaseSingleFieldPeriod {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,300,public Single(int period) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,301,super(period);
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,304,"public static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field) {"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,305,"return BaseSingleFieldPeriod.between(start, end, field);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,308,"public static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,309,"return BaseSingleFieldPeriod.between(start, end, zeroInstance);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,312,"public static int standardPeriodIn(ReadablePeriod period, long millisPerUnit) {"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,313,"return BaseSingleFieldPeriod.standardPeriodIn(period, millisPerUnit);"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,316,public DurationFieldType getFieldType() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,317,return DurationFieldType.days();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,320,public PeriodType getPeriodType() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,321,return PeriodType.days();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,324,public int getValue() {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,325,return super.getValue();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,328,public void setValue(int value) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,329,super.setValue(value);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,23,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,24,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,27,* This class is a Junit unit test for Days.
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,29,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,31,public class TestDays extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,32,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,33,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,36,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,37,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,40,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,41,return new TestSuite(TestDays.class);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,44,public TestDays(String name) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,45,super(name);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,48,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,51,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,55,public void testConstants() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,56,"assertEquals(0, Days.ZERO.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,57,"assertEquals(1, Days.ONE.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,58,"assertEquals(2, Days.TWO.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,59,"assertEquals(3, Days.THREE.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,60,"assertEquals(4, Days.FOUR.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,61,"assertEquals(5, Days.FIVE.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,62,"assertEquals(6, Days.SIX.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,63,"assertEquals(7, Days.SEVEN.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,64,"assertEquals(Integer.MAX_VALUE, Days.MAX_VALUE.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,65,"assertEquals(Integer.MIN_VALUE, Days.MIN_VALUE.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,69,public void testFactory_days_int() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,70,"assertSame(Days.ZERO, Days.days(0));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,71,"assertSame(Days.ONE, Days.days(1));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,72,"assertSame(Days.TWO, Days.days(2));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,73,"assertSame(Days.THREE, Days.days(3));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,74,"assertSame(Days.FOUR, Days.days(4));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,75,"assertSame(Days.FIVE, Days.days(5));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,76,"assertSame(Days.SIX, Days.days(6));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,77,"assertSame(Days.SEVEN, Days.days(7));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,78,"assertSame(Days.MAX_VALUE, Days.days(Integer.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,79,"assertSame(Days.MIN_VALUE, Days.days(Integer.MIN_VALUE));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,80,"assertEquals(-1, Days.days(-1).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,81,"assertEquals(8, Days.days(8).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,85,public void testFactory_daysBetween_RInstant() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,86,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,87,"DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,88,"DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,90,"assertEquals(3, Days.daysBetween(start, end1).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,91,"assertEquals(0, Days.daysBetween(start, start).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,92,"assertEquals(0, Days.daysBetween(end1, end1).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,93,"assertEquals(-3, Days.daysBetween(end1, start).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,94,"assertEquals(6, Days.daysBetween(start, end2).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,97,public void testFactory_daysBetween_RPartial() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,98,"LocalDate start = new LocalDate(2006, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,99,"LocalDate end1 = new LocalDate(2006, 6, 12);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,100,"YearMonthDay end2 = new YearMonthDay(2006, 6, 15);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,102,"assertEquals(3, Days.daysBetween(start, end1).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,103,"assertEquals(0, Days.daysBetween(start, start).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,104,"assertEquals(0, Days.daysBetween(end1, end1).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,105,"assertEquals(-3, Days.daysBetween(end1, start).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,106,"assertEquals(6, Days.daysBetween(start, end2).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,109,public void testFactory_daysIn_RInterval() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,110,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,111,"DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,112,"DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,114,"assertEquals(0, Days.daysIn((ReadableInterval) null).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,115,"assertEquals(3, Days.daysIn(new Interval(start, end1)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,116,"assertEquals(0, Days.daysIn(new Interval(start, start)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,117,"assertEquals(0, Days.daysIn(new Interval(end1, end1)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,118,"assertEquals(6, Days.daysIn(new Interval(start, end2)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,121,public void testFactory_standardDaysIn_RPeriod() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,122,"assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,123,"assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,124,"assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,125,"assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,126,"assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,127,"assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,128,"assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,129,"assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,130,"assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,131,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,132,Days.standardDaysIn(Period.months(1));
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,133,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,134,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,135,// expeceted
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,139,public void testFactory_parseDays_String() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,140,"assertEquals(0, Days.parseDays((String) null).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,141,"assertEquals(0, Days.parseDays(""P0D"").getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,142,"assertEquals(1, Days.parseDays(""P1D"").getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,143,"assertEquals(-3, Days.parseDays(""P-3D"").getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,144,"assertEquals(2, Days.parseDays(""P0Y0M2D"").getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,145,"assertEquals(2, Days.parseDays(""P2DT0H0M"").getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,146,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,147,"Days.parseDays(""P1Y1D"");"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,148,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,149,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,150,// expeceted
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,152,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,153,"Days.parseDays(""P1DT1H"");"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,154,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,155,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,156,// expeceted
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,161,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,162,Days test = Days.days(20);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,163,"assertEquals(20, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,166,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,167,Days test = Days.days(20);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,168,"assertEquals(DurationFieldType.days(), test.getFieldType());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,171,public void testGetPeriodType() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,172,Days test = Days.days(20);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,173,"assertEquals(PeriodType.days(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,177,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,178,Days test = Days.days(20);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,179,"assertEquals(""P20D"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,181,test = Days.days(-20);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,182,"assertEquals(""P-20D"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,186,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,187,Days test = Days.SEVEN;
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,189,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,190,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,191,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,192,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,193,oos.close();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,195,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,196,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,197,Days result = (Days) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,198,ois.close();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,200,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,204,public void testToStandardWeeks() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,205,Days test = Days.days(14);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,206,Weeks expected = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,207,"assertEquals(expected, test.toStandardWeeks());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,210,public void testToStandardHours() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,211,Days test = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,212,Hours expected = Hours.hours(2 * 24);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,213,"assertEquals(expected, test.toStandardHours());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,215,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,216,Days.MAX_VALUE.toStandardHours();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,217,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,218,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,219,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,223,public void testToStandardMinutes() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,224,Days test = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,225,Minutes expected = Minutes.minutes(2 * 24 * 60);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,226,"assertEquals(expected, test.toStandardMinutes());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,228,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,229,Days.MAX_VALUE.toStandardMinutes();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,230,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,231,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,232,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,236,public void testToStandardSeconds() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,237,Days test = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,238,Seconds expected = Seconds.seconds(2 * 24 * 60 * 60);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,239,"assertEquals(expected, test.toStandardSeconds());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,241,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,242,Days.MAX_VALUE.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,243,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,244,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,245,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,249,public void testToStandardDuration() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,250,Days test = Days.days(20);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,251,Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,252,"assertEquals(expected, test.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,254,expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,255,"assertEquals(expected, Days.MAX_VALUE.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,259,public void testPlus_int() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,260,Days test2 = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,261,Days result = test2.plus(3);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,262,"assertEquals(2, test2.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,263,"assertEquals(5, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,265,"assertEquals(1, Days.ONE.plus(0).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,267,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,268,Days.MAX_VALUE.plus(1);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,269,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,270,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,271,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,275,public void testPlus_Days() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,276,Days test2 = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,277,Days test3 = Days.days(3);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,278,Days result = test2.plus(test3);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,279,"assertEquals(2, test2.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,280,"assertEquals(3, test3.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,281,"assertEquals(5, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,283,"assertEquals(1, Days.ONE.plus(Days.ZERO).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,284,"assertEquals(1, Days.ONE.plus((Days) null).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,286,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,287,Days.MAX_VALUE.plus(Days.ONE);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,288,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,289,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,290,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,294,public void testMinus_int() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,295,Days test2 = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,296,Days result = test2.minus(3);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,297,"assertEquals(2, test2.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,298,"assertEquals(-1, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,300,"assertEquals(1, Days.ONE.minus(0).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,302,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,303,Days.MIN_VALUE.minus(1);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,304,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,305,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,306,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,310,public void testMinus_Days() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,311,Days test2 = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,312,Days test3 = Days.days(3);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,313,Days result = test2.minus(test3);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,314,"assertEquals(2, test2.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,315,"assertEquals(3, test3.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,316,"assertEquals(-1, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,318,"assertEquals(1, Days.ONE.minus(Days.ZERO).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,319,"assertEquals(1, Days.ONE.minus((Days) null).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,321,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,322,Days.MIN_VALUE.minus(Days.ONE);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,323,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,324,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,325,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,329,public void testMultipliedBy_int() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,330,Days test = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,331,"assertEquals(6, test.multipliedBy(3).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,332,"assertEquals(2, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,333,"assertEquals(-6, test.multipliedBy(-3).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,334,"assertSame(test, test.multipliedBy(1));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,336,Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,337,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,338,halfMax.multipliedBy(2);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,339,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,340,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,341,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,345,public void testDividedBy_int() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,346,Days test = Days.days(12);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,347,"assertEquals(6, test.dividedBy(2).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,348,"assertEquals(12, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,349,"assertEquals(4, test.dividedBy(3).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,350,"assertEquals(3, test.dividedBy(4).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,351,"assertEquals(2, test.dividedBy(5).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,352,"assertEquals(2, test.dividedBy(6).getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,353,"assertSame(test, test.dividedBy(1));"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,355,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,356,Days.ONE.dividedBy(0);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,357,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,358,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,359,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,363,public void testNegate() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,364,Days test = Days.days(12);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,365,"assertEquals(-12, test.negate().getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,366,"assertEquals(12, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,368,try {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,369,Days.MIN_VALUE.negate();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,370,fail();
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,371,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,372,// expected
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,377,public void testAddToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,378,Days test = Days.days(20);
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,379,"LocalDate date = new LocalDate(2006, 6, 1);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,380,"LocalDate expected = new LocalDate(2006, 6, 21);"
True,JodaTime/src/test/org/joda/time/TestDays.java,JodaTime/src/test/org/joda/time/TestDays.java,381,"assertEquals(expected, date.plus(test));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,23,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,24,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,27,* This class is a Junit unit test for Hours.
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,29,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,31,public class TestHours extends TestCase {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,32,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,33,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,36,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,37,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,40,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,41,return new TestSuite(TestHours.class);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,44,public TestHours(String name) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,45,super(name);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,48,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,51,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,55,public void testConstants() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,56,"assertEquals(0, Hours.ZERO.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,57,"assertEquals(1, Hours.ONE.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,58,"assertEquals(2, Hours.TWO.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,59,"assertEquals(3, Hours.THREE.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,60,"assertEquals(4, Hours.FOUR.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,61,"assertEquals(5, Hours.FIVE.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,62,"assertEquals(6, Hours.SIX.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,63,"assertEquals(7, Hours.SEVEN.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,64,"assertEquals(8, Hours.EIGHT.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,65,"assertEquals(Integer.MAX_VALUE, Hours.MAX_VALUE.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,66,"assertEquals(Integer.MIN_VALUE, Hours.MIN_VALUE.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,70,public void testFactory_hours_int() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,71,"assertSame(Hours.ZERO, Hours.hours(0));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,72,"assertSame(Hours.ONE, Hours.hours(1));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,73,"assertSame(Hours.TWO, Hours.hours(2));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,74,"assertSame(Hours.THREE, Hours.hours(3));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,75,"assertSame(Hours.FOUR, Hours.hours(4));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,76,"assertSame(Hours.FIVE, Hours.hours(5));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,77,"assertSame(Hours.SIX, Hours.hours(6));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,78,"assertSame(Hours.SEVEN, Hours.hours(7));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,79,"assertSame(Hours.EIGHT, Hours.hours(8));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,80,"assertSame(Hours.MAX_VALUE, Hours.hours(Integer.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,81,"assertSame(Hours.MIN_VALUE, Hours.hours(Integer.MIN_VALUE));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,82,"assertEquals(-1, Hours.hours(-1).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,83,"assertEquals(9, Hours.hours(9).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,87,public void testFactory_hoursBetween_RInstant() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,88,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,89,"DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,90,"DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,92,"assertEquals(3, Hours.hoursBetween(start, end1).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,93,"assertEquals(0, Hours.hoursBetween(start, start).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,94,"assertEquals(0, Hours.hoursBetween(end1, end1).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,95,"assertEquals(-3, Hours.hoursBetween(end1, start).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,96,"assertEquals(6, Hours.hoursBetween(start, end2).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,99,public void testFactory_hoursBetween_RPartial() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,100,"LocalTime start = new LocalTime(12, 0);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,101,"LocalTime end1 = new LocalTime(15, 0);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,102,"TimeOfDay end2 = new TimeOfDay(18, 0);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,104,"assertEquals(3, Hours.hoursBetween(start, end1).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,105,"assertEquals(0, Hours.hoursBetween(start, start).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,106,"assertEquals(0, Hours.hoursBetween(end1, end1).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,107,"assertEquals(-3, Hours.hoursBetween(end1, start).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,108,"assertEquals(6, Hours.hoursBetween(start, end2).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,111,public void testFactory_hoursIn_RInterval() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,112,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,113,"DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,114,"DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,116,"assertEquals(0, Hours.hoursIn((ReadableInterval) null).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,117,"assertEquals(3, Hours.hoursIn(new Interval(start, end1)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,118,"assertEquals(0, Hours.hoursIn(new Interval(start, start)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,119,"assertEquals(0, Hours.hoursIn(new Interval(end1, end1)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,120,"assertEquals(6, Hours.hoursIn(new Interval(start, end2)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,123,public void testFactory_standardHoursIn_RPeriod() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,124,"assertEquals(0, Hours.standardHoursIn((ReadablePeriod) null).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,125,"assertEquals(0, Hours.standardHoursIn(Period.ZERO).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,126,"assertEquals(1, Hours.standardHoursIn(new Period(0, 0, 0, 0, 1, 0, 0, 0)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,127,"assertEquals(123, Hours.standardHoursIn(Period.hours(123)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,128,"assertEquals(-987, Hours.standardHoursIn(Period.hours(-987)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,129,"assertEquals(1, Hours.standardHoursIn(Period.minutes(119)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,130,"assertEquals(2, Hours.standardHoursIn(Period.minutes(120)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,131,"assertEquals(2, Hours.standardHoursIn(Period.minutes(121)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,132,"assertEquals(48, Hours.standardHoursIn(Period.days(2)).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,133,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,134,Hours.standardHoursIn(Period.months(1));
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,135,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,136,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,137,// expeceted
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,141,public void testFactory_parseHours_String() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,142,"assertEquals(0, Hours.parseHours((String) null).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,143,"assertEquals(0, Hours.parseHours(""PT0H"").getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,144,"assertEquals(1, Hours.parseHours(""PT1H"").getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,145,"assertEquals(-3, Hours.parseHours(""PT-3H"").getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,146,"assertEquals(2, Hours.parseHours(""P0Y0M0DT2H"").getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,147,"assertEquals(2, Hours.parseHours(""PT2H0M"").getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,148,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,149,"Hours.parseHours(""P1Y1D"");"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,150,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,151,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,152,// expeceted
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,154,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,155,"Hours.parseHours(""P1DT1H"");"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,156,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,157,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,158,// expeceted
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,163,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,164,Hours test = Hours.hours(20);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,165,"assertEquals(20, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,168,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,169,Hours test = Hours.hours(20);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,170,"assertEquals(DurationFieldType.hours(), test.getFieldType());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,173,public void testGetPeriodType() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,174,Hours test = Hours.hours(20);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,175,"assertEquals(PeriodType.hours(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,179,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,180,Hours test = Hours.hours(20);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,181,"assertEquals(""PT20H"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,183,test = Hours.hours(-20);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,184,"assertEquals(""PT-20H"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,188,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,189,Hours test = Hours.SEVEN;
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,191,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,192,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,193,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,194,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,195,oos.close();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,197,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,198,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,199,Hours result = (Hours) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,200,ois.close();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,202,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,206,public void testToStandardWeeks() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,207,Hours test = Hours.hours(24 * 7 * 2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,208,Weeks expected = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,209,"assertEquals(expected, test.toStandardWeeks());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,212,public void testToStandardDays() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,213,Hours test = Hours.hours(24 * 2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,214,Days expected = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,215,"assertEquals(expected, test.toStandardDays());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,218,public void testToStandardMinutes() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,219,Hours test = Hours.hours(3);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,220,Minutes expected = Minutes.minutes(3 * 60);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,221,"assertEquals(expected, test.toStandardMinutes());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,223,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,224,Hours.MAX_VALUE.toStandardMinutes();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,225,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,226,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,227,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,231,public void testToStandardSeconds() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,232,Hours test = Hours.hours(3);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,233,Seconds expected = Seconds.seconds(3 * 60 * 60);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,234,"assertEquals(expected, test.toStandardSeconds());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,236,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,237,Hours.MAX_VALUE.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,238,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,239,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,240,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,244,public void testToStandardDuration() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,245,Hours test = Hours.hours(20);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,246,Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,247,"assertEquals(expected, test.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,249,expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,250,"assertEquals(expected, Hours.MAX_VALUE.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,254,public void testPlus_int() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,255,Hours test2 = Hours.hours(2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,256,Hours result = test2.plus(3);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,257,"assertEquals(2, test2.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,258,"assertEquals(5, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,260,"assertEquals(1, Hours.ONE.plus(0).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,262,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,263,Hours.MAX_VALUE.plus(1);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,264,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,265,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,266,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,270,public void testPlus_Hours() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,271,Hours test2 = Hours.hours(2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,272,Hours test3 = Hours.hours(3);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,273,Hours result = test2.plus(test3);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,274,"assertEquals(2, test2.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,275,"assertEquals(3, test3.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,276,"assertEquals(5, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,278,"assertEquals(1, Hours.ONE.plus(Hours.ZERO).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,279,"assertEquals(1, Hours.ONE.plus((Hours) null).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,281,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,282,Hours.MAX_VALUE.plus(Hours.ONE);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,283,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,284,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,285,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,289,public void testMinus_int() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,290,Hours test2 = Hours.hours(2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,291,Hours result = test2.minus(3);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,292,"assertEquals(2, test2.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,293,"assertEquals(-1, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,295,"assertEquals(1, Hours.ONE.minus(0).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,297,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,298,Hours.MIN_VALUE.minus(1);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,299,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,300,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,301,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,305,public void testMinus_Hours() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,306,Hours test2 = Hours.hours(2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,307,Hours test3 = Hours.hours(3);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,308,Hours result = test2.minus(test3);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,309,"assertEquals(2, test2.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,310,"assertEquals(3, test3.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,311,"assertEquals(-1, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,313,"assertEquals(1, Hours.ONE.minus(Hours.ZERO).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,314,"assertEquals(1, Hours.ONE.minus((Hours) null).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,316,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,317,Hours.MIN_VALUE.minus(Hours.ONE);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,318,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,319,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,320,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,324,public void testMultipliedBy_int() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,325,Hours test = Hours.hours(2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,326,"assertEquals(6, test.multipliedBy(3).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,327,"assertEquals(2, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,328,"assertEquals(-6, test.multipliedBy(-3).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,329,"assertSame(test, test.multipliedBy(1));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,331,Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,332,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,333,halfMax.multipliedBy(2);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,334,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,335,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,336,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,340,public void testDividedBy_int() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,341,Hours test = Hours.hours(12);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,342,"assertEquals(6, test.dividedBy(2).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,343,"assertEquals(12, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,344,"assertEquals(4, test.dividedBy(3).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,345,"assertEquals(3, test.dividedBy(4).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,346,"assertEquals(2, test.dividedBy(5).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,347,"assertEquals(2, test.dividedBy(6).getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,348,"assertSame(test, test.dividedBy(1));"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,350,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,351,Hours.ONE.dividedBy(0);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,352,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,353,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,354,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,358,public void testNegate() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,359,Hours test = Hours.hours(12);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,360,"assertEquals(-12, test.negate().getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,361,"assertEquals(12, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,363,try {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,364,Hours.MIN_VALUE.negate();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,365,fail();
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,366,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,367,// expected
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,372,public void testAddToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,373,Hours test = Hours.hours(26);
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,374,"LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,375,"LocalDateTime expected = new LocalDateTime(2006, 6, 2, 2, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestHours.java,JodaTime/src/test/org/joda/time/TestHours.java,376,"assertEquals(expected, date.plus(test));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,23,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,24,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,27,* This class is a Junit unit test for Minutes.
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,29,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,31,public class TestMinutes extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,32,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,33,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,36,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,37,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,40,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,41,return new TestSuite(TestMinutes.class);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,44,public TestMinutes(String name) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,45,super(name);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,48,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,51,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,55,public void testConstants() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,56,"assertEquals(0, Minutes.ZERO.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,57,"assertEquals(1, Minutes.ONE.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,58,"assertEquals(2, Minutes.TWO.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,59,"assertEquals(3, Minutes.THREE.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,60,"assertEquals(Integer.MAX_VALUE, Minutes.MAX_VALUE.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,61,"assertEquals(Integer.MIN_VALUE, Minutes.MIN_VALUE.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,65,public void testFactory_minutes_int() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,66,"assertSame(Minutes.ZERO, Minutes.minutes(0));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,67,"assertSame(Minutes.ONE, Minutes.minutes(1));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,68,"assertSame(Minutes.TWO, Minutes.minutes(2));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,69,"assertSame(Minutes.THREE, Minutes.minutes(3));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,70,"assertSame(Minutes.MAX_VALUE, Minutes.minutes(Integer.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,71,"assertSame(Minutes.MIN_VALUE, Minutes.minutes(Integer.MIN_VALUE));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,72,"assertEquals(-1, Minutes.minutes(-1).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,73,"assertEquals(4, Minutes.minutes(4).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,77,public void testFactory_minutesBetween_RInstant() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,78,"DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,79,"DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,80,"DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,82,"assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,83,"assertEquals(0, Minutes.minutesBetween(start, start).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,84,"assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,85,"assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,86,"assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,89,public void testFactory_minutesBetween_RPartial() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,90,"LocalTime start = new LocalTime(12, 3);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,91,"LocalTime end1 = new LocalTime(12, 6);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,92,"TimeOfDay end2 = new TimeOfDay(12, 9);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,94,"assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,95,"assertEquals(0, Minutes.minutesBetween(start, start).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,96,"assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,97,"assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,98,"assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,101,public void testFactory_minutesIn_RInterval() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,102,"DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,103,"DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,104,"DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,106,"assertEquals(0, Minutes.minutesIn((ReadableInterval) null).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,107,"assertEquals(3, Minutes.minutesIn(new Interval(start, end1)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,108,"assertEquals(0, Minutes.minutesIn(new Interval(start, start)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,109,"assertEquals(0, Minutes.minutesIn(new Interval(end1, end1)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,110,"assertEquals(6, Minutes.minutesIn(new Interval(start, end2)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,113,public void testFactory_standardMinutesIn_RPeriod() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,114,"assertEquals(0, Minutes.standardMinutesIn((ReadablePeriod) null).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,115,"assertEquals(0, Minutes.standardMinutesIn(Period.ZERO).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,116,"assertEquals(1, Minutes.standardMinutesIn(new Period(0, 0, 0, 0, 0, 1, 0, 0)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,117,"assertEquals(123, Minutes.standardMinutesIn(Period.minutes(123)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,118,"assertEquals(-987, Minutes.standardMinutesIn(Period.minutes(-987)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,119,"assertEquals(1, Minutes.standardMinutesIn(Period.seconds(119)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,120,"assertEquals(2, Minutes.standardMinutesIn(Period.seconds(120)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,121,"assertEquals(2, Minutes.standardMinutesIn(Period.seconds(121)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,122,"assertEquals(120, Minutes.standardMinutesIn(Period.hours(2)).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,123,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,124,Minutes.standardMinutesIn(Period.months(1));
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,125,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,126,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,127,// expeceted
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,131,public void testFactory_parseMinutes_String() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,132,"assertEquals(0, Minutes.parseMinutes((String) null).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,133,"assertEquals(0, Minutes.parseMinutes(""PT0M"").getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,134,"assertEquals(1, Minutes.parseMinutes(""PT1M"").getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,135,"assertEquals(-3, Minutes.parseMinutes(""PT-3M"").getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,136,"assertEquals(2, Minutes.parseMinutes(""P0Y0M0DT2M"").getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,137,"assertEquals(2, Minutes.parseMinutes(""PT0H2M"").getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,138,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,139,"Minutes.parseMinutes(""P1Y1D"");"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,140,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,141,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,142,// expeceted
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,144,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,145,"Minutes.parseMinutes(""P1DT1M"");"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,146,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,147,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,148,// expeceted
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,153,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,154,Minutes test = Minutes.minutes(20);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,155,"assertEquals(20, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,158,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,159,Minutes test = Minutes.minutes(20);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,160,"assertEquals(DurationFieldType.minutes(), test.getFieldType());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,163,public void testGetPeriodType() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,164,Minutes test = Minutes.minutes(20);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,165,"assertEquals(PeriodType.minutes(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,169,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,170,Minutes test = Minutes.minutes(20);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,171,"assertEquals(""PT20M"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,173,test = Minutes.minutes(-20);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,174,"assertEquals(""PT-20M"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,178,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,179,Minutes test = Minutes.THREE;
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,181,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,182,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,183,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,184,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,185,oos.close();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,187,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,188,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,189,Minutes result = (Minutes) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,190,ois.close();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,192,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,196,public void testToStandardWeeks() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,197,Minutes test = Minutes.minutes(60 * 24 * 7 * 2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,198,Weeks expected = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,199,"assertEquals(expected, test.toStandardWeeks());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,202,public void testToStandardDays() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,203,Minutes test = Minutes.minutes(60 * 24 * 2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,204,Days expected = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,205,"assertEquals(expected, test.toStandardDays());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,208,public void testToStandardHours() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,209,Minutes test = Minutes.minutes(3 * 60);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,210,Hours expected = Hours.hours(3);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,211,"assertEquals(expected, test.toStandardHours());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,214,public void testToStandardSeconds() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,215,Minutes test = Minutes.minutes(3);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,216,Seconds expected = Seconds.seconds(3 * 60);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,217,"assertEquals(expected, test.toStandardSeconds());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,219,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,220,Minutes.MAX_VALUE.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,221,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,222,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,223,// expected
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,227,public void testToStandardDuration() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,228,Minutes test = Minutes.minutes(20);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,229,Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_MINUTE);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,230,"assertEquals(expected, test.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,232,expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_MINUTE);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,233,"assertEquals(expected, Minutes.MAX_VALUE.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,237,public void testPlus_int() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,238,Minutes test2 = Minutes.minutes(2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,239,Minutes result = test2.plus(3);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,240,"assertEquals(2, test2.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,241,"assertEquals(5, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,243,"assertEquals(1, Minutes.ONE.plus(0).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,245,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,246,Minutes.MAX_VALUE.plus(1);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,247,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,248,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,249,// expected
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,253,public void testPlus_Minutes() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,254,Minutes test2 = Minutes.minutes(2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,255,Minutes test3 = Minutes.minutes(3);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,256,Minutes result = test2.plus(test3);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,257,"assertEquals(2, test2.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,258,"assertEquals(3, test3.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,259,"assertEquals(5, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,261,"assertEquals(1, Minutes.ONE.plus(Minutes.ZERO).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,262,"assertEquals(1, Minutes.ONE.plus((Minutes) null).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,264,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,265,Minutes.MAX_VALUE.plus(Minutes.ONE);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,266,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,267,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,268,// expected
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,272,public void testMinus_int() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,273,Minutes test2 = Minutes.minutes(2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,274,Minutes result = test2.minus(3);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,275,"assertEquals(2, test2.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,276,"assertEquals(-1, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,278,"assertEquals(1, Minutes.ONE.minus(0).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,280,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,281,Minutes.MIN_VALUE.minus(1);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,282,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,283,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,284,// expected
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,288,public void testMinus_Minutes() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,289,Minutes test2 = Minutes.minutes(2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,290,Minutes test3 = Minutes.minutes(3);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,291,Minutes result = test2.minus(test3);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,292,"assertEquals(2, test2.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,293,"assertEquals(3, test3.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,294,"assertEquals(-1, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,296,"assertEquals(1, Minutes.ONE.minus(Minutes.ZERO).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,297,"assertEquals(1, Minutes.ONE.minus((Minutes) null).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,299,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,300,Minutes.MIN_VALUE.minus(Minutes.ONE);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,301,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,302,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,303,// expected
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,307,public void testMultipliedBy_int() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,308,Minutes test = Minutes.minutes(2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,309,"assertEquals(6, test.multipliedBy(3).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,310,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,311,"assertEquals(-6, test.multipliedBy(-3).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,312,"assertSame(test, test.multipliedBy(1));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,314,Minutes halfMax = Minutes.minutes(Integer.MAX_VALUE / 2 + 1);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,315,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,316,halfMax.multipliedBy(2);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,317,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,318,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,319,// expected
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,323,public void testDividedBy_int() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,324,Minutes test = Minutes.minutes(12);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,325,"assertEquals(6, test.dividedBy(2).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,326,"assertEquals(12, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,327,"assertEquals(4, test.dividedBy(3).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,328,"assertEquals(3, test.dividedBy(4).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,329,"assertEquals(2, test.dividedBy(5).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,330,"assertEquals(2, test.dividedBy(6).getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,331,"assertSame(test, test.dividedBy(1));"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,333,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,334,Minutes.ONE.dividedBy(0);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,335,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,336,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,337,// expected
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,341,public void testNegate() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,342,Minutes test = Minutes.minutes(12);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,343,"assertEquals(-12, test.negate().getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,344,"assertEquals(12, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,346,try {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,347,Minutes.MIN_VALUE.negate();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,348,fail();
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,349,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,350,// expected
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,355,public void testAddToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,356,Minutes test = Minutes.minutes(26);
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,357,"LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,358,"LocalDateTime expected = new LocalDateTime(2006, 6, 1, 0, 26, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMinutes.java,JodaTime/src/test/org/joda/time/TestMinutes.java,359,"assertEquals(expected, date.plus(test));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,23,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,24,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,27,* This class is a Junit unit test for Months.
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,29,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,31,public class TestMonths extends TestCase {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,32,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,33,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,36,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,37,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,40,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,41,return new TestSuite(TestMonths.class);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,44,public TestMonths(String name) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,45,super(name);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,48,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,51,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,55,public void testConstants() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,56,"assertEquals(0, Months.ZERO.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,57,"assertEquals(1, Months.ONE.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,58,"assertEquals(2, Months.TWO.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,59,"assertEquals(3, Months.THREE.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,60,"assertEquals(4, Months.FOUR.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,61,"assertEquals(5, Months.FIVE.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,62,"assertEquals(6, Months.SIX.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,63,"assertEquals(7, Months.SEVEN.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,64,"assertEquals(8, Months.EIGHT.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,65,"assertEquals(9, Months.NINE.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,66,"assertEquals(10, Months.TEN.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,67,"assertEquals(11, Months.ELEVEN.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,68,"assertEquals(12, Months.TWELVE.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,69,"assertEquals(Integer.MAX_VALUE, Months.MAX_VALUE.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,70,"assertEquals(Integer.MIN_VALUE, Months.MIN_VALUE.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,74,public void testFactory_months_int() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,75,"assertSame(Months.ZERO, Months.months(0));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,76,"assertSame(Months.ONE, Months.months(1));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,77,"assertSame(Months.TWO, Months.months(2));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,78,"assertSame(Months.THREE, Months.months(3));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,79,"assertSame(Months.FOUR, Months.months(4));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,80,"assertSame(Months.FIVE, Months.months(5));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,81,"assertSame(Months.SIX, Months.months(6));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,82,"assertSame(Months.SEVEN, Months.months(7));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,83,"assertSame(Months.EIGHT, Months.months(8));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,84,"assertSame(Months.NINE, Months.months(9));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,85,"assertSame(Months.TEN, Months.months(10));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,86,"assertSame(Months.ELEVEN, Months.months(11));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,87,"assertSame(Months.TWELVE, Months.months(12));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,88,"assertSame(Months.MAX_VALUE, Months.months(Integer.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,89,"assertSame(Months.MIN_VALUE, Months.months(Integer.MIN_VALUE));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,90,"assertEquals(-1, Months.months(-1).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,91,"assertEquals(13, Months.months(13).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,95,public void testFactory_monthsBetween_RInstant() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,96,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,97,"DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,98,"DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,100,"assertEquals(3, Months.monthsBetween(start, end1).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,101,"assertEquals(0, Months.monthsBetween(start, start).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,102,"assertEquals(0, Months.monthsBetween(end1, end1).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,103,"assertEquals(-3, Months.monthsBetween(end1, start).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,104,"assertEquals(6, Months.monthsBetween(start, end2).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,107,public void testFactory_monthsBetween_RPartial() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,108,"LocalDate start = new LocalDate(2006, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,109,"LocalDate end1 = new LocalDate(2006, 9, 9);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,110,"YearMonthDay end2 = new YearMonthDay(2006, 12, 9);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,112,"assertEquals(3, Months.monthsBetween(start, end1).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,113,"assertEquals(0, Months.monthsBetween(start, start).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,114,"assertEquals(0, Months.monthsBetween(end1, end1).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,115,"assertEquals(-3, Months.monthsBetween(end1, start).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,116,"assertEquals(6, Months.monthsBetween(start, end2).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,119,public void testFactory_monthsIn_RInterval() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,120,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,121,"DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,122,"DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,124,"assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,125,"assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,126,"assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,127,"assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,128,"assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,131,public void testFactory_parseMonths_String() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,132,"assertEquals(0, Months.parseMonths((String) null).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,133,"assertEquals(0, Months.parseMonths(""P0M"").getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,134,"assertEquals(1, Months.parseMonths(""P1M"").getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,135,"assertEquals(-3, Months.parseMonths(""P-3M"").getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,136,"assertEquals(2, Months.parseMonths(""P0Y2M"").getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,137,"assertEquals(2, Months.parseMonths(""P2MT0H0M"").getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,138,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,139,"Months.parseMonths(""P1Y1D"");"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,140,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,141,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,142,// expeceted
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,144,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,145,"Months.parseMonths(""P1MT1H"");"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,146,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,147,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,148,// expeceted
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,153,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,154,Months test = Months.months(20);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,155,"assertEquals(20, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,158,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,159,Months test = Months.months(20);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,160,"assertEquals(DurationFieldType.months(), test.getFieldType());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,163,public void testGetPeriodType() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,164,Months test = Months.months(20);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,165,"assertEquals(PeriodType.months(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,169,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,170,Months test = Months.months(20);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,171,"assertEquals(""P20M"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,173,test = Months.months(-20);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,174,"assertEquals(""P-20M"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,178,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,179,Months test = Months.THREE;
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,181,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,182,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,183,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,184,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,185,oos.close();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,187,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,188,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,189,Months result = (Months) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,190,ois.close();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,192,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,196,public void testPlus_int() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,197,Months test2 = Months.months(2);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,198,Months result = test2.plus(3);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,199,"assertEquals(2, test2.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,200,"assertEquals(5, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,202,"assertEquals(1, Months.ONE.plus(0).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,204,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,205,Months.MAX_VALUE.plus(1);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,206,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,207,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,208,// expected
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,212,public void testPlus_Months() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,213,Months test2 = Months.months(2);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,214,Months test3 = Months.months(3);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,215,Months result = test2.plus(test3);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,216,"assertEquals(2, test2.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,217,"assertEquals(3, test3.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,218,"assertEquals(5, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,220,"assertEquals(1, Months.ONE.plus(Months.ZERO).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,221,"assertEquals(1, Months.ONE.plus((Months) null).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,223,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,224,Months.MAX_VALUE.plus(Months.ONE);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,225,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,226,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,227,// expected
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,231,public void testMinus_int() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,232,Months test2 = Months.months(2);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,233,Months result = test2.minus(3);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,234,"assertEquals(2, test2.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,235,"assertEquals(-1, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,237,"assertEquals(1, Months.ONE.minus(0).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,239,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,240,Months.MIN_VALUE.minus(1);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,241,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,242,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,243,// expected
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,247,public void testMinus_Months() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,248,Months test2 = Months.months(2);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,249,Months test3 = Months.months(3);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,250,Months result = test2.minus(test3);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,251,"assertEquals(2, test2.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,252,"assertEquals(3, test3.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,253,"assertEquals(-1, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,255,"assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,256,"assertEquals(1, Months.ONE.minus((Months) null).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,258,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,259,Months.MIN_VALUE.minus(Months.ONE);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,260,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,261,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,262,// expected
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,266,public void testMultipliedBy_int() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,267,Months test = Months.months(2);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,268,"assertEquals(6, test.multipliedBy(3).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,269,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,270,"assertEquals(-6, test.multipliedBy(-3).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,271,"assertSame(test, test.multipliedBy(1));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,273,Months halfMax = Months.months(Integer.MAX_VALUE / 2 + 1);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,274,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,275,halfMax.multipliedBy(2);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,276,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,277,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,278,// expected
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,282,public void testDividedBy_int() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,283,Months test = Months.months(12);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,284,"assertEquals(6, test.dividedBy(2).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,285,"assertEquals(12, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,286,"assertEquals(4, test.dividedBy(3).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,287,"assertEquals(3, test.dividedBy(4).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,288,"assertEquals(2, test.dividedBy(5).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,289,"assertEquals(2, test.dividedBy(6).getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,290,"assertSame(test, test.dividedBy(1));"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,292,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,293,Months.ONE.dividedBy(0);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,294,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,295,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,296,// expected
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,300,public void testNegate() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,301,Months test = Months.months(12);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,302,"assertEquals(-12, test.negate().getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,303,"assertEquals(12, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,305,try {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,306,Months.MIN_VALUE.negate();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,307,fail();
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,308,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,309,// expected
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,314,public void testAddToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,315,Months test = Months.months(3);
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,316,"LocalDate date = new LocalDate(2006, 6, 1);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,317,"LocalDate expected = new LocalDate(2006, 9, 1);"
True,JodaTime/src/test/org/joda/time/TestMonths.java,JodaTime/src/test/org/joda/time/TestMonths.java,318,"assertEquals(expected, date.plus(test));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,23,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,24,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,27,* This class is a Junit unit test for Seconds.
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,29,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,31,public class TestSeconds extends TestCase {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,32,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,33,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,36,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,37,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,40,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,41,return new TestSuite(TestSeconds.class);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,44,public TestSeconds(String name) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,45,super(name);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,48,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,51,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,55,public void testConstants() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,56,"assertEquals(0, Seconds.ZERO.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,57,"assertEquals(1, Seconds.ONE.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,58,"assertEquals(2, Seconds.TWO.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,59,"assertEquals(3, Seconds.THREE.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,60,"assertEquals(Integer.MAX_VALUE, Seconds.MAX_VALUE.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,61,"assertEquals(Integer.MIN_VALUE, Seconds.MIN_VALUE.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,65,public void testFactory_seconds_int() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,66,"assertSame(Seconds.ZERO, Seconds.seconds(0));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,67,"assertSame(Seconds.ONE, Seconds.seconds(1));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,68,"assertSame(Seconds.TWO, Seconds.seconds(2));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,69,"assertSame(Seconds.THREE, Seconds.seconds(3));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,70,"assertSame(Seconds.MAX_VALUE, Seconds.seconds(Integer.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,71,"assertSame(Seconds.MIN_VALUE, Seconds.seconds(Integer.MIN_VALUE));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,72,"assertEquals(-1, Seconds.seconds(-1).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,73,"assertEquals(4, Seconds.seconds(4).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,77,public void testFactory_secondsBetween_RInstant() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,78,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,79,"DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,80,"DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,82,"assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,83,"assertEquals(0, Seconds.secondsBetween(start, start).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,84,"assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,85,"assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,86,"assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,89,public void testFactory_secondsBetween_RPartial() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,90,"LocalTime start = new LocalTime(12, 0, 3);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,91,"LocalTime end1 = new LocalTime(12, 0, 6);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,92,"TimeOfDay end2 = new TimeOfDay(12, 0, 9);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,94,"assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,95,"assertEquals(0, Seconds.secondsBetween(start, start).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,96,"assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,97,"assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,98,"assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,101,public void testFactory_secondsIn_RInterval() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,102,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,103,"DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,104,"DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,106,"assertEquals(0, Seconds.secondsIn((ReadableInterval) null).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,107,"assertEquals(3, Seconds.secondsIn(new Interval(start, end1)).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,108,"assertEquals(0, Seconds.secondsIn(new Interval(start, start)).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,109,"assertEquals(0, Seconds.secondsIn(new Interval(end1, end1)).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,110,"assertEquals(6, Seconds.secondsIn(new Interval(start, end2)).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,113,public void testFactory_standardSecondsIn_RPeriod() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,114,"assertEquals(0, Seconds.standardSecondsIn((ReadablePeriod) null).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,115,"assertEquals(0, Seconds.standardSecondsIn(Period.ZERO).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,116,"assertEquals(1, Seconds.standardSecondsIn(new Period(0, 0, 0, 0, 0, 0, 1, 0)).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,117,"assertEquals(123, Seconds.standardSecondsIn(Period.seconds(123)).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,118,"assertEquals(-987, Seconds.standardSecondsIn(Period.seconds(-987)).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,119,"assertEquals(2 * 24 * 60 * 60, Seconds.standardSecondsIn(Period.days(2)).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,120,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,121,Seconds.standardSecondsIn(Period.months(1));
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,122,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,123,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,124,// expeceted
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,128,public void testFactory_parseSeconds_String() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,129,"assertEquals(0, Seconds.parseSeconds((String) null).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,130,"assertEquals(0, Seconds.parseSeconds(""PT0S"").getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,131,"assertEquals(1, Seconds.parseSeconds(""PT1S"").getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,132,"assertEquals(-3, Seconds.parseSeconds(""PT-3S"").getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,133,"assertEquals(2, Seconds.parseSeconds(""P0Y0M0DT2S"").getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,134,"assertEquals(2, Seconds.parseSeconds(""PT0H2S"").getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,135,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,136,"Seconds.parseSeconds(""P1Y1D"");"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,137,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,138,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,139,// expeceted
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,141,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,142,"Seconds.parseSeconds(""P1DT1S"");"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,143,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,144,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,145,// expeceted
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,150,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,151,Seconds test = Seconds.seconds(20);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,152,"assertEquals(20, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,155,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,156,Seconds test = Seconds.seconds(20);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,157,"assertEquals(DurationFieldType.seconds(), test.getFieldType());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,160,public void testGetPeriodType() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,161,Seconds test = Seconds.seconds(20);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,162,"assertEquals(PeriodType.seconds(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,166,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,167,Seconds test = Seconds.seconds(20);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,168,"assertEquals(""PT20S"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,170,test = Seconds.seconds(-20);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,171,"assertEquals(""PT-20S"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,175,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,176,Seconds test = Seconds.THREE;
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,178,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,179,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,180,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,181,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,182,oos.close();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,184,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,185,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,186,Seconds result = (Seconds) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,187,ois.close();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,189,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,193,public void testToStandardWeeks() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,194,Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,195,Weeks expected = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,196,"assertEquals(expected, test.toStandardWeeks());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,199,public void testToStandardDays() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,200,Seconds test = Seconds.seconds(60 * 60 * 24 * 2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,201,Days expected = Days.days(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,202,"assertEquals(expected, test.toStandardDays());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,205,public void testToStandardHours() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,206,Seconds test = Seconds.seconds(60 * 60 * 2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,207,Hours expected = Hours.hours(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,208,"assertEquals(expected, test.toStandardHours());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,211,public void testToStandardMinutes() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,212,Seconds test = Seconds.seconds(60 * 2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,213,Minutes expected = Minutes.minutes(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,214,"assertEquals(expected, test.toStandardMinutes());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,217,public void testToStandardDuration() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,218,Seconds test = Seconds.seconds(20);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,219,Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,220,"assertEquals(expected, test.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,222,expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,223,"assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,227,public void testPlus_int() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,228,Seconds test2 = Seconds.seconds(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,229,Seconds result = test2.plus(3);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,230,"assertEquals(2, test2.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,231,"assertEquals(5, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,233,"assertEquals(1, Seconds.ONE.plus(0).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,235,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,236,Seconds.MAX_VALUE.plus(1);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,237,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,238,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,239,// expected
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,243,public void testPlus_Seconds() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,244,Seconds test2 = Seconds.seconds(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,245,Seconds test3 = Seconds.seconds(3);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,246,Seconds result = test2.plus(test3);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,247,"assertEquals(2, test2.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,248,"assertEquals(3, test3.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,249,"assertEquals(5, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,251,"assertEquals(1, Seconds.ONE.plus(Seconds.ZERO).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,252,"assertEquals(1, Seconds.ONE.plus((Seconds) null).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,254,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,255,Seconds.MAX_VALUE.plus(Seconds.ONE);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,256,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,257,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,258,// expected
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,262,public void testMinus_int() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,263,Seconds test2 = Seconds.seconds(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,264,Seconds result = test2.minus(3);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,265,"assertEquals(2, test2.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,266,"assertEquals(-1, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,268,"assertEquals(1, Seconds.ONE.minus(0).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,270,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,271,Seconds.MIN_VALUE.minus(1);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,272,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,273,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,274,// expected
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,278,public void testMinus_Seconds() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,279,Seconds test2 = Seconds.seconds(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,280,Seconds test3 = Seconds.seconds(3);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,281,Seconds result = test2.minus(test3);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,282,"assertEquals(2, test2.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,283,"assertEquals(3, test3.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,284,"assertEquals(-1, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,286,"assertEquals(1, Seconds.ONE.minus(Seconds.ZERO).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,287,"assertEquals(1, Seconds.ONE.minus((Seconds) null).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,289,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,290,Seconds.MIN_VALUE.minus(Seconds.ONE);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,291,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,292,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,293,// expected
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,297,public void testMultipliedBy_int() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,298,Seconds test = Seconds.seconds(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,299,"assertEquals(6, test.multipliedBy(3).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,300,"assertEquals(2, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,301,"assertEquals(-6, test.multipliedBy(-3).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,302,"assertSame(test, test.multipliedBy(1));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,304,Seconds halfMax = Seconds.seconds(Integer.MAX_VALUE / 2 + 1);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,305,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,306,halfMax.multipliedBy(2);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,307,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,308,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,309,// expected
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,313,public void testDividedBy_int() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,314,Seconds test = Seconds.seconds(12);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,315,"assertEquals(6, test.dividedBy(2).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,316,"assertEquals(12, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,317,"assertEquals(4, test.dividedBy(3).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,318,"assertEquals(3, test.dividedBy(4).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,319,"assertEquals(2, test.dividedBy(5).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,320,"assertEquals(2, test.dividedBy(6).getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,321,"assertSame(test, test.dividedBy(1));"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,323,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,324,Seconds.ONE.dividedBy(0);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,325,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,326,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,327,// expected
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,331,public void testNegate() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,332,Seconds test = Seconds.seconds(12);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,333,"assertEquals(-12, test.negate().getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,334,"assertEquals(12, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,336,try {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,337,Seconds.MIN_VALUE.negate();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,338,fail();
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,339,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,340,// expected
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,345,public void testAddToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,346,Seconds test = Seconds.seconds(26);
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,347,"LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,348,"LocalDateTime expected = new LocalDateTime(2006, 6, 1, 0, 0, 26, 0);"
True,JodaTime/src/test/org/joda/time/TestSeconds.java,JodaTime/src/test/org/joda/time/TestSeconds.java,349,"assertEquals(expected, date.plus(test));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,23,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,24,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,27,* This class is a Junit unit test for Weeks.
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,29,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,31,public class TestWeeks extends TestCase {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,32,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,33,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,36,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,37,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,40,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,41,return new TestSuite(TestWeeks.class);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,44,public TestWeeks(String name) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,45,super(name);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,48,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,51,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,55,public void testConstants() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,56,"assertEquals(0, Weeks.ZERO.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,57,"assertEquals(1, Weeks.ONE.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,58,"assertEquals(2, Weeks.TWO.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,59,"assertEquals(3, Weeks.THREE.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,60,"assertEquals(Integer.MAX_VALUE, Weeks.MAX_VALUE.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,61,"assertEquals(Integer.MIN_VALUE, Weeks.MIN_VALUE.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,65,public void testFactory_weeks_int() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,66,"assertSame(Weeks.ZERO, Weeks.weeks(0));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,67,"assertSame(Weeks.ONE, Weeks.weeks(1));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,68,"assertSame(Weeks.TWO, Weeks.weeks(2));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,69,"assertSame(Weeks.THREE, Weeks.weeks(3));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,70,"assertSame(Weeks.MAX_VALUE, Weeks.weeks(Integer.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,71,"assertSame(Weeks.MIN_VALUE, Weeks.weeks(Integer.MIN_VALUE));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,72,"assertEquals(-1, Weeks.weeks(-1).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,73,"assertEquals(4, Weeks.weeks(4).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,77,public void testFactory_weeksBetween_RInstant() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,78,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,79,"DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,80,"DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,82,"assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,83,"assertEquals(0, Weeks.weeksBetween(start, start).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,84,"assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,85,"assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,86,"assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,89,public void testFactory_weeksBetween_RPartial() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,90,"LocalDate start = new LocalDate(2006, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,91,"LocalDate end1 = new LocalDate(2006, 6, 30);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,92,"YearMonthDay end2 = new YearMonthDay(2006, 7, 21);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,94,"assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,95,"assertEquals(0, Weeks.weeksBetween(start, start).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,96,"assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,97,"assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,98,"assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,101,public void testFactory_weeksIn_RInterval() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,102,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,103,"DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,104,"DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,106,"assertEquals(0, Weeks.weeksIn((ReadableInterval) null).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,107,"assertEquals(3, Weeks.weeksIn(new Interval(start, end1)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,108,"assertEquals(0, Weeks.weeksIn(new Interval(start, start)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,109,"assertEquals(0, Weeks.weeksIn(new Interval(end1, end1)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,110,"assertEquals(6, Weeks.weeksIn(new Interval(start, end2)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,113,public void testFactory_standardWeeksIn_RPeriod() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,114,"assertEquals(0, Weeks.standardWeeksIn((ReadablePeriod) null).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,115,"assertEquals(0, Weeks.standardWeeksIn(Period.ZERO).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,116,"assertEquals(1, Weeks.standardWeeksIn(new Period(0, 0, 1, 0, 0, 0, 0, 0)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,117,"assertEquals(123, Weeks.standardWeeksIn(Period.weeks(123)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,118,"assertEquals(-987, Weeks.standardWeeksIn(Period.weeks(-987)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,119,"assertEquals(1, Weeks.standardWeeksIn(Period.days(13)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,120,"assertEquals(2, Weeks.standardWeeksIn(Period.days(14)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,121,"assertEquals(2, Weeks.standardWeeksIn(Period.days(15)).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,122,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,123,Weeks.standardWeeksIn(Period.months(1));
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,124,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,125,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,126,// expeceted
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,130,public void testFactory_parseWeeks_String() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,131,"assertEquals(0, Weeks.parseWeeks((String) null).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,132,"assertEquals(0, Weeks.parseWeeks(""P0W"").getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,133,"assertEquals(1, Weeks.parseWeeks(""P1W"").getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,134,"assertEquals(-3, Weeks.parseWeeks(""P-3W"").getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,135,"assertEquals(2, Weeks.parseWeeks(""P0Y0M2W"").getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,136,"assertEquals(2, Weeks.parseWeeks(""P2WT0H0M"").getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,137,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,138,"Weeks.parseWeeks(""P1Y1D"");"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,139,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,140,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,141,// expeceted
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,143,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,144,"Weeks.parseWeeks(""P1WT1H"");"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,145,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,146,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,147,// expeceted
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,152,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,153,Weeks test = Weeks.weeks(20);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,154,"assertEquals(20, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,157,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,158,Weeks test = Weeks.weeks(20);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,159,"assertEquals(DurationFieldType.weeks(), test.getFieldType());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,162,public void testGetPeriodType() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,163,Weeks test = Weeks.weeks(20);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,164,"assertEquals(PeriodType.weeks(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,168,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,169,Weeks test = Weeks.weeks(20);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,170,"assertEquals(""P20W"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,172,test = Weeks.weeks(-20);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,173,"assertEquals(""P-20W"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,177,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,178,Weeks test = Weeks.THREE;
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,180,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,181,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,182,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,183,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,184,oos.close();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,186,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,187,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,188,Weeks result = (Weeks) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,189,ois.close();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,191,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,195,public void testToStandardDays() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,196,Weeks test = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,197,Days expected = Days.days(14);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,198,"assertEquals(expected, test.toStandardDays());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,200,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,201,Weeks.MAX_VALUE.toStandardDays();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,202,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,203,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,204,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,208,public void testToStandardHours() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,209,Weeks test = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,210,Hours expected = Hours.hours(2 * 7 * 24);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,211,"assertEquals(expected, test.toStandardHours());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,213,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,214,Weeks.MAX_VALUE.toStandardHours();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,215,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,216,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,217,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,221,public void testToStandardMinutes() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,222,Weeks test = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,223,Minutes expected = Minutes.minutes(2 * 7 * 24 * 60);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,224,"assertEquals(expected, test.toStandardMinutes());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,226,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,227,Weeks.MAX_VALUE.toStandardMinutes();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,228,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,229,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,230,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,234,public void testToStandardSeconds() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,235,Weeks test = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,236,Seconds expected = Seconds.seconds(2 * 7 * 24 * 60 * 60);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,237,"assertEquals(expected, test.toStandardSeconds());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,239,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,240,Weeks.MAX_VALUE.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,241,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,242,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,243,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,247,public void testToStandardDuration() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,248,Weeks test = Weeks.weeks(20);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,249,Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,250,"assertEquals(expected, test.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,252,expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,253,"assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,257,public void testPlus_int() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,258,Weeks test2 = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,259,Weeks result = test2.plus(3);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,260,"assertEquals(2, test2.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,261,"assertEquals(5, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,263,"assertEquals(1, Weeks.ONE.plus(0).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,265,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,266,Weeks.MAX_VALUE.plus(1);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,267,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,268,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,269,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,273,public void testPlus_Weeks() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,274,Weeks test2 = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,275,Weeks test3 = Weeks.weeks(3);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,276,Weeks result = test2.plus(test3);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,277,"assertEquals(2, test2.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,278,"assertEquals(3, test3.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,279,"assertEquals(5, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,281,"assertEquals(1, Weeks.ONE.plus(Weeks.ZERO).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,282,"assertEquals(1, Weeks.ONE.plus((Weeks) null).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,284,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,285,Weeks.MAX_VALUE.plus(Weeks.ONE);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,286,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,287,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,288,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,292,public void testMinus_int() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,293,Weeks test2 = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,294,Weeks result = test2.minus(3);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,295,"assertEquals(2, test2.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,296,"assertEquals(-1, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,298,"assertEquals(1, Weeks.ONE.minus(0).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,300,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,301,Weeks.MIN_VALUE.minus(1);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,302,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,303,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,304,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,308,public void testMinus_Weeks() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,309,Weeks test2 = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,310,Weeks test3 = Weeks.weeks(3);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,311,Weeks result = test2.minus(test3);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,312,"assertEquals(2, test2.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,313,"assertEquals(3, test3.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,314,"assertEquals(-1, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,316,"assertEquals(1, Weeks.ONE.minus(Weeks.ZERO).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,317,"assertEquals(1, Weeks.ONE.minus((Weeks) null).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,319,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,320,Weeks.MIN_VALUE.minus(Weeks.ONE);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,321,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,322,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,323,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,327,public void testMultipliedBy_int() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,328,Weeks test = Weeks.weeks(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,329,"assertEquals(6, test.multipliedBy(3).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,330,"assertEquals(2, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,331,"assertEquals(-6, test.multipliedBy(-3).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,332,"assertSame(test, test.multipliedBy(1));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,334,Weeks halfMax = Weeks.weeks(Integer.MAX_VALUE / 2 + 1);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,335,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,336,halfMax.multipliedBy(2);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,337,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,338,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,339,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,343,public void testDividedBy_int() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,344,Weeks test = Weeks.weeks(12);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,345,"assertEquals(6, test.dividedBy(2).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,346,"assertEquals(12, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,347,"assertEquals(4, test.dividedBy(3).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,348,"assertEquals(3, test.dividedBy(4).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,349,"assertEquals(2, test.dividedBy(5).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,350,"assertEquals(2, test.dividedBy(6).getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,351,"assertSame(test, test.dividedBy(1));"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,353,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,354,Weeks.ONE.dividedBy(0);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,355,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,356,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,357,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,361,public void testNegate() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,362,Weeks test = Weeks.weeks(12);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,363,"assertEquals(-12, test.negate().getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,364,"assertEquals(12, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,366,try {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,367,Weeks.MIN_VALUE.negate();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,368,fail();
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,369,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,370,// expected
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,375,public void testAddToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,376,Weeks test = Weeks.weeks(3);
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,377,"LocalDate date = new LocalDate(2006, 6, 1);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,378,"LocalDate expected = new LocalDate(2006, 6, 22);"
True,JodaTime/src/test/org/joda/time/TestWeeks.java,JodaTime/src/test/org/joda/time/TestWeeks.java,379,"assertEquals(expected, date.plus(test));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,23,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,24,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,27,* This class is a Junit unit test for Years.
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,29,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,31,public class TestYears extends TestCase {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,32,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,33,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,36,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,37,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,40,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,41,return new TestSuite(TestYears.class);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,44,public TestYears(String name) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,45,super(name);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,48,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,51,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,55,public void testConstants() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,56,"assertEquals(0, Years.ZERO.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,57,"assertEquals(1, Years.ONE.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,58,"assertEquals(2, Years.TWO.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,59,"assertEquals(3, Years.THREE.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,60,"assertEquals(Integer.MAX_VALUE, Years.MAX_VALUE.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,61,"assertEquals(Integer.MIN_VALUE, Years.MIN_VALUE.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,65,public void testFactory_years_int() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,66,"assertSame(Years.ZERO, Years.years(0));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,67,"assertSame(Years.ONE, Years.years(1));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,68,"assertSame(Years.TWO, Years.years(2));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,69,"assertSame(Years.THREE, Years.years(3));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,70,"assertSame(Years.MAX_VALUE, Years.years(Integer.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,71,"assertSame(Years.MIN_VALUE, Years.years(Integer.MIN_VALUE));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,72,"assertEquals(-1, Years.years(-1).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,73,"assertEquals(4, Years.years(4).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,77,public void testFactory_yearsBetween_RInstant() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,78,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,79,"DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,80,"DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,82,"assertEquals(3, Years.yearsBetween(start, end1).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,83,"assertEquals(0, Years.yearsBetween(start, start).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,84,"assertEquals(0, Years.yearsBetween(end1, end1).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,85,"assertEquals(-3, Years.yearsBetween(end1, start).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,86,"assertEquals(6, Years.yearsBetween(start, end2).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,89,public void testFactory_yearsBetween_RPartial() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,90,"LocalDate start = new LocalDate(2006, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,91,"LocalDate end1 = new LocalDate(2009, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,92,"YearMonthDay end2 = new YearMonthDay(2012, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,94,"assertEquals(3, Years.yearsBetween(start, end1).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,95,"assertEquals(0, Years.yearsBetween(start, start).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,96,"assertEquals(0, Years.yearsBetween(end1, end1).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,97,"assertEquals(-3, Years.yearsBetween(end1, start).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,98,"assertEquals(6, Years.yearsBetween(start, end2).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,101,public void testFactory_yearsIn_RInterval() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,102,"DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,103,"DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,104,"DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,106,"assertEquals(0, Years.yearsIn((ReadableInterval) null).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,107,"assertEquals(3, Years.yearsIn(new Interval(start, end1)).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,108,"assertEquals(0, Years.yearsIn(new Interval(start, start)).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,109,"assertEquals(0, Years.yearsIn(new Interval(end1, end1)).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,110,"assertEquals(6, Years.yearsIn(new Interval(start, end2)).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,113,public void testFactory_parseYears_String() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,114,"assertEquals(0, Years.parseYears((String) null).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,115,"assertEquals(0, Years.parseYears(""P0Y"").getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,116,"assertEquals(1, Years.parseYears(""P1Y"").getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,117,"assertEquals(-3, Years.parseYears(""P-3Y"").getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,118,"assertEquals(2, Years.parseYears(""P2Y0M"").getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,119,"assertEquals(2, Years.parseYears(""P2YT0H0M"").getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,120,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,121,"Years.parseYears(""P1M1D"");"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,122,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,123,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,124,// expeceted
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,126,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,127,"Years.parseYears(""P1YT1H"");"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,128,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,129,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,130,// expeceted
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,135,public void testGetMethods() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,136,Years test = Years.years(20);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,137,"assertEquals(20, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,140,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,141,Years test = Years.years(20);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,142,"assertEquals(DurationFieldType.years(), test.getFieldType());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,145,public void testGetPeriodType() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,146,Years test = Years.years(20);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,147,"assertEquals(PeriodType.years(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,151,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,152,Years test = Years.years(20);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,153,"assertEquals(""P20Y"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,155,test = Years.years(-20);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,156,"assertEquals(""P-20Y"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,160,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,161,Years test = Years.THREE;
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,163,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,164,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,165,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,166,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,167,oos.close();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,169,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,170,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,171,Years result = (Years) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,172,ois.close();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,174,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,178,public void testPlus_int() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,179,Years test2 = Years.years(2);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,180,Years result = test2.plus(3);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,181,"assertEquals(2, test2.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,182,"assertEquals(5, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,184,"assertEquals(1, Years.ONE.plus(0).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,186,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,187,Years.MAX_VALUE.plus(1);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,188,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,189,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,190,// expected
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,194,public void testPlus_Years() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,195,Years test2 = Years.years(2);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,196,Years test3 = Years.years(3);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,197,Years result = test2.plus(test3);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,198,"assertEquals(2, test2.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,199,"assertEquals(3, test3.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,200,"assertEquals(5, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,202,"assertEquals(1, Years.ONE.plus(Years.ZERO).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,203,"assertEquals(1, Years.ONE.plus((Years) null).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,205,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,206,Years.MAX_VALUE.plus(Years.ONE);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,207,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,208,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,209,// expected
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,213,public void testMinus_int() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,214,Years test2 = Years.years(2);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,215,Years result = test2.minus(3);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,216,"assertEquals(2, test2.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,217,"assertEquals(-1, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,219,"assertEquals(1, Years.ONE.minus(0).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,221,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,222,Years.MIN_VALUE.minus(1);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,223,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,224,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,225,// expected
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,229,public void testMinus_Years() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,230,Years test2 = Years.years(2);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,231,Years test3 = Years.years(3);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,232,Years result = test2.minus(test3);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,233,"assertEquals(2, test2.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,234,"assertEquals(3, test3.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,235,"assertEquals(-1, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,237,"assertEquals(1, Years.ONE.minus(Years.ZERO).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,238,"assertEquals(1, Years.ONE.minus((Years) null).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,240,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,241,Years.MIN_VALUE.minus(Years.ONE);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,242,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,243,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,244,// expected
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,248,public void testMultipliedBy_int() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,249,Years test = Years.years(2);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,250,"assertEquals(6, test.multipliedBy(3).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,251,"assertEquals(2, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,252,"assertEquals(-6, test.multipliedBy(-3).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,253,"assertSame(test, test.multipliedBy(1));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,255,Years halfMax = Years.years(Integer.MAX_VALUE / 2 + 1);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,256,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,257,halfMax.multipliedBy(2);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,258,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,259,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,260,// expected
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,264,public void testDividedBy_int() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,265,Years test = Years.years(12);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,266,"assertEquals(6, test.dividedBy(2).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,267,"assertEquals(12, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,268,"assertEquals(4, test.dividedBy(3).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,269,"assertEquals(3, test.dividedBy(4).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,270,"assertEquals(2, test.dividedBy(5).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,271,"assertEquals(2, test.dividedBy(6).getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,272,"assertSame(test, test.dividedBy(1));"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,274,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,275,Years.ONE.dividedBy(0);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,276,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,277,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,278,// expected
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,282,public void testNegate() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,283,Years test = Years.years(12);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,284,"assertEquals(-12, test.negate().getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,285,"assertEquals(12, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,287,try {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,288,Years.MIN_VALUE.negate();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,289,fail();
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,290,} catch (ArithmeticException ex) {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,291,// expected
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,296,public void testAddToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,297,Years test = Years.years(3);
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,298,"LocalDate date = new LocalDate(2006, 6, 1);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,299,"LocalDate expected = new LocalDate(2009, 6, 1);"
True,JodaTime/src/test/org/joda/time/TestYears.java,JodaTime/src/test/org/joda/time/TestYears.java,300,"assertEquals(expected, date.plus(test));"

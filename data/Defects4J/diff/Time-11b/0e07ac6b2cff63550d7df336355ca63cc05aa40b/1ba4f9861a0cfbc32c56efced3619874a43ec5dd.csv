is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,66,mport java.text.ParseException;
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,85,mport org.joda.time.DateTimeField;
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,85,import org.joda.time.DurationField;
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,98,"EAR = 1,"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,99,"ONTH_OF_YEAR = 2,"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,100,"AY_OF_MONTH = 3,"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,101,"EEKYEAR = 4,"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,102,"EEK_OF_WEEKYEAR = 5,"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,103,"AY_OF_WEEK = 6,"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,104,"OUR_OF_DAY = 101,"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,105,"INUTE_OF_HOUR = 102,"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,106,ECOND_OF_MINUTE = 103;
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,97,"YEARS = 1,"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,98,"MONTHS = 2,"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,99,"DAYS = 3,"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,100,"WEEKYEARS = 4,"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,101,"WEEKS = 5,"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,102,"HOURS = 101,"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,103,"MINUTES = 102,"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,104,SECONDS = 103;
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,226,"ew FieldGroup(listener, ""Years"", YEAR),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,227,"ew FieldGroup(listener, ""Months"", MONTH_OF_YEAR),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,228,"ew FieldGroup(listener, ""Days"", DAY_OF_MONTH),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,229,"ew FieldGroup(listener, ""Hours"", HOUR_OF_DAY),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,230,"ew FieldGroup(listener, ""Minutes"", MINUTE_OF_HOUR),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,231,"ew FieldGroup(listener, ""Seconds"", SECOND_OF_MINUTE)"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,224,"new FieldGroup(listener, ""Years"", YEARS),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,225,"new FieldGroup(listener, ""Months"", MONTHS),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,226,"new FieldGroup(listener, ""Days"", DAYS),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,227,"new FieldGroup(listener, ""Hours"", HOURS),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,228,"new FieldGroup(listener, ""Minutes"", MINUTES),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,229,"new FieldGroup(listener, ""Seconds"", SECONDS)"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,235,"ew FieldGroup(listener, ""Weekyears"", WEEKYEAR),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,236,"ew FieldGroup(listener, ""Weeks"", WEEK_OF_WEEKYEAR),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,237,"ew FieldGroup(listener, ""Days"", DAY_OF_WEEK),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,238,"ew FieldGroup(listener, ""Hours"", HOUR_OF_DAY),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,239,"ew FieldGroup(listener, ""Minutes"", MINUTE_OF_HOUR),"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,240,"ew FieldGroup(listener, ""Seconds"", SECOND_OF_MINUTE)"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,233,"new FieldGroup(listener, ""Weekyears"", WEEKYEARS),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,234,"new FieldGroup(listener, ""Weeks"", WEEKS),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,235,"new FieldGroup(listener, ""Days"", DAYS),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,236,"new FieldGroup(listener, ""Hours"", HOURS),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,237,"new FieldGroup(listener, ""Minutes"", MINUTES),"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,238,"new FieldGroup(listener, ""Seconds"", SECONDS)"
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,266,atch (ParseException e) {
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,264,catch (IllegalArgumentException e) {
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,290,ateTimeField field;
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,288,DurationField field;
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,292,ase YEAR:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,293,ield = iChronology.year();
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,290,case YEARS:
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,291,field = iChronology.years();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,295,ase MONTH_OF_YEAR:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,296,ield = iChronology.monthOfYear();
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,293,case MONTHS:
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,294,field = iChronology.months();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,298,ase DAY_OF_MONTH:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,299,ield = iChronology.dayOfMonth();
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,296,case DAYS:
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,297,field = iChronology.days();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,301,ase WEEKYEAR:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,302,ield = iChronology.weekyear();
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,299,case WEEKYEARS:
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,300,field = iChronology.weekyears();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,304,ase WEEK_OF_WEEKYEAR:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,305,ield = iChronology.weekOfWeekyear();
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,302,case WEEKS:
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,303,field = iChronology.weeks();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,307,ase DAY_OF_WEEK:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,308,ield = iChronology.dayOfWeek();
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,305,case HOURS:
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,306,field = iChronology.hours();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,310,ase HOUR_OF_DAY:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,311,ield = iChronology.hourOfDay();
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,308,case MINUTES:
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,309,field = iChronology.minutes();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,313,ase MINUTE_OF_HOUR:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,314,ield = iChronology.minuteOfHour();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,315,reak;
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,316,ase SECOND_OF_MINUTE: default:
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,317,ield = iChronology.secondOfMinute();
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,311,case SECONDS: default:
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,312,field = iChronology.seconds();
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,324,"ong difference = field.getDifference(minuend, subtrahend);"
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,319,"long difference = field.getDifferenceAsLong(minuend, subtrahend);"
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,61,mport java.awt.*;
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,62,mport java.awt.event.*;
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,63,mport javax.swing.*;
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,64,mport javax.swing.table.*;
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,65,mport java.io.*;
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,66,mport java.util.*;
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,67,mport java.text.*;
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,69, Import required Joda packages.
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,71,mport org.joda.time.*;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,61,import java.awt.Dimension;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,62,import java.awt.Toolkit;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,63,import java.awt.event.ActionEvent;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,64,import java.awt.event.WindowAdapter;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,65,import java.awt.event.WindowEvent;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,66,import java.io.BufferedReader;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,67,import java.io.File;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,68,import java.io.FileReader;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,69,import java.io.IOException;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,70,import java.io.PrintStream;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,71,import java.text.DateFormat;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,72,import java.text.ParseException;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,73,import java.text.SimpleDateFormat;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,74,import java.util.ArrayList;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,75,import java.util.Calendar;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,76,import java.util.Date;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,77,import java.util.GregorianCalendar;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,78,import java.util.TimeZone;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,80,import javax.swing.AbstractAction;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,81,import javax.swing.Action;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,82,import javax.swing.JFileChooser;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,83,import javax.swing.JFrame;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,84,import javax.swing.JMenu;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,85,import javax.swing.JMenuBar;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,86,import javax.swing.JMenuItem;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,87,import javax.swing.JScrollPane;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,88,import javax.swing.JTable;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,89,import javax.swing.WindowConstants;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,90,import javax.swing.table.TableColumn;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,91,import javax.swing.table.TableColumnModel;
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,93,import org.joda.time.DateTime;
False,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,384,atch(ParseException pe)
True,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,JodaTime/src/example/org/joda/example/time/DateTimeBrowser.java,406,catch(IllegalArgumentException pe)
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,67,mport org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,113,checkJISOConstructor1();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,118,checkJISOConstructor2();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,123,checkJISOConstructor3();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,128,checkJISOGetYear();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,133,//        checkJISOGetMonth();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,138,//        checkJISOGetDay();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,143,checkJISOGetHour();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,148,checkJISOSetYear();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,153,checkJISOSetGetYear();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,158,checkJISOSetHour();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,163,checkJISOSetGetHour();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,169,long jisoTotal = 0;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,177,"} else if (res.object.equals(""JISO"")) {"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,178,jisoTotal += res.avg;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,187,"System.out.println(""JISO: "" + jisoTotal);"
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,184,"tart(""Joda"", ""new"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,199,"start(""Joda"", ""new()"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,208,private void checkJISOConstructor1() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,209,int COUNT = COUNT_SLOW;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,210,DateTime dt = new DateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,211,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,212,"start(""JISO"", ""new()"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,213,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,214,dt = new DateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,215,"if (dt == null) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,217,end(COUNT);
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,197,"tart(""GCal"", ""new"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,225,"start(""GCal"", ""new()"");"
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,210,"tart(""Date"", ""new"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,238,"start(""Date"", ""new()"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,263,private void checkJISOConstructor2() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,264,int COUNT = COUNT_VERY_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,265,DateTime dt = new DateTime(12345L);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,266,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,267,"start(""JISO"", ""new(millis)"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,268,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,269,dt = new DateTime(12345L);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,270,"if (dt == null) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,272,end(COUNT);
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,267,"ateTime dt = new DateTime(12345L, GJChronology.getInstance());"
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,268,utableDateTime mdt = new MutableDateTime(ISOChronology.getInstance());
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,308,"DateTime dt = new DateTime(1972, 10, 1, 0, 0, 0, 0,"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,309,GJChronology.getInstance());
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,272,dt = new MutableDateTime(ISOChronology.getInstance());
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,273,"dt.setDate(1972, 10, 1);"
False,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,274,t = mdt.toDateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,313,"dt = new DateTime(1972, 10, 1, 0, 0, 0, 0,"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,314,GJChronology.getInstance());
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,315,"if (dt == null) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,317,end(COUNT);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,321,private void checkJISOConstructor3() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,322,int COUNT = COUNT_SLOW;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,323,"DateTime dt = new DateTime(1972, 10, 1, 0, 0, 0, 0);"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,324,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,325,"start(""JISO"", ""new(YMD)"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,326,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,327,"dt = new DateTime(1972, 10, 1, 0, 0, 0, 0);"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,376,private void checkJISOGetYear() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,377,int COUNT = COUNT_VERY_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,378,DateTime dt = new DateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,379,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,380,"start(""JISO"", ""getYear"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,381,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,382,int val = dt.getYear();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,383,"if (val == 0) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,385,end(COUNT);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,431,private void checkJISOGetMonth() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,432,int COUNT = COUNT_VERY_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,433,DateTime dt = new DateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,434,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,435,"start(""JISO"", ""getMonth"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,436,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,437,int val = dt.getMonthOfYear();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,438,"if (val == 0) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,440,end(COUNT);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,486,private void checkJISOGetDay() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,487,int COUNT = COUNT_VERY_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,488,DateTime dt = new DateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,489,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,490,"start(""JISO"", ""getDay"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,491,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,492,int val = dt.getDayOfMonth();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,493,"if (val == 0) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,495,end(COUNT);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,541,private void checkJISOGetHour() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,542,int COUNT = COUNT_VERY_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,543,DateTime dt = new DateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,544,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,545,"start(""JISO"", ""getHour"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,546,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,547,int val = dt.getHourOfDay();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,548,"if (val == -1) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,550,end(COUNT);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,597,private void checkJISOSetYear() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,598,int COUNT = COUNT_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,599,// Is it fair to use only MutableDateTime here? You decide.
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,600,MutableDateTime dt = new MutableDateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,601,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,602,"start(""JISO"", ""setYear"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,603,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,604,dt.setYear(1972);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,605,"if (dt == null) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,607,end(COUNT);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,655,private void checkJISOSetGetYear() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,656,int COUNT = COUNT_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,657,// Is it fair to use only MutableDateTime here? You decide.
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,658,MutableDateTime dt = new MutableDateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,659,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,660,"start(""JISO"", ""setGetYear"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,661,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,662,dt.setYear(1972);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,663,int val = dt.getYear();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,664,"if (dt == null) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,666,end(COUNT);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,715,private void checkJISOSetHour() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,716,int COUNT = COUNT_VERY_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,717,// Is it fair to use only MutableDateTime here? You decide.
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,718,MutableDateTime dt = new MutableDateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,719,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,720,"start(""JISO"", ""setHour"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,721,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,722,dt.setHourOfDay(13);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,723,"if (dt == null) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,725,end(COUNT);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,773,private void checkJISOSetGetHour() {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,774,int COUNT = COUNT_VERY_FAST;
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,775,// Is it fair to use only MutableDateTime here? You decide.
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,776,MutableDateTime dt = new MutableDateTime();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,777,for (int i = 0; i < AVERAGE; i++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,778,"start(""JISO"", ""setGetHour"");"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,779,for (int j = 0; j < COUNT; j++) {
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,780,dt.setHourOfDay(13);
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,781,int val = dt.getHourOfDay();
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,782,"if (dt == null) {System.out.println(""Anti optimise"");}"
True,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,JodaTime/src/example/org/joda/example/time/DateTimePerformance.java,784,end(COUNT);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,56,mport java.util.Calendar;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,57,mport java.util.Date;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,58,mport java.util.GregorianCalendar;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,56,import java.io.Serializable;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,61,mport org.joda.time.chrono.buddhist.BuddhistChronology;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,62,mport org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,60,import org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,61,import org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,68, AbstractDateTime provides the common behaviour for immutable datetime
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,69, classes.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,66,* AbstractDateTime provides the common behaviour for datetime classes.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,71, This class should generally not be used directly by API users. The
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,72, {@link ReadableDateTime} interface should be used when different
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,68,* This class should generally not be used directly by API users.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,69,* The {@link ReadableDateTime} interface should be used when different
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,71,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,72,* AbstractDateTime subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,75,* @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,79,mplements ReadableDateTime {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,79,"implements ReadableDateTime, Serializable {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,81,/ The following package-private static methods are used in the
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,82,"/ constructors for DateTime, DateOnly, TimeOnly, and MutableDateTime."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,81,static final long serialVersionUID = 597501475466447837L;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,85, Validates the parameters and returns a suitable chronology.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,84,* Selects the correct chronology to use for the chronology based constructors
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,85,* on subclasses.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,89, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,91,tatic Chronology selectChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,90,private static Chronology selectChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,93,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,92,return ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,99, Validates the parameters and returns a suitable chronology. If the
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,100," instant's chronology is null, ISOChronology in the default time zone is"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,101, returned.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,103," @param instant  the instant to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,104, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,105, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,107,tatic Chronology selectChronology(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,108,f (instant == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,109,"hrow new IllegalArgumentException(""The ReadableInstant must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,111,hronology chrono = instant.getChronology();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,112,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,113,hrono = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,115,eturn chrono;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,97,/** The millis from 1970-01-01T00:00:00Z */
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,98,private long iMillis;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,99,/** The chronology to use */
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,100,private Chronology iChronology;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,102,// Constructors
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,119, Validates the parameters and returns a suitable chronology. If the
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,120," instant's chronology is null, ISOChronology in the given time zone is"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,121, returned.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,123," @param instant  the instant to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,124," @param zone  the time zone to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,125, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,126, @throws IllegalArgumentException if the instant or zone is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,105,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,106,* using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,128,"tatic Chronology selectChronology(ReadableInstant instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,129,hronology chrono = selectChronology(instant);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,130,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,131,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,133,f (chrono.getDateTimeZone() != zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,134,hrono = chrono.withDateTimeZone(zone);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,135,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,136,hrono = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,139,eturn chrono;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,108,protected AbstractDateTime() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,109,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,110,iChronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,111,iMillis = System.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,143, Validates the parameters and returns a suitable chronology.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,115,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,116,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,117,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,118,"* If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,145," @param instant  the instant to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,146," @param chrono  the chronology to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,147, @return the passed in chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,148, @throws IllegalArgumentException if the instant or chronology is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,120,"* @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,150,"tatic Chronology selectChronology(ReadableInstant instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,151,f (instant == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,152,"hrow new IllegalArgumentException(""The ReadableInstant must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,154,eturn selectChronology(chrono);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,122,protected AbstractDateTime(final DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,123,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,124,iChronology = ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,125,iMillis = System.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,158, Validates the parameters and returns a suitable chronology. If the
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,159," instant's chronology is null, ISOChronology in UTC is returned."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,129,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,130,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,131,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,132,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,133,* in the default time zone is used.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,161, <p>Note: This method does not guarantee returning a UTC chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,163," @param instant  the instant to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,164, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,165, @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,135,"* @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,167,tatic Chronology selectChronologyUTC(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,168,f (instant == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,169,"hrow new IllegalArgumentException(""The ReadableInstant must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,171,hronology chrono = instant.getChronology();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,172,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,173,hrono = ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,175,eturn chrono;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,137,protected AbstractDateTime(final Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,138,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,139,iChronology = selectChronology(chronology);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,140,iMillis = System.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,179, Validates the parameters and returns a suitable chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,181," @param date  the date to be validated, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,182, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,183, @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,145,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,146,* using <code>ISOChronology</code> in the default time zone.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,148,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,185,tatic Chronology selectChronology(Date date) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,186,"eturn selectChronology(date, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,150,protected AbstractDateTime(final long instant) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,151,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,152,iChronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,153,iMillis = instant;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,190, Validates the parameters and returns a suitable chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,192," @param date  the date to be validated, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,193," @param zone  the zone to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,194, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,195, @throws IllegalArgumentException if the date or zone is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,157,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,158,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,159,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,160,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,162,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,163,"* @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,197,"tatic Chronology selectChronology(Date date, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,198,"eturn selectChronology(date, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,165,"protected AbstractDateTime(final long instant, final DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,166,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,167,iChronology = ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,168,iMillis = instant;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,202, Validates the parameters and returns a suitable chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,204," @param date  the date to be validated, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,205," @param chrono  the chronology to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,206, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,207, @throws IllegalArgumentException if the date or chronology is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,172,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,173,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,174,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,175,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,176,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,178,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,179,"* @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,209,"tatic Chronology selectChronology(Date date, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,210,f (date == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,211,"hrow new IllegalArgumentException(""The Date must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,213,eturn selectChronology(chrono);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,181,"protected AbstractDateTime(final long instant, final Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,182,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,183,iChronology = selectChronology(chronology);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,184,iMillis = instant;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,217, Validates the parameters and returns a suitable chronology. The method
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,218, is aware of GregorianCalendar and BuddhistCalendar and maps them
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,219, accordingly. Other calendars map to ISO.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,221," @param calendar  the calendar to be used, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,222, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,223, @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,189,* Constructs an instance from an Object that represents a datetime.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,190,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,191,"* If the object contains no chronology, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,192,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,193,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,194,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,195,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,197,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,198,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,225,tatic Chronology selectChronology(Calendar calendar) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,226,f (calendar == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,227,"hrow new IllegalArgumentException(""The Calendar must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,229,ateTimeZone zone = null;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,230,ry {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,231,one = DateTimeZone.getInstance(calendar.getTimeZone());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,232, catch (IllegalArgumentException ex) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,233,eturn ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,235,"eturn selectChronology(calendar, zone);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,239, Validates the parameters and returns a suitable chronology. The method
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,240, is aware of GregorianCalendar and BuddhistCalendar and maps them
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,241, accordingly. Other calendars map to ISO.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,243," @param calendar  the calendar to be used, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,244, @param zone  the time zone to use
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,245, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,246, @throws IllegalArgumentException if the calendar is null
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,248,"tatic Chronology selectChronology(Calendar calendar, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,249,f (calendar == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,250,"hrow new IllegalArgumentException(""The Calendar must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,252,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,253,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,255,f (calendar instanceof GregorianCalendar) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,256,regorianCalendar gc = (GregorianCalendar) calendar;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,257,"eturn GJChronology.getInstance(zone, gc.getGregorianChange().getTime(), false);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,258," else if (calendar.getClass().getName().endsWith("".BuddhistCalendar"")) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,259,eturn BuddhistChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,260, else {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,261,eturn ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,200,protected AbstractDateTime(final Object instant) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,201,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,202,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,203,iChronology = converter.getChronology(instant);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,204,iMillis = converter.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,266, Validates the parameters and returns a suitable chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,268," @param calendar  the calendar to be used, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,269," @param chrono  the chronology to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,270, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,271, @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,208,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,209,* forcing the time zone to that specified.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,210,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,211,"* If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,212,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,213,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,214,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,215,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,217,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,218,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,219,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,273,"tatic Chronology selectChronology(Calendar calendar, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,274,f (calendar == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,275,"hrow new IllegalArgumentException(""The Calendar must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,277,eturn selectChronology(chrono);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,221,"protected AbstractDateTime(final Object instant, final DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,222,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,223,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,224,"iChronology = converter.getChronology(instant, zone);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,225,"iMillis = converter.getInstantMillis(instant, zone);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,281, Validates the parameters and returns a suitable chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,283," @param string  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,284, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,285, @throws IllegalArgumentException if the string is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,229,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,230,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,231,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,232,"* If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,233,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,234,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,235,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,237,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,238,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,239,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,287,tatic Chronology selectChronology(String str) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,288,"eturn selectChronology(str, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,241,"protected AbstractDateTime(final Object instant, final Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,242,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,243,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,244,"iChronology = converter.getChronology(instant, chronology);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,245,"iMillis = converter.getInstantMillis(instant, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,292, Validates the parameters and returns a suitable chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,294," @param string  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,295," @param zone  the zone to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,296, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,297, @throws IllegalArgumentException if the string or zone is null
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,299,"tatic Chronology selectChronology(String str, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,300,"eturn selectChronology(str, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,250,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,251,* using <code>ISOChronology</code> in the default time zone.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,253,* @param year  the year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,254,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,255,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,256,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,257,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,258,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,259,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,261,protected AbstractDateTime(
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,262,"final int year,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,263,"final int monthOfYear,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,264,"final int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,265,"final int hourOfDay,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,266,"final int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,267,"final int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,268,final int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,269,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,270,iChronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,271,iMillis = iChronology.getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,272,"year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,304, Validates the parameters and returns a suitable chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,306," @param str  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,307," @param chrono  the chronology to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,308, @return a suitable Chronology
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,309, @throws IllegalArgumentException if the string or chronology is null
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,311,"tatic Chronology selectChronology(String str, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,312,f (str == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,313,"hrow new IllegalArgumentException(""The String must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,315,eturn selectChronology(chrono);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,318,ublic AbstractDateTime() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,276,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,277,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,278,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,279,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,281,* @param year  the year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,282,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,283,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,284,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,285,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,286,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,287,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,288,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,290,protected AbstractDateTime(
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,291,"final int year,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,292,"final int monthOfYear,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,293,"final int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,294,"final int hourOfDay,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,295,"final int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,296,"final int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,297,"final int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,298,final DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,300,iChronology = ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,301,iMillis = iChronology.getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,302,"year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,322,/ Date field access
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,325, Get the day of week field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,306,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,307,* using the specified chronology.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,327, The values for the day of week are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,329, @return the day of week
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,331,ublic final int getDayOfWeek() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,332,eturn getChronology().dayOfWeek().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,309,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,310,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,312,* @param year  the year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,313,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,314,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,315,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,316,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,317,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,318,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,319,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,321,protected AbstractDateTime(
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,322,"final int year,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,323,"final int monthOfYear,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,324,"final int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,325,"final int hourOfDay,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,326,"final int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,327,"final int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,328,"final int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,329,final Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,330,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,331,iChronology = selectChronology(chronology);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,332,iMillis = iChronology.getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,333,"year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,336,// Accessors
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,336, Get the day of month field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,339,* Gets the milliseconds of the datetime instant from the Java epoch
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,340,* of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,338, @return the day of month
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,342,* @return the number of milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,340,ublic final int getDayOfMonth() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,341,eturn getChronology().dayOfMonth().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,344,public final long getMillis() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,345,return iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,345, Get the day of year field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,349,* Gets the milliseconds of the datetime instant from the Java epoch
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,350,* of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,347, @return the day of year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,352,* @param base ignored
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,353,* @return the number of milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,349,ublic final int getDayOfYear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,350,eturn getChronology().dayOfYear().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,355,public final long getMillis(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,356,return iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,354, Get the week of weekyear field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,360,* Gets the milliseconds of the datetime instant from the Java epoch
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,361,* of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,356, @return the week of a week based year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,363,* @param base ignored
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,364,* @param zone ignored
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,365,* @return the number of milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,358,ublic final int getWeekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,359,eturn getChronology().weekOfWeekyear().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,367,"public final long getMillis(ReadableInstant base, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,368,return iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,363, Get the weekyear field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,372,* Gets the chronology of the datetime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,365, @return the year of a week based year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,374,* @return the Chronology that the datetime is using
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,367,ublic final int getWeekyear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,368,eturn getChronology().weekyear().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,376,public final Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,377,return iChronology;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,380,// Date field access
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,372, Get the month of year field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,383,* Get the era field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,374, @return the month of year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,385,* @return the era
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,376,ublic final int getMonthOfYear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,377,eturn getChronology().monthOfYear().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,387,public final int getEra() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,388,return getChronology().era().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,381, Get the year field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,392,* Get the year of era field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,383, @return the year
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,394,* @return the year of era
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,385,ublic final int getYear() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,386,eturn getChronology().year().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,396,public final int getCenturyOfEra() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,397,return getChronology().centuryOfEra().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,408, Get the year of era field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,419,* Get the year field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,410, @return the year of era
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,421,* @return the year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,412,ublic final int getCenturyOfEra() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,413,eturn getChronology().centuryOfEra().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,423,public final int getYear() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,424,return getChronology().year().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,417, Get the era field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,428,* Get the weekyear field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,419, @return the era
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,421,ublic final int getEra() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,422,eturn getChronology().era().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,425,/ Time field access
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,428, Get the millis of second field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,430, @return the millis of second
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,430,* @return the year of a week based year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,432,ublic final int getMillisOfSecond() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,433,eturn getChronology().millisOfSecond().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,432,public final int getWeekyear() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,433,return getChronology().weekyear().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,437, Get the millis of day field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,439, @return the millis of day
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,437,* Get the month of year field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,439,* @return the month of year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,441,ublic final int getMillisOfDay() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,442,eturn getChronology().millisOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,441,public final int getMonthOfYear() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,442,return getChronology().monthOfYear().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,446, Get the second of minute field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,448, @return the second of minute
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,446,* Get the week of weekyear field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,448,* @return the week of a week based year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,450,ublic final int getSecondOfMinute() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,451,eturn getChronology().secondOfMinute().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,450,public final int getWeekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,451,return getChronology().weekOfWeekyear().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,455, Get the second of day field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,457, @return the second of day
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,455,* Get the day of year field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,457,* @return the day of year
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,459,ublic final int getSecondOfDay() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,460,eturn getChronology().secondOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,459,public final int getDayOfYear() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,460,return getChronology().dayOfYear().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,464, Get the minute of hour field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,466, @return the minute of hour
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,464,* Get the day of month field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,465,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,466,* The values for the day of month are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,468,* @return the day of month
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,468,ublic final int getMinuteOfHour() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,469,eturn getChronology().minuteOfHour().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,470,public final int getDayOfMonth() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,471,return getChronology().dayOfMonth().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,473, Get the minute of day field value.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,475, @return the minute of day
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,475,* Get the day of week field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,476,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,477,* The values for the day of week are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,479,* @return the day of week
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,477,ublic final int getMinuteOfDay() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,478,eturn getChronology().minuteOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,481,public final int getDayOfWeek() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,482,return getChronology().dayOfWeek().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,485,// Time field access
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,490,/ Conversion
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,493, Get this object as a DateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,495, @return a DateTime using the same millis
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,497,* Get the minute of day field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,499,* @return the minute of day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,497,ublic final DateTime toDateTime() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,498,f (this instanceof DateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,499,eturn (DateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,501,eturn new DateTime(this);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,501,public final int getMinuteOfDay() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,502,return getChronology().minuteOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,505, Get this object as a DateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,507, @param zone time zone to apply
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,508, @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,509, @throws IllegalArgumentException if the time zone is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,506,* Get the minute of hour field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,508,* @return the minute of hour
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,511,ublic final DateTime toDateTime(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,512,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,513,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,515,f (this instanceof DateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,516,ateTime dt = (DateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,517,f (dt.getDateTimeZone() == zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,518,eturn dt;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,521,"eturn new DateTime(this, zone);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,510,public final int getMinuteOfHour() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,511,return getChronology().minuteOfHour().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,525, Get this object as a DateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,527, @param chronology chronology to apply
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,528, @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,529, @throws IllegalArgumentException if the chronology is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,515,* Get the second of day field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,517,* @return the second of day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,531,ublic final DateTime toDateTime(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,532,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,533,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,535,f (this instanceof DateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,536,ateTime dt = (DateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,537,f (dt.getChronology() == chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,538,eturn dt;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,541,"eturn new DateTime(this, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,545, Get this object as a trusted ISO DateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,547, @return an ISO DateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,549,ublic final DateTime toISODateTime() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,550,f (this instanceof DateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,551,ateTime dt = (DateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,552,f (dt.getChronology() instanceof ISOChronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,553,/ Verify that the time zone is trusted.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,554,ateTimeZone tz = dt.getDateTimeZone();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,555,ateTimeZone trusted = DateTimeZone.getInstance(tz.getID());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,556,f (tz == trusted) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,557,eturn dt;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,559,"eturn new DateTime(this, trusted);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,562,eturn new DateTime(this);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,519,public final int getSecondOfDay() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,520,return getChronology().secondOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,566, Get this object as a trusted ISO DateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,568, @param zone time zone to apply
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,569, @return an ISO DateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,570, @throws IllegalArgumentException if the time zone is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,524,* Get the second of minute field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,526,* @return the second of minute
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,572,ublic final DateTime toISODateTime(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,573,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,574,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,576,f (this instanceof DateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,577,ateTime dt = (DateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,578,f (dt.getChronology() instanceof ISOChronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,579,f (dt.getDateTimeZone() == zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,580,eturn dt;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,584,"eturn new DateTime(this, zone);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,528,public final int getSecondOfMinute() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,529,return getChronology().secondOfMinute().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,588, Get this object as a MutableDateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,590, @return a MutableDateTime using the same millis
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,533,* Get the millis of day field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,535,* @return the millis of day
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,592,ublic final MutableDateTime toMutableDateTime() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,593,f (this instanceof MutableDateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,594,eturn (MutableDateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,596,eturn new MutableDateTime(this);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,537,public final int getMillisOfDay() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,538,return getChronology().millisOfDay().get(getMillis());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,600, Get this object as a MutableDateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,602, @param zone time zone to apply
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,603, @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,604, @throws IllegalArgumentException if the time zone is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,542,* Get the millis of second field value.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,544,* @return the millis of second
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,606,ublic final MutableDateTime toMutableDateTime(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,607,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,608,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,610,f (this instanceof MutableDateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,611,utableDateTime mdt = (MutableDateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,612,f (mdt.getDateTimeZone() == zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,613,eturn mdt;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,616,"eturn new MutableDateTime(this, zone);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,546,public final int getMillisOfSecond() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,547,return getChronology().millisOfSecond().get(getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,550,// Output
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,620, Get this object as a MutableDateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,622, @param chronology chronology to apply
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,623, @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,624, @throws IllegalArgumentException if the chronology is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,553,* Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,555,* @return ISO8601 time formatted string.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,626,ublic final MutableDateTime toMutableDateTime(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,627,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,628,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,630,f (this instanceof MutableDateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,631,utableDateTime mdt = (MutableDateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,632,f (mdt.getChronology() == chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,633,eturn mdt;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,636,"eturn new MutableDateTime(this, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,640, Get this object as a trusted ISO MutableDateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,642, @return an ISO MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,644,ublic final MutableDateTime toISOMutableDateTime() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,645,f (this instanceof DateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,646,utableDateTime mdt = (MutableDateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,647,f (mdt.getChronology() instanceof ISOChronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,648,/ Verify that the time zone is trusted.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,649,ateTimeZone tz = mdt.getDateTimeZone();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,650,ateTimeZone trusted = DateTimeZone.getInstance(tz.getID());
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,651,f (tz == trusted) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,652,eturn mdt;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,654,"eturn new MutableDateTime(this, trusted);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,657,eturn new MutableDateTime(this);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,557,public String toString() {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,558,return ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,661, Get this object as a trusted ISO MutableDateTime.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,663, @param zone time zone to apply
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,664, @return an ISO MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,665, @throws IllegalArgumentException if the time zone is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,562,* Output the instant using the specified format pattern.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,564,* @param pattern  the pattern specification
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,565,* @throws IllegalArgumentException  if pattern is invalid
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,566,* @see  org.joda.time.format.DateTimeFormat
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,667,ublic final MutableDateTime toISOMutableDateTime(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,668,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,669,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,671,f (this instanceof MutableDateTime) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,672,utableDateTime mdt = (MutableDateTime)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,673,f (mdt.getChronology() instanceof ISOChronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,674,f (mdt.getDateTimeZone() == zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,675,eturn mdt;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,679,"eturn new MutableDateTime(this, zone);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,568,public String toString(String pattern) throws IllegalArgumentException {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,569,return DateTimeFormat.getInstance(getChronology()).forPattern(pattern).print(this);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,683, Get this object as a DateOnly.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,685, @return a DateOnly using the same millis
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,573,* Output the instant using the specified format pattern.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,575,* @param pattern  the pattern specification
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,576,"* @param locale  Locale to use, or default if null"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,577,* @throws IllegalArgumentException  if pattern is invalid
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,578,* @see  org.joda.time.format.DateTimeFormat
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,688,ublic final DateOnly toDateOnly() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,689,f (this instanceof DateOnly) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,690,eturn (DateOnly)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,692,eturn new DateOnly(this);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,580,"public String toString(String pattern, Locale locale) throws IllegalArgumentException {"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,581,"return DateTimeFormat.getInstance(getChronology(), locale).forPattern(pattern).print(this);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,697, Get this object as a DateOnly.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,699, @param chronology chronology to apply
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,700, @return a DateOnly using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,701, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,704,ublic final DateOnly toDateOnly(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,705,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,706,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,708,hronology = chronology.withUTC();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,709,f (this instanceof DateOnly) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,710,ateOnly d = (DateOnly)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,711,f (d.getChronology() == chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,712,eturn d;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,715,"eturn new DateOnly(this, chronology);"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,585,"* Set the value as the number of miliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,586,* 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,587,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,588,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,589,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,590,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,592,* @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,593,* instant to
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,594,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,596,protected void setMillis(long instant) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,597,iMillis = instant;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,720, Get this object as a TimeOnly.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,601,* Set the value from an Object representing an instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,602,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,603,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,604,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,722, @return a TimeOnly using the same millis
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,606,* @param instant  an object representing an instant
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,607,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,725,ublic final TimeOnly toTimeOnly() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,726,f (this instanceof TimeOnly) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,727,eturn (TimeOnly)this;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,609,protected void setMillis(Object instant) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,610,"// Don't set iMillis directly, as it may provide a backdoor to"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,611,// immutable subclasses.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,612,if (instant instanceof ReadableInstant) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,613,setMillis(((ReadableInstant) instant).getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,614,} else {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,615,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,616,setMillis(converter.getInstantMillis(instant));
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,729,eturn new TimeOnly(this);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,734, Get this object as a TimeOnly.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,621,* Set the chronology of the datetime.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,622,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,623,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,624,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,625,* all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,736, @param chronology chronology to apply
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,737, @return a TimeOnly using the same millis
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,738, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,741,ublic final TimeOnly toTimeOnly(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,742,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,743,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,745,hronology = chronology.withUTC();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,746,f (this instanceof TimeOnly) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,747,imeOnly t = (TimeOnly)this;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,748,f (t.getChronology() == chronology) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,749,eturn t;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,752,"eturn new TimeOnly(this, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,756,/ Output
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,759, Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,761, @return ISO8601 time formatted string.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,627,"* @param chronology  the chronology to use, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,628,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,763,ublic String toString() {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,764,eturn ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,630,protected void setChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,631,iChronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,768, Output the instant using the specified format pattern.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,635,* Sets the time zone of the datetime via the chronology. Setting the time
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,636,* zone does not affect the millisecond value of this instant.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,770, @param pattern  the pattern specification
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,771, @see org.joda.time.format.DateTimeFormatterBuilder#appendPattern(java.lang.String)
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,638,"* @param zone  the time zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,639,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,640,* @see #moveDateTimeZone
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,773,ublic String toString(String pattern) throws IllegalArgumentException {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,774,hronology chrono = getChronology();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,775,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,776,hrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,642,protected void setDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,643,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,644,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,646,if (iChronology.getDateTimeZone() != zone) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,647,"// Don't set iChronology directly, as it may provide a backdoor to"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,648,// immutable subclasses.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,649,setChronology(iChronology.withDateTimeZone(zone));
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,778,eturn DateTimeFormat.getInstance(chrono).forPattern(pattern).print(this);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,782, Output the instant using the specified format pattern.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,654,* Moves the time zone of the datetime via the chronology. Moving the time
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,655,* zone alters the millisecond value of this instant such that it is
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,656,* relative to the new time zone.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,784, @param pattern  the pattern specification
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,785," @param locale  the Locale to use, must not be null"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,786, @see org.joda.time.format.DateTimeFormatterBuilder#appendPattern(java.lang.String)
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,787, @throws IllegalArgumentException if the locale is null
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,658,"* @param zone  the time zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,659,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,660,* @see #setDateTimeZone
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,789,"ublic String toString(String pattern, Locale locale) throws IllegalArgumentException {"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,790,f (locale == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,791,"hrow new IllegalArgumentException(""The Locale must not be null"");"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,793,hronology chrono = getChronology();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,794,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,795,hrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,662,protected void moveDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,663,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,664,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,666,DateTimeZone currentZone = iChronology.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,667,if (currentZone != zone) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,668,long millis = iMillis;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,669,millis += currentZone.getOffset(millis);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,670,millis -= zone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,671,"// Don't set iChronology and iMillis directly, as it may provide a"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,672,// backdoor to immutable subclasses.
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,673,setChronology(iChronology.withDateTimeZone(zone));
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,674,setMillis(millis);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,797,"eturn DateTimeFormat.getInstance(chrono, locale).forPattern(pattern).print(this);"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,10,* are met:
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,56,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,57,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,60,* AbstractDateTimeFieldProperty is a base class for binding a
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,61,* ReadableDateTime to a DateTimeField.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,62,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,63,* It allows the date and time manipulation code to be field based yet
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,64,* still easy to use.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,65,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,66,"* AbstractDateTimeFieldPropery itself is thread-safe and immutable, but the"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,67,* ReadableDateTime being operated on may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,69,* @see ReadableInstant
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,70,* @see DateTimeField
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,72,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,73,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,74,* @since 1.0
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,76,public abstract class AbstractDateTimeFieldProperty implements Serializable {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,78,static final long serialVersionUID = 1971226328211649661L;
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,81,* Constructor.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,83,public AbstractDateTimeFieldProperty() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,84,super();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,89,* Gets the field being used.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,91,* @return the field
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,93,public abstract DateTimeField getField();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,96,* Gets the name of the field.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,98,* @return the field name
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,100,public String getName() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,101,return getField().getName();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,105,* Gets the instant being used.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,107,* @return the instant
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,109,public abstract ReadableDateTime getInstant();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,113,* Gets a value from the instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,115,* @return the current value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,116,* @see DateTimeField#get
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,118,public int get() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,119,return getField().get(getInstant().getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,123,* Gets a text value from the instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,125,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,126,* @return the current text value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,127,* @see DateTimeField#getAsText
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,129,public String getAsText(Locale locale) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,130,"return getField().getAsText(getInstant().getMillis(), locale);"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,134,* Gets a text value from the instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,136,* @return the current text value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,137,* @see DateTimeField#getAsText
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,139,public final String getAsText() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,140,"return getField().getAsText(getInstant().getMillis(), null);"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,144,* Gets a short text value from the instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,146,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,147,* @return the current text value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,148,* @see DateTimeField#getAsShortText
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,150,public String getAsShortText(Locale locale) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,151,"return getField().getAsShortText(getInstant().getMillis(), locale);"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,155,* Gets a short text value from the instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,157,* @return the current text value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,158,* @see DateTimeField#getAsShortText
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,160,public final String getAsShortText() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,161,return getAsShortText(null);
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,166,* Returns the difference between this field property instant and the one
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,167,"* passed in, in the units of this field. The sign of the difference"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,168,"* matches that of compareTo. In other words, this field property's instant"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,169,* is the minuend.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,171,* @param instant the subtrahend
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,172,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,173,* @see DateTimeField#getDifference
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,175,public int getDifference(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,176,if (instant == null) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,177,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,179,"return getField().getDifference(getInstant().getMillis(), instant.getMillis());"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,183,* Returns the difference between this field property instant and the one
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,184,"* passed in, in the units of this field. The sign of the difference"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,185,"* matches that of compareTo. In other words, this field property's instant"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,186,* is the minuend.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,188,* @param instant the subtrahend
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,189,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,190,* @see DateTimeField#getDifference
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,192,public long getDifferenceAsLong(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,193,if (instant == null) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,194,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,196,"return getField().getDifferenceAsLong(getInstant().getMillis(), instant.getMillis());"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,201,"* Returns the duration per unit value of this field. For example, if this"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,202,"* field represents ""hour of day"", then the duration is an hour."
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,204,"* @return the duration of this field, or UnsupportedDurationField"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,206,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,207,return getField().getDurationField();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,211,"* Returns the range duration of this field. For example, if this field"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,212,"* represents ""hour of day"", then the range duration is a day."
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,214,"* @return the range duration of this field, or null if field has no range"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,216,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,217,return getField().getRangeDurationField();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,221,* Gets whether this field is leap.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,223,* @return true if a leap field
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,224,* @see DateTimeField#isLeap
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,226,public boolean isLeap() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,227,return getField().isLeap(getInstant().getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,231,* Gets the amount by which this field is leap.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,233,* @return the amount by which the field is leap
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,234,* @see DateTimeField#getLeapAmount
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,236,public int getLeapAmount() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,237,return getField().getLeapAmount(getInstant().getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,241,"* If this field were to leap, then it would be in units described by the"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,242,"* returned duration. If this field doesn't ever leap, null is returned."
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,244,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,245,return getField().getLeapDurationField();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,250,* Gets the minimum value for the field ignoring the current time.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,252,* @return the minimum value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,253,* @see DateTimeField#getMinimumValue
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,255,public int getMinimumValueOverall() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,256,return getField().getMinimumValue();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,260,* Gets the minimum value for the field.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,262,* @return the minimum value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,263,* @see DateTimeField#getMinimumValue
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,265,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,266,return getField().getMinimumValue(getInstant().getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,270,* Gets the maximum value for the field ignoring the current time.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,272,* @return the maximum value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,273,* @see DateTimeField#getMaximumValue
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,275,public int getMaximumValueOverall() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,276,return getField().getMaximumValue();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,280,* Gets the maximum value for the field.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,282,* @return the maximum value
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,283,* @see DateTimeField#getMaximumValue
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,285,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,286,return getField().getMaximumValue(getInstant().getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,290,* Gets the maximum text length for the field.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,292,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,293,* @return the maximum length
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,294,* @see DateTimeField#getMaximumTextLength
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,296,public int getMaximumTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,297,return getField().getMaximumTextLength(locale);
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,301,* Gets the maximum short text length for the field.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,303,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,304,* @return the maximum length
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,305,* @see DateTimeField#getMaximumShortTextLength
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,307,public int getMaximumShortTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,308,return getField().getMaximumShortTextLength(locale);
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,313,* Returns the fractional duration milliseconds of this field.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,315,* @see DateTimeField#remainder
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,316,"* @return remainder duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,318,public long remainder() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,319,return getField().remainder(getInstant().getMillis());
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,324,* Compare this field to the same field on another instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,325,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,326,* The {@link #get()} method is used to obtain the value to compare for
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,327,* this instant and the {@link ReadableInstant#get(DateTimeField)} method
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,328,* is used for the specified instant.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,330,* @param instant  the instant to compare to
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,331,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,332,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,334,public int compareTo(ReadableDateTime instant) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,335,if (instant == null) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,336,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,338,int thisValue = get();
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,339,int otherValue = instant.get(getField());
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,340,if (thisValue < otherValue) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,341,return -1;
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,342,} else if (thisValue > otherValue) {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,343,return 1;
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,344,} else {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,345,return 0;
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,351,* Output a debugging string.
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,353,* @return debugging string
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,355,public String toString() {
True,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/AbstractDateTimeFieldProperty.java,356,"return ""Property["" + getName() + ""]"";"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,10,* are met:
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,59,* AbstractDuration provides the common behaviour for duration classes.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,60,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,61,* This class should generally not be used directly by API users. The
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,62,* {@link ReadableDuration} interface should be used when different
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,63,* kinds of durations are to be referenced.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,64,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,65,* AbstractDuration subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,67,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,68,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,69,* @since 1.0
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,71,"public abstract class AbstractDuration implements ReadableDuration, Serializable {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,73,static final long serialVersionUID = -2110953284060001145L;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,75,"private static void checkSupport(DurationField field, String name) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,76,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,77,throw new UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,78,"(""Duration does not support field \"""" + name"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,79,"+ ""\"". Supplied value must be zero."");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,83,"private static void checkPrecise(DurationField field, String name) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,84,if (!field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,85,throw new UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,86,"(""The field \"""" + name + ""\"" is imprecise"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,90,private final DurationType iType;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,92,private long iTotalMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,93,"// 0=unknown, 1=imprecise, 2=precise"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,94,private int iTotalMillisState;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,96,private int iYears;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,97,private int iMonths;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,98,private int iWeeks;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,99,private int iDays;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,100,private int iHours;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,101,private int iMinutes;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,102,private int iSeconds;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,103,private int iMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,106,* Copies another duration to this one.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,108,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,109,* non-zero
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,111,public AbstractDuration(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,112,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,113,"setDuration(iType = duration.getDurationType(), duration);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,117,* Copies another duration to this one.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,119,* @param type use a different DurationType
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,120,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,121,* non-zero
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,123,"public AbstractDuration(DurationType type, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,124,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,125,"setDuration(iType = type, duration);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,129,* Create a duration from a set of field values.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,131,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,132,"* @param years amount of years in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,133,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,134,"* @param months amount of months in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,135,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,136,"* @param weeks amount of weeks in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,137,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,138,"* @param days amount of days in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,139,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,140,"* @param hours amount of hours in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,141,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,142,"* @param minutes amount of minutes in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,143,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,144,"* @param seconds amount of seconds in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,145,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,146,"* @param millis amount of milliseconds in this duration, which must be"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,147,* zero if unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,148,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,149,* non-zero
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,151,"public AbstractDuration(DurationType type,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,152,"int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,153,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,154,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,155,"setDuration(iType = type, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,159,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,161,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,162,"* @param startInstant interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,163,"* @param endInstant interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,165,"public AbstractDuration(DurationType type, long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,166,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,167,"setTotalMillis(iType = type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,171,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,173,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,174,* @param startInstant interval start
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,175,* @param endInstant interval end
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,177,"public AbstractDuration(DurationType type,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,178,"ReadableInstant startInstant, ReadableInstant  endInstant) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,179,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,180,"setTotalMillis(iType = type, startInstant.getMillis(), endInstant.getMillis());"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,184,* Creates a duration from the given millisecond duration. If any supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,185,"* fields are imprecise, an UnsupportedOperationException is thrown. The"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,186,* exception to this is when the specified duration is zero.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,188,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,189,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,190,* @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,192,"public AbstractDuration(DurationType type, long duration) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,193,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,194,"setTotalMillis(iType = type, duration);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,198,* Returns the object which defines which fields this duration supports.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,200,public final DurationType getDurationType() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,201,return iType;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,205,"* Gets the total length of this duration in milliseconds,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,206,* failing if the duration is imprecise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,208,* @return the total length of the duration in milliseconds.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,209,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,211,public final long getTotalMillis() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,212,int state = iTotalMillisState;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,213,if (state == 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,214,state = updateTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,216,if (state != 2) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,217,"throw new IllegalStateException(""Duration is imprecise"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,219,return iTotalMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,223,"* Is this duration a precise length of time, or descriptive."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,224,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,225,"* A precise duration could include millis, seconds, minutes or hours."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,226,"* However, days, weeks, months and years can vary in length, resulting in"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,227,* an imprecise duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,228,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,229,* An imprecise duration can be made precise by pairing it with a
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,230,* date in a {@link ReadableInterval}.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,232,* @return true if the duration is precise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,234,public final boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,235,int state = iTotalMillisState;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,236,if (state == 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,237,state = updateTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,239,return state == 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,243,"* Walks through the field values, determining total millis and whether"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,244,* this duration is precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,246,* @return new state
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,248,private int updateTotalMillis() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,249,final DurationType type = iType;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,251,boolean isPrecise = true;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,252,long totalMillis = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,254,DurationField field;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,255,int value;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,257,if ((value = iYears) != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,258,field = type.years();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,259,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,260,totalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,263,if ((value = iMonths) != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,264,field = type.months();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,265,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,266,totalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,269,if ((value = iWeeks) != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,270,field = type.weeks();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,271,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,272,totalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,275,if ((value = iDays) != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,276,field = type.days();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,277,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,278,totalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,281,if ((value = iHours) != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,282,field = type.hours();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,283,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,284,totalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,287,if ((value = iMinutes) != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,288,field = type.minutes();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,289,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,290,totalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,293,if ((value = iSeconds) != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,294,field = type.seconds();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,295,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,296,totalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,299,if ((value = iMillis) != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,300,field = type.millis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,301,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,302,totalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,306,if (isPrecise) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,307,iTotalMillis = totalMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,308,return iTotalMillisState = 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,309,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,310,iTotalMillis = totalMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,311,return iTotalMillisState = 1;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,317,"* Adds this duration to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,318,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,319,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,320,* in a scaler of minus one.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,322,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,323,* duration to
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,324,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,325,* @return milliseconds value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,326,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,328,"public final long addTo(long instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,329,"return addTo(instant, scalar, null);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,333,"* Adds this duration to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,334,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,335,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,336,* in a scaler of minus one.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,338,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,339,* duration to
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,340,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,341,"* @param chrono  override the duration's chronology, unless null is passed in"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,342,* @return milliseconds value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,343,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,345,"public final long addTo(long instant, int scalar, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,346,if (isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,347,return instant += getTotalMillis() * scalar;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,350,DurationType type = iType;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,351,if (chrono != null) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,352,type = type.withChronology(chrono);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,355,int value;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,357,"if ((value = scaleValue(iYears, scalar)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,358,"instant = type.years().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,360,"if ((value = scaleValue(iMonths, scalar)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,361,"instant = type.months().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,363,"if ((value = scaleValue(iWeeks, scalar)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,364,"instant = type.weeks().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,366,"if ((value = scaleValue(iDays, scalar)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,367,"instant = type.days().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,369,"if ((value = scaleValue(iHours, scalar)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,370,"instant = type.hours().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,372,"if ((value = scaleValue(iMinutes, scalar)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,373,"instant = type.minutes().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,375,"if ((value = scaleValue(iSeconds, scalar)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,376,"instant = type.seconds().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,378,"if ((value = scaleValue(iMillis, scalar)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,379,"instant = type.millis().add(instant, value);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,382,return instant;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,385,"private static int scaleValue(int value, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,386,switch (scalar) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,387,case -1:
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,388,return -value;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,389,case 0:
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,390,return 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,391,case 1:
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,392,return value;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,393,default:
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,394,return value * scalar;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,399,"* Adds this duration to the given instant, returning a new Instant."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,400,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,401,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,402,* in a scaler of minus one.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,404,* @param instant  the instant to add the duration to
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,405,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,406,* @return instant with the original value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,407,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,408,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,410,"public final ReadableInstant addTo(ReadableInstant instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,411,"return instant.toCopy(addTo(instant.getMillis(), scalar));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,415,* Adds this duration into the given mutable instant.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,416,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,417,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,418,* in a scaler of minus one.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,420,* @param instant  the instant to update with the added duration
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,421,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,422,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,423,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,425,"public final void addInto(ReadWritableInstant instant, int scalar) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,426,"instant.setMillis(addTo(instant.getMillis(), scalar));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,431,* Gets the years field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,433,"* @return the number of years in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,435,public final int getYears() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,436,return iYears;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,441,* Gets the months field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,443,"* @return the number of months in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,445,public final int getMonths() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,446,return iMonths;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,451,* Gets the weeks field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,453,"* @return the number of weeks in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,455,public final int getWeeks() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,456,return iWeeks;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,461,* Gets the days field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,463,"* @return the number of days in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,465,public final int getDays() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,466,return iDays;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,471,* Gets the hours field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,473,"* @return the number of hours in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,475,public final int getHours() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,476,return iHours;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,481,* Gets the minutes field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,483,"* @return the number of minutes in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,485,public final int getMinutes() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,486,return iMinutes;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,491,* Gets the seconds field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,493,"* @return the number of seconds in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,495,public final int getSeconds() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,496,return iSeconds;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,501,* Gets the millis field part of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,503,"* @return the number of millis in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,505,public final int getMillis() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,506,return iMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,511,* Get this object as an immutable Duration. This can be useful if you
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,512,"* don't trust the implementation of the interface to be well-behaved, or"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,513,* to get a guaranteed immutable object.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,515,* @return a Duration using the same field set and values
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,517,public final Duration toDuration() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,518,if (this instanceof Duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,519,return (Duration) this;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,521,return new Duration(this);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,525,* Get this object as a MutableDuration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,527,* @return a MutableDuration using the same field set and values
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,529,public final MutableDuration toMutableDuration() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,530,return new MutableDuration(this);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,535,"* Compares this duration with the specified duration, which can only be"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,536,* performed if both are precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,538,* @param obj  a precise duration to check against
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,539,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,540,* @throws NullPointerException if the object is null
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,541,* @throws ClassCastException if the given object is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,542,* @throws IllegalStateException if either duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,544,public int compareTo(Object obj) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,545,ReadableDuration thisDuration = (ReadableDuration) this;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,546,ReadableDuration otherDuration = (ReadableDuration) obj;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,548,long thisMillis = thisDuration.getTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,549,long otherMillis = otherDuration.getTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,551,// cannot do (thisMillis - otherMillis) as it can overflow
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,552,if (thisMillis < otherMillis) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,553,return -1;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,555,if (thisMillis > otherMillis) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,556,return 1;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,558,return 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,562,* Is the length of this duration equal to the duration passed in.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,563,* Both durations must be precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,565,* @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,566,* @return true if this duration is equal to than the duration passed in
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,567,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,568,* @throws IllegalStateException if either duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,570,public boolean isEqual(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,571,if (duration == null) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,572,"throw new IllegalArgumentException(""The duration must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,574,return compareTo(duration) == 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,578,* Is the length of this duration longer than the duration passed in.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,579,* Both durations must be precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,581,* @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,582,* @return true if this duration is equal to than the duration passed in
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,583,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,584,* @throws IllegalStateException if either duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,586,public boolean isLongerThan(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,587,if (duration == null) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,588,"throw new IllegalArgumentException(""The duration must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,590,return compareTo(duration) > 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,594,* Is the length of this duration shorter than the duration passed in.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,595,* Both durations must be precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,597,* @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,598,* @return true if this duration is equal to than the duration passed in
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,599,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,600,* @throws IllegalStateException if either duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,602,public boolean isShorterThan(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,603,if (duration == null) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,604,"throw new IllegalArgumentException(""The duration must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,606,return compareTo(duration) < 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,611,* Compares this object with the specified object for equality based
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,612,* on the value of each field. All ReadableDuration instances are accepted.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,613,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,614,* To compare two durations for absolute duration (ie. millisecond duration
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,615,"* ignoring the fields), use {@link #isEqual(ReadableDuration)} or"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,616,* {@link #compareTo(Object)}.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,618,* @param readableDuration  a readable duration to check against
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,619,"* @return true if all the field values are equal, false if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,620,*  not or the duration is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,622,public boolean equals(Object readableDuration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,623,if (this == readableDuration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,624,return true;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,626,if (readableDuration instanceof ReadableDuration == false) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,627,return false;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,629,ReadableDuration other = (ReadableDuration) readableDuration;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,630,DurationType type = getDurationType();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,631,if (type.equals(other.getDurationType()) == false) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,632,return false;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,634,return getYears() == other.getYears()
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,635,&& getMonths() == other.getMonths()
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,636,&& getWeeks() == other.getWeeks()
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,637,&& getDays() == other.getDays()
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,638,&& getHours() == other.getHours()
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,639,&& getMinutes() == other.getMinutes()
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,640,&& getSeconds() == other.getSeconds()
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,641,&& getMillis() == other.getMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,645,* Gets a hash code for the duration that is compatable with the
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,646,* equals method.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,648,* @return a hash code
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,650,public int hashCode() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,651,int hash = getDurationType().hashCode();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,652,hash = 53 * hash + getYears();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,653,hash = 53 * hash + getMonths();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,654,hash = 53 * hash + getWeeks();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,655,hash = 53 * hash + getDays();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,656,hash = 53 * hash + getHours();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,657,hash = 53 * hash + getMinutes();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,658,hash = 53 * hash + getSeconds();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,659,hash = 53 * hash + getMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,660,return hash;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,665,* Gets the value as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,666,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,667,"* For example, ""P6H3M5S"" represents 6 hours, 3 minutes, 5 seconds."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,669,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,671,// TODO
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,672,//public String toString();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,675,* Sets all the fields in one go from another ReadableDuration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,676,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,677,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,678,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,679,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,681,* @param duration  the duration to set
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,682,* @throws IllegalArgumentException if duration is null
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,683,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,684,* non-zero
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,686,protected void setDuration(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,687,"setDuration(iType, duration);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,691,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,693,"private void setDuration(DurationType type, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,694,if (duration == null) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,695,"throw new IllegalArgumentException(""The duration must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,697,"setDuration(type,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,698,"duration.getYears(), duration.getMonths(),"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,699,"duration.getWeeks(), duration.getDays(),"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,700,"duration.getHours(), duration.getMinutes(),"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,701,"duration.getSeconds(), duration.getMillis());"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,705,* Sets all the fields in one go.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,706,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,707,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,708,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,709,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,711,"* @param years amount of years in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,712,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,713,"* @param months amount of months in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,714,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,715,"* @param weeks amount of weeks in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,716,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,717,"* @param days amount of days in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,718,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,719,"* @param hours amount of hours in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,720,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,721,"* @param minutes amount of minutes in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,722,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,723,"* @param seconds amount of seconds in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,724,* unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,725,"* @param millis amount of milliseconds in this duration, which must be"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,726,* zero if unsupported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,727,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,728,* non-zero
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,730,"protected void setDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,731,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,732,"setDuration(iType, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,736,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,738,"private void setDuration(DurationType type,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,739,"int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,740,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,742,if (years != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,743,"checkSupport(type.years(), ""years"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,745,if (months != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,746,"checkSupport(type.months(), ""months"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,748,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,749,"checkSupport(type.weeks(), ""weeks"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,751,if (days != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,752,"checkSupport(type.days(), ""days"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,754,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,755,"checkSupport(type.hours(), ""hours"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,757,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,758,"checkSupport(type.minutes(), ""minutes"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,760,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,761,"checkSupport(type.seconds(), ""seconds"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,763,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,764,"checkSupport(type.millis(), ""millis"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,767,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,768,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,769,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,770,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,771,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,772,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,773,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,774,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,776,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,780,* Sets all the fields in one go from a millisecond interval.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,781,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,782,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,783,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,784,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,786,"* @param startInstant interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,787,"* @param endInstant interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,789,"protected void setTotalMillis(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,790,"setTotalMillis(iType, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,794,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,796,"* @param startInstant interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,797,"* @param endInstant interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,799,"private void setTotalMillis(DurationType type, long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,800,iTotalMillis = endInstant - startInstant;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,802,boolean isPrecise = true;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,804,DurationField field;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,806,if (!(field = type.years()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,807,iYears = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,808,"} else if ((iYears = field.getDifference(endInstant, startInstant)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,809,isPrecise &= field.isPrecise();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,810,"startInstant = field.add(startInstant, iYears);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,813,if (!(field = type.months()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,814,iMonths = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,815,"} else if ((iMonths = field.getDifference(endInstant, startInstant)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,816,isPrecise &= field.isPrecise();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,817,"startInstant = field.add(startInstant, iMonths);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,820,if (!(field = type.weeks()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,821,iWeeks = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,822,"} else if ((iWeeks = field.getDifference(endInstant, startInstant)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,823,isPrecise &= field.isPrecise();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,824,"startInstant = field.add(startInstant, iWeeks);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,827,if (!(field = type.days()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,828,iDays = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,829,"} else if ((iDays = field.getDifference(endInstant, startInstant)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,830,isPrecise &= field.isPrecise();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,831,"startInstant = field.add(startInstant, iDays);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,834,if (!(field = type.hours()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,835,iHours = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,836,"} else if ((iHours = field.getDifference(endInstant, startInstant)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,837,isPrecise &= field.isPrecise();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,838,"startInstant = field.add(startInstant, iHours);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,841,if (!(field = type.minutes()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,842,iMinutes = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,843,"} else if ((iMinutes = field.getDifference(endInstant, startInstant)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,844,isPrecise &= field.isPrecise();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,845,"startInstant = field.add(startInstant, iMinutes);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,848,if (!(field = type.seconds()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,849,iSeconds = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,850,"} else if ((iSeconds = field.getDifference(endInstant, startInstant)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,851,isPrecise &= field.isPrecise();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,852,"startInstant = field.add(startInstant, iSeconds);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,855,if (!(field = type.millis()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,856,iMillis = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,857,"} else if ((iMillis = field.getDifference(endInstant, startInstant)) != 0) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,858,isPrecise &= field.isPrecise();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,859,"startInstant = field.add(startInstant, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,862,iTotalMillisState = isPrecise ? 2 : 1;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,866,* Sets all the fields in one go from a millisecond duration. If any
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,867,"* supported fields are imprecise, an UnsupportedOperationException is"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,868,* thrown. The exception to this is when the specified duration is zero.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,869,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,870,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,871,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,872,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,874,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,875,* @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,877,protected void setTotalMillis(long duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,878,"setTotalMillis(iType, duration);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,882,* This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,884,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,885,* @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,887,"private void setTotalMillis(DurationType type, final long duration) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,888,if (duration == 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,889,iTotalMillis = duration;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,890,iTotalMillisState = 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,892,iYears = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,893,iMonths = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,894,iWeeks = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,895,iDays = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,896,iHours = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,897,iMinutes = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,898,iSeconds = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,899,iMillis = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,901,return;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,904,long startInstant = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,906,"int years, months, weeks, days, hours, minutes, seconds, millis;"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,907,DurationField field;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,909,if (!(field = type.years()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,910,years = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,911,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,912,"checkPrecise(field, ""years"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,913,"years = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,914,"startInstant = field.add(startInstant, years);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,917,if (!(field = type.months()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,918,months = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,919,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,920,"checkPrecise(field, ""months"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,921,"months = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,922,"startInstant = field.add(startInstant, months);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,925,if (!(field = type.weeks()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,926,weeks = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,927,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,928,"checkPrecise(field, ""weeks"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,929,"weeks = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,930,"startInstant = field.add(startInstant, weeks);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,933,if (!(field = type.days()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,934,days = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,935,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,936,"checkPrecise(field, ""days"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,937,"days = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,938,"startInstant = field.add(startInstant, days);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,941,if (!(field = type.hours()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,942,hours = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,943,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,944,"checkPrecise(field, ""hours"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,945,"hours = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,946,"startInstant = field.add(startInstant, hours);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,949,if (!(field = type.minutes()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,950,minutes = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,951,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,952,"checkPrecise(field, ""minutes"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,953,"minutes = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,954,"startInstant = field.add(startInstant, minutes);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,957,if (!(field = type.seconds()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,958,seconds = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,959,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,960,"checkPrecise(field, ""seconds"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,961,"seconds = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,962,"startInstant = field.add(startInstant, seconds);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,965,if (!(field = type.millis()).isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,966,millis = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,967,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,968,"checkPrecise(field, ""millis"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,969,"millis = field.getDifference(duration, startInstant);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,970,"startInstant = field.add(startInstant, millis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,973,iTotalMillis = duration;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,974,iTotalMillisState = 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,976,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,977,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,978,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,979,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,980,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,981,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,982,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,983,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,988,"* Adds a millisecond duration to this one. As a side-effect, all field"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,989,* values are normalized.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,991,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,992,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,994,protected void add(long duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,995,setTotalMillis(getTotalMillis() + duration);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,999,* Adds a duration to this one.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1001,* @param duration  the duration to add
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1002,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1003,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1005,protected void add(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1006,if (duration == null) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1007,"throw new IllegalArgumentException(""The duration must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1009,add(duration.getTotalMillis());
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1013,* Normalizes all the field values in this duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1014,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1015,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1016,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1017,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1019,* @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1021,protected void normalize() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1022,setTotalMillis(getTotalMillis());
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1027,* Sets the number of years of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1028,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1029,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1030,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1031,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1033,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1034,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1036,protected void setYears(int years) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1037,if (years != iYears) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1038,if (years != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1039,"checkSupport(iType.years(), ""years"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1041,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1042,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1047,* Adds the specified years to the number of years in the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1049,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1050,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1052,protected void addYears(int years) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1053,setYears(getYears() + years);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1058,* Sets the number of months of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1059,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1060,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1061,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1062,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1064,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1065,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1067,protected void setMonths(int months) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1068,if (months != iMonths) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1069,if (months != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1070,"checkSupport(iType.months(), ""months"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1072,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1073,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1078,* Adds the specified months to the number of months in the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1080,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1081,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1083,protected void addMonths(int months) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1084,setMonths(getMonths() + months);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1089,* Sets the number of weeks of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1090,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1091,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1092,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1093,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1095,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1096,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1098,protected void setWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1099,if (weeks != iWeeks) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1100,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1101,"checkSupport(iType.weeks(), ""weeks"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1103,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1104,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1109,* Adds the specified weeks to the number of weeks in the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1111,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1112,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1114,protected void addWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1115,setWeeks(getWeeks() + weeks);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1120,* Sets the number of days of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1121,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1122,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1123,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1124,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1126,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1127,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1129,protected void setDays(int days) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1130,if (days != iDays) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1131,if (days != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1132,"checkSupport(iType.days(), ""days"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1134,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1135,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1140,* Adds the specified days to the number of days in the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1142,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1143,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1145,protected void addDays(int days) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1146,setDays(getDays() + days);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1151,* Sets the number of hours of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1152,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1153,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1154,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1155,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1157,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1158,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1160,protected void setHours(int hours) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1161,if (hours != iHours) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1162,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1163,"checkSupport(iType.hours(), ""hours"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1165,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1166,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1171,* Adds the specified hours to the number of hours in the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1173,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1174,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1176,protected void addHours(int hours) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1177,setHours(getHours() + hours);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1182,* Sets the number of minutes of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1183,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1184,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1185,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1186,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1188,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1189,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1191,protected void setMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1192,if (minutes != iMinutes) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1193,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1194,"checkSupport(iType.minutes(), ""minutes"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1196,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1197,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1202,* Adds the specified minutes to the number of minutes in the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1204,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1205,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1207,protected void addMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1208,setMinutes(getMinutes() + minutes);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1213,* Sets the number of seconds of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1214,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1215,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1216,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1217,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1219,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1220,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1222,protected void setSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1223,if (seconds != iSeconds) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1224,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1225,"checkSupport(iType.seconds(), ""seconds"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1227,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1228,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1233,* Adds the specified seconds to the number of seconds in the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1235,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1236,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1238,protected void addSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1239,setSeconds(getSeconds() + seconds);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1244,* Sets the number of millis of the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1245,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1246,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1247,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1248,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1250,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1251,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1253,protected void setMillis(int millis) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1254,if (millis != iMillis) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1255,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1256,"checkSupport(iType.millis(), ""millis"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1258,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1259,iTotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1264,* Adds the specified millis to the number of millis in the duration.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1266,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1267,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1269,protected void addMillis(int millis) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1270,setMillis(getMillis() + millis);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,56,mport java.io.Serializable;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,60,import org.joda.time.chrono.iso.ISOChronology;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,63, AbstractInstant provides the common behaviour for immutable time classes.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,63,* AbstractInstant provides the common behaviour for instant classes.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,71,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,72,"* AbstractInstant itself is thread-safe and immutable, but subclasses may be"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,73,* mutable and not thread-safe.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,76,ublic abstract class AbstractInstant
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,77,"mplements ReadableInstant, Serializable {"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,79,public abstract class AbstractInstant implements ReadableInstant {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,82,ublic AbstractInstant() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,84,protected AbstractInstant() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,93,eturn chrono != null ? chrono.getDateTimeZone() : null;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,95,return (chrono != null ? chrono.getDateTimeZone() : null);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,102," @param millis  the new millis, from 1970-01-01T00:00:00Z"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,104,"* @param instant  the new instant, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,105, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,107,"rotected abstract ReadableInstant create(long millis, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,108,"protected abstract ReadableInstant create(long instant, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,137, The returned object will be a new instance of <code>DateTime</code>.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,138,* The returned object will be a new instance of this type.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,151, The returned object will be a new instance of <code>DateTime</code>.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,152,* The returned object will be a new instance of this type.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,157, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,168, @return an Instant using the same millis
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,168,"* @return an Instant using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,178,"* Get this object as an Instant, using the given base instant to supply"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,179,* missing field values.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,181,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,182,* @return a new Instant
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,184,public final Instant toInstant(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,185,"return new Instant(getMillis(base, null));"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,189,* Get this object as a DateTime.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,191,"* @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,193,public final DateTime toDateTime() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,194,if (this instanceof DateTime) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,195,return (DateTime) this;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,197,return new DateTime(this);
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,201,* Get this object as a DateTime.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,203,"* @param zone time zone to apply, or default if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,204,"* @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,206,public final DateTime toDateTime(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,207,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,208,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,210,if (this instanceof DateTime && getDateTimeZone() == zone) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,211,return (DateTime) this;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,213,"return new DateTime(this, zone);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,217,* Get this object as a DateTime.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,219,"* @param chronology chronology to apply, or ISOChronology if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,220,"* @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,222,public final DateTime toDateTime(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,223,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,224,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,226,if (this instanceof DateTime && getChronology() == chronology) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,227,return (DateTime) this;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,229,"return new DateTime(this, chronology);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,233,"* Convert this object into a DateTime, using the given base instant to"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,234,* supply missing field values and time zone.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,236,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,237,* @return a new DateTime
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,239,public final DateTime toDateTime(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,240,if (base == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,241,return new DateTime(this);
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,243,DateTimeZone zone = base.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,244,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,245,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,247,"return new DateTime(getMillis(base), getChronology().withDateTimeZone(zone));"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,251,"* Convert this object into a DateTime, using the given base instant to"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,252,* supply missing field values.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,254,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,255,"* @param zone  time zone to apply, or default if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,256,* @return a new DateTime
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,258,"public final DateTime toDateTime(ReadableInstant base, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,259,if (base == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,260,"return new DateTime(this, zone);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,262,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,263,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,265,"return new DateTime(getMillis(base, zone), getChronology().withDateTimeZone(zone));"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,269,"* Convert this object into a DateTime, using the given base instant to"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,270,* supply missing field values.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,272,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,273,"* @param chronology  chronology to apply, or ISOChronology if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,274,* @return a new DateTime
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,276,"public final DateTime toDateTime(ReadableInstant base, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,277,if (base == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,278,"return new DateTime(this, chronology);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,280,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,281,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,283,"return new DateTime(getMillis(base, chronology.getDateTimeZone()), chronology);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,287,* Get this object as a trusted ISO immutable DateTime. The purpose of
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,288,* this method is to guarantee that an externally received DateTime
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,289,* object does not have any backdoors that allow it to be modified.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,290,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,291,"* If this object is already a DateTime, whose chronology is"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,292,"* {@link ISOChronology ISO}, and the time zone came from the default"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,293,"* {@link org.joda.time.tz.Provider provider}, then this object is cast to"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,294,"* a DateTime and returned. Otherwise, a new trusted DateTime is returned."
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,296,"* @return a trusted ISO DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,297,"* @throws IllegalArgumentException if the time zone is not trusted, and"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,298,* no matching trusted time zone can be found.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,300,public final DateTime toTrustedISODateTime() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,301,DateTimeZone zone = getDateTimeZone();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,302,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,303,"return new DateTime(this, (Chronology)null);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,306,DateTimeZone trusted = DateTimeZone.getInstance(zone.getID());
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,308,if (zone == trusted && this instanceof DateTime
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,309,&& getChronology() instanceof ISOChronology) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,310,return (DateTime) this;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,313,"return new DateTime(this, ISOChronology.getInstance(trusted));"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,316,// NOTE: Although the toMutableDateTime methods could check to see if this
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,317,"// is already a MutableDateTime and return this casted, it makes it too"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,318,// easy to mistakenly modify ReadableDateTime input parameters. Always
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,319,// returning a copy prevents this.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,322,* Get this object as a MutableDateTime.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,324,"* @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,326,public final MutableDateTime toMutableDateTime() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,327,return new MutableDateTime(this);
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,331,* Get this object as a MutableDateTime.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,333,"* @param zone time zone to apply, or default if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,334,"* @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,336,public final MutableDateTime toMutableDateTime(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,337,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,338,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,340,"return new MutableDateTime(this, zone);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,344,* Get this object as a MutableDateTime.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,346,"* @param chronology chronology to apply, or ISOChronology if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,347,"* @return a MutableDateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,349,public final MutableDateTime toMutableDateTime(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,350,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,351,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,353,"return new MutableDateTime(this, chronology);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,357,"* Convert this object into a MutableDateTime, using the given base instant"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,358,* to supply missing field values and time zone.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,360,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,361,* @return a new MutableDateTime
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,363,public final MutableDateTime toMutableDateTime(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,364,if (base == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,365,return new MutableDateTime(this);
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,367,DateTimeZone zone = base.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,368,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,369,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,371,"return new MutableDateTime(getMillis(base), getChronology().withDateTimeZone(zone));"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,375,"* Convert this object into a MutableDateTime, using the given base instant"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,376,* to supply missing field values.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,378,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,379,"* @param zone  time zone to apply, or default if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,380,* @return a new MutableDateTime
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,382,"public final MutableDateTime toMutableDateTime(ReadableInstant base, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,383,if (base == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,384,"return new MutableDateTime(this, zone);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,386,if (zone == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,387,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,389,"return new MutableDateTime(getMillis(base, zone), getChronology().withDateTimeZone(zone));"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,393,"* Convert this object into a MutableDateTime, using the given base instant"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,394,* to supply missing field values.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,396,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,397,"* @param chronology  chronology to apply, or ISOChronology if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,398,* @return a new MutableDateTime
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,400,"public final MutableDateTime toMutableDateTime(ReadableInstant base, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,401,if (base == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,402,"return new MutableDateTime(this, chronology);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,404,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,405,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,407,"return new MutableDateTime(getMillis(base, chronology.getDateTimeZone()), chronology);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,411,* Get this object as a DateOnly.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,413,"* @return a DateOnly using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,415,public final DateOnly toDateOnly() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,416,if (this instanceof DateOnly) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,417,return (DateOnly) this;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,419,return new DateOnly(this);
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,423,* Get this object as a DateOnly.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,425,"* @param chronology chronology to apply, or ISOChronology if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,426,"* @return a DateOnly using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,428,public final DateOnly toDateOnly(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,429,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,430,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,432,if (this instanceof DateOnly) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,433,DateOnly d = (DateOnly) this;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,434,if (d.getChronology() == chronology.withUTC()) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,435,return d;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,438,"return new DateOnly(this, chronology);"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,442,* Get this object as a TimeOnly.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,444,"* @return a TimeOnly using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,446,public final TimeOnly toTimeOnly() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,447,if (this instanceof TimeOnly) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,448,return (TimeOnly) this;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,450,return new TimeOnly(this);
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,454,* Get this object as a TimeOnly.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,456,"* @param chronology chronology to apply, or ISOChronology if null"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,457,"* @return a TimeOnly using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,459,public final TimeOnly toTimeOnly(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,460,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,461,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,463,if (this instanceof TimeOnly) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,464,TimeOnly t = (TimeOnly) this;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,465,if (t.getChronology() == chronology.withUTC()) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,466,return t;
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,469,"return new TimeOnly(this, chronology);"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,191, @param locale  the locale to get the Calendar for
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,486,"* @param locale  the locale to get the Calendar for, or default if null"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,193, @throws IllegalArgumentException if the locale is null
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,197,"hrow new IllegalArgumentException(""The Locale must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,491,locale = Locale.getDefault();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,230,ublic final boolean equals(Object readableInstant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,524,public boolean equals(Object readableInstant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,525,if (this == readableInstant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,526,return true;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,252,ublic final int hashCode() {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,549,public int hashCode() {
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,268," @return -1 if this is less, 0 if equal or +1 if greater"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,565,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,570,if (this == readableInstant) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,571,return 0;
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,274,ong otherMillis = otherInstant.getMillis();
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,275,ong thisMillis = getMillis();
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,576,"// If instants are partial, then they can use each other to fill in"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,577,// missing fields.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,578,long otherMillis = otherInstant.getMillis(this);
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,579,long thisMillis = getMillis(otherInstant);
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,298,eturn (getMillis() > readableInstant.getMillis());
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,603,"// If instants are partial, then they can use each other to fill in"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,604,// missing fields.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,605,return (getMillis(readableInstant) > readableInstant.getMillis(this));
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,312,eturn (getMillis() < readableInstant.getMillis());
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,619,"// If instants are partial, then they can use each other to fill in"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,620,// missing fields.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,621,return (getMillis(readableInstant) < readableInstant.getMillis(this));
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,326,eturn (getMillis() == readableInstant.getMillis());
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,635,"// If instants are partial, then they can use each other to fill in"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,636,// missing fields.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,637,return (getMillis(readableInstant) == readableInstant.getMillis(this));
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,10,* are met:
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,57,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,59,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,60,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,61,import org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,62,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,65,* AbstractPartialInstant provides the common behaviour for partial instant
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,66,* classes.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,67,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,68,* This class should generally not be used directly by API users. The
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,69,* {@link PartialInstant} interface should be used when different
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,70,* kinds of partial instants are to be referenced.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,71,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,72,* AbstractPartialInstant subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,74,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,76,public abstract class AbstractPartialInstant extends AbstractInstant
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,77,"implements PartialInstant, Serializable {"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,79,static final long serialVersionUID = -8202208243769478085L;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,82,* Converts the given instant to local time.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,84,* @param instant instant to convert
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,85,* @param original original chronology
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,86,* @param chronoUTC chronology with no time zone
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,88,"private static long toLocalTime(long instant, Chronology original, Chronology chronoUTC) {"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,89,if (original != chronoUTC) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,90,DateTimeZone zone = original.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,91,if (zone != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,92,instant += zone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,95,return instant;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,99,"* Returns a chronology that is UTC, defaulting to ISO if given chronology"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,100,* is null.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,102,private static Chronology selectChronologyUTC(final Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,103,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,104,return ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,105,} else {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,106,Chronology utc = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,107,if (utc != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,108,return utc;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,110,DateTimeZone zone = chronology.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,111,if (zone == null || zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,112,return chronology;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,114,"throw new IllegalArgumentException(""Chronology does not support UTC: "" + chronology);"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,118,private Chronology iChronology;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,120,/** The millis from 1970-01-01T00:00:00Z */
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,121,private long iMillis;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,123,// Constructors
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,126,* Constructs with the current instant in the default time zone.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,128,protected AbstractPartialInstant() {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,129,this(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,133,* Constructs with the current instant in the given time zone.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,135,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,137,protected AbstractPartialInstant(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,138,this(ISOChronology.getInstance(zone));
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,142,* Constructs with the current instant in the time zone of the given
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,143,* chronology.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,145,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,147,protected AbstractPartialInstant(final Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,148,iChronology = selectChronologyUTC(chronology);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,149,iMillis = resetUnsupportedFields
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,150,"(toLocalTime(System.currentTimeMillis(), chronology, iChronology));"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,154,* Constructs with milliseconds from 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,156,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,158,protected AbstractPartialInstant(long instant) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,159,iChronology = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,160,iMillis = resetUnsupportedFields(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,164,* Constructs with milliseconds from 1970-01-01T00:00:00Z. If the time zone
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,165,"* of the given chronology is not null or UTC, then the instant is"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,166,* converted to local time.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,168,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,169,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,171,"protected AbstractPartialInstant(long instant, final Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,172,iChronology = selectChronologyUTC(chronology);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,173,iMillis = resetUnsupportedFields
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,174,"(toLocalTime(instant, chronology, iChronology));"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,178,* Constructs an instance from an Object that represents a date.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,179,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,180,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,181,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,183,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,184,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,186,protected AbstractPartialInstant(Object instant) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,187,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,188,final Chronology chronology = converter.getChronology(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,189,iChronology = selectChronologyUTC(chronology);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,190,iMillis = resetUnsupportedFields
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,191,"(toLocalTime(converter.getInstantMillis(instant), chronology, iChronology));"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,195,"* Constructs an instance from an Object that represents a date, using the"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,196,* specified chronology.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,197,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,198,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,199,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,201,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,202,"* @param chronology  the chronology, must not be null"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,203,* @throws IllegalArgumentException if the date or chronology is null
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,205,"protected AbstractPartialInstant(Object instant, final Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,206,iChronology = selectChronologyUTC(chronology);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,207,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,208,iMillis = resetUnsupportedFields
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,209,"(toLocalTime(converter.getInstantMillis(instant),"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,210,"converter.getChronology(instant), iChronology));"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,214,"* Get the value as the number of milliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,215,"* 1970-01-01T00:00:00Z, with unsupported field values reset."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,217,* @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,219,public final long getMillis() {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,220,return iMillis;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,224,"* Get the value as the number of milliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,225,"* 1970-01-01T00:00:00Z, with unsupported field values and time zone filled"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,226,* in by the given base instant.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,228,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,229,* @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,231,public final long getMillis(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,232,if (base == null || isMatchingType(base)) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,233,return getMillis();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,235,"return getMillis(base, base.getDateTimeZone());"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,239,"* Get the value as the number of milliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,240,"* 1970-01-01T00:00:00Z, with unsupported field values filled in by the"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,241,* given base instant.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,243,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,244,"* @param zone override the base time zone, null implies override with no"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,245,* time zone
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,246,* @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,248,"public final long getMillis(ReadableInstant base, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,249,if (base == null || isMatchingType(base)) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,250,return getMillis();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,253,long millis = getMillis();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,254,long baseMillis = base.getMillis();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,256,DateTimeZone baseZone = base.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,257,if (baseZone != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,258,// Strip zone from base such that sum can be performed.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,259,baseMillis += baseZone.getOffset(baseMillis);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,262,millis += resetSupportedFields(baseMillis);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,264,if (zone != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,265,// Apply new zone.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,266,millis -= zone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,269,return millis;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,273,"* Gets the chronology of the instant, null if not applicable. The time"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,274,* zone of the chronology is either null or UTC.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,275,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,276,* The {@link Chronology} provides conversion from the millisecond
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,277,* value to meaningful fields in a particular calendar system.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,279,* @return the Chronology
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,281,public final Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,282,return iChronology;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,286,"* Returns the lower limiting field, where the lower limit field itself is"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,287,"* supported. In other words, for the range described by the lower and"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,288,"* upper limits, the lower limit is inclusive."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,290,* @return lower limit or null if none
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,292,public abstract DateTimeField getLowerLimit();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,295,"* Returns the upper limiting field, where the upper limit field itself is"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,296,"* not supported. In other words, for the range described by the lower and"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,297,"* upper limits, the upper limit is exclusive."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,299,* @return upper limit or null if none
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,301,public abstract DateTimeField getUpperLimit();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,304,* Returns true if the given instant is a PartialDateTime that supports the
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,305,* same exact set of fields. Implementations may simply do the following:
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,306,* <pre>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,307,*     return instant instanceof &lt;this class&gt;;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,308,* </pre>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,310,* @return true if instant is same type as this
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,312,public abstract boolean isMatchingType(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,315,"* Returns the given instant, except with lower and upper limits"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,316,* applied. Field values are reset below the lower limit and at or above
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,317,* the upper limit.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,319,* @param instant milliseconds from 1970-01-01T00:00:00
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,321,public final long resetUnsupportedFields(long instant) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,322,DateTimeField field;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,323,if ((field = getLowerLimit()) != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,324,instant = field.roundFloor(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,326,if ((field = getUpperLimit()) != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,327,instant = field.remainder(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,329,return instant;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,333,"* Returns the given instant, except with lower and upper limits"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,334,* applied. Field values are reset below the upper limit and at or above
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,335,* the lower limit.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,337,* @param instant milliseconds from 1970-01-01T00:00:00
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,339,public final long resetSupportedFields(final long instant) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,340,long newInstant = 0;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,341,DateTimeField field;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,342,if ((field = getUpperLimit()) != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,343,newInstant = field.roundFloor(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,345,if ((field = getLowerLimit()) != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,346,newInstant += field.remainder(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,348,return newInstant;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,353,* Compares this object with the specified object for equality based
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,354,"* on the millisecond instant, the Chronology, and the limiting fields."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,355,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,356,* To compare two instants for absolute time (ie. UTC milliseconds ignoring
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,357,"* the chronology), use {@link #isEqual(ReadableInstant)} or"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,358,* {@link #compareTo(Object)}.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,360,* @param readableInstant  a readable instant to check against
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,361,"* @return true if millisecond and chronology are equal, false if"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,362,*  not or the instant is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,364,public boolean equals(Object readableInstant) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,365,return super.equals(readableInstant) && isMatchingType((ReadableInstant) readableInstant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,368,"private static boolean equals(Object a, Object b) {"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,369,return (a == b) || (a != null && a.equals(b));
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,373,* Gets a hash code for the instant that is compatable with the
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,374,* equals method.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,376,* @return a suitable hash code
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,378,public int hashCode() {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,379,int result = super.hashCode();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,380,DateTimeField field;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,381,if ((field = getLowerLimit()) != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,382,result = 31 * result + field.hashCode();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,384,if ((field = getUpperLimit()) != null) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,385,result = 31 * result + field.hashCode();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,387,return result;
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,392,"* Get the value as a String in a recognisable ISO8601 format, only"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,393,* displaying supported fields.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,394,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,395,* The string output is in ISO8601 format to enable the String
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,396,* constructor to correctly parse it.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,398,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,400,public abstract String toString();
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,403,"* Set the value as the number of miliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,404,* 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,405,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,406,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,407,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,408,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,410,* @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,411,* instant to
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,412,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,414,protected void setMillis(long instant) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,415,iMillis = resetUnsupportedFields(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,419,* Set the value from an Object representing an instant.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,420,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,421,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,422,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,424,* @param instant  an object representing an instant
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,425,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,427,protected void setMillis(Object instant) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,428,"// Don't set iMillis directly, as it may provide a backdoor to"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,429,// immutable subclasses.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,430,if (instant instanceof ReadableInstant) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,431,setMillis(((ReadableInstant) instant).getMillis());
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,432,} else {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,433,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,434,setMillis(converter.getInstantMillis(instant));
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,439,* Set the chronology of the instant.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,440,* <p>
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,441,* Subclasses that wish to be immutable should override this method with an
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,442,* empty implementation that is protected and final. This also ensures that
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,443,* all lower subclasses are also immutable.
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,445,"* @param chronology  the chronology to use, null means ISOChronology/UTC"
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,446,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,448,protected void setChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/AbstractPartialInstant.java,449,iChronology = selectChronologyUTC(chronology);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,57,import org.joda.time.chrono.UnsupportedDateTimeField;
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,58,import org.joda.time.chrono.UnsupportedDurationField;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,61, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,62, Chronology subclasses <em>must</em> be immutable.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,63, <p>
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,67, This class does not strongly define each field. Subclasses may interpret
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,68, the fields differently.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,66,* This class defines a number of fields with names from the ISO8601 standard.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,67,"* Chronology does not 'strongly' define these fields however, thus subclasses"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,68,"* are free to interpret the field names as they wish. For example, a week"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,69,* could be defined as 10 days and a month as 40 days in a special
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,70,* WeirdChronology subclass. Clearly the GJ and ISO implementations provided
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,71,* use the field names as you would expect.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,72,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,73,"* Chronology is thread-safe and immutable, and all subclasses must be as well."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,79,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,84,static final long serialVersionUID = -7310865996721419676L;
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,106, @throws IllegalArgumentException if zone is null
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,114,"* @param zone to use, or default if null"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,112, Get the millis for a time only field. The default implementation simply
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,113, returns <code>dayOfYear().remainder(millis)</code>.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,120,"* Returns a date-only millisecond instant, by clearing the time fields"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,121,* from the given instant.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,122,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,123,* The default implementation simply returns
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,124,* <code>dayOfYear().roundFloor(instant)</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,115, @param millis  the millis to convert to time only
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,116, @return millis with the date part stripped
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,126,* @param instant the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,127,* @return millisecond instant from 1970-01-01T00:00:00Z with the time part
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,128,* cleared
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,118,ublic long getTimeOnlyMillis(long millis) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,119,eturn dayOfYear().remainder(millis);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,130,public long getDateOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,131,return dayOfYear().roundFloor(instant);
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,123, Get the millis for a date only field. The default implementation simply
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,124, returns <code>dayOfYear().roundFloor(millis)</code>.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,135,"* Returns a date-only millisecond instant, formed from the given year,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,136,"* month, and day values. The set of given values must refer to a valid"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,137,"* date, or else an IllegalArgumentException is thrown."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,138,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,139,* The default implementation simply returns
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,140,"* <code>getDateTimeMillis(year, monthOfYear, dayOfMonth, 0)</code>."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,142,* @param year year to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,143,* @param monthOfYear month to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,144,* @param dayOfMonth day of month to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,145,* @return millisecond instant from 1970-01-01T00:00:00Z without any time
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,146,* part
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,148,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,149,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,151,"return getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,155,"* Returns a time-only millisecond instant, by clearing the date fields"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,156,* from the given instant.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,157,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,158,* The default implementation simply returns
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,159,* <code>dayOfYear().remainder(instant)</code>.
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,126, @param millis  the millis to convert to date only
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,127, @return millis with the time part stripped
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,161,* @param instant the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,162,* @return millisecond instant from 1970-01-01T00:00:00Z with the date part
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,163,* cleared
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,165,public long getTimeOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,166,return dayOfYear().remainder(instant);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,170,"* Returns a time-only millisecond instant, formed from the given hour,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,171,"* minute, second, and millisecond values. The set of given values must"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,172,"* refer to a valid time, or else an IllegalArgumentException is thrown."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,173,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,174,* The default implementation calls upon separate DateTimeFields to
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,175,* determine the result. Subclasses are encouraged to provide a more
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,176,* efficient implementation.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,178,* @param hourOfDay hour to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,179,* @param minuteOfHour minute to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,180,* @param secondOfMinute second to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,181,* @param millisOfSecond millisecond to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,182,* @return millisecond instant from 1970-01-01T00:00:00Z without any date
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,183,* part
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,185,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,186,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,187,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,189,"long instant = hourOfDay().set(0, hourOfDay);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,190,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,191,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,192,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,196,"* Returns a datetime millisecond instant, formed from the given year,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,197,"* month, day, and millisecond values. The set of given values must refer"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,198,"* to a valid datetime, or else an IllegalArgumentException is thrown."
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,199,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,200,* The default implementation calls upon separate DateTimeFields to
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,201,* determine the result. Subclasses are encouraged to provide a more
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,202,* efficient implementation.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,204,* @param year year to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,205,* @param monthOfYear month to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,206,* @param dayOfMonth day of month to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,207,* @param millisOfDay millisecond to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,208,* @return millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,210,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,211,int millisOfDay)
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,212,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,214,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,215,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,216,"instant = dayOfMonth().set(instant, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,217,"return millisOfDay().set(instant, millisOfDay);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,221,"* Returns a datetime millisecond instant, from from the given instant,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,222,"* hour, minute, second, and millisecond values. The set of given values"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,223,"* must refer to a valid datetime, or else an IllegalArgumentException is"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,224,* thrown.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,225,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,226,* The default implementation calls upon separate DateTimeFields to
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,227,* determine the result. Subclasses are encouraged to provide a more
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,228,* efficient implementation.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,230,* @param instant instant to start from
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,231,* @param hourOfDay hour to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,232,* @param minuteOfHour minute to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,233,* @param secondOfMinute second to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,234,* @param millisOfSecond millisecond to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,235,* @return millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,129,ublic long getDateOnlyMillis(long millis) {
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,130,eturn dayOfYear().roundFloor(millis);
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,237,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,238,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,239,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,240,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,242,"instant = hourOfDay().set(instant, hourOfDay);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,243,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,244,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,245,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,249,"* Returns a datetime millisecond instant, formed from the given year,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,250,"* month, day, hour, minute, second, and millisecond values. The set of"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,251,"* given values must refer to a valid datetime, or else an"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,252,* IllegalArgumentException is thrown.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,253,* <p>
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,254,* The default implementation calls upon separate DateTimeFields to
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,255,* determine the result. Subclasses are encouraged to provide a more
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,256,* efficient implementation.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,258,* @param year year to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,259,* @param monthOfYear month to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,260,* @param dayOfMonth day of month to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,261,* @param hourOfDay hour to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,262,* @param minuteOfHour minute to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,263,* @param secondOfMinute second to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,264,* @param millisOfSecond millisecond to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,265,* @return millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,267,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,268,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,269,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,270,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,272,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,273,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,274,"instant = dayOfMonth().set(instant, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,275,"instant = hourOfDay().set(instant, hourOfDay);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,276,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,277,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,278,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,284,* Get the millis duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,286,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,288,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,289,"return UnsupportedDurationField.getInstance(""millis"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,138, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,139, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,295,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,142,"hrow new UnsupportedOperationException(""millisOfSecond is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,298,"return UnsupportedDateTimeField.getInstance(""millisOfSecond"", millis());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,148, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,149, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,304,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,152,"hrow new UnsupportedOperationException(""millisOfDay is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,307,"return UnsupportedDateTimeField.getInstance(""millisOfDay"", millis());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,313,* Get the seconds duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,315,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,317,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,318,"return UnsupportedDurationField.getInstance(""seconds"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,160, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,161, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,324,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,164,"hrow new UnsupportedOperationException(""secondOfMinute is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,327,"return UnsupportedDateTimeField.getInstance(""secondOfMinute"", seconds());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,170, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,171, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,333,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,174,"hrow new UnsupportedOperationException(""secondOfDay is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,336,"return UnsupportedDateTimeField.getInstance(""secondOfDay"", seconds());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,342,* Get the minutes duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,344,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,346,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,347,"return UnsupportedDurationField.getInstance(""minutes"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,182, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,183, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,353,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,186,"hrow new UnsupportedOperationException(""minuteOfHour is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,356,"return UnsupportedDateTimeField.getInstance(""minuteOfHour"", minutes());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,192, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,193, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,362,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,196,"hrow new UnsupportedOperationException(""minuteOfDay is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,365,"return UnsupportedDateTimeField.getInstance(""minuteOfDay"", minutes());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,371,* Get the hours duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,373,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,375,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,376,"return UnsupportedDurationField.getInstance(""hours"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,204, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,205, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,382,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,208,"hrow new UnsupportedOperationException(""hourOfDay is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,385,"return UnsupportedDateTimeField.getInstance(""hourOfDay"", hours());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,214, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,215, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,391,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,218,"hrow new UnsupportedOperationException(""clockhourOfDay is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,394,"return UnsupportedDateTimeField.getInstance(""clockhourOfDay"", hours());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,224, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,225, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,400,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,228,"hrow new UnsupportedOperationException(""hourOfHalfday is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,403,"return UnsupportedDateTimeField.getInstance(""hourOfHalfday"", hours());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,234, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,235, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,409,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,238,"hrow new UnsupportedOperationException(""clockhourOfHalfday is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,412,"return UnsupportedDateTimeField.getInstance(""clockhourOfHalfday"", hours());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,244, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,245, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,418,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,248,"hrow new UnsupportedOperationException(""halfdayOfDay is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,421,return UnsupportedDateTimeField.getInstance
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,422,"(""halfdayOfDay"", UnsupportedDurationField.getInstance(""halfdays""));"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,428,* Get the days duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,430,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,432,public DurationField days() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,433,"return UnsupportedDurationField.getInstance(""days"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,259, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,260, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,442,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,263,"hrow new UnsupportedOperationException(""dayOfWeek is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,445,"return UnsupportedDateTimeField.getInstance(""dayOfWeek"", days());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,269, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,270, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,451,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,273,"hrow new UnsupportedOperationException(""dayOfMonth is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,454,"return UnsupportedDateTimeField.getInstance(""dayOfMonth"", days());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,279, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,280, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,460,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,283,"hrow new UnsupportedOperationException(""dayOfYear is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,463,"return UnsupportedDateTimeField.getInstance(""dayOfYear"", days());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,469,* Get the weeks duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,471,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,473,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,474,"return UnsupportedDurationField.getInstance(""weeks"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,291, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,292, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,480,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,295,"hrow new UnsupportedOperationException(""weekOfWeekyear is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,483,"return UnsupportedDateTimeField.getInstance(""weekOfWeekyear"", weeks());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,487,* Get the weekyears duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,489,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,491,public DurationField weekyears() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,492,"return UnsupportedDurationField.getInstance(""weekyears"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,301, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,302, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,498,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,305,"hrow new UnsupportedOperationException(""weekyear is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,501,"return UnsupportedDateTimeField.getInstance(""weekyear"", weekyears());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,507,* Get the months duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,509,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,511,public DurationField months() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,512,"return UnsupportedDurationField.getInstance(""months"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,313, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,314, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,518,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,317,"hrow new UnsupportedOperationException(""monthOfYear is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,521,"return UnsupportedDateTimeField.getInstance(""monthOfYear"", months());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,527,* Get the years duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,529,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,531,public DurationField years() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,532,"return UnsupportedDurationField.getInstance(""years"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,325, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,326, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,538,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,329,"hrow new UnsupportedOperationException(""year is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,541,"return UnsupportedDateTimeField.getInstance(""year"", years());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,335, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,336, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,547,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,339,"hrow new UnsupportedOperationException(""yearOfEra is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,550,"return UnsupportedDateTimeField.getInstance(""yearOfEra"", years());"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,345, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,346, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,556,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,349,"hrow new UnsupportedOperationException(""yearOfCentury is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,559,"return UnsupportedDateTimeField.getInstance(""yearOfCentury"", years());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,563,* Get the centuries duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,565,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,567,public DurationField centuries() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,568,"return UnsupportedDurationField.getInstance(""centuries"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,355, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,356, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,574,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,359,"hrow new UnsupportedOperationException(""centuryOfEra is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,577,"return UnsupportedDateTimeField.getInstance(""centuryOfEra"", centuries());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,581,* Get the eras duration field for this chronology.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,583,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,585,public DurationField eras() {
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,586,"return UnsupportedDurationField.getInstance(""eras"");"
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,365, @return DateTimeField
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,366, @throws UnsupportedOperationException if unsupported
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,592,* @return DateTimeField or UnsupportedDateTimeField if unsupported
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,369,"hrow new UnsupportedOperationException(""era is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,595,"return UnsupportedDateTimeField.getInstance(""era"", eras());"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,599,* Gets a debugging toString.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,601,* @return a debugging string
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,603,public abstract String toString();
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,10,* are met:
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,58,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,59,// Import for @link support
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,60,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,61,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,64,* <p>Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,65,* <ul>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,66,* <li><code>getYear()</code>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,67,* <li><code>year().get()</code>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,68,* </ul>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,69,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,70,* field:
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,71,* <ul>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,72,* <li>numeric value
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,73,* <li>text value
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,74,* <li>short text value
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,75,* <li>maximum value
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,76,* <li>minimum value
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,77,* </ul>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,81,* DateOnly is the basic implementation of a date only class supporting
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,82,* chronologies. It holds the date as milliseconds from the Java epoch of
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,83,* 1970-01-01. The time component and time zone is fixed at T00:00:00Z.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,84,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,85,"* DateOnly is thread-safe and immutable, provided that the Chronology is as"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,86,* well. All standard Chronology classes supplied are thread-safe and
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,87,* immutable.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,89,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,90,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,91,* @since 1.0
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,92,* @see TimeOnly
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,93,* @see DateTime
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,95,public class DateOnly extends AbstractPartialInstant implements Serializable {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,97,static final long serialVersionUID = -5796551185494585279L;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,99,// Constructors
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,102,* Constructs a DateOnly to the current date in the default time zone.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,104,public DateOnly() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,105,super();
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,109,* Constructs a DateOnly to the current date in the given time zone.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,111,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,113,public DateOnly(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,114,super(zone);
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,118,* Constructs a DateOnly to the current date in the time zone of the given
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,119,* chronology.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,121,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,123,public DateOnly(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,124,super(chronology);
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,128,* Constructs a DateOnly set to the milliseconds from 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,130,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,132,public DateOnly(long instant) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,133,super(instant);
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,137,* Constructs a DateOnly set to the milliseconds from
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,138,* 1970-01-01T00:00:00Z. If the time zone of the given chronology is not
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,139,"* null or UTC, then the instant is converted to local time."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,141,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,142,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,144,"public DateOnly(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,145,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,149,* Constructs an instance from an Object that represents a date.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,150,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,151,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,152,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,154,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,155,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,157,public DateOnly(Object instant) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,158,super(instant);
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,162,"* Constructs an instance from an Object that represents a date, using the"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,163,* specified chronology.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,164,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,165,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,166,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,168,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,169,"* @param chronology  the chronology, must not be null"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,170,* @throws IllegalArgumentException if the date or chronology is null
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,172,"public DateOnly(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,173,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,177,* Constructs an instance from date field values using
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,178,* <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,180,* @param year  the year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,181,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,182,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,184,public DateOnly(
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,185,"final int year,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,186,"final int monthOfYear,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,187,final int dayOfMonth) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,189,super(ISOChronology.getInstanceUTC()
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,190,".getDateOnlyMillis(year, monthOfYear, dayOfMonth),"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,191,ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,195,* Constructs an instance from date field values
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,196,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,197,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,198,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,199,* is used.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,201,* @param year  the year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,202,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,203,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,204,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,206,public DateOnly(
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,207,"final int year,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,208,"final int monthOfYear,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,209,"final int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,210,Chronology chronology) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,212,super((chronology == null ? (chronology = ISOChronology.getInstanceUTC()) : chronology)
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,213,".getDateOnlyMillis(year, monthOfYear, dayOfMonth),"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,214,chronology);
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,218,"* Returns the lower limiting field, dayOfYear."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,220,* @return dayOfYear field
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,222,public final DateTimeField getLowerLimit() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,223,return getChronology().dayOfYear();
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,227,"* Returns the upper limiting field, null."
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,229,* @return null
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,231,public final DateTimeField getUpperLimit() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,232,return null;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,235,public final boolean isMatchingType(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,236,return instant instanceof DateOnly;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,239,// Date field access
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,242,* Get the era field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,244,* @return the era
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,246,public final int getEra() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,247,return getChronology().era().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,251,* Get the year of era field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,253,* @return the year of era
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,255,public final int getCenturyOfEra() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,256,return getChronology().centuryOfEra().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,260,* Get the year of era field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,262,* @return the year of era
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,264,public final int getYearOfEra() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,265,return getChronology().yearOfEra().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,269,* Get the year of century field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,271,* @return the year of century
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,273,public final int getYearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,274,return getChronology().yearOfCentury().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,278,* Get the year field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,280,* @return the year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,282,public final int getYear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,283,return getChronology().year().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,287,* Get the weekyear field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,289,* @return the year of a week based year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,291,public final int getWeekyear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,292,return getChronology().weekyear().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,296,* Get the month of year field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,298,* @return the month of year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,300,public final int getMonthOfYear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,301,return getChronology().monthOfYear().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,305,* Get the week of weekyear field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,307,* @return the week of a week based year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,309,public final int getWeekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,310,return getChronology().weekOfWeekyear().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,314,* Get the day of year field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,316,* @return the day of year
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,318,public final int getDayOfYear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,319,return getChronology().dayOfYear().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,323,* Get the day of month field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,324,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,325,* The values for the day of month are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,327,* @return the day of month
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,329,public final int getDayOfMonth() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,330,return getChronology().dayOfMonth().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,334,* Get the day of week field value.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,335,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,336,* The values for the day of week are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,338,* @return the day of week
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,340,public final int getDayOfWeek() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,341,return getChronology().dayOfWeek().get(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,344,// TODO: DateTimeFieldProperty cannot be constructed with anything but
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,345,// DateTime.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,347,// Properties
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,350,* Get the day of week property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,351,* <p>
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,352,* The values for day of week are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,354,* @return the day of week property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,356,public final DateTimeFieldProperty dayOfWeek() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,357,"return new DateTimeFieldProperty(this, getChronology().dayOfWeek());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,361,* Get the day of month property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,363,* @return the day of month property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,365,public final DateTimeFieldProperty dayOfMonth() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,366,"return new DateTimeFieldProperty(this, getChronology().dayOfMonth());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,370,* Get the day of year property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,372,* @return the day of year property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,374,public final DateTimeFieldProperty dayOfYear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,375,"return new DateTimeFieldProperty(this, getChronology().dayOfYear());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,379,* Get the week of a week based year property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,381,* @return the week of a week based year property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,383,public final DateTimeFieldProperty weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,384,"return new DateTimeFieldProperty(this, getChronology().weekOfWeekyear());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,388,* Get the year of a week based year property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,390,* @return the year of a week based year property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,392,public final DateTimeFieldProperty weekyear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,393,"return new DateTimeFieldProperty(this, getChronology().weekyear());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,397,* Get the month of year property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,399,* @return the month of year property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,401,public final DateTimeFieldProperty monthOfYear() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,402,"return new DateTimeFieldProperty(this, getChronology().monthOfYear());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,406,* Get the year property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,408,* @return the year property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,410,public final DateTimeFieldProperty year() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,411,"return new DateTimeFieldProperty(this, getChronology().year());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,415,* Get the year of era property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,417,* @return the year of era property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,419,public final DateTimeFieldProperty yearOfEra() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,420,"return new DateTimeFieldProperty(this, getChronology().yearOfEra());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,424,* Get the year of century property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,426,* @return the year of era property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,428,public final DateTimeFieldProperty yearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,429,"return new DateTimeFieldProperty(this, getChronology().yearOfCentury());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,433,* Get the century of era property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,435,* @return the year of era property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,437,public final DateTimeFieldProperty centuryOfEra() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,438,"return new DateTimeFieldProperty(this, getChronology().centuryOfEra());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,442,* Get the era property.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,444,* @return the era property
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,446,public final DateTimeFieldProperty era() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,447,"return new DateTimeFieldProperty(this, getChronology().era());"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,451,// Output
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,454,* Output the date in ISO8601 date only format (yyyy-MM-dd).
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,456,* @return ISO8601 date formatted string
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,458,public final String toString() {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,459,return ISODateTimeFormat.getInstance(getChronology()).date().print(getMillis());
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,462,"protected ReadableInstant create(long millis, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,463,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,464,"throw new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,466,if (millis == getMillis() && chronology == getChronology()) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,467,return this;
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,469,"return new DateOnly(millis, chronology);"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,473,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,474,* immutable.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,476,protected final void setMillis(long millis) {
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,480,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,481,* immutable.
True,JodaTime/src/java/org/joda/time/DateOnly.java,JodaTime/src/java/org/joda/time/DateOnly.java,483,protected final void setChronology(Chronology chronology) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,56,mport java.text.ParseException;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,57,mport java.util.Calendar;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,58,mport java.util.Date;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,56,import java.io.Serializable;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,60,mport org.joda.time.chrono.iso.ISOChronology;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,61,mport org.joda.time.format.DateTimeParser;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,58,// Import for @link support
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,59,import org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,65, DateTime is the basic implementation of a datetime class supporting
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,66, chronologies and time zones. It holds the time as milliseconds from the Java
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,67, epoch of 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,63,* DateTime is the standard implementation of an unmodifiable datetime class.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,64,* It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,65,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,66,* This class uses a Chronology internally. The Chronology determines how the
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,67,* millisecond instant value is converted into the date time fields.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,68,* The default Chronology is <code>ISOChronology</code> which is the agreed
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,69,* international standard and compatable with the modern Gregorian calendar.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,84, <p>This class is immutable provided that the Chronology is immutable. All
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,85, Chronology classes supplied are immutable.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,86,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,87,"* DateTime is thread-safe and immutable, provided that the Chronology is as"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,88,* well. All standard Chronology classes supplied are thread-safe and
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,89,* immutable.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,95,* @see MutableDateTime
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,96,* @see DateOnly
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,97,* @see TimeOnly
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,92,ublic class DateTime extends AbstractDateTime implements ReadableDateTime {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,99,public class DateTime extends AbstractDateTime
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,100,"implements ReadableDateTime, Serializable {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,94,** The millis from 1970-01-01T00:00:00Z */
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,95,rivate final long iMillis;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,96,** The chronology to use */
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,97,rivate final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,102,static final long serialVersionUID = -5171125899451703815L;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,102," Constructs a DateTime to the current datetime, as reported by the system"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,103," clock. The chronology used is ISO, in the"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,104, {@link DateTimeZone#getDefault() default} time zone.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,107,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,108,* using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,107,Chronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,108,Millis = System.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,111,super();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,112," Constructs a DateTime to the current datetime, as reported by the system"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,113," clock. The chronology used is ISO, in the supplied time zone."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,115,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,116,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,117,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,118,"* If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,115," @param zone  the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,116, @throws IllegalArgumentException if the zone is null
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,120,"* @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,119,Chronology = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,120,Millis = System.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,123,super(zone);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,124," Constructs a DateTime to the current datetime, as reported by the system"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,125, clock.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,127,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,128,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,129,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,130,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,131,* in the default time zone is used.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,127," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,128, @throws IllegalArgumentException if the chronology is null
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,133,"* @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,131,Chronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,132,Millis = System.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,136," Constructs a DateTime set to the milliseconds from 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,137," using the ISO chronology, in the"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,138, {@link DateTimeZone#getDefault() default} time zone.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,140, @param millis  the milliseconds
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,142,ublic DateTime(long millis) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,143,Chronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,144,Millis = millis;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,148," Constructs a DateTime set to the milliseconds from 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,149," using the ISO chronology, in the supplied time zone."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,151, @param millis  the milliseconds
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,152," @param zone  the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,153, @throws IllegalArgumentException if the zone is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,155,"ublic DateTime(long millis, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,156,Chronology = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,157,Millis = millis;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,161," Constructs a DateTime set to the milliseconds from 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,162, using the supplied chronology.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,164, @param millis  the milliseconds
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,165," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,166, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,168,"ublic DateTime(long millis, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,169,Chronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,170,Millis = millis;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,174," Constructs a DateTime from a ReadableInstant, using its chronology. If"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,175," its chronology null, then the chronology is set to ISO, in the"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,176, {@link DateTimeZone#getDefault() default} time zone.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,178," @param instant  the ReadableInstant, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,179, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,181,ublic DateTime(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,182,Chronology = selectChronology(instant);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,183,Millis = instant.getMillis();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,187," Constructs a DateTime from a ReadableInstant, using its chronology"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,188," against a different time zone. If its chronology is null, then the"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,189, chronology is set to ISO. If the selected chronology is not in the
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,190," supplied time zone, a new chronology is created that is."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,192," @param instant  the ReadableInstant, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,193," @param zone  the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,194, @throws IllegalArgumentException if the instant or zone is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,196,"ublic DateTime(ReadableInstant instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,197,"Chronology = selectChronology(instant, zone);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,198,Millis = instant.getMillis();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,136,super(chronology);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,202," Constructs a DateTime from a ReadableInstant, using the supplied"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,203, chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,141,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,142,* using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,205," @param instant  the ReadableInstant, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,206," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,207, @throws IllegalArgumentException if the instant or chronology is null
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,144,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,209,"ublic DateTime(ReadableInstant instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,210,"Chronology = selectChronology(instant, chronology);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,211,Millis = instant.getMillis();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,146,public DateTime(long instant) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,147,super(instant);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,215," Constructs a DateTime from a Date, using the ISO chronology, in the"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,216, {@link DateTimeZone#getDefault() default} time zone.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,151,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,152,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,153,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,154,"* If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,218," @param date  the Date, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,219, @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,156,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,157,"* @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,221,ublic DateTime(Date date) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,222,Chronology = selectChronology(date);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,223,Millis = date.getTime();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,159,"public DateTime(long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,160,"super(instant, zone);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,227," Constructs a DateTime from a Date, using the ISO chronology, in the"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,228, supplied time zone.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,164,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,165,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,166,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,167,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,168,* in the default time zone is used.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,230," @param date  the Date, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,231," @param zone  the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,232, @throws IllegalArgumentException if the date or zone is null
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,170,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,171,"* @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,234,"ublic DateTime(Date date, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,235,"Chronology = selectChronology(date, zone);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,236,Millis = date.getTime();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,173,"public DateTime(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,174,"super(instant, chronology);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,240," Constructs a DateTime from a Date, using the supplied chronology."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,179,* Constructs an instance from an Object that represents a datetime.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,180,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,181,"* If the object contains no chronology, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,182,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,183,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,184,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,185,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,242," @param date  the Date, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,243," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,244, @throws IllegalArgumentException if the date or chronology is null
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,187,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,188,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,246,"ublic DateTime(Date date, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,247,"Chronology = selectChronology(date, chronology);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,248,Millis = date.getTime();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,190,public DateTime(Object instant) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,191,super(instant);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,252," Constructs a DateTime from a Calendar, using its closest mapped"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,253, chronology and time zone.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,255," <p>When converting calendars to chronologies, the constructor is aware"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,256, of GregorianCalendar and BuddhistCalendar and maps them to the
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,257, equivalent chronology. Other calendars map to ISOChronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,195,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,196,* forcing the time zone to that specified.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,197,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,198,"* If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,199,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,200,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,201,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,202,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,259," @param calendar  the Calendar, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,260, @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,204,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,205,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,206,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,262,ublic DateTime(Calendar calendar) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,263,Chronology = selectChronology(calendar);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,264,Millis = calendar.getTime().getTime();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,208,"public DateTime(Object instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,209,"super(instant, zone);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,268," Constructs a DateTime from a Calendar, using its closest mapped"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,269, chronology against a different time zone.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,271," <p>When converting calendars to chronologies, the constructor is aware"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,272, of GregorianCalendar and BuddhistCalendar and maps them to the
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,273, equivalent chronology. Other calendars map to ISOChronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,213,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,214,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,215,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,216,"* If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,217,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,218,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,219,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,275," @param calendar  the Calendar, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,276," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,277, @throws IllegalArgumentException if the calendar or zone is null
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,221,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,222,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,223,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,279,"ublic DateTime(Calendar calendar, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,280,"Chronology = selectChronology(calendar, zone);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,281,Millis = calendar.getTime().getTime();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,225,"public DateTime(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,226,"super(instant, chronology);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,285," Constructs a DateTime from a Calendar, using the supplied chronology."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,231,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,232,* using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,287," @param calendar  the Calendar, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,288," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,289, @throws IllegalArgumentException if the calendar or chronology is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,291,"ublic DateTime(Calendar calendar, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,292,"Chronology = selectChronology(calendar, chronology);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,293,Millis = calendar.getTime().getTime();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,297," Constructs a DateTime from an ISO formatted String, using the ISO"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,298," chronology, in the {@link DateTimeZone#getDefault() default} time zone."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,234,* @param year  the year
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,235,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,236,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,237,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,238,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,239,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,240,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,242,public DateTime(
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,243,"int year,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,244,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,245,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,246,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,247,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,248,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,249,int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,250,"super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,254,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,255,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,256,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,257,"* If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,300," @param str  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,301, @throws IllegalArgumentException if the string is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,302, @throws ParseException if parsing fails
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,304,ublic DateTime(String str) throws ParseException {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,305,Chronology = selectChronology(str);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,306,ateTimeParser p = ISODateTimeFormat.getInstance(iChronology).dateTimeParser();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,307,Millis = p.parseMillis(str);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,311," Constructs a DateTime from an ISO formatted String, using the ISO"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,312," chronology, in the supplied time zone."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,259,* @param year  the year
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,260,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,261,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,262,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,263,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,264,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,265,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,266,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,268,public DateTime(
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,269,"int year,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,270,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,271,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,272,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,273,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,274,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,275,"int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,276,DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,277,"super(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,278,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,282,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,283,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,284,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,285,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,286,* in the default time zone is used.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,314," @param str  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,315," @param zone the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,316, @throws IllegalArgumentException if the string or zone is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,317, @throws ParseException if parsing fails
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,319,"ublic DateTime(String str, DateTimeZone zone) throws ParseException {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,320,"Chronology = selectChronology(str, zone);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,321,ateTimeParser p = ISODateTimeFormat.getInstance(iChronology).dateTimeParser();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,322,Millis = p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,288,* @param year  the year
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,289,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,290,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,291,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,292,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,293,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,294,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,295,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,297,public DateTime(
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,298,"int year,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,299,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,300,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,301,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,302,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,303,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,304,"int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,305,Chronology chronology) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,306,"super(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,307,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,326," Constructs a DateTime from an ISO formatted String, using the supplied"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,327, chronology.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,312,* Creates a new instance of this class.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,313,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,314,* The returned object will be a new instance of the implementation.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,315,* Immutable subclasses may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,329," @param str  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,330," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,331, @throws IllegalArgumentException if the string or chronology is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,332, @throws ParseException if parsing fails
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,317,"* @param instant  the new instant, from 1970-01-01T00:00:00Z"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,318,* @param chrono  the new chronology
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,319,* @return a new instance of this class
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,320,* @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,334,"ublic DateTime(String str, Chronology chronology) throws ParseException {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,335,"Chronology = selectChronology(str, chronology);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,336,ateTimeParser p = ISODateTimeFormat.getInstance(iChronology).dateTimeParser();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,337,Millis = p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,322,"protected final ReadableInstant create(final long instant, final Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,323,"return createDateTime(instant, chrono);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,343, The returned object will be a new instance of the implementation.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,329,"* The returned object will be a new instance of DateTime, or a subclass."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,346," @param millis  the new millis, from 1970-01-01T00:00:00Z"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,332,"* @param instant  the new instant, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,351,"rotected ReadableInstant create(long millis, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,337,"protected DateTime createDateTime(final long instant, final Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,355,f (millis == getMillis() && chrono == getChronology()) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,341,if (instant == getMillis() && chrono == getChronology()) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,358,"eturn new DateTime(millis, chrono);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,344,"return new DateTime(instant, chrono);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,361,/ Accessors
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,347,// Date properties
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,364, Gets the milliseconds of the datetime instant from the Java epoch
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,365, of 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,350,* Get the era property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,367, @return the number of milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,352,* @return the era property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,369,ublic final long getMillis() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,370,eturn iMillis;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,354,public final DateTimeFieldProperty era() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,355,"return new DateTimeFieldProperty(this, getChronology().era());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,374, Gets the chronology of the datetime.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,376, @return the Chronology that the datetime is using
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,378,ublic final Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,379,eturn iChronology;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,382,/ Date properties
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,385, Get the day of week property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,386, <p>
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,387, The values for day of week are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,359,* Get the century of era property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,389, @return the day of week property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,361,* @return the year of era property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,391,ublic final DateTimeFieldProperty dayOfWeek() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,392,"eturn new DateTimeFieldProperty(this, getChronology().dayOfWeek());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,363,public final DateTimeFieldProperty centuryOfEra() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,364,"return new DateTimeFieldProperty(this, getChronology().centuryOfEra());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,396, Get the day of month property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,368,* Get the year of century property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,398, @return the day of month property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,370,* @return the year of era property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,400,ublic final DateTimeFieldProperty dayOfMonth() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,401,"eturn new DateTimeFieldProperty(this, getChronology().dayOfMonth());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,372,public final DateTimeFieldProperty yearOfCentury() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,373,"return new DateTimeFieldProperty(this, getChronology().yearOfCentury());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,405, Get the day of year property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,377,* Get the year of era property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,407, @return the day of year property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,379,* @return the year of era property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,409,ublic final DateTimeFieldProperty dayOfYear() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,410,"eturn new DateTimeFieldProperty(this, getChronology().dayOfYear());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,381,public final DateTimeFieldProperty yearOfEra() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,382,"return new DateTimeFieldProperty(this, getChronology().yearOfEra());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,414, Get the week of a week based year property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,386,* Get the year property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,416, @return the week of a week based year property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,388,* @return the year property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,418,ublic final DateTimeFieldProperty weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,419,"eturn new DateTimeFieldProperty(this, getChronology().weekOfWeekyear());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,390,public final DateTimeFieldProperty year() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,391,"return new DateTimeFieldProperty(this, getChronology().year());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,441, Get the year property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,443, @return the year property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,445,ublic final DateTimeFieldProperty year() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,446,"eturn new DateTimeFieldProperty(this, getChronology().year());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,450, Get the year of era property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,413,* Get the week of a week based year property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,452, @return the year of era property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,415,* @return the week of a week based year property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,454,ublic final DateTimeFieldProperty yearOfEra() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,455,"eturn new DateTimeFieldProperty(this, getChronology().yearOfEra());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,417,public final DateTimeFieldProperty weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,418,"return new DateTimeFieldProperty(this, getChronology().weekOfWeekyear());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,459, Get the year of century property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,422,* Get the day of year property.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,461, @return the year of era property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,424,* @return the day of year property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,463,ublic final DateTimeFieldProperty yearOfCentury() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,464,"eturn new DateTimeFieldProperty(this, getChronology().yearOfCentury());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,426,public final DateTimeFieldProperty dayOfYear() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,427,"return new DateTimeFieldProperty(this, getChronology().dayOfYear());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,468, Get the century of era property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,431,* Get the day of month property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,432,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,433,* The values for day of month are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,470, @return the year of era property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,435,* @return the day of month property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,472,ublic final DateTimeFieldProperty centuryOfEra() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,473,"eturn new DateTimeFieldProperty(this, getChronology().centuryOfEra());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,437,public final DateTimeFieldProperty dayOfMonth() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,438,"return new DateTimeFieldProperty(this, getChronology().dayOfMonth());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,477, Get the era property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,442,* Get the day of week property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,443,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,444,* The values for day of week are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,479, @return the era property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,446,* @return the day of week property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,481,ublic final DateTimeFieldProperty era() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,482,"eturn new DateTimeFieldProperty(this, getChronology().era());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,448,public final DateTimeFieldProperty dayOfWeek() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,449,"return new DateTimeFieldProperty(this, getChronology().dayOfWeek());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,488, Get the millis of second property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,455,* Get the hour of day field property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,490, @return the millis of second property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,457,* @return the hour of day property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,492,ublic final DateTimeFieldProperty millisOfSecond() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,493,"eturn new DateTimeFieldProperty(this, getChronology().millisOfSecond());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,459,public final DateTimeFieldProperty hourOfDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,460,"return new DateTimeFieldProperty(this, getChronology().hourOfDay());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,497, Get the millis of day property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,464,* Get the minute of day property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,499, @return the millis of day property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,466,* @return the minute of day property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,501,ublic final DateTimeFieldProperty millisOfDay() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,502,"eturn new DateTimeFieldProperty(this, getChronology().millisOfDay());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,468,public final DateTimeFieldProperty minuteOfDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,469,"return new DateTimeFieldProperty(this, getChronology().minuteOfDay());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,506, Get the second of minute field property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,473,* Get the minute of hour field property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,508, @return the second of minute property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,475,* @return the minute of hour property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,510,ublic final DateTimeFieldProperty secondOfMinute() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,511,"eturn new DateTimeFieldProperty(this, getChronology().secondOfMinute());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,477,public final DateTimeFieldProperty minuteOfHour() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,478,"return new DateTimeFieldProperty(this, getChronology().minuteOfHour());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,515, Get the second of day property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,482,* Get the second of day property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,524, Get the minute of hour field property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,491,* Get the second of minute field property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,526, @return the minute of hour property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,493,* @return the second of minute property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,528,ublic final DateTimeFieldProperty minuteOfHour() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,529,"eturn new DateTimeFieldProperty(this, getChronology().minuteOfHour());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,495,public final DateTimeFieldProperty secondOfMinute() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,496,"return new DateTimeFieldProperty(this, getChronology().secondOfMinute());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,533, Get the minute of day property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,500,* Get the millis of day property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,535, @return the minute of day property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,502,* @return the millis of day property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,537,ublic final DateTimeFieldProperty minuteOfDay() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,538,"eturn new DateTimeFieldProperty(this, getChronology().minuteOfDay());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,504,public final DateTimeFieldProperty millisOfDay() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,505,"return new DateTimeFieldProperty(this, getChronology().millisOfDay());"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,542, Get the hour of day field property.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,509,* Get the millis of second property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,544, @return the hour of day property
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,511,* @return the millis of second property
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,546,ublic final DateTimeFieldProperty hourOfDay() {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,547,"eturn new DateTimeFieldProperty(this, getChronology().hourOfDay());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,513,public final DateTimeFieldProperty millisOfSecond() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,514,"return new DateTimeFieldProperty(this, getChronology().millisOfSecond());"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,529,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,530,* immutable.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,532,protected final void setMillis(long millis) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,536,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,537,* immutable.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,539,protected final void setChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,58,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,71,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,72,* DateTimeComparator is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,74,ublic class DateTimeComparator implements Comparator {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,79,"public class DateTimeComparator implements Comparator, Serializable {"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,81,static final long serialVersionUID = -6097339773320178364L;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,143,* @return null if no lower limit
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,145,public DateTimeField getLowerLimit() {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,146,return iLowerLimit;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,150,* @return null if no upper limit
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,152,public DateTimeField getUpperLimit() {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,153,return iUpperLimit;
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,143," @return 0 if order does not matter, -1 if lhsObj &lt; rhsObj, 1"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,144, otherwise.
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,145, @throws IllegalArgumentException if either argument is null
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,146, @throws ClassCastException if either argument is one of the support
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,147, types
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,164,"* @return zero if order does not matter, negative value if lhsObj &lt;"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,165,"* rhsObj, positive value otherwise."
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,166,* @throws IllegalArgumentException if either argument is not supported
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,150,ong lhs = getMillisFromObject(lhsObj);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,151,ong rhs = getMillisFromObject(rhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,169,"long lhsMillis, rhsMillis;"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,171,if (lhsObj instanceof ReadableInstant) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,172,ReadableInstant lhsInstant = (ReadableInstant) lhsObj;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,174,if (rhsObj instanceof ReadableInstant) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,175,ReadableInstant rhsInstant = (ReadableInstant) rhsObj;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,177,"// If instants are partial, then they can use each other to"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,178,// fill in missing fields.
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,179,lhsMillis = lhsInstant.getMillis(rhsInstant);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,180,rhsMillis = rhsInstant.getMillis(lhsInstant);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,181,} else {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,182,lhsMillis = lhsInstant.getMillis();
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,183,rhsMillis = getMillisFromObject(rhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,185,} else {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,186,lhsMillis = getMillisFromObject(lhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,188,if (rhsObj instanceof ReadableInstant) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,189,rhsMillis = ((ReadableInstant) rhsObj).getMillis();
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,190,} else {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,191,rhsMillis = getMillisFromObject(rhsObj);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,153,f (iLowerLimit != null) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,154,hs = iLowerLimit.roundFloor(lhs);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,155,hs = iLowerLimit.roundFloor(rhs);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,195,DateTimeField field;
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,196,if ((field = iLowerLimit) != null) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,197,lhsMillis = field.roundFloor(lhsMillis);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,198,rhsMillis = field.roundFloor(rhsMillis);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,158,f (iUpperLimit != null) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,159,hs = iUpperLimit.remainder(lhs);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,160,hs = iUpperLimit.remainder(rhs);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,201,if ((field = iUpperLimit) != null) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,202,lhsMillis = field.remainder(lhsMillis);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,203,rhsMillis = field.remainder(rhsMillis);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,163,f (lhs < rhs) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,206,if (lhsMillis < rhsMillis) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,165, else if (lhs > rhs) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,208,} else if (lhsMillis > rhsMillis) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,216,* Support serialization singletons
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,218,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,219,"return getInstance(iLowerLimit, iUpperLimit);"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,182, @throws ClassCastException
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,185,rivate long getMillisFromObject(Object obj) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,186,f (obj instanceof ReadableInstant) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,187,eturn ((ReadableInstant)obj).getMillis();
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,189,f (obj instanceof java.util.Date) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,190,eturn ((java.util.Date)obj).getTime();
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,192,f (obj instanceof java.util.Calendar) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,193,eturn ((java.util.Calendar)obj).getTime().getTime();
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,195,f (obj instanceof Long) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,196,eturn ((Long)obj).longValue();
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,199,f (obj == null) {
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,200,"hrow new IllegalArgumentException(""Object to compare must not be null"");"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,203,hrow new ClassCastException
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,204,"""Invalid class for DateTimeComparator: "" + obj.getClass());"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,234,private static long getMillisFromObject(Object obj) {
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,235,return ConverterManager.getInstance().getInstantConverter(obj).getInstantMillis(obj);
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,56,mport java.util.*;
True,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,60,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,61,* DateTimeConstants is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,108, Constant list of the number of days in the month. The index into
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,109," the list is the month constant as defined in ReadableDate, thus"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,110, MAX_DAYS_IN_MONTH.get(0) has no meaning and returns null. This is a
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,111, list rather than an array as it must be unmodifiable.
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,113,ublic static final List MAX_DAYS_PER_MONTH =
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,114,ollections.unmodifiableList(
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,115,rrays.asList(
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,116,ew Integer[] {
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,117,"ull,"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,118,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,119,"ew Integer(29),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,120,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,121,"ew Integer(30),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,122,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,123,"ew Integer(30),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,124,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,125,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,126,"ew Integer(30),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,127,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,128,"ew Integer(30),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,129,ew Integer(31)}));
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,131, Constant list of the number of days in the month. The index into
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,132," the list is the month constant as defined in ReadableDate, thus"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,133, MIN_DAYS_IN_MONTH.get(0) has no meaning and returns null. This is a
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,134, list rather than an array as it must be unmodifiable.
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,136,ublic static final List MIN_DAYS_PER_MONTH =
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,137,ollections.unmodifiableList(
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,138,rrays.asList(
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,139,ew Integer[] {
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,140,"ull,"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,141,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,142,"ew Integer(28),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,143,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,144,"ew Integer(30),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,145,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,146,"ew Integer(30),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,147,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,148,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,149,"ew Integer(30),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,150,"ew Integer(31),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,151,"ew Integer(30),"
False,JodaTime/src/java/org/joda/time/DateTimeConstants.java,JodaTime/src/java/org/joda/time/DateTimeConstants.java,152,ew Integer(31)}));
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,56,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,60, DateTimeField is an abstract class which allows the date and time
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,61, manipulation code to be field based. Each field within a datetime
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,62, can be accessed and manipulated using a dedicated subclass of this
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,63, one.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,59,* Defines the calculation engine for date and time fields.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,60,* The interface defines a set of methods that manipulate a millisecond datetime
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,61,"* with regards to a single field, such as monthOfYear or secondOfMinute."
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,65," This design is extensible, so if you wish to extract a different"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,66," field from the milliseconds, you can do, simply by implementing"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,67, your own subclass.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,63,"* This design is extensible so, if you wish, you can extract a different field from"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,64,* the milliseconds. A number of standard implementations are provided to assist.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,74,ublic abstract class DateTimeField implements Serializable {
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,71,public interface DateTimeField {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,76,** A desriptive name for the field */
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,77,rivate final String iName;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,74,* Get the name of the field.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,76,* @return field name
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,78,public String getName();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,80, Constructor.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,81,* Returns true if this field is supported.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,82," @param name a short descriptive name for the field, such as"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,83, millisOfSecond
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,85,rotected DateTimeField(String name) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,86,uper();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,88,Name = name;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,83,* @return true if this field is supported
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,85,public boolean isSupported();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,92, Get the name of the field.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,88,"* Returns true if the set method is lenient. If so, it accepts values that"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,89,"* are out of bounds. For example, a lenient day of month field accepts 32"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,90,"* for January, converting it to February 1."
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,94, @return field name
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,92,* @return true if this field is lenient
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,96,ublic String getName() {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,97,eturn iName;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,94,public boolean isLenient();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,105, @param millis  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,101,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,108,ublic abstract int get(long millis);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,104,public int get(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,113, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,114, The default implementation returns Integer.toString(get(millis)).
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,115, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,116, Note: subclasses that override this method should also override
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,117, getMaximumTextLength.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,119, @param millis  the milliseconds from 1970-01-01T00:00:00Z to query
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,120," @param locale the locale to use for selecting a text symbol, null for"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,121, default
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,110,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,111,"* @param locale the locale to use for selecting a text symbol, null for default"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,124,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,125,eturn Integer.toString(get(millis));
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,114,"public String getAsText(long instant, Locale locale);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,130," This implementation returns getAsText(millis, null)."
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,132, @param millis  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,119,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,135,ublic final String getAsText(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,136,"eturn getAsText(millis, null);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,122,public String getAsText(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,141," milliseconds.  If the specified locale is null, the default locale is"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,142, used.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,143, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,144," The default implementation returns getAsText(millis, locale)."
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,145, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,146, Note: subclasses that override this method should also override
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,147, getMaximumShortTextLength.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,126,"* milliseconds.  If the specified locale is null, the default locale is used."
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,149, @param millis  the milliseconds from 1970-01-01T00:00:00Z to query
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,150," @param locale the locale to use for selecting a text symbol, null for"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,151, default
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,128,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,129,"* @param locale the locale to use for selecting a text symbol, null for default"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,154,"ublic String getAsShortText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,155,"eturn getAsText(millis, locale);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,132,"public String getAsShortText(long instant, Locale locale);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,160," milliseconds.  This implementation returns getAsShortText(millis, null)."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,136,* milliseconds.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,162, @param millis  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,138,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,165,ublic final String getAsShortText(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,166,"eturn getAsShortText(millis, null);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,141,public String getAsShortText(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,186, @param millis  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,160,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,190,"ublic abstract long add(long millis, int value);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,164,"public long add(long instant, int value);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,196, @param millis  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,170,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,202,"ublic abstract long add(long millis, long value);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,176,"public long add(long instant, long value);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,221, @param millis  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,195,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,225,"ublic long addWrapped(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,226,nt current = get(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,227,nt wrapped = getWrappedValue
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,228,"current, value, getMinimumValue(millis), getMaximumValue(millis));"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,229,"eturn set(millis, wrapped);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,199,"public long addWrapped(long instant, int value) ;"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,238, long millis = ...
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,207,* long instant = ...
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,240," long age = getDifference(add(millis, v), millis);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,209,"* int age = getDifference(add(instant, v), instant);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,244, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,245, The default implementation performs a guess-and-check algorithm using
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,246, the getUnitMillis and add methods. Subclasses are encouraged to provide
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,247, a more efficient implementation.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,249, @param minuendMillis the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,214,* @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,215,* subtract from
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,216,* @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,217,* subtract off the minuend
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,218,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,220,"public int getDifference(long minuendInstant, long subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,223,"* Computes the difference between two instants, as measured in the units"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,224,* of this field. Any fractional units are dropped from the result. Calling
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,225,* getDifference reverses the effect of calling add. In the following code:
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,227,* <pre>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,228,* long instant = ...
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,229,* long v = ...
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,230,"* long age = getDifferenceAsLong(add(instant, v), instant);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,231,* </pre>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,233,* The value 'age' is the same as the value 'v'.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,235,* @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,251, @param subtrahendMillis the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,237,* @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,255,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,256,f (minuendMillis < subtrahendMillis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,257,"eturn -getDifference(subtrahendMillis, minuendMillis);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,260,ong difference = (minuendMillis - subtrahendMillis) / getUnitMillis();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,261,"f (add(subtrahendMillis, difference) < minuendMillis) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,262,o {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,263,ifference++;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,264," while (add(subtrahendMillis, difference) <= minuendMillis);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,265,ifference--;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,266," else if (add(subtrahendMillis, difference) > minuendMillis) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,267,o {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,268,ifference--;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,269," while (add(subtrahendMillis, difference) > minuendMillis);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,271,eturn difference;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,241,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,280, @param millis  the milliseconds from 1970-01-01T00:00:00Z to set in
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,249,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,285,"ublic abstract long set(long millis, int value);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,254,"public long set(long instant, int value);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,290, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,291," The default implementation returns set(millis,"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,292, Integer.parseInt(millis)).
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,293, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,294, Note: subclasses that override this method should also override
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,295, getAsText.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,297, @param millis  the milliseconds from 1970-01-01T00:00:00Z to set in
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,260,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,304,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,305,ry {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,306,"eturn set(millis, Integer.parseInt(text));"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,307, catch (NumberFormatException ex) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,308,"hrow new IllegalArgumentException(""Invalid "" + getName() + "" text: "" + text);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,267,"public long set(long instant, String text, Locale locale);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,314," value. This implementation returns set(millis, text, null)."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,271,* value.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,316, @param millis  the milliseconds from 1970-01-01T00:00:00Z to set in
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,273,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,321,"ublic final long set(long millis, String text) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,322,"eturn set(millis, text, null);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,278,"public long set(long instant, String text);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,328, Returns whether this field is 'leap' for the specified millis.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,283,"* Returns the duration per unit value of this field. For example, if this"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,284,"* field represents ""hour of day"", then the duration is an hour."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,286,"* @return the duration of this field, or UnsupportedDurationField if field"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,287,* has no duration
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,289,public DurationField getDurationField();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,292,"* Returns the range duration of this field. For example, if this field"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,293,"* represents ""hour of day"", then the range duration is a day."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,295,"* @return the range duration of this field, or null if field has no range"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,297,public DurationField getRangeDurationField();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,300,* Returns whether this field is 'leap' for the specified instant.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,332, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,333, This implementation returns false.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,337,ublic boolean isLeap(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,338,eturn false;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,307,public boolean isLeap(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,342, Gets the amount by which this field is 'leap' for the specified millis.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,310,* Gets the amount by which this field is 'leap' for the specified instant.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,346, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,347, This implementation returns zero.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,349,ublic int getLeapAmount(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,350,eturn 0;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,315,public int getLeapAmount(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,354, Returns the amount of milliseconds per unit value of this field. For
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,355," example, if this field represents ""hour of day"", then the unit is the"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,356, amount of milliseconds per one hour.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,357, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,358," For fields with a variable unit size, this method returns a suitable"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,359, average value.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,361," @return the unit size of this field, in milliseconds"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,363,ublic abstract long getUnitMillis();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,366," Returns the range of this field, in milliseconds. For example, if this"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,367," field represents ""hour of day"", then the range is the amount of"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,368, milliseconds per one day.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,369, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,370," For fields with a variable range, this method returns a suitable average"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,371," value. If the range is too large to fit in a long, Long.MAX_VALUE is"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,372, returned.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,374," @return the range of this field, in milliseconds"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,318,"* If this field were to leap, then it would be in units described by the"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,319,"* returned duration. If this field doesn't ever leap, null is returned."
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,376,ublic abstract long getRangeMillis();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,321,public DurationField getLeapDurationField();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,384,ublic abstract int getMinimumValue();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,329,public int getMinimumValue();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,388, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,389, This implementation returns the same as {@link #getMinimumValue()}.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,391, @param millis  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,334,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,394,ublic int getMinimumValue(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,395,eturn getMinimumValue();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,337,public int getMinimumValue(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,404,ublic abstract int getMaximumValue();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,345,public int getMaximumValue();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,408, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,409, This implementation returns the same as {@link #getMaximumValue()}.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,411, @param millis  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,350,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,414,ublic int getMaximumValue(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,415,eturn getMaximumValue();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,353,public int getMaximumValue(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,419, Get the maximum text value for this field. The default implementation
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,420, returns the equivalent of Integer.toString(getMaximumValue()).length().
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,356,* Get the maximum text value for this field.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,425,ublic int getMaximumTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,426,nt max = getMaximumValue();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,427,f (max >= 0) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,428,f (max < 10) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,429,eturn 1;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,430, else if (max < 100) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,431,eturn 2;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,432, else if (max < 1000) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,433,eturn 3;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,436,eturn Integer.toString(max).length();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,440, Get the maximum short text value for this field. The default
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,441, implementation returns getMaximumTextLength().
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,361,public int getMaximumTextLength(Locale locale);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,364,* Get the maximum short text value for this field.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,446,ublic int getMaximumShortTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,447,eturn getMaximumTextLength(locale);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,369,public int getMaximumShortTextLength(Locale locale);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,461, @param millis  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,382,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,464,ublic abstract long roundFloor(long millis);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,385,public long roundFloor(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,474, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,475," The default implementation calls roundFloor, and if the millis is"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,476," modified as a result, adds one field unit. Subclasses are encouraged to"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,477, provide a more efficient implementation.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,479, @param millis  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,396,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,482,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,483,ong newMillis = roundFloor(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,484,f (newMillis != millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,485,"illis = add(newMillis, 1);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,487,eturn millis;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,399,public long roundCeiling(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,496, @param millis  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,407,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,499,ublic long roundHalfFloor(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,500,ong floor = roundFloor(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,501,ong ceiling = roundCeiling(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,503,ong diffFromFloor = millis - floor;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,504,ong diffToCeiling = ceiling - millis;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,506,f (diffFromFloor <= diffToCeiling) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,507,"/ Closer to the floor, or halfway - round floor"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,508,eturn floor;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,509, else {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,510,eturn ceiling;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,410,public long roundHalfFloor(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,520, @param millis  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,418,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,523,ublic long roundHalfCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,524,ong floor = roundFloor(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,525,ong ceiling = roundCeiling(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,527,ong diffFromFloor = millis - floor;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,528,ong diffToCeiling = ceiling - millis;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,530,f (diffToCeiling <= diffFromFloor) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,531,"/ Closer to the ceiling, or halfway - round ceiling"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,532,eturn ceiling;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,533, else {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,534,eturn floor;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,421,public long roundHalfCeiling(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,548, @param millis  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,433,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,551,ublic long roundHalfEven(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,552,ong floor = roundFloor(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,553,ong ceiling = roundCeiling(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,555,ong diffFromFloor = millis - floor;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,556,ong diffToCeiling = ceiling - millis;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,558,f (diffFromFloor < diffToCeiling) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,559,/ Closer to the floor - round floor
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,560,eturn floor;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,561, else if (diffToCeiling < diffFromFloor) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,562,/ Closer to the ceiling - round ceiling
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,563,eturn ceiling;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,564, else {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,565,/ Round to the millis that makes this field even. If both values
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,566,"/ make this field even (unlikely), favor the ceiling."
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,567,f ((get(ceiling) & 1) == 0) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,568,eturn ceiling;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,570,eturn floor;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,575, Retains only the fractional units of this field. This field value and
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,576," all fields of higher magnitude are reset. In other words, calling"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,577, remainder retains the part of the instant that roundFloor dropped.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,578, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,579," For example, a datetime of 2002-11-02T23:34:56.789, the remainder by"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,580, hour is 1970-01-01T00:34:56.789.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,581, <p>
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,582, The default implementation computes
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,583, <code>millis - roundFloor(millis)</code>. Subclasses are encouraged to
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,584, provide a more efficient implementation.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,586, @param millis the milliseconds from 1970-01-01T00:00:00Z to get the
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,587, remainder
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,588, @return remainder milliseconds
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,590,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,591,eturn millis - roundFloor(millis);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,594,/ Implementation helper methods
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,597, Verify that input values are within specified bounds.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,599, @param value  the value to check
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,600, @param lowerBound  the lower bound allowed for value
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,601, @param upperBound  the upper bound allowed for value
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,602, @throws IllegalArgumentException if value is not in the specified bounds
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,604,"rotected void verifyValueBounds(int value, int lowerBound, int upperBound) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,605,f ((value < lowerBound) || (value > upperBound)) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,606,hrow new IllegalArgumentException(
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,607,"Value: """
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,608, value
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,609," "" for """
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,610, iName
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,611," "" must be in the range ("""
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,612, lowerBound
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,614, upperBound
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,620, Utility method used by addWrapped implementations to ensure the new
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,621, value lies within the field's legal value range.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,623," @param currentValue the current value of the data, which may lie outside"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,624, the wrapped value range
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,625, @param wrapValue  the value to add to current value before
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,626,  wrapping.  This may be negative.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,627, @param minValue the wrap range minimum value.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,628, @param maxValue the wrap range maximum value.  This must be
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,629,  greater than minValue (checked by the method).
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,630, @return the wrapped value
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,631, @throws IllegalArgumentException if minValue is greater
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,632,  than or equal to maxValue
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,634,"rotected final int getWrappedValue(int currentValue, int wrapValue,"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,635,"nt minValue, int maxValue) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,636,"eturn getWrappedValue(currentValue + wrapValue, minValue, maxValue);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,640, Utility method that ensures the given value lies within the field's
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,641, legal value range.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,643, @param value  the value to fit into the wrapped value range
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,644, @param minValue the wrap range minimum value.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,645, @param maxValue the wrap range maximum value.  This must be
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,646,  greater than minValue (checked by the method).
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,647, @return the wrapped value
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,648, @throws IllegalArgumentException if minValue is greater
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,649,  than or equal to maxValue
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,651,"rotected final int getWrappedValue(int value, int minValue, int maxValue) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,652,f (minValue >= maxValue) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,653,"hrow new IllegalArgumentException(""MIN > MAX"");"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,656,nt wrapRange = maxValue - minValue + 1;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,657,alue -= minValue;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,659,f (value >= 0) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,660,eturn (value % wrapRange) + minValue;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,663,nt remByRange = (-value) % wrapRange;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,665,f (remByRange == 0) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,666,eturn 0 + minValue;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,668,eturn (wrapRange - remByRange) + minValue;
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,436,public long roundHalfEven(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,672," If value can be safely cast to an int, then add(long, int) is called,"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,673," returning its result. Otherwise, an IllegalArgumentException is thrown."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,439,* Returns the fractional duration milliseconds of this field. In other
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,440,"* words, calling remainder returns the duration that roundFloor would"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,441,* subtract.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,442,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,443,"* For example, on a datetime of 2002-11-02T23:34:56.789, the remainder by"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,444,* hour is 34 minutes and 56.789 seconds.
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,675, @param millis  the milliseconds from 1970-01-01T00:00:00Z to add to
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,676," @param value  the value to add, in the units of the field"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,677, @return the updated milliseconds
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,678, @throws IllegalArgumentException if value is too large
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,446,* @param instant the milliseconds from 1970-01-01T00:00:00Z to get the
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,447,* remainder
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,448,"* @return remainder duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,680,"rotected long addLong(long millis, long value) {"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,681,nt i_value = (int)value;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,682,f (i_value == value) {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,683,"eturn add(millis, i_value);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,685,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,686,"""Magnitude of add amount is too large: "" + value);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,450,public long remainder(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,694,ublic String toString() {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,695,"eturn ""DateTimeField["" + iName + ']';"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,457,public String toString();
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,57,mport java.io.Serializable;
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,60, DateTimeFieldProperty binds a ReadableInstant to a DateTimeField.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,59,* DateTimeFieldProperty binds a DateTime to a DateTimeField allowing powerful
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,60,* datetime functionality to be easily accessed.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,62, DateTimeFieldProperty allows the date and time manipulation code to be
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,63, field based yet still easy to use.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,62,"* The simplest use of this class is as an alternative get method, here used to"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,63,* get the year '1972' (as an int) and the month 'December' (as a String).
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,64,* <pre>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,65,"* DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,66,* int year = dt.year().get();
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,67,* String monthStr = dt.month().getAsText();
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,68,* </pre>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,69,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,70,* Methods are also provided that allow date modification. These return new instances
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,71,* of DateTime - they do not modify the original. The example below yields two
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,72,* independent immutable date objects 20 years apart.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,73,* <pre>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,74,"* DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,75,* DateTime dt20 = dt.year().addToCopy(20);
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,76,* </pre>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,77,* Serious modification of dates (ie. more than just changing one or two fields)
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,78,* should use the {@link MutableDateTime} class.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,79,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,80,"* DateTimeFieldPropery itself is thread-safe and immutable, as well as the"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,81,* DateTime being operated on.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,72,ublic class DateTimeFieldProperty implements Serializable {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,90,public class DateTimeFieldProperty extends AbstractDateTimeFieldProperty {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,92,static final long serialVersionUID = -6983323811635733510L;
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,75,rivate final ReadableInstant iInstant;
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,95,private final DateTime iInstant;
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,85,"ublic DateTimeFieldProperty(ReadableInstant instant, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,105,"public DateTimeFieldProperty(DateTime instant, DateTimeField field) {"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,102, Gets the name of the field.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,122,* Gets the instant being used.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,104, @return the field name
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,124,* @return the instant
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,106,ublic String getName() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,107,eturn iField.getName();
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,126,public ReadableDateTime getInstant() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,127,return iInstant;
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,115,ublic ReadableInstant getInstant() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,135,public DateTime getDateTime() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,121, Gets a value from the instant.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,123, @return the current value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,124, @see DateTimeField#get
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,126,ublic int get() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,127,eturn iField.get(iInstant.getMillis());
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,131, Gets a text value from the instant.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,133, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,134, @return the current text value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,135, @see DateTimeField#getAsText
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,137,ublic String getAsText(Locale locale) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,138,"eturn iField.getAsText(iInstant.getMillis(), locale);"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,142, Gets a text value from the instant.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,144, @return the current text value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,145, @see DateTimeField#getAsText
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,147,ublic final String getAsText() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,148,"eturn iField.getAsText(iInstant.getMillis(), null);"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,152, Gets a short text value from the instant.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,154, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,155, @return the current text value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,156, @see DateTimeField#getAsShortText
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,158,ublic String getAsShortText(Locale locale) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,159,"eturn iField.getAsShortText(iInstant.getMillis(), locale);"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,163, Gets a short text value from the instant.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,141,* Adds to this field in a copy of this DateTime.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,142,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,143,* The DateTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,144,* This operation is faster than converting a DateTime to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,145,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,146,* it is generally quicker to make the conversion to MutableDateTime.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,165, @return the current text value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,166, @see DateTimeField#getAsShortText
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,168,ublic final String getAsShortText() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,169,eturn getAsShortText(null);
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,174, Returns the difference between this field property instant and the one
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,175," passed in, in the units of this field. The sign of the difference"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,176," matches that of compareTo. In other words, this field property's instant"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,177, is the minuend.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,179, @param instant the subtrahend
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,180, @return the difference in the units of this field
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,181, @see DateTimeField#getDifference
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,148,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,149,* @return a copy of the DateTime with the field value changed
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,150,* @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,183,ublic long getDifference(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,184,f (instant == null) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,185,"hrow new IllegalArgumentException(""The instant must not be null"");"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,187,"eturn iField.getDifference(iInstant.getMillis(), instant.getMillis());"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,152,public DateTime addToCopy(int value) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,153,"long newMillis = iField.add(iInstant.getMillis(), value);"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,154,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,191, Gets whether this field is leap.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,158,* Adds to this field in a copy of this DateTime.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,159,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,160,* The DateTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,161,* This operation is faster than converting a DateTime to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,162,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,163,* it is generally quicker to make the conversion to MutableDateTime.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,193, @return true if a leap field
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,194, @see DateTimeField#isLeap
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,165,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,166,* @return a copy of the DateTime with the field value changed
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,167,* @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,196,ublic boolean isLeap() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,197,eturn iField.isLeap(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,169,public DateTime addToCopy(long value) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,170,"long newMillis = iField.add(iInstant.getMillis(), value);"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,171,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,201, Gets the amount by which this field is leap.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,175,"* Adds to this field, possibly wrapped, in a copy of this DateTime."
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,176,* A wrapped operation only changes this field.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,177,* Thus 31st January addWrapped one day goes to the 1st January.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,178,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,179,* The DateTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,180,* This operation is faster than converting a DateTime to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,181,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,182,* it is generally quicker to make the conversion to MutableDateTime.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,203, @return the amount by which the field is leap
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,204, @see DateTimeField#getLeapAmount
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,184,* @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,185,* @return a copy of the DateTime with the field value changed
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,186,* @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,206,ublic int getLeapAmount() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,207,eturn iField.getLeapAmount(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,188,public DateTime addWrappedToCopy(int value) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,189,"long newMillis = iField.addWrapped(iInstant.getMillis(), value);"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,190,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,212, Gets the minimum value for the field ignoring the current time.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,214, @return the minimum value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,215, @see DateTimeField#getMinimumValue
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,217,ublic int getMinimumValueOverall() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,218,eturn iField.getMinimumValue();
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,222, Gets the minimum value for the field.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,195,* Sets this field in a copy of the DateTime.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,196,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,197,* The DateTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,198,* This operation is faster than converting a DateTime to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,199,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,200,* it is generally quicker to make the conversion to MutableDateTime.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,224, @return the minimum value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,225, @see DateTimeField#getMinimumValue
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,202,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,203,* @return a copy of the DateTime with the field value changed
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,204,* @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,227,ublic int getMinimumValue() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,228,eturn iField.getMinimumValue(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,206,public DateTime setCopy(int value) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,207,"long newMillis = iField.set(iInstant.getMillis(), value);"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,208,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,232, Gets the maximum value for the field ignoring the current time.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,212,* Sets this field in a copy of the DateTime to a parsed text value.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,213,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,214,* The DateTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,215,* This operation is faster than converting a DateTime to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,216,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,217,* it is generally quicker to make the conversion to MutableDateTime.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,234, @return the maximum value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,235, @see DateTimeField#getMaximumValue
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,219,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,220,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,221,* @return a copy of the DateTime with the field value changed
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,222,* @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,237,ublic int getMaximumValueOverall() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,238,eturn iField.getMaximumValue();
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,224,"public DateTime setCopy(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,225,"long newMillis = iField.set(iInstant.getMillis(), text, locale);"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,226,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,242, Gets the maximum value for the field.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,230,* Sets this field in a copy of the DateTime to a parsed text value.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,231,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,232,* The DateTime attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,233,* This operation is faster than converting a DateTime to a MutableDateTime
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,234,"* and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,235,* it is generally quicker to make the conversion to MutableDateTime.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,244, @return the maximum value
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,245, @see DateTimeField#getMaximumValue
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,237,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,238,* @return a copy of the DateTime with the field value changed
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,239,* @throws IllegalArgumentException if the text value isn't valid
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,247,ublic int getMaximumValue() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,248,eturn iField.getMaximumValue(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,241,public final DateTime setCopy(String text) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,242,"return setCopy(text, null);"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,252, Gets the maximum text length for the field.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,254, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,255, @return the maximum length
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,256, @see DateTimeField#getMaximumTextLength
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,247,* Rounds to the lowest whole unit of this field on a copy of this DateTime.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,249,* @return a copy of the DateTime with the field value changed
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,258,ublic int getMaximumTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,259,eturn iField.getMaximumTextLength(locale);
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,251,public DateTime roundFloorCopy() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,252,long newMillis = iField.roundFloor(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,253,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,263, Gets the maximum short text length for the field.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,265, @param locale  optional locale to use for selecting a text symbol
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,266, @return the maximum length
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,267, @see DateTimeField#getMaximumShortTextLength
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,257,* Rounds to the highest whole unit of this field on a copy of this DateTime.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,259,* @return a copy of the DateTime with the field value changed
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,269,ublic int getMaximumShortTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,270,eturn iField.getMaximumShortTextLength(locale);
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,261,public DateTime roundCeilingCopy() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,262,long newMillis = iField.roundCeiling(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,263,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,275, Returns the amount of milliseconds per unit value of this field. For
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,276," example, if this field represents ""hour of day"", then the unit is the"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,277, amount of milliseconds per one hour.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,278, <p>
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,279," For fields with a variable unit size, this method returns a suitable"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,280, average value.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,267,"* Rounds to the nearest whole unit of this field on a copy of this DateTime,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,268,* favoring the floor if halfway.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,282," @return the unit size of this field, in milliseconds"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,270,* @return a copy of the DateTime with the field value changed
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,284,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,285,eturn iField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,272,public DateTime roundHalfFloorCopy() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,273,long newMillis = iField.roundHalfFloor(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,274,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,289," Returns the range of this field, in milliseconds. For example, if this"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,290," field represents ""hour of day"", then the range is the amount of"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,291, milliseconds per one day.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,292, <p>
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,293," For fields with a variable range, this method returns a suitable average"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,294," value. If the range is too large to fit in a long, Long.MAX_VALUE is"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,295, returned.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,278,"* Rounds to the nearest whole unit of this field on a copy of this DateTime,"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,279,* favoring the ceiling if halfway.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,297," @return the range of this field, in milliseconds"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,281,* @return a copy of the DateTime with the field value changed
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,299,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,300,eturn iField.getRangeMillis();
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,283,public DateTime roundHalfCeilingCopy() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,284,long newMillis = iField.roundHalfCeiling(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,285,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,305, Compare this field to the same field on another instant.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,306, <p>
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,307, The {@link #get()} method is used to obtain the value to compare for
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,308, this instant and the {@link ReadableInstant#get(DateTimeField)} method
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,309, is used for the specified instant.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,311, @param instant  the instant to compare to
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,312," @return -1 if this is less, +1 if more and 0 if equal"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,313, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,315,ublic int compareTo(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,316,f (instant == null) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,317,"hrow new IllegalArgumentException(""The instant must not be null"");"
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,319,nt thisValue = get();
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,320,nt otherValue = iField.get(instant.getMillis());
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,321,f (thisValue < otherValue) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,322,eturn -1;
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,323, else if (thisValue > otherValue) {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,324,eturn 1;
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,325, else {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,326,eturn 0;
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,332, Output a debugging string.
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,334, @return debugging string
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,289,* Rounds to the nearest whole unit of this field on a copy of this DateTime.
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,290,"* If halfway, the ceiling is favored over the floor only if it makes this field's value even."
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,292,* @return a copy of the DateTime with the field value changed
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,336,ublic String toString() {
False,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,337,"eturn ""DateTimeFieldProperty["" + getName() + ""]"";"
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,294,public DateTime roundHalfEvenCopy() {
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,295,long newMillis = iField.roundHalfEven(iInstant.getMillis());
True,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/DateTimeFieldProperty.java,296,"return iInstant.createDateTime(newMillis, iInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,62,mport java.text.ParseException;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,70,import org.joda.time.tz.DateTimeZonePermission;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,113,"* DateTimeZone is thread-safe and immutable, and all subclasses must be as"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,114,* well.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,122,static final long serialVersionUID = 5546345482340108586L;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,137,rovider provider = null;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,139,"tring providerClass = System.getProperty(""org.joda.time.DateTimeZone.Provider"");"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,140,f (providerClass != null) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,141,ry {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,142,rovider = (Provider)Class.forName(providerClass).newInstance();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,144,atch (Exception e) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,145,hread t = Thread.currentThread();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,146,".getThreadGroup().uncaughtException(t, e);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,150,f (provider == null) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,151,ry {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,152,"rovider = new ZoneInfoProvider(""org/joda/time/tz/data"");"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,153, catch (Exception e) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,154,hread t = Thread.currentThread();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,155,".getThreadGroup().uncaughtException(t, e);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,159,f (provider == null) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,160,rovider = new UTCProvider();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,163,etProvider(provider);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,165,ameProvider nameProvider = null;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,167,"roviderClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,168,f (providerClass != null) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,169,ry {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,170,ameProvider = (NameProvider)Class.forName(providerClass).newInstance();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,172,atch (Exception e) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,173,hread t = Thread.currentThread();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,174,".getThreadGroup().uncaughtException(t, e);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,178,f (nameProvider == null) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,179,ameProvider = new DefaultNameProvider();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,182,etNameProvider(nameProvider);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,141,setProvider0(null);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,142,setNameProvider0(null);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,214,/ TODO: Put in a security check.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,174,SecurityManager sm = System.getSecurityManager();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,175,if (sm != null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,176,"sm.checkPermission(new DateTimeZonePermission(""setDefault""));"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,248,ry {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,249,nt offset = -(int)offsetFormatter().parseMillis(id);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,250,/ Canonicalize the id.
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,251,"d = offsetFormatter().print(0, UTC, offset);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,252,"eturn new FixedDateTimeZone(id, null, offset, offset);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,253, catch (ParseException e) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,254,hrow new IllegalArgumentException(e.getMessage());
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,211,int offset = -(int)offsetFormatter().parseMillis(id);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,212,// Canonicalize the id.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,213,"id = offsetFormatter().print(0, UTC, offset);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,214,"return new FixedDateTimeZone(id, null, offset, offset);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,296,ry {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,297,nt offset = -(int)offsetFormatter().parseMillis(convId);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,298,/ Canonicalize the id.
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,299,"onvId = offsetFormatter().print(0, UTC, offset);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,300,"eturn new FixedDateTimeZone(convId, null, offset, offset);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,301, catch (ParseException e) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,302,hrow new IllegalArgumentException(e.getMessage());
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,255,int offset = -(int)offsetFormatter().parseMillis(convId);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,256,// Canonicalize the id.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,257,"convId = offsetFormatter().print(0, UTC, offset);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,258,"return new FixedDateTimeZone(convId, null, offset, offset);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,302,"* @param provider provider to use, or null for default"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,347,/ TODO: Put in a security check.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,305,SecurityManager sm = System.getSecurityManager();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,306,if (sm != null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,307,"sm.checkPermission(new DateTimeZonePermission(""setProvider""));"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,309,setProvider0(provider);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,313,* Doesn't perform a security check.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,315,private static void setProvider0(Provider provider) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,349,"hrow new IllegalArgumentException(""The provider must not be null"");"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,317,provider = getDefaultProvider();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,339,"* @param nameProvider provider to use, or null for default"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,371,/ TODO: Put in a security check.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,342,SecurityManager sm = System.getSecurityManager();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,343,if (sm != null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,344,"sm.checkPermission(new DateTimeZonePermission(""setNameProvider""));"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,346,setNameProvider0(nameProvider);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,350,* Doesn't perform a security check.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,352,private static void setNameProvider0(NameProvider nameProvider) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,373,"hrow new IllegalArgumentException(""The provider must not be null"");"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,354,nameProvider = getDefaultNameProvider();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,410,private static Provider getDefaultProvider() {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,411,Provider provider = null;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,413,try {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,414,String providerClass =
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,415,"System.getProperty(""org.joda.time.DateTimeZone.Provider"");"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,416,if (providerClass != null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,417,try {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,418,provider = (Provider)Class.forName(providerClass).newInstance();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,420,catch (Exception e) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,421,Thread t = Thread.currentThread();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,422,"t.getThreadGroup().uncaughtException(t, e);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,425,} catch (SecurityException e) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,428,if (provider == null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,429,try {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,430,"provider = new ZoneInfoProvider(""org/joda/time/tz/data"");"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,431,} catch (Exception e) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,432,Thread t = Thread.currentThread();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,433,"t.getThreadGroup().uncaughtException(t, e);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,437,if (provider == null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,438,provider = new UTCProvider();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,441,return provider;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,444,private static NameProvider getDefaultNameProvider() {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,445,NameProvider nameProvider = null;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,447,try {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,448,String providerClass =
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,449,"System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,450,if (providerClass != null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,451,try {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,452,nameProvider = (NameProvider)Class.forName(providerClass).newInstance();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,454,catch (Exception e) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,455,Thread t = Thread.currentThread();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,456,"t.getThreadGroup().uncaughtException(t, e);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,459,} catch (SecurityException e) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,462,if (nameProvider == null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,463,nameProvider = new DefaultNameProvider();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,466,return nameProvider;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,457, @param millis milliseconds from 1970-01-01T00:00:00Z to get the name for
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,497,* @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,460,ublic abstract String getNameKey(long millis);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,500,public abstract String getNameKey(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,469, @param millis milliseconds from 1970-01-01T00:00:00Z to get the name for
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,509,* @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,472,ublic final String getShortName(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,473,"eturn getShortName(millis, null);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,512,public final String getShortName(long instant) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,513,"return getShortName(instant, null);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,483, @param millis milliseconds from 1970-01-01T00:00:00Z to get the name for
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,523,* @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,486,"ublic String getShortName(long millis, Locale locale) {"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,526,"public String getShortName(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,490,tring nameKey = getNameKey(millis);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,530,String nameKey = getNameKey(instant);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,498,"eturn offsetFormatter().print(millis, this);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,538,"return offsetFormatter().print(instant, this);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,508, @param millis milliseconds from 1970-01-01T00:00:00Z to get the name for
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,548,* @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,511,ublic final String getName(long millis) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,512,"eturn getName(millis, null);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,551,public final String getName(long instant) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,552,"return getName(instant, null);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,522, @param millis milliseconds from 1970-01-01T00:00:00Z to get the name for
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,562,* @param instant milliseconds from 1970-01-01T00:00:00Z to get the name for
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,525,"ublic String getName(long millis, Locale locale) {"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,565,"public String getName(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,529,tring nameKey = getNameKey(millis);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,569,String nameKey = getNameKey(instant);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,537,"eturn offsetFormatter().print(millis, this);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,577,"return offsetFormatter().print(instant, this);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,543, @param millis milliseconds from 1970-01-01T00:00:00Z to get the offset for
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,583,* @param instant milliseconds from 1970-01-01T00:00:00Z to get the offset for
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,546,ublic abstract int getOffset(long millis);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,586,public abstract int getOffset(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,566, @param millis milliseconds from 1970-01-01T00:00:00Z to get the offset for
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,606,* @param instant milliseconds from 1970-01-01T00:00:00Z to get the offset for
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,569,ublic abstract int getStandardOffset(long millis);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,609,public abstract int getStandardOffset(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,584," @param millisLocal the millisecond instant, relative to this time zone, to"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,624,"* @param instantLocal the millisecond instant, relative to this time zone, to"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,588,ublic int getOffsetFromLocal(long millisLocal) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,589,eturn getOffset(millisLocal - getOffset(millisLocal));
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,628,public int getOffsetFromLocal(long instantLocal) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,629,return getOffset(instantLocal - getOffset(instantLocal));
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,633,* Returns true if this time zone has no transitions.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,635,* @return true if no transitions
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,637,public abstract boolean isFixed();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,597, @param millis milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,644,* @param instant milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,600,ublic abstract long nextTransition(long millis);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,647,public abstract long nextTransition(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,607, @param millis milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,654,* @param instant milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,610,ublic abstract long previousTransition(long millis);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,657,public abstract long previousTransition(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,630,ublic abstract boolean equals(Object obj);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,677,public abstract boolean equals(Object object);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,721,static final long serialVersionUID = -6471952376487863581L;
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,10,* are met:
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,59,* Standard immutable duration implementation split on any set of fields.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,60,* <p>
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,61,"* A duration can be divided into a number of fields, such as hours and seconds."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,62,* The way in which that divide occurs is controlled by the DurationType class.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,63,* <p>
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,64,"* Duration is thread-safe and immutable, provided that the DurationType is"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,65,* as well. All standard DurationType classes supplied are thread-safe and
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,66,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,68,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,69,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,70,* @since 1.0
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,71,* @see MutableDuration
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,73,"public class Duration extends AbstractDuration implements ReadableDuration, Serializable {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,75,static final long serialVersionUID = 741052353876488155L;
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,78,* Copies another duration to this one.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,80,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,81,* non-zero
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,83,public Duration(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,84,super(duration);
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,88,* Copies another duration to this one.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,90,* @param type use a different DurationType
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,91,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,92,* non-zero
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,94,"public Duration(DurationType type, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,95,"super(type, duration);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,99,* Create a duration from a set of field values.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,101,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,102,"* @param years amount of years in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,103,* unsupported.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,104,"* @param months amount of months in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,105,* unsupported.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,106,"* @param weeks amount of weeks in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,107,* unsupported.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,108,"* @param days amount of days in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,109,* unsupported.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,110,"* @param hours amount of hours in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,111,* unsupported.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,112,"* @param minutes amount of minutes in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,113,* unsupported.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,114,"* @param seconds amount of seconds in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,115,* unsupported.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,116,"* @param millis amount of milliseconds in this duration, which must be"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,117,* zero if unsupported.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,118,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,119,* non-zero
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,121,"public Duration(DurationType type,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,122,"int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,123,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,124,"super(type, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,128,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,130,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,131,"* @param startInstant interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,132,"* @param endInstant interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,134,"public Duration(DurationType type, long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,135,"super(type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,139,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,141,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,142,* @param startInstant interval start
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,143,* @param endInstant interval end
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,145,"public Duration(DurationType type,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,146,"ReadableInstant startInstant, ReadableInstant endInstant) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,147,"super(type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,151,* Creates a duration from the given millisecond duration. If any supported
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,152,"* fields are imprecise, an UnsupportedOperationException is thrown. The"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,153,* exception to this is when the specified duration is zero.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,155,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,156,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,157,* @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,159,"public Duration(DurationType type, long duration) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,160,"super(type, duration);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,164,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,165,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,167,protected final void setDuration(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,171,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,172,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,174,"protected final void setDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,175,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,179,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,180,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,182,"protected final void setTotalMillis(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,186,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,187,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,189,protected final void setTotalMillis(long duration) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,193,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,194,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,196,protected final void normalize() {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,200,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,201,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,203,protected final void setYears(int years) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,207,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,208,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,210,protected final void setMonths(int months) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,214,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,215,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,217,protected final void setWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,221,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,222,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,224,protected final void setDays(int days) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,228,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,229,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,231,protected final void setHours(int hours) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,235,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,236,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,238,protected final void setMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,242,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,243,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,245,protected final void setSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,249,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,250,* immutable.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,252,protected final void setMillis(int millis) {
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,57,* Defines the calculation engine for duration fields.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,58,* The interface defines a set of methods that manipulate a millisecond duration
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,59,"* with regards to a single field, such as months or seconds."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,60,* <p>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,61,"* This design is extensible so, if you wish, you can extract a different field from"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,62,* the millisecond duration. A number of standard implementations are provided to assist.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,64,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,65,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,66,* @since 1.0
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,68,public interface DurationField extends Comparable {
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,71,* Get the name of the field.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,73,* @return field name
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,75,public String getName();
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,78,* Returns true if this field is supported.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,80,* @return true if this field is supported
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,82,public boolean isSupported();
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,85,* Is this field precise. A precise field can calculate its value from
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,86,"* milliseconds without needing a reference date. Put another way, a"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,87,* precise field's unit size is not variable.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,89,* @return true if precise
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,90,* @see #getUnitMillis()
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,92,public boolean isPrecise();
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,95,* Returns the amount of milliseconds per unit value of this field. For
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,96,"* example, if this field represents ""seconds"", then this returns the"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,97,* milliseconds in one second.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,98,* <p>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,99,"* For imprecise fields, the unit size is variable, and so this method"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,100,* returns a suitable average value.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,102,"* @return the unit size of this field, in milliseconds"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,103,* @see #isPrecise()
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,105,public long getUnitMillis();
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,109,"* Get the value of this field from the milliseconds, which is approximate"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,110,* if this field is imprecise.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,112,"* @param duration  the milliseconds to query, which may be negative"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,113,"* @return the value of the field, in the units of the field, which may be"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,114,* negative
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,115,* @throws ArithmeticException if the value is too large for an int
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,117,public int getValue(long duration);
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,120,"* Get the value of this field from the milliseconds, which is approximate"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,121,* if this field is imprecise.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,123,"* @param duration  the milliseconds to query, which may be negative"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,124,"* @return the value of the field, in the units of the field, which may be"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,125,* negative
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,127,public long getValueAsLong(long duration);
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,130,* Get the value of this field from the milliseconds relative to an
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,131,* instant. For precise fields this method produces the same result as for
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,132,* the single argument get method.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,133,* <p>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,134,"* If the millisecond duration is positive, then the instant is treated as a"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,135,"* ""start instant"". If negative, the instant is treated as an ""end instant""."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,137,"* @param duration  the milliseconds to query, which may be negative"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,138,* @param instant  the start instant to calculate relative to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,139,"* @return the value of the field, in the units of the field, which may be"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,140,* negative
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,141,* @throws ArithmeticException if the value is too large for an int
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,143,"public int getValue(long duration, long instant);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,146,* Get the value of this field from the milliseconds relative to an
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,147,* instant. For precise fields this method produces the same result as for
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,148,* the single argument get method.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,149,* <p>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,150,"* If the millisecond duration is positive, then the instant is treated as a"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,151,"* ""start instant"". If negative, the instant is treated as an ""end instant""."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,153,"* @param duration  the milliseconds to query, which may be negative"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,154,* @param instant  the start instant to calculate relative to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,155,"* @return the value of the field, in the units of the field, which may be"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,156,* negative
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,158,"public long getValueAsLong(long duration, long instant);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,162,"* Get the millisecond duration of this field from its value, which is"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,163,* approximate if this field is imprecise.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,165,"* @param value  the value of the field, which may be negative"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,166,"* @return the milliseconds that the field represents, which may be"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,167,* negative
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,169,public long getMillis(int value);
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,172,"* Get the millisecond duration of this field from its value, which is"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,173,* approximate if this field is imprecise.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,175,"* @param value  the value of the field, which may be negative"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,176,"* @return the milliseconds that the field represents, which may be"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,177,* negative
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,179,public long getMillis(long value);
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,182,* Get the millisecond duration of this field from its value relative to an
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,183,* instant. For precise fields this method produces the same result as for
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,184,* the single argument getMillis method.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,185,* <p>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,186,"* If the value is positive, then the instant is treated as a ""start"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,187,"* instant"". If negative, the instant is treated as an ""end instant""."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,189,"* @param value  the value of the field, which may be negative"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,190,* @param instant  the instant to calculate relative to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,191,"* @return the millisecond duration that the field represents, which may be"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,192,* negative
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,194,"public long getMillis(int value, long instant);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,197,* Get the millisecond duration of this field from its value relative to an
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,198,* instant. For precise fields this method produces the same result as for
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,199,* the single argument getMillis method.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,200,* <p>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,201,"* If the value is positive, then the instant is treated as a ""start"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,202,"* instant"". If negative, the instant is treated as an ""end instant""."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,204,"* @param value  the value of the field, which may be negative"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,205,* @param instant  the instant to calculate relative to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,206,"* @return the millisecond duration that the field represents, which may be"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,207,* negative
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,209,"public long getMillis(long value, long instant);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,212,* Adds a duration value (which may be negative) to the instant.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,214,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,215,"* @param value  the value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,216,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,218,"public long add(long instant, int value);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,221,* Adds a duration value (which may be negative) to the instant.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,223,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,224,"* @param value  the value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,225,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,227,"public long add(long instant, long value);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,230,"* Computes the difference between two instants, as measured in the units"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,231,* of this field. Any fractional units are dropped from the result. Calling
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,232,* getDifference reverses the effect of calling add. In the following code:
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,234,* <pre>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,235,* long instant = ...
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,236,* int v = ...
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,237,"* int age = getDifference(add(instant, v), instant);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,238,* </pre>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,240,* The value 'age' is the same as the value 'v'.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,242,* @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,243,* subtract from
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,244,* @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,245,* subtract off the minuend
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,246,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,248,"public int getDifference(long minuendInstant, long subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,251,"* Computes the difference between two instants, as measured in the units"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,252,* of this field. Any fractional units are dropped from the result. Calling
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,253,* getDifference reverses the effect of calling add. In the following code:
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,255,* <pre>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,256,* long instant = ...
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,257,* long v = ...
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,258,"* long age = getDifferenceAsLong(add(instant, v), instant);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,259,* </pre>
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,261,* The value 'age' is the same as the value 'v'.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,263,* @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,264,* subtract from
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,265,* @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,266,* subtract off the minuend
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,267,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,269,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,272,* Compares this duration field with another duration field for ascending
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,273,"* unit millisecond order. This ordering is inconsistent with equals, as it"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,274,* ignores name and precision.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,276,* @param durationField  a duration field to check against
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,277,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,278,* @throws NullPointerException if the object is null
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,279,* @throws ClassCastException if the object type is not supported
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,281,public int compareTo(Object durationField);
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,284,"* Returns a localized unit name of this field, using the given value as an"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,285,"* aid. For example, the unit name may differ if it is plural."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,287,* @param value the duration value to use for selecting a unit name
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,288,"* @param locale the locale to use for selecting a name, null for default"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,290,"//public String getUnitName(long value, Locale locale);"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,293,"* Returns a localized unit name of this field, using the given value as an"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,294,"* aid. For example, the unit name may differ if it is plural."
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,296,* @param value the duration value to use for selecting a unit name
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,298,//public String getUnitName(long value);
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,301,* Get the maximum length string returned by getUnitName.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,303,"* @param locale the locale to use for selecting a unit name, null for"
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,304,* default
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,305,* @return the maximum name length
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,307,//public int getMaximumUnitNameLength(Locale locale);
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,311,* Get a suitable debug string.
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,313,* @return debug string
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,315,public String toString();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,10,* are met:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,57,import org.joda.time.chrono.MillisDurationField;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,58,import org.joda.time.chrono.ScaledDurationField;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,59,import org.joda.time.chrono.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,60,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,63,* Controls a duration implementation by specifying which duration fields are to be used.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,64,* <p>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,65,* The following implementations are provided:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,66,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,67,"* <li>Millis - the duration is defined only in terms of milliseconds, other"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,68,*  fields are not used
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,69,"* <li>DayHour - the duration is expressed in terms of days, hours, minutes, seconds"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,70,*  and milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,71,* <li>YearMonth - the duration is expressed using all fields except weeks
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,72,"* <li>ISOYearMonth - as YearMonth, but with the month fixed at 30 days"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,73,* <li>YearWeek - the duration is expressed using all fields except months
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,74,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,76,* <p>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,77,"* DurationType is thread-safe and immutable, and all subclasses must be as"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,78,* well.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,80,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,82,public abstract class DurationType implements Serializable {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,83,static final long serialVersionUID = 2274324892792009998L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,85,// TODO: Many caching opportunities
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,88,* Returns a DurationType of only a milliseconds field.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,90,public static DurationType getMillisType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,91,return new MillisType();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,95,* Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,97,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,98,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,99,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,100,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,101,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,102,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,103,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,105,public static DurationType getDayHourType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,106,return getDayHourType(null);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,110,* Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,112,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,113,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,114,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,115,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,116,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,117,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,118,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,120,* This factory method returns a DurationType that calculates using any
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,121,"* Chronology. For best results, the Chronology's time zone should"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,122,* be UTC or have fixed offsets.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,124,* @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,126,public static DurationType getDayHourType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,127,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,128,chrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,130,return new DayHourType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,134,* Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,136,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,137,* <li>years
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,138,* <li>months
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,139,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,140,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,141,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,142,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,143,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,144,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,146,public static DurationType getYearMonthType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,147,return getYearMonthType(null);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,151,* Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,153,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,154,* <li>years
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,155,* <li>months
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,156,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,157,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,158,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,159,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,160,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,161,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,163,* This factory method returns a DurationType that calculates using any
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,164,"* Chronology. For best results, the Chronology's time zone should"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,165,* be UTC or have fixed offsets.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,167,* @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,169,public static DurationType getYearMonthType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,170,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,171,chrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,173,return new YearMonthType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,177,* Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,179,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,180,* <li>years
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,181,* <li>months (fixed at 30 days)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,182,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,183,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,184,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,185,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,186,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,187,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,189,public static DurationType getISOYearMonthType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,190,return getISOYearMonthType(null);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,194,* Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,196,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,197,* <li>years
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,198,* <li>months (fixed at 30 days)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,199,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,200,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,201,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,202,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,203,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,204,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,206,* This factory method returns a DurationType that calculates using any
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,207,"* Chronology. For best results, the Chronology's time zone should"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,208,* be UTC or have fixed offsets.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,210,* @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,212,public static DurationType getISOYearMonthType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,213,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,214,chrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,216,return new ISOYearMonthType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,220,* Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,222,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,223,* <li>years (weekyears)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,224,* <li>weeks
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,225,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,226,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,227,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,228,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,229,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,230,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,232,public static DurationType getYearWeekType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,233,return getYearWeekType(null);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,237,* Returns a DurationType of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,239,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,240,* <li>years (weekyears)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,241,* <li>weeks
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,242,* <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,243,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,244,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,245,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,246,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,247,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,249,* This factory method returns a DurationType that calculates using any
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,250,"* Chronology. For best results, the Chronology's time zone should"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,251,* be UTC or have fixed offsets.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,253,* @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,255,public static DurationType getYearWeekType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,256,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,257,chrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,259,return new YearWeekType(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,262,protected DurationType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,266,"* Returns the chronology used, or null if none."
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,268,public abstract Chronology getChronology();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,271,* Returns a DurationType that uses the given chronology.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,273,public abstract DurationType withChronology(Chronology chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,276,* Returns a DurationField representing years.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,278,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,280,public DurationField years() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,281,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,285,* Returns a DurationField representing months.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,287,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,289,public DurationField months() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,290,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,294,* Returns a DurationField representing weeks.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,296,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,298,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,299,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,303,* Returns a DurationField representing days.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,305,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,307,public DurationField days() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,308,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,312,* Returns a DurationField representing hours.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,314,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,316,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,317,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,321,* Returns a DurationField representing minutes.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,323,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,325,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,326,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,330,* Returns a DurationField representing seconds.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,332,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,334,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,335,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,339,* Returns a DurationField representing milliseconds.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,341,* @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,343,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,344,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,348,* Returns a version of this DurationType instance that does not support
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,349,* years.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,351,public DurationType withYearsRemoved() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,352,if (!years().isSupported()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,353,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,355,"return MaskedType.mask(this, 1 << 0);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,359,* Returns a version of this DurationType instance that does not support
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,360,* months.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,362,public DurationType withMonthsRemoved() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,363,if (!months().isSupported()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,364,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,366,"return MaskedType.mask(this, 1 << 1);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,370,* Returns a version of this DurationType instance that does not support
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,371,* weeks.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,373,public DurationType withWeeksRemoved() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,374,if (!weeks().isSupported()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,375,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,377,"return MaskedType.mask(this, 1 << 2);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,381,* Returns a version of this DurationType instance that does not support
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,382,* days.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,384,public DurationType withDaysRemoved() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,385,if (!days().isSupported()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,386,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,388,"return MaskedType.mask(this, 1 << 3);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,392,* Returns a version of this DurationType instance that does not support
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,393,* hours.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,395,public DurationType withHoursRemoved() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,396,if (!hours().isSupported()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,397,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,399,"return MaskedType.mask(this, 1 << 4);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,403,* Returns a version of this DurationType instance that does not support
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,404,* minutes.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,406,public DurationType withMinutesRemoved() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,407,if (!minutes().isSupported()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,408,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,410,"return MaskedType.mask(this, 1 << 5);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,414,* Returns a version of this DurationType instance that does not support
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,415,* seconds.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,417,public DurationType withSecondsRemoved() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,418,if (!seconds().isSupported()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,419,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,421,"return MaskedType.mask(this, 1 << 6);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,425,* Returns a version of this DurationType instance that does not support
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,426,* milliseconds.
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,428,public DurationType withMillisRemoved() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,429,if (!millis().isSupported()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,430,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,432,"return MaskedType.mask(this, 1 << 7);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,435,public boolean equals(Object obj) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,436,if (this == obj) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,437,return true;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,439,if (!(obj instanceof DurationType)) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,440,return false;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,442,DurationType other = (DurationType)obj;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,443,Chronology chrono = getChronology();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,444,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,445,if (other.getChronology() != null) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,446,return false;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,448,} else if (!chrono.equals(other.getChronology())) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,449,return false;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,451,return years().equals(other.years())
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,452,&& months().equals(other.months())
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,453,&& weeks().equals(other.weeks())
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,454,&& days().equals(other.days())
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,455,&& hours().equals(other.hours())
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,456,&& minutes().equals(other.minutes())
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,457,&& seconds().equals(other.seconds())
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,458,&& millis().equals(other.millis());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,461,public int hashCode() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,462,int hash = 0;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,463,Chronology chrono = getChronology();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,464,if (chrono != null) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,465,hash += chrono.hashCode();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,467,hash = hash
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,468,+ years().hashCode()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,469,+ months().hashCode()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,470,+ weeks().hashCode()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,471,+ days().hashCode()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,472,+ hours().hashCode()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,473,+ minutes().hashCode()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,474,+ seconds().hashCode()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,475,+ millis().hashCode();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,476,return hash;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,479,private static final class MillisType extends DurationType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,480,static final long serialVersionUID = -4314867016852780422L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,482,public final DurationField millis() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,483,return MillisDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,486,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,487,return null;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,490,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,491,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,494,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,495,return getMillisType();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,499,private static class DayHourType extends DurationType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,500,static final long serialVersionUID = 1115025839896760481L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,502,protected final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,504,public DayHourType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,505,iChronology = chrono;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,508,public final Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,509,return iChronology;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,512,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,513,if (chrono == iChronology) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,514,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,516,return new DayHourType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,519,public final DurationField days() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,520,return iChronology.days();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,523,public final DurationField hours() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,524,return iChronology.hours();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,527,public final DurationField minutes() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,528,return iChronology.minutes();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,531,public final DurationField seconds() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,532,return iChronology.seconds();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,535,public final DurationField millis() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,536,return iChronology.millis();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,539,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,540,return getDayHourType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,544,private static final class YearMonthType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,545,static final long serialVersionUID = -1336767257680877683L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,547,public YearMonthType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,548,super(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,551,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,552,if (chrono == iChronology) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,553,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,555,return new YearMonthType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,558,public DurationField years() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,559,return iChronology.years();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,562,public DurationField months() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,563,return iChronology.months();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,566,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,567,return getYearMonthType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,571,private static final class ISOYearMonthType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,572,static final long serialVersionUID = 1203161678926193794L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,574,private final DurationField iMonths;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,576,public ISOYearMonthType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,577,super(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,578,"iMonths = new ScaledDurationField(chrono.days(), ""ISOMonths"", 30);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,581,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,582,if (chrono == iChronology) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,583,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,585,return new ISOYearMonthType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,588,public DurationField years() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,589,return iChronology.years();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,592,public DurationField months() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,593,return iMonths;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,596,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,597,return getISOYearMonthType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,601,private static final class YearWeekType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,602,static final long serialVersionUID = 1347170237843447098L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,604,public YearWeekType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,605,super(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,608,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,609,if (chrono == iChronology) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,610,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,612,return new YearWeekType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,615,public DurationField years() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,616,return iChronology.weekyears();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,619,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,620,return iChronology.weeks();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,623,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,624,return getYearWeekType(iChronology);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,628,private static final class MaskedType extends DurationType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,629,static final long serialVersionUID = 940106774669244586L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,631,"public static DurationType mask(DurationType type, int mask) {"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,632,if (type instanceof MaskedType) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,633,MaskedType masked = (MaskedType)type;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,634,if ((mask |= masked.iMask) == masked.iMask) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,635,"// No additional fields removed, so return original."
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,636,return masked;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,638,type = masked.iType;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,640,"return new MaskedType(type, mask);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,643,private final DurationType iType;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,645,"// Bit 0: when set, years is unsupported"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,646,"// Bit 1: when set, months is unsupported"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,648,private final int iMask;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,650,"private MaskedType(DurationType type, int mask) {"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,651,iType = type;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,652,iMask = mask;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,655,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,656,return iType.getChronology();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,659,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,660,if (chrono == getChronology()) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,661,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,663,"return mask(iType.withChronology(chrono), iMask);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,666,public DurationField years() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,667,if ((iMask & (1 << 0)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,668,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,670,return iType.years();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,673,public DurationField months() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,674,if ((iMask & (1 << 1)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,675,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,677,return iType.months();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,680,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,681,if ((iMask & (1 << 2)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,682,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,684,return iType.weeks();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,687,public DurationField days() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,688,if ((iMask & (1 << 3)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,689,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,691,return iType.days();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,694,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,695,if ((iMask & (1 << 4)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,696,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,698,return iType.hours();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,701,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,702,if ((iMask & (1 << 5)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,703,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,705,return iType.minutes();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,708,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,709,if ((iMask & (1 << 6)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,710,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,712,return iType.seconds();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,715,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,716,if ((iMask & (1 << 7)) != 0) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,717,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,719,return iType.millis();
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,56,mport java.text.ParseException;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,57,mport java.util.Calendar;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,58,mport java.util.Date;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,58,import org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,59,import org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,61,mport org.joda.time.format.DateTimeParser;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,64, Instant is the standard implementation of a fully immutable instant in
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,65, time. It holds the instant as milliseconds from the Java Epoch of
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,66, 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,63,* Instant is the standard implementation of a fully immutable instant in time.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,64,* It holds the instant as milliseconds from the Java Epoch of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,68," There is no concept of a calendar system, chronology or time zone. In"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,69," a fully internationalized program, methods should accept the ReadableInstant"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,70, interface as input and return Instant objects.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,66,"* There is no concept of a calendar system, chronology or time zone."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,67,"* In a fully internationalized program, you may want to ensure methods accept the"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,68,* ReadableInstant interface as input and return Instant objects.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,69,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,70,* Instant is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,75,ublic final class Instant extends AbstractInstant implements ReadableInstant {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,75,public final class Instant extends AbstractInstant
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,76,"implements ReadableInstant, Serializable {"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,78,static final long serialVersionUID = 3299096530934209741L;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,83, Constructor that sets the time to be the current time from the
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,84, system clock.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,86,* Constructs an instance set to the current system millisecond time.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,92, Constructor that takes milliseconds from 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,94,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,94, @param millis  the milliseconds
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,96,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,96,ublic Instant(long millis) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,98,public Instant(long instant) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,98,Millis = millis;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,100,iMillis = instant;
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,102, Constructor that takes a ReadableInstant.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,104,* Constructs an instance from a <code>ReadableInstant</code>.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,109,f (instant == null) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,110,"hrow new IllegalArgumentException(""The ReadableInstant must not be null"");"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,116, Constructor that takes a Date.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,118, @param date  the Date
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,119, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,121,ublic Instant(Date date) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,122,uper();
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,123,f (date == null) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,124,"hrow new IllegalArgumentException(""The Date must not be null"");"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,126,Millis = date.getTime();
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,130, Constructor that takes a Calendar.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,132, @param calendar  the Calendar
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,133, @throws IllegalArgumentException if the calendar is null
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,135,ublic Instant(Calendar calendar) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,136,uper();
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,137,f (calendar == null) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,138,"hrow new IllegalArgumentException(""The Calendar must not be null"");"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,140,Millis = calendar.getTime().getTime();
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,144, Constructor that parses an ISO formatted string.
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,146, @param str  the string
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,147, @throws IllegalArgumentException if the string is null
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,148, @throws ParseException if the string is incorrectly formatted
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,115,* Constructs an instance from an Object that represents a datetime.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,116,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,117,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,118,"* include String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,120,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,121,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,150,ublic Instant(String str) throws ParseException {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,123,public Instant(Object instant) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,152,f (str == null) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,153,"hrow new IllegalArgumentException(""The String must not be null"");"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,155,ateTimeParser p = ISODateTimeFormat.getInstanceUTC().dateTimeParser();
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,156,Millis = p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,125,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,126,iMillis = converter.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,165," @param millis  the new millis, from 1970-01-01T00:00:00Z"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,135,"* @param instant  the new instant, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,170,"rotected ReadableInstant create(long millis, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,140,"protected ReadableInstant create(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,172,f (millis == getMillis()) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,142,if (instant == getMillis()) {
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,175,eturn new Instant(millis);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,145,return new Instant(instant);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,160,* Gets the milliseconds of the instant.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,162,* @param base ignored
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,163,* @return the number of milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,165,public final long getMillis(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,166,return iMillis;
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,170,* Gets the milliseconds of the instant.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,172,* @param base ignored
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,173,* @param zone ignored
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,174,* @return the number of milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,176,"public final long getMillis(ReadableInstant base, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,177,return iMillis;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,57,mport java.text.ParseException;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,58,mport java.util.Calendar;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,59,mport java.util.Date;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,57,import java.io.Serializable;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,62,mport org.joda.time.format.DateTimeParser;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,60,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,61,import org.joda.time.convert.DurationConverter;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,62,import org.joda.time.convert.InstantConverter;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,66, MutableDateTime is the standard implementation of a modifiable
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,67, datetime class.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,68, It holds the date/time as milliseconds from the Java epoch of
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,69, 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,66,* MutableDateTime is the standard implementation of a modifiable datetime class.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,67,* It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,71, This class requires a Chronology to be specified. The Chronology determines
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,72, how the millisecond instant value is converted into the date time fields.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,69,* This class uses a Chronology internally. The Chronology determines how the
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,70,* millisecond instant value is converted into the date time fields.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,71,* The default Chronology is <code>ISOChronology</code> which is the agreed
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,72,* international standard and compatable with the modern Gregorian calendar.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,93,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,94,"* MutableDateTime is mutable and not thread-safe, unless concurrent threads"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,95,* are not invoking mutator methods.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,101,* @see DateTime
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,99,"mplements ReadableDateTime, ReadWritableInstant, Cloneable"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,101,** The millis from 1970-01-01T00:00:00Z. */
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,102,rivate long iMillis;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,103,** The chronology to use */
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,104,rivate Chronology iChronology;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,106,/ Constructors (same as DateTime)
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,104,"implements ReadWritableDateTime, Cloneable, Serializable {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,106,static final long serialVersionUID = 2852608688135209575L;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,108,// Constructors
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,110," Constructs a MutableDateTime to the current datetime, as reported by the system"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,111," clock. The chronology used is ISO, in the"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,112, {@link DateTimeZone#getDefault() default} time zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,111,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,112,* using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,115,Chronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,116,Millis = System.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,115,super();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,120," Constructs a MutableDateTime to the current datetime, as reported by the system"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,121," clock. The chronology used is ISO, in the supplied time zone."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,119,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,120,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,121,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,122,"* If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,123," @param zone  the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,124, @throws IllegalArgumentException if the zone is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,124,"* @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,127,Chronology = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,128,Millis = System.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,127,super(zone);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,132," Constructs a MutableDateTime to the current datetime, as reported by the system"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,133, clock.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,131,* Constructs an instance set to the current system millisecond time
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,132,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,133,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,134,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,135,* in the default time zone is used.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,135," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,136, @throws IllegalArgumentException if the chronology is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,137,"* @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,139,Chronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,140,Millis = System.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,144," Constructs a MutableDateTime set to the milliseconds from 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,145," using the ISO chronology, in the"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,146, {@link DateTimeZone#getDefault() default} time zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,148, @param millis  the milliseconds
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,150,ublic MutableDateTime(long millis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,151,Chronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,152,Millis = millis;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,156," Constructs a MutableDateTime set to the milliseconds from 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,157," using the ISO chronology, in the supplied time zone."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,159, @param millis  the milliseconds
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,160," @param zone  the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,161, @throws IllegalArgumentException if the zone is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,163,"ublic MutableDateTime(long millis, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,164,Chronology = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,165,Millis = millis;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,140,super(chronology);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,169," Constructs a MutableDateTime set to the milliseconds from 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,170, using the supplied chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,145,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,146,* using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,172, @param millis  the milliseconds
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,173," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,174, @throws IllegalArgumentException if the chronology is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,148,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,176,"ublic MutableDateTime(long millis, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,177,Chronology = selectChronology(chronology);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,178,Millis = millis;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,150,public MutableDateTime(long instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,151,super(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,182," Constructs a MutableDateTime from a ReadableInstant, using its chronology. If"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,183," its chronology null, then the chronology is set to ISO, in the"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,184, {@link DateTimeZone#getDefault() default} time zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,186," @param instant  the ReadableInstant, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,187, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,189,ublic MutableDateTime(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,190,Chronology = selectChronology(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,191,Millis = instant.getMillis();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,195," Constructs a MutableDateTime from a ReadableInstant, using its chronology"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,196," against a different time zone. If its chronology is null, then the"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,197, chronology is set to ISO. If the selected chronology is not in the
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,198," supplied time zone, a new chronology is created that is."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,200," @param instant  the ReadableInstant, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,201," @param zone  the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,202, @throws IllegalArgumentException if the instant or zone is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,204,"ublic MutableDateTime(ReadableInstant instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,205,"Chronology = selectChronology(instant, zone);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,206,Millis = instant.getMillis();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,210," Constructs a MutableDateTime from a ReadableInstant, using the supplied"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,211, chronology.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,213," @param instant  the ReadableInstant, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,214," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,215, @throws IllegalArgumentException if the instant or chronology is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,217,"ublic MutableDateTime(ReadableInstant instant, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,218,"Chronology = selectChronology(instant, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,219,Millis = instant.getMillis();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,223," Constructs a MutableDateTime from a Date, using the ISO chronology, in the"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,224, {@link DateTimeZone#getDefault() default} time zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,226," @param date  the Date, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,227, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,229,ublic MutableDateTime(Date date) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,230,Chronology = selectChronology(date);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,231,Millis = date.getTime();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,235," Constructs a MutableDateTime from a Date, using the ISO chronology, in the"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,236, supplied time zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,155,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,156,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,157,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,158,"* If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,238," @param date  the Date, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,239," @param zone  the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,240, @throws IllegalArgumentException if the date or zone is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,160,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,161,"* @param zone  the time zone, null means default zone"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,242,"ublic MutableDateTime(Date date, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,243,"Chronology = selectChronology(date, zone);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,244,Millis = date.getTime();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,163,"public MutableDateTime(long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,164,"super(instant, zone);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,248," Constructs a MutableDateTime from a Date, using the supplied chronology."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,168,* Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,169,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,170,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,171,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,172,* in the default time zone is used.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,250," @param date  the Date, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,251," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,252, @throws IllegalArgumentException if the date or chronology is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,174,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,175,"* @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,254,"ublic MutableDateTime(Date date, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,255,"Chronology = selectChronology(date, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,256,Millis = date.getTime();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,177,"public MutableDateTime(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,178,"super(instant, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,260," Constructs a MutableDateTime from a Calendar, using its closest mapped"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,261, chronology and time zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,263," <p>When converting calendars to chronologies, the constructor is aware"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,264, of GregorianCalendar and BuddhistCalendar and maps them to the
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,265, equivalent chronology. Other calendars map to ISOChronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,183,* Constructs an instance from an Object that represents a datetime.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,184,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,185,"* If the object contains no chronology, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,186,* in the default time zone is used.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,187,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,188,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,189,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,267," @param calendar  the Calendar, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,268, @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,191,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,192,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,270,ublic MutableDateTime(Calendar calendar) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,271,Chronology = selectChronology(calendar);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,272,Millis = calendar.getTime().getTime();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,194,public MutableDateTime(Object instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,195,super(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,276," Constructs a MutableDateTime from a Calendar, using its closest mapped"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,277, chronology against a different time zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,279," <p>When converting calendars to chronologies, the constructor is aware"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,280, of GregorianCalendar and BuddhistCalendar and maps them to the
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,281, equivalent chronology. Other calendars map to ISOChronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,199,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,200,* forcing the time zone to that specified.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,201,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,202,"* If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,203,"* If the specified time zone is null, the default zone is used."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,204,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,205,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,206,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,283," @param calendar  the Calendar, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,284," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,285, @throws IllegalArgumentException if the calendar or zone is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,208,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,209,"* @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,210,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,287,"ublic MutableDateTime(Calendar calendar, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,288,"Chronology = selectChronology(calendar, zone);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,289,Millis = calendar.getTime().getTime();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,212,"public MutableDateTime(Object instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,213,"super(instant, zone);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,293," Constructs a MutableDateTime from a Calendar, using the supplied chronology."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,217,"* Constructs an instance from an Object that represents a datetime,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,218,* using the specifed chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,219,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,220,"* If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,221,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,222,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,223,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,295," @param calendar  the Calendar, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,296," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,297, @throws IllegalArgumentException if the calendar or chronology is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,225,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,226,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,227,* @throws IllegalArgumentException if the instant is null or invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,299,"ublic MutableDateTime(Calendar calendar, Chronology chronology) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,300,"Chronology = selectChronology(calendar, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,301,Millis = calendar.getTime().getTime();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,229,"public MutableDateTime(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,230,"super(instant, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,305," Constructs a MutableDateTime from an ISO formatted String, using the ISO"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,306," chronology, in the {@link DateTimeZone#getDefault() default} time zone."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,235,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,236,* using <code>ISOChronology</code> in the default time zone.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,308," @param str  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,309, @throws IllegalArgumentException if the string is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,310, @throws ParseException if parsing fails
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,238,* @param year  the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,239,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,240,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,241,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,242,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,243,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,244,* @param millisOfSecond  the milisecond of the second
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,312,ublic MutableDateTime(String str) throws ParseException {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,313,Chronology = selectChronology(str);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,314,ateTimeParser p = ISODateTimeFormat.getInstance(iChronology).dateTimeParser();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,315,Millis = p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,246,public MutableDateTime(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,247,"int year,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,248,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,249,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,250,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,251,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,252,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,253,int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,254,"super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,319," Constructs a MutableDateTime from an ISO formatted String, using the ISO"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,320," chronology, in the supplied time zone."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,258,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,259,* using <code>ISOChronology</code> in the specified time zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,260,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,261,"* If the specified time zone is null, the default zone is used."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,322," @param str  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,323," @param zone the time zone, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,324, @throws IllegalArgumentException if the string or zone is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,325, @throws ParseException if parsing fails
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,263,* @param year  the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,264,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,265,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,266,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,267,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,268,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,269,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,270,"* @param zone  the time zone, null means default time zone"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,327,"ublic MutableDateTime(String str, DateTimeZone zone) throws ParseException {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,328,"Chronology = selectChronology(str, zone);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,329,ateTimeParser p = ISODateTimeFormat.getInstance(iChronology).dateTimeParser();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,330,Millis = p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,272,public MutableDateTime(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,273,"int year,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,274,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,275,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,276,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,277,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,278,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,279,"int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,280,DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,281,"super(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,282,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,334," Constructs a MutableDateTime from an ISO formatted String, using the supplied"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,335, chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,286,* Constructs an instance from datetime field values
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,287,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,288,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,289,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,290,* in the default time zone is used.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,337," @param str  the string to parse, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,338," @param chronology  the chronology, must not be null"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,339, @throws IllegalArgumentException if the string or chronology is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,340, @throws ParseException if parsing fails
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,292,* @param year  the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,293,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,294,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,295,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,296,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,297,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,298,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,299,"* @param chronology  the chronology, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,342,"ublic MutableDateTime(String str, Chronology chronology) throws ParseException {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,343,"Chronology = selectChronology(str, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,344,ateTimeParser p = ISODateTimeFormat.getInstance(iChronology).dateTimeParser();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,345,Millis = p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,301,public MutableDateTime(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,302,"int year,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,303,"int monthOfYear,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,304,"int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,305,"int hourOfDay,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,306,"int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,307,"int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,308,"int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,309,Chronology chronology) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,310,"super(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,311,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,354," @param millis  the new millis, from 1970-01-01T00:00:00Z"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,321,"* @param instant  the new instant, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,359,"rotected ReadableInstant create(long millis, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,326,"protected ReadableInstant create(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,363,"eturn new MutableDateTime(millis, chrono);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,330,"return new MutableDateTime(instant, chrono);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,366,/ Accessor/mutator/adder methods (Accessors same as for DateTime)
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,333,// Millis
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,370, Gets the milliseconds of the datetime instant from the Java epoch
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,371, of 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,373, @return the number of milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,336,* Set the milliseconds of the datetime.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,338,* @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,339,* datetime to
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,340,* @see #setDateTime(long)
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,375,ublic long getMillis() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,376,eturn iMillis;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,342,public void setMillis(long instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,343,super.setMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,380, Set the milliseconds of the datetime.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,347,* Set the date and time from an object representing an instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,348,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,349,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,350,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,382, @param millis the milliseconds since 1970-01-01T00:00:00Z to set the
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,383, datetime to
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,352,* @param instant  an object representing an instant
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,353,* @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,354,* @see #setDateTime(Object)
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,385,ublic void setMillis(long millis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,386,Millis = millis;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,356,public void setMillis(Object instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,357,super.setMillis(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,360,// Add
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,390, Set the number of milliseconds of the datetime.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,363,* Add an amount of time to the datetime.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,392," @param datetime  a ReadableInstant, Date, Calendar, Long or String"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,393, @throws IllegalArgumentException if the object is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,394, @throws ClassCastException if the object's type cannot be recognised
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,365,* @param duration  the millis to add
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,396,ublic void setMillis(Object object) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,397,Millis = getDateTimeMillisFromObject(object);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,367,public void add(final long duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,368,setMillis(getMillis() + duration);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,403, @param duration duration to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,374,* @param duration  duration to add.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,406,ublic void add(ReadableDuration duration) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,407,"uration.addTo(this, 1);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,376,public void add(final ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,377,"duration.addInto(this, 1);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,414, @param duration duration to add.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,415," @param scalar direction and amount to add, which may be negative"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,383,* @param duration  duration to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,384,"* @param scalar  direction and amount to add, which may be negative"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,418,"ublic void add(ReadableDuration duration, int scalar) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,419,"uration.addTo(this, scalar);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,386,"public void add(final ReadableDuration duration, final int scalar) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,387,"duration.addInto(this, scalar);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,392,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,393,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,394,"* include ReadableDuration, String and Long."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,426," @param object a ReadableDuration, Long or String evaluating to a"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,427, duration
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,396,* @param duration  an object representing a duration
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,429,ublic void add(Object object) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,431,f (object instanceof ReadableDuration) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,432,dd((ReadableDuration)object);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,398,public void add(final Object duration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,399,if (duration instanceof ReadableDuration) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,400,add((ReadableDuration) duration);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,434,Millis += getDurationMillisFromObject(object);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,402,DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,403,add(converter.getDurationMillis(duration));
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,437,Millis += getDurationMillisFromObject(object);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,441, Add an amount of time to the datetime.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,443, @param millis  the millis to add
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,445,ublic void addMillis(long millis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,446,Millis += millis;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,450, Gets the chronology of the datetime.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,452, @return the Chronology that the datetime is using
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,454,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,455,eturn iChronology;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,407,// Chronology
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,461, @param chronology  the chronology to use
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,462, @throws IllegalArgumentException if the chronology is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,412,"* @param chronology  the chronology to use, null means ISOChronology in default zone"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,465,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,466,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,468,Chronology = chronology;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,415,super.setChronology(chronology);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,418,// Time zone
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,472, Sets the time zone of the datetime via the chronology.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,421,"* Sets the time zone of the datetime, which changes the"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,422,* chronology. Setting the time zone does not affect the millisecond value
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,423,* of this instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,424,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,425,"* If the chronology already has this time zone, no change occurs."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,474, @param zone  the time zone to use
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,475, @throws IllegalArgumentException if the time zone is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,427,"* @param zone  the time zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,428,* @see #moveDateTimeZone
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,478,f (zone == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,479,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,481,f (iChronology.getDateTimeZone() != zone) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,482,Chronology = iChronology.withDateTimeZone(zone);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,431,super.setDateTimeZone(zone);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,486,/ public int get(DateTimeField field);  inherited from AbstractInstant
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,435,"* Moves the time zone of the datetime, which changes the"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,436,* chronology. Moving the time zone alters the millisecond value of this
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,437,* instant such that it is relative to the new time zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,438,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,439,"* If the chronology already has this time zone, no change occurs."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,441,"* @param zone  the time zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,442,* @see #setDateTimeZone
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,444,public void moveDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,445,super.moveDateTimeZone(zone);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,448,// Field based
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,501,"ublic void set(DateTimeField field, int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,502,"Millis = field.set(getMillis(), value);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,463,"public void set(final DateTimeField field, final int value) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,464,"setMillis(field.set(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,518,"ublic void add(DateTimeField field, int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,519,"Millis = field.add(getMillis(), value);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,480,"public void add(final DateTimeField field, final int value) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,481,"setMillis(field.add(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,535,"ublic void addWrapped(DateTimeField field, int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,536,"Millis = field.addWrapped(getMillis(), value);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,497,"public void addWrapped(final DateTimeField field, final int value) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,498,"setMillis(field.addWrapped(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,539,/ Date field mutator/adder methods
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,501,// Date methods
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,543, Set the day of week to a value.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,504,* Set the year to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,545, @param dayOfWeek  the day of the week.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,506,* @param year  the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,507,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,547,ublic void setDayOfWeek(int dayOfWeek) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,548,"Millis = getChronology().dayOfWeek().set(iMillis, dayOfWeek);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,509,public void setYear(final int year) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,510,"setMillis(getChronology().year().set(getMillis(), year));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,552, Set the day of the month to a value.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,514,* Add a number of years to the date.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,554, @param dayOfMonth  the day of the month.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,516,* @param years  the years to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,517,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,556,ublic void setDayOfMonth(int dayOfMonth) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,557,"Millis = getChronology().dayOfMonth().set(iMillis, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,519,public void addYears(final int years) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,520,"setMillis(getChronology().years().add(getMillis(), years));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,561, Set the day of year to a value.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,525,* Set the week of the year to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,563, @param dayOfYear the day of the year.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,527,* @param weekyear  the weekyear
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,528,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,565,ublic void setDayOfYear(int dayOfYear) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,566,"Millis = getChronology().dayOfYear().set(iMillis, dayOfYear);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,530,public void setWeekyear(final int weekyear) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,531,"setMillis(getChronology().weekyear().set(getMillis(), weekyear));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,570, Add a number of days to the date.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,535,* Add a number of weekyears to the date.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,572, @param days  the days to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,537,* @param weekyears  the weekyears to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,538,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,574,ublic void addDays(int days) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,575,"Millis = getChronology().dayOfYear().add(iMillis, days);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,540,public void addWeekyears(final int weekyears) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,541,"setMillis(getChronology().weekyears().add(getMillis(), weekyears));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,579, Set the week of weekyear to a value.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,546,* Set the month of the year to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,581, @param weekOfWeekyear the week of the weekyear.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,548,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,549,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,583,ublic void setWeekOfWeekyear(int weekOfWeekyear) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,584,"Millis = getChronology().weekOfWeekyear().set(iMillis, weekOfWeekyear);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,551,public void setMonthOfYear(final int monthOfYear) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,552,"setMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,588, Add a number of weeks to the date.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,556,* Add a number of months to the date.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,590, @param weeks  the weeks to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,558,* @param months  the months to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,559,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,592,ublic void addWeeks(int weeks) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,593,"Millis = getChronology().weekOfWeekyear().add(iMillis, weeks);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,561,public void addMonths(final int months) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,562,"setMillis(getChronology().months().add(getMillis(), months));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,597, Set the week of the year to a value.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,567,* Set the week of weekyear to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,599, @param weekyear  the weekyear.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,569,* @param weekOfWeekyear the week of the weekyear
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,570,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,601,ublic void setWeekyear(int weekyear) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,602,"Millis = getChronology().weekyear().set(iMillis, weekyear);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,572,public void setWeekOfWeekyear(final int weekOfWeekyear) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,573,"setMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,606, Add a number of weekyears to the date.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,577,* Add a number of weeks to the date.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,608, @param weekyears  the weekyears to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,579,* @param weeks  the weeks to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,580,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,610,ublic void addWeekyears(int weekyears) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,611,"Millis = getChronology().weekyear().add(iMillis, weekyears);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,582,public void addWeeks(final int weeks) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,583,"setMillis(getChronology().weeks().add(getMillis(), weeks));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,615, Set the month of the year to a value.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,588,* Set the day of year to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,617, @param month  the month of the year.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,590,* @param dayOfYear the day of the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,591,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,619,ublic void setMonthOfYear(int month) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,620,"Millis = getChronology().monthOfYear().set(iMillis, month);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,593,public void setDayOfYear(final int dayOfYear) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,594,"setMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,624, Add a number of months to the date.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,598,* Set the day of the month to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,626, @param months  the months to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,600,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,601,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,628,ublic void addMonths(int months) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,629,"Millis = getChronology().monthOfYear().add(iMillis, months);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,603,public void setDayOfMonth(final int dayOfMonth) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,604,"setMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,633, Set the year to a value.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,608,* Set the day of week to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,635, @param year  the year.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,610,* @param dayOfWeek  the day of the week
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,611,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,637,ublic void setYear(int year) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,638,"Millis = getChronology().year().set(iMillis, year);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,613,public void setDayOfWeek(final int dayOfWeek) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,614,"setMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,642, Add a number of years to the date.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,618,* Add a number of days to the date.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,644, @param years  the years to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,620,* @param days  the days to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,621,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,646,ublic void addYears(int years) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,647,"Millis = getChronology().year().add(iMillis, years);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,623,public void addDays(final int days) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,624,"setMillis(getChronology().days().add(getMillis(), days));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,650,/ Time field mutator/adder methods
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,627,// Time methods
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,654, Set the millis of the second.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,630,* Set the hour of the day to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,656, @param millis  the millis of second.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,632,* @param hourOfDay  the hour of day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,633,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,658,ublic void setMillisOfSecond(int millis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,659,"Millis = getChronology().millisOfSecond().set(iMillis, millis);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,635,public void setHourOfDay(final int hourOfDay) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,636,"setMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,663, Set the millis of the day.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,640,* Add a number of hours to the date.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,665, @param millis  the millis of day.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,642,* @param hours  the hours to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,643,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,667,ublic void setMillisOfDay(int millis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,668,"Millis = getChronology().millisOfDay().set(iMillis, millis);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,645,public void addHours(final int hours) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,646,"setMillis(getChronology().hours().add(getMillis(), hours));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,672, Set the second of the minute.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,651,* Set the minute of the day to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,674, @param second  the second of minute.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,653,* @param minuteOfDay  the minute of day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,654,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,676,ublic void setSecondOfMinute(int second) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,677,"Millis = getChronology().secondOfMinute().set(iMillis, second);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,656,public void setMinuteOfDay(final int minuteOfDay) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,657,"setMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,681, Set the second of the day.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,661,* Set the minute of the hour to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,683, @param second  the second of day.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,663,* @param minuteOfHour  the minute of hour
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,664,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,685,ublic void setSecondOfDay(int second) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,686,"Millis = getChronology().secondOfDay().set(iMillis, second);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,666,public void setMinuteOfHour(final int minuteOfHour) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,667,"setMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,690, Add a number of seconds to the date.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,671,* Add a number of minutes to the date.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,692, @param seconds  the seconds to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,673,* @param minutes  the minutes to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,674,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,694,ublic void addSeconds(int seconds) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,695,"Millis = getChronology().secondOfDay().add(iMillis, seconds);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,676,public void addMinutes(final int minutes) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,677,"setMillis(getChronology().minutes().add(getMillis(), minutes));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,699, Set the minute of the hour.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,682,* Set the second of the day to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,701, @param minute  the minute of hour.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,684,* @param secondOfDay  the second of day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,685,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,703,ublic void setMinuteOfHour(int minute) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,704,"Millis = getChronology().minuteOfHour().set(iMillis, minute);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,687,public void setSecondOfDay(final int secondOfDay) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,688,"setMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,708, Set the minute of the day.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,692,* Set the second of the minute to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,710, @param minute  the minute of day.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,694,* @param secondOfMinute  the second of minute
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,695,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,712,ublic void setMinuteOfDay(int minute) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,713,"Millis = getChronology().minuteOfDay().set(iMillis, minute);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,697,public void setSecondOfMinute(final int secondOfMinute) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,698,"setMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,717, Add a number of minutes to the date.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,702,* Add a number of seconds to the date.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,719, @param minutes  the minutes to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,704,* @param seconds  the seconds to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,705,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,721,ublic void addMinutes(int minutes) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,722,"Millis = getChronology().minuteOfDay().add(iMillis, minutes);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,707,public void addSeconds(final int seconds) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,708,"setMillis(getChronology().seconds().add(getMillis(), seconds));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,726, Set the hour of the day.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,713,* Set the millis of the day to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,728, @param hour  the hour of day.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,715,* @param millisOfDay  the millis of day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,716,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,730,ublic void setHourOfDay(int hour) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,731,"Millis = getChronology().hourOfDay().set(iMillis, hour);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,718,public void setMillisOfDay(final int millisOfDay) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,719,"setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,735, Add a number of hours to the date.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,723,* Set the millis of the second to the specified value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,737, @param hours  the hours to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,725,* @param millisOfSecond  the millis of second
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,726,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,739,ublic void addHours(int hours) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,740,"Millis = getChronology().hourOfDay().add(iMillis, hours);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,728,public void setMillisOfSecond(final int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,729,"setMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,743,/ Convenient helpers
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,747, Set the date from various different types of object.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,748, The time part of the parameter will be ignored.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,749, The time part of this object will be unaffected.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,733,* Add a number of milliseconds to the date. The implementation of this
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,734,* method differs from the {@link #add(long)} method in that a
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,735,* DateTimeField performs the addition.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,751," @param date  a ReadableInstant, Date, Calendar, Long or String"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,752, @throws IllegalArgumentException if the object is null.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,753, @throws ClassCastException if the object's type cannot be recognised
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,737,* @param millis  the milliseconds to add
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,738,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,755,ublic void setDate(Object date) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,756,etDate(getDateTimeMillisFromObject(date));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,740,public void addMillis(final int millis) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,741,"setMillis(getChronology().millis().add(getMillis(), millis));"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,744,// Setters
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,761, The time part of the parameter will be ignored.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,764," @param millis milliseconds from 1970-01-01T00:00:00Z, ignoring time of"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,765, day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,750,"* @param instant  milliseconds from 1970-01-01T00:00:00Z, time part ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,751,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,767,ublic void setDate(long millis) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,753,public void setDate(final long instant) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,769,Millis = c.getDateOnlyMillis(millis) + c.getTimeOnlyMillis(iMillis);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,755,setMillis(c.getDateOnlyMillis(instant) + c.getTimeOnlyMillis(getMillis()));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,759,* Set the date from an object representing an instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,760,* The time part of this object will be unaffected.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,761,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,762,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,763,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,765,"* @param instant  an object representing an instant, time part ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,766,* @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,768,public void setDate(final Object instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,769,if (instant instanceof ReadableInstant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,770,setDate(((ReadableInstant) instant).getMillis());
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,771,} else {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,772,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,773,setDate(converter.getInstantMillis(instant));
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,777, @param month  the month of the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,782,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,784,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,780,"ublic void setDate(int year, int monthOfYear, int dayOfMonth) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,781,/ Do not modify this object until method completion
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,786,public void setDate(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,787,"final int year,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,788,"final int monthOfYear,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,789,final int dayOfMonth) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,783,ong workVal = c.getTimeOnlyMillis( iMillis );
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,784,"orkVal = c.year().set( workVal, year );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,785,"orkVal = c.monthOfYear().set( workVal, monthOfYear );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,786,"orkVal = c.dayOfMonth().set( workVal, dayOfMonth );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,787,Millis = workVal;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,791,long instant = c.getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,792,"year, monthOfYear, dayOfMonth, 0, 0, 0, 0);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,793,setDate(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,791, Set the time from an object.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,792, The date part of the parameter will be ignored.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,798,* Set the time from milliseconds.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,795," @param time  a ReadableInstant, Date, Calendar, Long or String"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,796, @throws IllegalArgumentException if the object is null.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,797, @throws ClassCastException if the object's type cannot be recognised
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,801,"* @param millis milliseconds from T00:00:00Z, date part ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,802,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,799,ublic void setTime(Object time) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,800,etTime(getDateTimeMillisFromObject(time));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,804,public void setTime(final long millis) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,805,Chronology c = getChronology();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,806,setMillis(c.getDateOnlyMillis(getMillis()) + c.getTimeOnlyMillis(millis));
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,804, Set the time from milliseconds.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,805, The date part of the parameter will be ignored.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,810,* Set the date from an object representing an instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,812,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,813,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,814,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,808," @param millis milliseconds from T00:00:00Z, ignoring date"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,816,"* @param instant  an object representing an instant, date part ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,817,* @throws IllegalArgumentException if the object is null or invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,810,ublic void setTime(long millis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,811,hronology c = getChronology();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,812,Millis = c.getDateOnlyMillis(iMillis) + c.getTimeOnlyMillis(millis);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,819,public void setTime(final Object instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,820,if (instant instanceof ReadableInstant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,821,setDateTime(((ReadableInstant) instant).getMillis());
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,822,} else {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,823,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,824,setDateTime(converter.getInstantMillis(instant));
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,836,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,824,"ublic void setTime(int hour, int minuteOfHour, int secondOfMinute, int millisOfSecond) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,825,/ Do not modify this object until method completion
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,826,hronology c = getChronology();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,827,ong workVal = c.getDateOnlyMillis( iMillis );
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,828,"orkVal = c.hourOfDay().set( workVal, hour );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,829,"orkVal = c.minuteOfHour().set( workVal, minuteOfHour );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,830,"orkVal = c.secondOfMinute().set( workVal, secondOfMinute );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,831,"orkVal = c.millisOfSecond().set( workVal, millisOfSecond );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,832,Millis = workVal;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,838,public void setTime(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,839,"final int hour,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,840,"final int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,841,"final int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,842,final int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,843,long instant = getChronology().getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,844,"getMillis(), hour, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,845,setTime(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,836, Set the date and time from an object.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,850,* Set the date and time from milliseconds.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,851,* This method is a synonm for {@link #setMillis(long)}.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,838," @param datetime  a ReadableInstant, Date, Calendar, Long or String"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,839, @throws IllegalArgumentException if the object is null.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,840, @throws ClassCastException if the object's type cannot be recognised
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,853,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,854,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,842,ublic void setDateTime(Object datetime) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,843,Millis = getDateTimeMillisFromObject(datetime);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,856,public void setDateTime(final long instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,857,setMillis(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,847, Set the date and time from milliseconds.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,861,* Set the date and time from an object representing an instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,862,* This method is a synonm for {@link #setMillis(Object)}.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,863,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,864,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,865,"* include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,849, @param millis  the millis
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,867,* @param instant  an object representing an instant
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,868,* @throws IllegalArgumentException if the object is null or invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,851,ublic void setDateTime(long millis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,852,Millis = millis;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,870,public void setDateTime(final Object instant) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,871,setDateTime(instant);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,859, @param month  the month of the year
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,878,* @param monthOfYear  the month of the year
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,861, @param hour  the hour
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,880,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,884,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,866,"ublic void setDateTime(int year,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,867,"nt monthOfYear,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,868,"nt dayOfMonth,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,869,"nt hourOfDay,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,870,"nt minuteOfHour,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,871,"nt secondOfMinute,"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,872,nt millisOfSecond)
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,874,/ Do not modify this object until method completion
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,875,hronology c = getChronology();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,876,ong workVal = 0;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,877,"orkVal = c.year().set( workVal, year );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,878,"orkVal = c.monthOfYear().set( workVal, monthOfYear );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,879,"orkVal = c.dayOfMonth().set( workVal, dayOfMonth );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,880,"orkVal = c.hourOfDay().set( workVal, hourOfDay );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,881,"orkVal = c.minuteOfHour().set( workVal, minuteOfHour );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,882,"orkVal = c.secondOfMinute().set( workVal, secondOfMinute );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,883,"orkVal = c.millisOfSecond().set( workVal, millisOfSecond );"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,884,Millis = workVal;
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,886,public void setDateTime(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,887,"final int year,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,888,"final int monthOfYear,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,889,"final int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,890,"final int hourOfDay,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,891,"final int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,892,"final int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,893,final int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,894,long instant = getChronology().getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,895,"year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,896,setDateTime(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,902,* Get the era property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,904,* @return the era property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,906,public MutableDateTimeFieldProperty era() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,907,"return new MutableDateTimeFieldProperty(this, getChronology().era());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,891, Get the day of week property.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,892, <p>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,893, The values for day of week are defined in {@link DateTimeConstants}.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,911,* Get the century of era property.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,895, @return the day of week property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,913,* @return the year of era property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,897,ublic MutableDateTimeFieldProperty dayOfWeek() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,898,"eturn new MutableDateTimeFieldProperty(this, getChronology().dayOfWeek());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,915,public MutableDateTimeFieldProperty centuryOfEra() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,916,"return new MutableDateTimeFieldProperty(this, getChronology().centuryOfEra());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,902, Get the day of month property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,920,* Get the year of century property.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,904, @return the day of month property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,922,* @return the year of era property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,906,ublic MutableDateTimeFieldProperty dayOfMonth() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,907,"eturn new MutableDateTimeFieldProperty(this, getChronology().dayOfMonth());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,924,public MutableDateTimeFieldProperty yearOfCentury() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,925,"return new MutableDateTimeFieldProperty(this, getChronology().yearOfCentury());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,911, Get the day of year property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,929,* Get the year of era property.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,913, @return the day of year property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,931,* @return the year of era property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,915,ublic MutableDateTimeFieldProperty dayOfYear() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,916,"eturn new MutableDateTimeFieldProperty(this, getChronology().dayOfYear());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,933,public MutableDateTimeFieldProperty yearOfEra() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,934,"return new MutableDateTimeFieldProperty(this, getChronology().yearOfEra());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,920, Get the week of a week based year property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,938,* Get the year property.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,922, @return the week of a week based year property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,940,* @return the year property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,924,ublic MutableDateTimeFieldProperty weekOfWeekyear() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,925,"eturn new MutableDateTimeFieldProperty(this, getChronology().weekOfWeekyear());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,942,public MutableDateTimeFieldProperty year() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,943,"return new MutableDateTimeFieldProperty(this, getChronology().year());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,947, Get the year property.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,949, @return the year property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,951,ublic MutableDateTimeFieldProperty year() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,952,"eturn new MutableDateTimeFieldProperty(this, getChronology().year());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,956, Get the year of era property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,965,* Get the week of a week based year property.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,958, @return the year of era property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,967,* @return the week of a week based year property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,960,ublic MutableDateTimeFieldProperty yearOfEra() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,961,"eturn new MutableDateTimeFieldProperty(this, getChronology().yearOfEra());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,969,public MutableDateTimeFieldProperty weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,970,"return new MutableDateTimeFieldProperty(this, getChronology().weekOfWeekyear());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,965, Get the year of century property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,974,* Get the day of year property.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,967, @return the year of era property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,976,* @return the day of year property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,969,ublic MutableDateTimeFieldProperty yearOfCentury() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,970,"eturn new MutableDateTimeFieldProperty(this, getChronology().yearOfCentury());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,978,public MutableDateTimeFieldProperty dayOfYear() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,979,"return new MutableDateTimeFieldProperty(this, getChronology().dayOfYear());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,974, Get the century of era property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,983,* Get the day of month property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,984,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,985,* The values for day of month are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,976, @return the year of era property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,987,* @return the day of month property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,978,ublic MutableDateTimeFieldProperty centuryOfEra() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,979,"eturn new MutableDateTimeFieldProperty(this, getChronology().centuryOfEra());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,989,public MutableDateTimeFieldProperty dayOfMonth() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,990,"return new MutableDateTimeFieldProperty(this, getChronology().dayOfMonth());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,983, Get the era property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,994,* Get the day of week property.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,995,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,996,* The values for day of week are defined in {@link DateTimeConstants}.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,985, @return the era property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,998,* @return the day of week property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,987,ublic MutableDateTimeFieldProperty era() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,988,"eturn new MutableDateTimeFieldProperty(this, getChronology().era());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1000,public MutableDateTimeFieldProperty dayOfWeek() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1001,"return new MutableDateTimeFieldProperty(this, getChronology().dayOfWeek());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,995, Get the millis of second property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1007,* Get the hour of day field property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,997, @return the millis of second property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1009,* @return the hour of day property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,999,ublic MutableDateTimeFieldProperty millisOfSecond() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1000,"eturn new MutableDateTimeFieldProperty(this, getChronology().millisOfSecond());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1011,public MutableDateTimeFieldProperty hourOfDay() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1012,"return new MutableDateTimeFieldProperty(this, getChronology().hourOfDay());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1004, Get the millis of day property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1016,* Get the minute of day property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1006, @return the millis of day property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1018,* @return the minute of day property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1008,ublic MutableDateTimeFieldProperty millisOfDay() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1009,"eturn new MutableDateTimeFieldProperty(this, getChronology().millisOfDay());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1020,public MutableDateTimeFieldProperty minuteOfDay() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1021,"return new MutableDateTimeFieldProperty(this, getChronology().minuteOfDay());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1013, Get the second of minute field property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1025,* Get the minute of hour field property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1015, @return the second of minute property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1027,* @return the minute of hour property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1017,ublic MutableDateTimeFieldProperty secondOfMinute() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1018,"eturn new MutableDateTimeFieldProperty(this, getChronology().secondOfMinute());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1029,public MutableDateTimeFieldProperty minuteOfHour() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1030,"return new MutableDateTimeFieldProperty(this, getChronology().minuteOfHour());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1031, Get the minute of hour field property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1043,* Get the second of minute field property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1033, @return the minute of hour property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1045,* @return the second of minute property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1035,ublic MutableDateTimeFieldProperty minuteOfHour() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1036,"eturn new MutableDateTimeFieldProperty(this, getChronology().minuteOfHour());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1047,public MutableDateTimeFieldProperty secondOfMinute() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1048,"return new MutableDateTimeFieldProperty(this, getChronology().secondOfMinute());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1040, Get the minute of day property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1052,* Get the millis of day property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1042, @return the minute of day property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1054,* @return the millis of day property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1044,ublic MutableDateTimeFieldProperty minuteOfDay() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1045,"eturn new MutableDateTimeFieldProperty(this, getChronology().minuteOfDay());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1056,public MutableDateTimeFieldProperty millisOfDay() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1057,"return new MutableDateTimeFieldProperty(this, getChronology().millisOfDay());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1049, Get the hour of day field property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1061,* Get the millis of second property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1051, @return the hour of day property
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1063,* @return the millis of second property
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1053,ublic MutableDateTimeFieldProperty hourOfDay() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1054,"eturn new MutableDateTimeFieldProperty(this, getChronology().hourOfDay());"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1065,public MutableDateTimeFieldProperty millisOfSecond() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1066,"return new MutableDateTimeFieldProperty(this, getChronology().millisOfSecond());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1061, Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1063, @return ISO8601 time formatted string.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1065,ublic String toString() {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1066,eturn ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1075,ry {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1076,eturn (MutableDateTime)super.clone();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1077, catch (CloneNotSupportedException ex) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1078,"hrow new InternalError(""Clone error"");"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1077,return (MutableDateTime)clone();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1096, Extracts a long datetime value from an object.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1098, @param object  an input object
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1099, @return a long date-time value
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1100," @throws IllegalArgumentException if the object is null, or the string invalid"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1101, @throws ClassCastException if the object type is not supported
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1103,rotected long getDateTimeMillisFromObject(Object object) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1104,f (object instanceof ReadableInstant) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1105,eturn ((ReadableInstant) object).getMillis();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1107, else if (object instanceof Date) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1108,eturn ((Date) object).getTime();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1110, else if (object instanceof Calendar) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1111,eturn ((Calendar) object).getTime().getTime();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1113, else if (object instanceof Long) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1114,eturn ((Long) object).longValue();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1116, else if (object instanceof String) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1117,ry {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1118,nstant instant = new Instant((String) object);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1119,eturn instant.getMillis();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1121, catch (ParseException ex) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1122,"hrow new IllegalArgumentException(""String '"" + object + ""' is an invalid date format"");"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1124, else if (object == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1125,"hrow new IllegalArgumentException(""<null> cannot be converted to a datetime"");"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1126, else {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1127,"hrow new ClassCastException(""Class '"" + object.getClass().getName() + ""' cannot be converted to a datetime"");"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1132, Extracts a fixed millisecond duration from an object.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1094,* Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1134, @param object  Long or String
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1135," @throws IllegalArgumentException if the object is null, or the string invalid"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1136, @throws ClassCastException if the object type is not supported
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1138,rotected long getDurationMillisFromObject(Object object) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1139,f (object instanceof Long) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1140,ong other = (Long) object;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1141,eturn other.longValue();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1142,* TODO } else if (object instanceof String) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1143,ry {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1144,imePeriod other = new TimePeriod((String) object);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1145,eturn other.getMillis();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1146, catch (ParseException ex) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1147,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1148,"""String '"" + object + ""' is an invalid time period format"");"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1150, else {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1151,tring type;
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1152,f (object == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1153,"ype = ""<null>"";"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1154, else {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1155,"ype = ""Object of type \"""" + object.getClass().getName() + '""';"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1157,"hrow new IllegalArgumentException(type + "" cannot be converted to a duration"");"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1096,* @return ISO8601 time formatted string.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1098,public String toString() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1099,return ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,59, MutableDateTimeFieldProperty binds a ReadWritableInstant to a DateTimeField.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,59,* MutableDateTimeFieldProperty binds a MutableDateTime to a DateTimeField
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,60,* allowing powerful datetime functionality to be easily accessed.
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,61, MutableDateTimeFieldProperty allows the date and time manipulation code to
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,62, be field based yet still easy to use.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,62,* The example below shows how to use the property to change the value of a
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,63,* MutableDateTime object.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,64,* <pre>
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,65,"* MutableDateTime dt = new MutableDateTime(1972, 12, 3, 0, 0, 0, 0);"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,66,* dt.year().add(20);
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,67,* dt.second().roundFloor();
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,68,* dt.minute().set(10);
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,69,* </pre>
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,70,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,71,"* MutableDateTimeFieldPropery itself is thread-safe and immutable, but the"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,72,* MutableDateTime being operated on may not be thread-safe.
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,71,ublic class MutableDateTimeFieldProperty extends DateTimeFieldProperty {
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,81,public class MutableDateTimeFieldProperty extends AbstractDateTimeFieldProperty {
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,83,static final long serialVersionUID = -4481126543819298617L;
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,85,/** The instant this property is working against */
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,86,private final MutableDateTime iInstant;
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,87,/** The field this property is working against */
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,88,private final DateTimeField iField;
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,79,"ublic MutableDateTimeFieldProperty(ReadWritableInstant instant, DateTimeField field) {"
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,80,"uper(instant, field);"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,96,"public MutableDateTimeFieldProperty(MutableDateTime instant, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,97,super();
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,98,iInstant = instant;
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,99,iField = field;
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,104,* Gets the field being used.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,106,* @return the field
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,108,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,109,return iField;
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,113,* Gets the instant being used.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,115,* @return the instant
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,117,public ReadableDateTime getInstant() {
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,118,return iInstant;
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,122,* Gets the instant being used.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,124,* @return the instant
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,126,public MutableDateTime getMutableDateTime() {
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,127,return iInstant;
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,86, @param value  the value to add.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,134,* @param value  the value to add
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,90,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,91,"nstant.setMillis(getField().add(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,138,"iInstant.setMillis(getField().add(iInstant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,97, @param value  the value to add.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,144,* @param value  the value to add
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,101,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,102,"nstant.setMillis(getField().add(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,148,"iInstant.setMillis(getField().add(iInstant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,108, @param value  the value to add.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,154,* @param value  the value to add
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,112,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,113,"nstant.setMillis(getField().addWrapped(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,158,"iInstant.setMillis(getField().addWrapped(iInstant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,123,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,124,"nstant.setMillis(getField().set(instant.getMillis(), value));"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,169,"iInstant.setMillis(getField().set(iInstant.getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,136,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,137,"nstant.setMillis(getField().set(instant.getMillis(), text, locale));"
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,181,"iInstant.setMillis(getField().set(iInstant.getMillis(), text, locale));"
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,157,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,158,nstant.setMillis(getField().roundFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,202,iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,167,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,168,nstant.setMillis(getField().roundCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,211,iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,178,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,179,nstant.setMillis(getField().roundHalfFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,221,iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,189,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,190,nstant.setMillis(getField().roundHalfCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,231,iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,195, is favored the floor only if it makes this field's value even.
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,236,* is favored over the floor only if it makes this field's value even.
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,200,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,201,nstant.setMillis(getField().roundHalfEven(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,241,iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,205, Retains only the fractional units of this field.
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,207, @see DateTimeField#remainder
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,209,ublic void remainder() {
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,210,eadWritableInstant instant = (ReadWritableInstant)getInstant();
False,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,JodaTime/src/java/org/joda/time/MutableDateTimeFieldProperty.java,211,nstant.setMillis(getField().remainder(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,10,* are met:
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,59,* Standard mutable duration implementation.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,60,* <p>
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,61,"* MutableDuration is mutable and not thread-safe, unless concurrent threads"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,62,* are not invoking mutator methods.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,64,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,65,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,66,* @since 1.0
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,67,* @see Duration
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,69,public class MutableDuration extends AbstractDuration
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,70,"implements ReadWritableDuration, Cloneable, Serializable {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,72,static final long serialVersionUID = 3436451121567212165L;
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,75,* Copies another duration to this one.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,77,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,78,* non-zero
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,80,public MutableDuration(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,81,super(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,85,* Copies another duration to this one.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,87,* @param type use a different DurationType
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,88,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,89,* non-zero
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,91,"public MutableDuration(DurationType type, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,92,"super(type, duration);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,96,* Create a duration from a set of field values.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,98,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,99,"* @param years amount of years in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,100,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,101,"* @param months amount of months in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,102,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,103,"* @param weeks amount of weeks in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,104,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,105,"* @param days amount of days in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,106,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,107,"* @param hours amount of hours in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,108,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,109,"* @param minutes amount of minutes in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,110,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,111,"* @param seconds amount of seconds in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,112,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,113,"* @param millis amount of milliseconds in this duration, which must be"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,114,* zero if unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,115,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,116,* non-zero
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,118,"public MutableDuration(DurationType type,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,119,"int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,120,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,121,"super(type, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,125,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,127,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,128,"* @param startInstant interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,129,"* @param endInstant interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,131,"public MutableDuration(DurationType type, long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,132,"super(type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,136,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,138,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,139,* @param startInstant interval start
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,140,* @param endInstant interval end
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,142,"public MutableDuration(DurationType type,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,143,"ReadableInstant startInstant, ReadableInstant endInstant) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,144,"super(type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,148,* Creates a duration from the given millisecond duration. If any supported
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,149,"* fields are imprecise, an UnsupportedOperationException is thrown. The"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,150,* exception to this is when the specified duration is zero.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,152,* @param type determines which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,153,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,154,* @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,156,"public MutableDuration(DurationType type, long duration) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,157,"super(type, duration);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,161,* Sets all the fields in one go from another ReadableDuration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,163,* @param duration  the duration to set
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,164,* @throws IllegalArgumentException if duration is null
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,165,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,166,* non-zero
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,168,public void setDuration(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,169,super.setDuration(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,173,* Sets all the fields in one go.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,175,"* @param years amount of years in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,176,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,177,"* @param months amount of months in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,178,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,179,"* @param weeks amount of weeks in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,180,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,181,"* @param days amount of days in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,182,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,183,"* @param hours amount of hours in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,184,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,185,"* @param minutes amount of minutes in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,186,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,187,"* @param seconds amount of seconds in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,188,* unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,189,"* @param millis amount of milliseconds in this duration, which must be"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,190,* zero if unsupported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,191,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,192,* non-zero
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,194,"public void setDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,195,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,196,"super.setDuration(years, months, weeks, days,"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,197,"hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,201,* Sets all the fields in one go from a millisecond interval.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,203,"* @param startInstant interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,204,"* @param endInstant interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,206,"public void setTotalMillis(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,207,"super.setTotalMillis(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,211,* Sets all the fields in one go from a millisecond duration. If any
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,212,"* supported fields are imprecise, an UnsupportedOperationException is"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,213,* thrown. The exception to this is when the specified duration is zero.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,215,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,216,* @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,218,public void setTotalMillis(long duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,219,super.setTotalMillis(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,224,* Adds a millisecond duration to this one.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,226,"* @param duration  the duration to add, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,227,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,229,public void add(long duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,230,super.add(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,234,* Adds a duration to this one.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,236,* @param duration  the duration to add
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,237,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,238,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,240,public void add(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,241,super.add(duration);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,245,* Normalizes all the field values in this duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,247,* @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,249,public void normalize() {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,250,super.normalize();
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,255,* Sets the number of years of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,257,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,258,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,260,public void setYears(int years) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,261,super.setYears(years);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,265,* Adds the specified years to the number of years in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,267,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,268,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,270,public void addYears(int years) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,271,super.addYears(years);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,276,* Sets the number of months of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,278,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,279,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,281,public void setMonths(int months) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,282,super.setMonths(months);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,286,* Adds the specified months to the number of months in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,288,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,289,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,291,public void addMonths(int months) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,292,super.addMonths(months);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,297,* Sets the number of weeks of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,299,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,300,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,302,public void setWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,303,super.setWeeks(weeks);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,307,* Adds the specified weeks to the number of weeks in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,309,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,310,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,312,public void addWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,313,super.addWeeks(weeks);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,318,* Sets the number of days of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,320,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,321,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,323,public void setDays(int days) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,324,super.setDays(days);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,328,* Adds the specified days to the number of days in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,330,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,331,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,333,public void addDays(int days) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,334,super.addDays(days);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,339,* Sets the number of hours of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,341,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,342,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,344,public void setHours(int hours) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,345,super.setHours(hours);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,349,* Adds the specified hours to the number of hours in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,351,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,352,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,354,public void addHours(int hours) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,355,super.addHours(hours);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,360,* Sets the number of minutes of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,362,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,363,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,365,public void setMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,366,super.setMinutes(minutes);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,370,* Adds the specified minutes to the number of minutes in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,372,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,373,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,375,public void addMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,376,super.addMinutes(minutes);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,381,* Sets the number of seconds of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,383,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,384,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,386,public void setSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,387,super.setSeconds(seconds);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,391,* Adds the specified seconds to the number of seconds in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,393,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,394,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,396,public void addSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,397,super.addSeconds(seconds);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,402,* Sets the number of millis of the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,404,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,405,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,407,public void setMillis(int millis) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,408,super.setMillis(millis);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,412,* Adds the specified millis to the number of millis in the duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,414,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,415,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,417,public void addMillis(int millis) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,418,super.addMillis(millis);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,421,// Misc
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,424,* Clone this object without having to cast the returned object.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,426,* @return a clone of the this object.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,428,public MutableDuration copy() {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,429,return (MutableDuration)clone();
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,433,* Clone this object.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,435,* @return a clone of this object.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,437,public Object clone() {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,438,try {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,439,return super.clone();
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,440,} catch (CloneNotSupportedException ex) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,441,"throw new InternalError(""Clone error"");"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,10,* are met:
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,57,* Defines an instant that does not support every datetime field.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,58,"* A PartialInstant supports a range of fields, specified by lower and"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,59,* upper bounding fields.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,61,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,63,public interface PartialInstant extends ReadableInstant {
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,66,"* Get the value as the number of milliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,67,"* 1970-01-01T00:00:00Z, with unsupported field values reset."
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,69,* @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,71,long getMillis();
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,74,"* Get the value as the number of milliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,75,"* 1970-01-01T00:00:00Z, with unsupported field values and time zone filled"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,76,* in by the given base instant.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,78,* @param base  source of missing fields
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,79,* @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,81,long getMillis(ReadableInstant base);
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,84,"* Get the value as the number of milliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,85,"* 1970-01-01T00:00:00Z, with unsupported field values filled in by the"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,86,* given base instant.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,88,* @param base  source of missing fields
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,89,"* @param zone  override the base time zone, null implies override with no"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,90,* time zone
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,91,* @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,93,"long getMillis(ReadableInstant base, DateTimeZone zone);"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,96,"* Gets the chronology of the instant, null if not applicable. The time"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,97,* zone of the chronology is either null or UTC.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,98,* <p>
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,99,* The {@link Chronology} provides conversion from the millisecond
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,100,* value to meaningful fields in a particular calendar system.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,102,* @return the Chronology
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,104,Chronology getChronology();
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,107,"* Returns the lower limiting field, where the lower limit field itself is"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,108,"* supported. In other words, for the range described by the lower and"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,109,"* upper limits, the lower limit is inclusive."
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,111,* @return lower limit or null if none
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,113,DateTimeField getLowerLimit();
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,116,"* Returns the upper limiting field, where the upper limit field itself is"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,117,"* not supported. In other words, for the range described by the lower and"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,118,"* upper limits, the upper limit is exclusive."
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,120,* @return upper limit or null if none
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,122,DateTimeField getUpperLimit();
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,125,* Returns true if the given instant is a PartialDateTime that supports the
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,126,* same exact set of fields. Implementations may simply do the following:
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,127,* <pre>
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,128,*     return instant instanceof &lt;this class&gt;;
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,129,* </pre>
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,131,* @param instant  the instant to compare to
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,132,* @return true if instant is same type as this
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,134,boolean isMatchingType(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,137,"* Returns the given instant, except with lower and upper limits"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,138,* applied. Field values are reset below the lower limit and at or above
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,139,* the upper limit.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,141,* @param instant milliseconds from 1970-01-01T00:00:00
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,142,* @return the adjusted millisecond instant
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,144,long resetUnsupportedFields(long instant);
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,147,"* Returns the given instant, except with lower and upper limits"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,148,* applied. Field values are reset below the upper limit and at or above
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,149,* the lower limit.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,151,* @param instant milliseconds from 1970-01-01T00:00:00
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,152,* @return the adjusted millisecond instant
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,154,long resetSupportedFields(long instant);
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,157,* Compares this object with the specified object for equality based
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,158,"* on the millisecond instant, the Chronology, and the limiting fields."
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,159,* <p>
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,160,* To compare two instants for absolute time (ie. UTC milliseconds ignoring
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,161,"* the chronology), use {@link #isEqual(ReadableInstant)} or"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,162,* {@link #compareTo(Object)}.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,164,* @param readableInstant  a readable instant to check against
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,165,"* @return true if millisecond and chronology are equal, false if"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,166,*  not or the instant is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,168,boolean equals(Object readableInstant);
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,171,* Gets a hash code for the instant that is compatable with the
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,172,* equals method.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,174,* @return a suitable hash code
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,176,int hashCode();
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,180,"* Get the value as a String in a recognisable ISO8601 format, only"
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,181,* displaying supported fields.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,182,* <p>
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,183,* The string output is in ISO8601 format to enable the String
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,184,* constructor to correctly parse it.
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,186,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/PartialInstant.java,JodaTime/src/java/org/joda/time/PartialInstant.java,188,String toString();
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,10,* are met:
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,56,// Import for @link support
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,57,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,60,* Defines an instant in time that can be queried and modified using datetime fields.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,61,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,62,* The implementation of this interface will be mutable.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,63,* It may provide more advanced methods than those in the interface.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,64,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,65,* Methods in your application should be defined using <code>ReadWritableDateTime</code>
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,66,* as a parameter if the method wants to manipulate and change a date in simple ways.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,68,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,69,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,71,"public interface ReadWritableDateTime extends ReadableDateTime, ReadWritableInstant {"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,75,* Set the year to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,77,* @param year  the year
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,78,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,80,void setYear(int year);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,83,* Add a number of years to the date.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,85,* @param years  the years to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,86,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,88,void addYears(int years);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,92,* Set the week of the year to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,94,* @param weekyear  the weekyear
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,95,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,97,void setWeekyear(int weekyear);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,100,* Add a number of weekyears to the date.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,102,* @param weekyears  the weekyears to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,103,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,105,void addWeekyears(int weekyears);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,109,* Set the month of the year to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,111,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,112,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,114,void setMonthOfYear(int monthOfYear);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,117,* Add a number of months to the date.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,119,* @param months  the months to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,120,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,122,void addMonths(int months);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,126,* Set the week of weekyear to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,128,* @param weekOfWeekyear the week of the weekyear
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,129,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,131,void setWeekOfWeekyear(int weekOfWeekyear);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,134,* Add a number of weeks to the date.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,136,* @param weeks  the weeks to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,137,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,139,void addWeeks(int weeks);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,143,* Set the day of year to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,145,* @param dayOfYear the day of the year
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,146,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,148,void setDayOfYear(int dayOfYear);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,151,* Set the day of the month to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,153,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,154,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,156,void setDayOfMonth(int dayOfMonth);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,159,* Set the day of week to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,161,* @param dayOfWeek  the day of the week
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,162,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,164,void setDayOfWeek(int dayOfWeek);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,167,* Add a number of days to the date.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,169,* @param days  the days to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,170,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,172,void addDays(int days);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,176,* Set the hour of the day to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,178,* @param hourOfDay  the hour of day
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,179,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,181,void setHourOfDay(int hourOfDay);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,184,* Add a number of hours to the date.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,186,* @param hours  the hours to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,187,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,189,void addHours(int hours);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,193,* Set the minute of the day to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,195,* @param minuteOfDay  the minute of day
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,196,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,198,void setMinuteOfDay(int minuteOfDay);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,201,* Set the minute of the hour to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,203,* @param minuteOfHour  the minute of hour
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,204,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,206,void setMinuteOfHour(int minuteOfHour);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,209,* Add a number of minutes to the date.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,211,* @param minutes  the minutes to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,212,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,214,void addMinutes(int minutes);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,218,* Set the second of the day to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,220,* @param secondOfDay  the second of day
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,221,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,223,void setSecondOfDay(int secondOfDay);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,226,* Set the second of the minute to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,228,* @param secondOfMinute  the second of minute
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,229,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,231,void setSecondOfMinute(int secondOfMinute);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,234,* Add a number of seconds to the date.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,236,* @param seconds  the seconds to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,237,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,239,void addSeconds(int seconds);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,243,* Set the millis of the day to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,245,* @param millisOfDay  the millis of day
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,246,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,248,void setMillisOfDay(int millisOfDay);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,251,* Set the millis of the second to the specified value.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,253,* @param millisOfSecond  the millis of second
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,254,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,256,void setMillisOfSecond(int millisOfSecond);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,259,* Add a number of milliseconds to the date. The implementation of this
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,260,* method differs from the {@link #add(long)} method in that a
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,261,* DateTimeField performs the addition.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,263,* @param millis  the milliseconds to add
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,264,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,266,void addMillis(int millis);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,270,* Set the date from milliseconds.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,271,* The time part of this object will be unaffected.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,273,"* @param instant  milliseconds from 1970-01-01T00:00:00Z, time part ignored"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,274,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,276,void setDate(long instant);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,279,* Set the date from an object representing an instant.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,280,* The time part of this object will be unaffected.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,281,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,282,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,283,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,285,"* @param instant  an object representing an instant, time part ignored"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,286,* @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,288,void setDate(Object instant);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,291,* Set the date from fields.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,292,* The time part of this object will be unaffected.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,294,* @param year  the year
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,295,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,296,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,297,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,299,"void setDate(int year, int monthOfYear, int dayOfMonth);"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,303,* Set the time from milliseconds.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,304,* The date part of this object will be unaffected.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,306,"* @param millis milliseconds from T00:00:00Z, date part ignored"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,307,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,309,void setTime(long millis);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,312,* Set the date from an object representing an instant.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,313,* The date part of this object will be unaffected.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,314,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,315,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,316,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,318,"* @param instant  an object representing an instant, date part ignored"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,319,* @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,321,void setTime(Object instant);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,324,* Set the time from fields.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,325,* The date part of this object will be unaffected.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,327,* @param hour  the hour
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,328,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,329,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,330,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,331,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,333,"void setTime(int hour, int minuteOfHour, int secondOfMinute, int millisOfSecond);"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,337,* Set the date and time from milliseconds.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,338,* This method is a synonm for {@link #setMillis(long)}.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,340,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,341,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,343,void setDateTime(long instant);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,346,* Set the date and time from an object representing an instant.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,347,* This method is a synonm for {@link #setMillis(Object)}.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,348,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,349,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,350,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,352,* @param instant  an object representing an instant
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,353,* @throws IllegalArgumentException if the object is null or invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,355,void setDateTime(Object instant);
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,358,* Set the date and time from fields.
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,360,* @param year  the year
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,361,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,362,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,363,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,364,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,365,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,366,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,367,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,369,void setDateTime(
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,370,"int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,JodaTime/src/java/org/joda/time/ReadWritableDateTime.java,371,"int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond);"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,10,* are met:
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,57,* Defines a duration of time that can be queried and modified using datetime fields.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,58,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,59,* The implementation of this interface will be mutable.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,60,* It may provide more advanced methods than those in the interface.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,62,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,63,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,64,* @since 1.0
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,66,public interface ReadWritableDuration extends ReadableDuration {
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,69,* Sets all the fields in one go from another ReadableDuration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,71,* @param duration  the duration to set
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,72,* @throws IllegalArgumentException if duration is null
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,73,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,74,* non-zero
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,76,void setDuration(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,79,* Sets all the fields in one go.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,81,"* @param years amount of years in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,82,* unsupported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,83,"* @param months amount of months in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,84,* unsupported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,85,"* @param weeks amount of weeks in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,86,* unsupported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,87,"* @param days amount of days in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,88,* unsupported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,89,"* @param hours amount of hours in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,90,* unsupported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,91,"* @param minutes amount of minutes in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,92,* unsupported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,93,"* @param seconds amount of seconds in this duration, which must be zero if"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,94,* unsupported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,95,"* @param millis amount of milliseconds in this duration, which must be"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,96,* zero if unsupported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,97,* @throws UnsupportedOperationException if an unsupported field's value is
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,98,* non-zero
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,100,"void setDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,101,"int hours, int minutes, int seconds, int millis);"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,104,* Sets all the fields in one go from a millisecond interval.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,106,"* @param startInstant interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,107,"* @param endInstant interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,109,"void setTotalMillis(long startInstant, long endInstant);"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,112,* Sets all the fields in one go from a millisecond duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,114,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,115,* @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,117,void setTotalMillis(long duration);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,121,* Adds a millisecond duration to this one.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,123,"* @param duration  the duration to add, in milliseconds"
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,124,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,126,void add(long duration);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,129,* Adds a duration to this one.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,131,* @param duration  the duration to add
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,132,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,133,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,135,void add(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,138,* Normalizes all the field values in this duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,140,* @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,142,void normalize();
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,146,* Sets the number of years of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,148,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,149,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,151,void setYears(int years);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,154,* Adds the specified years to the number of years in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,156,* @param years  the number of years
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,157,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,159,void addYears(int years);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,163,* Sets the number of months of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,165,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,166,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,168,void setMonths(int months);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,171,* Adds the specified months to the number of months in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,173,* @param months  the number of months
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,174,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,176,void addMonths(int months);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,180,* Sets the number of weeks of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,182,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,183,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,185,void setWeeks(int weeks);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,188,* Adds the specified weeks to the number of weeks in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,190,* @param weeks  the number of weeks
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,191,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,193,void addWeeks(int weeks);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,197,* Sets the number of days of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,199,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,200,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,202,void setDays(int days);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,205,* Adds the specified days to the number of days in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,207,* @param days  the number of days
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,208,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,210,void addDays(int days);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,214,* Sets the number of hours of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,216,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,217,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,219,void setHours(int hours);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,222,* Adds the specified hours to the number of hours in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,224,* @param hours  the number of hours
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,225,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,227,void addHours(int hours);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,231,* Sets the number of minutes of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,233,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,234,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,236,void setMinutes(int minutes);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,239,* Adds the specified minutes to the number of minutes in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,241,* @param minutes  the number of minutes
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,242,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,244,void addMinutes(int minutes);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,248,* Sets the number of seconds of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,250,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,251,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,253,void setSeconds(int seconds);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,256,* Adds the specified seconds to the number of seconds in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,258,* @param seconds  the number of seconds
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,259,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,261,void addSeconds(int seconds);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,265,* Sets the number of millis of the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,267,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,268,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,270,void setMillis(int millis);
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,273,* Adds the specified millis to the number of millis in the duration.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,275,* @param millis  the number of millis
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,276,* @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,JodaTime/src/java/org/joda/time/ReadWritableDuration.java,278,void addMillis(int millis);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,56,// Import for @link support
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,57,import org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,57, Writable interface for an instant in the datetime continuum.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,60,* Defines an instant in the datetime continuum that can be queried and modified.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,61,* This interface expresses the datetime as milliseconds from 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,59, This interface expresses the datetime as milliseconds from
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,60, 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,63,* The implementation of this interface will be mutable.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,64,* It may provide more advanced methods than those in the interface.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,75,* @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,76,* instant to
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,77,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,79,void setMillis(long instant);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,82,* Set the value from an Object representing an instant.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,83,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,84,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,85,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,87,* @param instant  an object representing an instant
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,88,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,90,void setMillis(Object instant);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,93,"* Set the chronology of the datetime, which has no effect if not"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,94,* applicable.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,96,"* @param chronology  the chronology to use, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,97,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,99,void setChronology(Chronology chronology);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,102,"* Sets the time zone of the datetime via the chronology, which has no"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,103,* effect if not applicable. Setting the time zone does not affect the
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,104,* millisecond value of this instant.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,71, @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,106,"* @param zone  the time zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,107,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,108,* @see #moveDateTimeZone
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,73,oid setMillis(long millis);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,110,void setDateTimeZone(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,76," Set the value from Date, Calendar, DateTime etc."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,113,"* Moves the time zone of the datetime via the chronology, which has no"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,114,* effect if not applicable. Moving the time zone alters the millisecond
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,115,* value of this instant such that it is relative to the new time zone.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,78, @return the value as a Calendar
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,117,"* @param zone  the time zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,118,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,119,* @see #setDateTimeZone
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,80,oid setMillis(Object obj);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,121,void moveDateTimeZone(DateTimeZone zone);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,125,* Add a number of millis to the value.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,126,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,127,"* If the resulting value is too large for millis, seconds"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,128,* will change and so on unless it is too large for the
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,129,"* implementation, when an exception is thrown."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,131,* @param duration  the millis to add
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,132,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,134,void add(long duration);
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,89, @param duration duration to add.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,142,* @param duration  duration to add.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,143,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,91,/void add(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,145,void add(ReadableDuration duration);
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,99, @param duration duration to add.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,153,* @param duration  duration to add.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,155,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,102,"/void add(ReadableDuration duration, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,157,"void add(ReadableDuration duration, int scalar);"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,110, @param object  an object evaluating to an a period of time to
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,111,  add.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,113,oid add(Object object);
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,116, Add a number of millis to the value.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,118," If the resulting value is too large for millis, seconds"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,119, will change and so on unless it is too large for the
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,120," implementation, when an exception is thrown."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,165,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,166,"* include ReadableDuration, String and Long."
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,122, @param millis  the millis to add
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,168,* @param duration  an object representing a duration
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,169,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,124,oid addMillis(long millis);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,171,void add(Object duration);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,183,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,196,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,212,* @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,59, Extends the ReadableInstant interface to support specific datetime fields.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,59,* Defines an instant in time that can be queried using datetime fields.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,60,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,61,* The implementation of this interface may be mutable or immutable.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,62,"* This interface only gives access to retrieve data, never to change it."
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,63,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,64,* Methods in your application should be defined using <code>ReadableDateTime</code>
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,65,"* as a parameter if the method only wants to read the datetime, and not perform"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,66,* any advanced manipulations.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,207,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,208,"* If the implementation of the interface is a DateTime, it is returned directly."
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,201, @return a DateTime using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,210,"* @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,216,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,217,"* If the implementation of the interface is a DateTime in the correct zone,"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,218,* it is returned directly.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,208, @param zone time zone to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,209, @return a DateTime using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,220,* @param zone  time zone to apply
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,221,"* @return a DateTime using the same millis, unless partially specified"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,228,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,229,"* If the implementation of the interface is a DateTime in the correct chronology,"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,230,* it is returned directly.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,217, @param chronology chronology to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,218, @return a DateTime using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,232,* @param chronology  chronology to apply
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,233,"* @return a DateTime using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,224, Get this object as a MutableDateTime.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,239,"* Get this object as a MutableDateTime, always returning a new instance."
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,226, @return a MutableDateTime using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,241,"* @return a MutableDateTime using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,231, Get this object as a MutableDateTime.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,246,"* Get this object as a MutableDateTime, always returning a new instance."
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,233, @param zone time zone to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,234, @return a MutableDateTime using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,248,* @param zone  time zone to apply
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,249,"* @return a MutableDateTime using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,240, Get this object as a MutableDateTime.
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,255,"* Get this object as a MutableDateTime, always returning a new instance."
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,242, @param chronology chronology to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,243, @return a MutableDateTime using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,257,* @param chronology  chronology to apply
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,258,"* @return a MutableDateTime using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,251, @return a DateOnly using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,266,"* @return a DateOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,253,/DateOnly toDateOnly();
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,268,DateOnly toDateOnly();
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,259, @return a DateOnly using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,274,"* @return a DateOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,262,/DateOnly toDateOnly(Chronology chronology);
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,277,DateOnly toDateOnly(Chronology chronology);
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,267, @return a TimeOnly using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,282,"* @return a TimeOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,269,/TimeOnly toTimeOnly();
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,284,TimeOnly toTimeOnly();
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,275, @return a TimeOnly using the same millis
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,290,"* @return a TimeOnly using the same millis, unless partially specified"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,278,/TimeOnly toTimeOnly(Chronology chronology);
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,293,TimeOnly toTimeOnly(Chronology chronology);
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,283, @param pattern pattern specification
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,284, @see org.joda.time.format.DateTimeFormatterBuilder#appendPattern(java.lang.String)
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,298,* @param pattern  pattern specification
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,299,* @throws IllegalArgumentException  if pattern is invalid
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,300,* @see  org.joda.time.format.DateTimeFormat
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,291, @param pattern pattern specification
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,292," @param locale Locale to use, must not be null"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,293, @see org.joda.time.format.DateTimeFormatterBuilder#appendPattern(java.lang.String)
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,294, @throws IllegalArgumentException if the locale is null
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,307,* @param pattern  pattern specification
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,308,"* @param locale  Locale to use, or null for default"
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,309,* @throws IllegalArgumentException  if pattern is invalid
True,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,310,* @see  org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,10,* are met:
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,57,* Defines a duration of time that can be queried using fields.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,58,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,59,"* Durations can be split up into multiple fields, but implementations are not"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,60,* required to evenly distribute the values across the fields. Nor are they
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,61,* required to normalize the fields nor match the signs.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,62,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,63,"* For example, an implementation can represent a duration of ""4 days, 6 hours"""
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,64,"* as ""102 hours"", ""1 day, 78 hours"", ""367200000 milliseconds"", or even"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,65,"* ""3 days, -8 hours, 2275 minutes, 298 seconds, 2000 milliseconds""."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,67,* @see ReadableInterval
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,68,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,69,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,70,* @since 1.0
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,72,public interface ReadableDuration extends Comparable {
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,75,* Returns the object which defines which fields this duration supports.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,77,DurationType getDurationType();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,80,"* Gets the total length of this duration in milliseconds,"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,81,* failing if the duration is imprecise.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,83,* @return the total length of the time duration in milliseconds.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,84,* @throws IllegalStateException if the duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,86,long getTotalMillis();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,89,"* Is this duration a precise length of time, or descriptive."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,90,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,91,"* A precise duration could include millis, seconds, minutes or hours."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92,"* However, days, weeks, months and years can vary in length, resulting in"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,93,* an imprecise duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,95,* An imprecise duration can be made precise by pairing it with a
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,96,* date in a {@link ReadableInterval}.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,98,* @return true if the duration is precise
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,100,boolean isPrecise();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,104,"* Adds this duration to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,105,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,106,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,107,* in a scaler of minus one.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,109,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,110,* duration to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,111,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,112,* @return milliseconds value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,113,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,115,"long addTo(long instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,118,"* Adds this duration to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,119,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,120,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,121,* in a scaler of minus one.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,123,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,124,* duration to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,125,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,126,"* @param chrono  override the duration's chronology, unless null is passed in"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,127,* @return milliseconds value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,128,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,130,"long addTo(long instant, int scalar, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,133,"* Adds this duration to the given instant, returning a new Instant."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,134,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,135,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,136,* in a scaler of minus one.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,138,* @param instant  the instant to add the duration to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,139,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,140,* @return instant with the original value plus this duration times scalar
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,141,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,142,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,144,"ReadableInstant addTo(ReadableInstant instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,147,* Adds this duration into the given mutable instant.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,148,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,149,"* To add just once, pass in a scalar of one. To subtract once, pass"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,150,* in a scaler of minus one.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,152,* @param instant  the instant to update with the added duration
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,153,"* @param scalar  the number of times to add the duration, negative to subtract"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,154,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,155,* @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,157,"void addInto(ReadWritableInstant instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,161,* Gets the years field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,163,"* @return the number of years in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,165,int getYears();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,168,* Gets the months field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,170,"* @return the number of months in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,172,int getMonths();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,175,* Gets the weeks field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,177,"* @return the number of weeks in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,179,int getWeeks();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,182,* Gets the days field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,184,"* @return the number of days in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,186,int getDays();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,189,* Gets the hours field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,191,"* @return the number of hours in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,193,int getHours();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,196,* Gets the minutes field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,198,"* @return the number of minutes in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,200,int getMinutes();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,203,* Gets the seconds field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,205,"* @return the number of seconds in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,207,int getSeconds();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,210,* Gets the millis field part of the duration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,212,"* @return the number of millis in the duration, zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,214,int getMillis();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,217,* Get this object as an immutable Duration. This can be useful if you
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,218,"* don't trust the implementation of the interface to be well-behaved, or"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,219,* to get a guaranteed immutable object.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,221,* @return a Duration using the same field set and values
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,223,Duration toDuration();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,226,* Get this object as a MutableDuration.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,228,* @return a MutableDuration using the same field set and values
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,230,MutableDuration toMutableDuration();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,234,"* Compares this duration with the specified duration, which can only be"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,235,* performed if both are precise.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,237,* @param obj  a precise duration to check against
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,238,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,239,* @throws NullPointerException if the object is null
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,240,* @throws ClassCastException if the given object is not supported
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,241,* @throws IllegalStateException if either duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,243,int compareTo(Object obj);
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,246,* Is the length of this duration equal to the duration passed in.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,247,* Both durations must be precise.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,249,* @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,250,* @return true if this duration is equal to than the duration passed in
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,251,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,252,* @throws IllegalStateException if either duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,254,boolean isEqual(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,257,* Is the length of this duration longer than the duration passed in.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,258,* Both durations must be precise.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,260,* @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,261,* @return true if this duration is equal to than the duration passed in
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,262,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,263,* @throws IllegalStateException if either duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,265,boolean isLongerThan(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,268,* Is the length of this duration shorter than the duration passed in.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,269,* Both durations must be precise.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,271,* @param duration  another duration to compare to
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,272,* @return true if this duration is equal to than the duration passed in
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,273,* @throws IllegalArgumentException if the duration is null
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,274,* @throws IllegalStateException if either duration is imprecise
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,276,boolean isShorterThan(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,280,* Compares this object with the specified object for equality based
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,281,* on the value of each field. All ReadableDuration instances are accepted.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,282,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,283,* To compare two durations for absolute duration (ie. millisecond duration
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,284,"* ignoring the fields), use {@link #isEqual(ReadableDuration)} or"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,285,* {@link #compareTo(Object)}.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,287,* @param readableDuration  a readable duration to check against
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,288,"* @return true if all the field values are equal, false if"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,289,*  not or the duration is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,291,boolean equals(Object readableDuration);
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,294,* Gets a hash code for the duration that is compatable with the
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,295,* equals method.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,297,* @return a hash code
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,299,int hashCode();
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,303,* Gets the value as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,304,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,305,"* For example, ""P6H3M5S"" represents 6 hours, 3 minutes, 5 seconds."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,307,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,309,String toString();
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,57, Readable interface for an instant in the datetime continuum.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,57,* Defines an instant in the datetime continuum.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,58,* This interface expresses the datetime as milliseconds from 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,59, This interface expresses the datetime as milliseconds from
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,60, 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,60,* The implementation of this interface may be mutable or immutable.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,61,"* This interface only gives access to retrieve data, never to change it."
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,62,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,63,* Methods in your application should be defined using <code>ReadableInstant</code>
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,64,* as a parameter if the method only wants to read the instant without needing to know
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,65,* the specific datetime fields.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,68, Get the value as the number of miliseconds since
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,73,* Get the value as the number of milliseconds since
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,81,"* Get the value as the number of milliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,82,"* 1970-01-01T00:00:00Z, with unsupported field values filled in by the"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,83,* given base instant.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,84,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,85,* This method is useful for ReadableInstants that only partially describe
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,86,"* the instant. The base supplies missing information, including time"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,87,* zone. Instants that are complete simply return the same value as for
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,88,"* getMillis(), ignoring the given base."
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,90,* @param base optional source of missing fields
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,91,* @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,93,long getMillis(ReadableInstant base);
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,96,"* Get the value as the number of milliseconds since the epoch,"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,97,"* 1970-01-01T00:00:00Z, with unsupported field values filled in by the"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,98,* given base instant.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,99,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,100,* This method is useful for ReadableInstants that only partially describe
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,101,"* the instant. The base supplies missing information, excluding time"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,102,* zone. Instants that are complete simply return the same value as for
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,103,"* getMillis(), ignoring the given base."
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,105,* @param base source of missing fields
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,106,"* @param zone override the base time zone, null implies override with no"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,107,* time zone
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,108,* @return the value as milliseconds
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,110,"long getMillis(ReadableInstant base, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,182," @return -1 if this is less, 0 if equal or +1 if greater"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,219,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,10,* are met:
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,58,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,59,// Import for @link support
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,60,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,61,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,64,* <p>Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,65,* <ul>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,66,* <li><code>getHourOfDay()</code>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,67,* <li><code>hourOfDay().get()</code>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,68,* </ul>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,69,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,70,* field:
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,71,* <ul>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,72,* <li>numeric value
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,73,* <li>text value
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,74,* <li>short text value
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,75,* <li>maximum value
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,76,* <li>minimum value
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,77,* </ul>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,81,* TimeOnly is the basic implementation of a time only class supporting
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,82,* chronologies. It holds the time as milliseconds from T00:00:00. The date
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,83,* component and time zone is fixed at 1970-01-01TZ.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,84,* <p>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,85,"* TimeOnly is thread-safe and immutable, provided that the Chronology is as"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,86,* well. All standard Chronology classes supplied are thread-safe and
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,87,* immutable.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,89,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,90,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,91,* @since 1.0
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,92,* @see DateOnly
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,93,* @see DateTime
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,95,public class TimeOnly extends AbstractPartialInstant implements Serializable {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,97,static final long serialVersionUID = -8414446947366046476L;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,99,// Constructors
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,102,* Constructs a TimeOnly to the current time in the default time zone.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,104,public TimeOnly() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,105,super();
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,109,* Constructs a TimeOnly to the current time in the given time zone.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,111,"* @param zone  the time zone, null means default zone"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,113,public TimeOnly(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,114,super(zone);
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,118,* Constructs a TimeOnly to the current time in the time zone of the given
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,119,* chronology.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,121,"* @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,123,public TimeOnly(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,124,super(chronology);
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,128,* Constructs a TimeOnly set to the milliseconds from 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,130,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,132,public TimeOnly(long instant) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,133,super(instant);
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,137,* Constructs a TimeOnly set to the milliseconds from
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,138,* 1970-01-01T00:00:00Z. If the time zone of the given chronology is not
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,139,"* null or UTC, then the instant is converted to local time."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,141,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,142,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,144,"public TimeOnly(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,145,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,149,* Constructs an instance from an Object that represents a time.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,150,* <p>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,151,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,152,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,154,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,155,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,157,public TimeOnly(Object instant) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,158,super(instant);
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,162,"* Constructs an instance from an Object that represents a time, using the"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,163,* specified chronology.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,164,* <p>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,165,* The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,166,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,168,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,169,"* @param chronology  the chronology, must not be null"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,170,* @throws IllegalArgumentException if the date or chronology is null
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,172,"public TimeOnly(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,173,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,177,* Constructs an instance from time field values using
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,178,* <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,180,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,181,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,182,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,183,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,185,public TimeOnly(
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,186,"final int hourOfDay,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,187,"final int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,188,"final int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,189,final int millisOfSecond) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,191,super(ISOChronology.getInstanceUTC()
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,192,".getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond),"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,193,ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,197,* Constructs an instance from time field values
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,198,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,199,* <p>
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,200,"* If the chronology is null, <code>ISOChronology</code>"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,201,* is used.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,203,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,204,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,205,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,206,* @param millisOfSecond  the milisecond of the second
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,207,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,209,public TimeOnly(
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,210,"final int hourOfDay,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,211,"final int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,212,"final int secondOfMinute,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,213,"final int millisOfSecond,"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,214,Chronology chronology) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,216,super((chronology == null ? (chronology = ISOChronology.getInstanceUTC()) : chronology)
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,217,".getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond),"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,218,chronology);
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,222,"* Returns the lower limiting field, null."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,224,* @return null.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,226,public final DateTimeField getLowerLimit() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,227,return null;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,231,"* Returns the upper limiting field, dayOfYear."
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,233,* @return dayOfYear field
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,235,public final DateTimeField getUpperLimit() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,236,return getChronology().dayOfYear();
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,239,public final boolean isMatchingType(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,240,return instant instanceof TimeOnly;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,243,// Time field access
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,246,* Get the hour of day field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,248,* @return the hour of day
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,250,public final int getHourOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,251,return getChronology().hourOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,255,* Get the minute of day field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,257,* @return the minute of day
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,259,public final int getMinuteOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,260,return getChronology().minuteOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,264,* Get the minute of hour field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,266,* @return the minute of hour
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,268,public final int getMinuteOfHour() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,269,return getChronology().minuteOfHour().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,273,* Get the second of day field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,275,* @return the second of day
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,277,public final int getSecondOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,278,return getChronology().secondOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,282,* Get the second of minute field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,284,* @return the second of minute
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,286,public final int getSecondOfMinute() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,287,return getChronology().secondOfMinute().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,291,* Get the millis of day field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,293,* @return the millis of day
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,295,public final int getMillisOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,296,return getChronology().millisOfDay().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,300,* Get the millis of second field value.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,302,* @return the millis of second
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,304,public final int getMillisOfSecond() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,305,return getChronology().millisOfSecond().get(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,308,// TODO: DateTimeFieldProperty cannot be constructed with anything but
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,309,// DateTime.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,311,// Properties
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,314,* Get the hour of day field property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,316,* @return the hour of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,318,public final DateTimeFieldProperty hourOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,319,"return new DateTimeFieldProperty(this, getChronology().hourOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,323,* Get the minute of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,325,* @return the minute of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,327,public final DateTimeFieldProperty minuteOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,328,"return new DateTimeFieldProperty(this, getChronology().minuteOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,332,* Get the minute of hour field property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,334,* @return the minute of hour property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,336,public final DateTimeFieldProperty minuteOfHour() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,337,"return new DateTimeFieldProperty(this, getChronology().minuteOfHour());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,341,* Get the second of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,343,* @return the second of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,345,public final DateTimeFieldProperty secondOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,346,"return new DateTimeFieldProperty(this, getChronology().secondOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,350,* Get the second of minute field property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,352,* @return the second of minute property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,354,public final DateTimeFieldProperty secondOfMinute() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,355,"return new DateTimeFieldProperty(this, getChronology().secondOfMinute());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,359,* Get the millis of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,361,* @return the millis of day property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,363,public final DateTimeFieldProperty millisOfDay() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,364,"return new DateTimeFieldProperty(this, getChronology().millisOfDay());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,368,* Get the millis of second property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,370,* @return the millis of second property
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,372,public final DateTimeFieldProperty millisOfSecond() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,373,"return new DateTimeFieldProperty(this, getChronology().millisOfSecond());"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,377,// Output
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,380,* Output the time in ISO8601 date only format (hh:mm:ss.SSS).
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,382,* @return ISO8601 date formatted string
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,384,public final String toString() {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,385,return ISODateTimeFormat.getInstance(getChronology())
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,386,.hourMinuteSecondFraction().print(getMillis());
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,389,"protected ReadableInstant create(long millis, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,390,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,391,"throw new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,393,if (millis == getMillis() && chronology == getChronology()) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,394,return this;
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,396,"return new TimeOnly(millis, chronology);"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,400,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,401,* immutable.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,403,protected final void setMillis(long millis) {
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,407,"* Overridden to do nothing, ensuring this class and all subclasses are"
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,408,* immutable.
True,JodaTime/src/java/org/joda/time/TimeOnly.java,JodaTime/src/java/org/joda/time/TimeOnly.java,410,protected final void setChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,57,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,58,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,62,* AbstractDateTimeField provides the common behaviour for DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,63,* implementations.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,64,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,65,* This class should generally not be used directly by API users. The
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,66,* DateTimeField interface should be used when different kinds of DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,67,* objects are to be referenced.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,68,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,69,"* AbstractDateTimeField is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,70,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,72,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,73,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,74,* @see DecoratedDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,76,"public abstract class AbstractDateTimeField implements DateTimeField, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,78,static final long serialVersionUID = -4388055220581798589L;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,80,/** A desriptive name for the field */
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,81,private final String iName;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,84,* Constructor.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,86,protected AbstractDateTimeField(String name) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,87,super();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,88,if (name == null) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,89,"throw new IllegalArgumentException(""The name must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,91,iName = name;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,94,public final String getName() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,95,return iName;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,99,* @return true always
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,101,public final boolean isSupported() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,102,return true;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,105,// Main access API
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,108,* Get the value of this field from the milliseconds.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,110,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,111,"* @return the value of the field, in the units of the field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,113,public abstract int get(long instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,116,"* Get the human-readable, text value of this field from the milliseconds."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,117,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,118,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,119,* The default implementation returns Integer.toString(get(instant)).
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,120,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,121,* Note: subclasses that override this method should also override
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,122,* getMaximumTextLength.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,124,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,125,"* @param locale the locale to use for selecting a text symbol, null for"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,126,* default
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,127,* @return the text value of the field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,129,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,130,return Integer.toString(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,134,"* Get the human-readable, text value of this field from the milliseconds."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,135,"* This implementation returns getAsText(instant, null)."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,137,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,138,* @return the text value of the field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,140,public final String getAsText(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,141,"return getAsText(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,145,"* Get the human-readable, short text value of this field from the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,146,"* milliseconds.  If the specified locale is null, the default locale is"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,147,* used.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,148,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,149,"* The default implementation returns getAsText(instant, locale)."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,150,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,151,* Note: subclasses that override this method should also override
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,152,* getMaximumShortTextLength.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,154,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,155,"* @param locale the locale to use for selecting a text symbol, null for"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,156,* default
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,157,* @return the short text value of the field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,159,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,160,"return getAsText(instant, locale);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,164,"* Get the human-readable, short text value of this field from the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,165,"* milliseconds.  This implementation returns getAsShortText(instant, null)."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,167,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,168,* @return the short text value of the field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,170,public final String getAsShortText(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,171,"return getAsShortText(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,175,"* Adds a value (which may be negative) to the instant value,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,176,* overflowing into larger fields if necessary.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,177,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,178,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,179,"* added solely to this field, larger fields will increase as required."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,180,"* Smaller fields should be unaffected, except where the result would be"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,181,* an invalid value for a smaller field. In this case the smaller field is
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,182,* adjusted to be in range.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,183,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,184,"* For example, in the ISO chronology:<br>"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,185,* 2000-08-20 add six months is 2001-02-20<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,186,* 2000-08-20 add twenty months is 2002-04-20<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,187,* 2000-08-20 add minus nine months is 1999-11-20<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,188,* 2001-01-31 add one month  is 2001-02-28<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,189,* 2001-01-31 add two months is 2001-03-31<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,191,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,192,"* @param value  the value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,193,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,195,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,196,"return getDurationField().add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,200,"* Adds a value (which may be negative) to the instant value,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,201,* overflowing into larger fields if necessary.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,203,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,204,"* @param value  the long value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,205,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,206,* @throws IllegalArgumentException if value is too large
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,207,"* @see #add(long,int)"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,209,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,210,"return getDurationField().add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,214,"* Adds a value (which may be negative) to the instant value,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,215,* wrapping within this field.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,216,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,217,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,218,* added solely to this field then it wraps. Larger fields are always
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,219,"* unaffected. Smaller fields should be unaffected, except where the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,220,* result would be an invalid value for a smaller field. In this case the
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,221,* smaller field is adjusted to be in range.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,222,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,223,"* For example, in the ISO chronology:<br>"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,224,* 2000-08-20 addWrapped six months is 2000-02-20<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,225,* 2000-08-20 addWrapped twenty months is 2000-04-20<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,226,* 2000-08-20 addWrapped minus nine months is 2000-11-20<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,227,* 2001-01-31 addWrapped one month  is 2001-02-28<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,228,* 2001-01-31 addWrapped two months is 2001-03-31<br>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,229,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,230,* The default implementation internally calls set. Subclasses are
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,231,* encouraged to provide a more efficient implementation.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,233,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,234,"* @param value  the value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,235,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,237,"public long addWrapped(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,238,int current = get(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,239,int wrapped = Utils.getWrappedValue
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,240,"(current, value, getMinimumValue(instant), getMaximumValue(instant));"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,241,"return set(instant, wrapped);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,245,"* Computes the difference between two instants, as measured in the units"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,246,* of this field. Any fractional units are dropped from the result. Calling
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,247,* getDifference reverses the effect of calling add. In the following code:
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,249,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,250,* long instant = ...
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,251,* int v = ...
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,252,"* int age = getDifference(add(instant, v), instant);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,253,* </pre>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,255,* The value 'age' is the same as the value 'v'.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,257,* @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,258,* subtract from
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,259,* @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,260,* subtract off the minuend
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,261,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,263,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,264,"return getDurationField().getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,268,"* Computes the difference between two instants, as measured in the units"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,269,* of this field. Any fractional units are dropped from the result. Calling
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,270,* getDifference reverses the effect of calling add. In the following code:
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,272,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,273,* long instant = ...
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,274,* long v = ...
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,275,"* long age = getDifferenceAsLong(add(instant, v), instant);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,276,* </pre>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,278,* The value 'age' is the same as the value 'v'.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,280,* @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,281,* subtract from
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,282,* @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,283,* subtract off the minuend
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,284,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,286,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,287,"return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,291,* Sets a value in the milliseconds supplied.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,292,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,293,"* The value of this field will be set. If the value is invalid, an"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,294,* exception if thrown. Other fields are always unaffected.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,296,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,297,"* @param value  the value to set, in the units of the field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,298,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,299,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,301,"public abstract long set(long instant, int value);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,304,"* Sets a value in the milliseconds supplied from a human-readable, text"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,305,"* value. If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,306,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,307,"* The default implementation returns set(instant,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,308,* Integer.parseInt(instant)).
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,309,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,310,* Note: subclasses that override this method should also override
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,311,* getAsText.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,313,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,314,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,315,"* @param locale the locale to use for selecting a text symbol, null for"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,316,* default
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,317,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,318,* @throws IllegalArgumentException if the text value is invalid
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,320,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,321,try {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,322,"return set(instant, Integer.parseInt(text));"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,323,} catch (NumberFormatException ex) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,324,"throw new IllegalArgumentException(""Invalid "" + getName() + "" text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,329,"* Sets a value in the milliseconds supplied from a human-readable, text"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,330,"* value. This implementation returns set(instant, text, null)."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,332,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,333,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,334,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,335,* @throws IllegalArgumentException if the text value is invalid
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,337,"public final long set(long instant, String text) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,338,"return set(instant, text, null);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,341,// Extra information API
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,344,"* Returns the duration per unit value of this field. For example, if this"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,345,"* field represents ""hour of day"", then the unit duration is an hour."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,347,"* @return the duration of this field, or UnsupportedDurationField if field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,348,* has no duration
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,350,public abstract DurationField getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,353,"* Returns the range duration of this field. For example, if this field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,354,"* represents ""hour of day"", then the range duration is a day."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,356,"* @return the range duration of this field, or null if field has no range"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,358,public abstract DurationField getRangeDurationField();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,361,* Returns whether this field is 'leap' for the specified instant.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,362,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,363,"* For example, a leap year would return true, a non leap year would return"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,364,* false.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,365,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,366,* This implementation returns false.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,368,* @return true if the field is 'leap'
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,370,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,371,return false;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,375,* Gets the amount by which this field is 'leap' for the specified instant.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,376,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,377,"* For example, a leap year would return one, a non leap year would return"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,378,* zero.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,379,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,380,* This implementation returns zero.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,382,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,383,return 0;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,387,"* If this field were to leap, then it would be in units described by the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,388,"* returned duration. If this field doesn't ever leap, null is returned."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,389,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,390,* This implementation returns null.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,392,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,393,return null;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,397,* Get the minimum allowable value for this field.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,399,"* @return the minimum valid value for this field, in the units of the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,400,* field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,402,public abstract int getMinimumValue();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,405,* Get the minimum value for this field evaluated at the specified time.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,406,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,407,* This implementation returns the same as {@link #getMinimumValue()}.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,409,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,410,"* @return the minimum value for this field, in the units of the field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,412,public int getMinimumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,413,return getMinimumValue();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,417,* Get the maximum allowable value for this field.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,419,"* @return the maximum valid value for this field, in the units of the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,420,* field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,422,public abstract int getMaximumValue();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,425,* Get the maximum value for this field evaluated at the specified time.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,426,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,427,* This implementation returns the same as {@link #getMaximumValue()}.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,429,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,430,"* @return the maximum value for this field, in the units of the field"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,432,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,433,return getMaximumValue();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,437,* Get the maximum text value for this field. The default implementation
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,438,* returns the equivalent of Integer.toString(getMaximumValue()).length().
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,440,* @param locale  the locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,441,* @return the maximum text length
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,443,public int getMaximumTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,444,int max = getMaximumValue();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,445,if (max >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,446,if (max < 10) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,447,return 1;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,448,} else if (max < 100) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,449,return 2;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,450,} else if (max < 1000) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,451,return 3;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,454,return Integer.toString(max).length();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,458,* Get the maximum short text value for this field. The default
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,459,* implementation returns getMaximumTextLength().
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,461,* @param locale  the locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,462,* @return the maximum short text length
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,464,public int getMaximumShortTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,465,return getMaximumTextLength(locale);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,468,// Calculation API
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,471,"* Round to the lowest whole unit of this field. After rounding, the value"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,472,* of this field and all fields of a higher magnitude are retained. The
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,473,* fractional millis that cannot be expressed in whole increments of this
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,474,* field are set to minimum.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,475,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,476,"* For example, a datetime of 2002-11-02T23:34:56.789, rounded to the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,477,* lowest whole hour is 2002-11-02T23:00:00.000.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,479,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,480,* @return rounded milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,482,public abstract long roundFloor(long instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,485,* Round to the highest whole unit of this field. The value of this field
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,486,* and all fields of a higher magnitude may be incremented in order to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,487,* achieve this result. The fractional millis that cannot be expressed in
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,488,* whole increments of this field are set to minimum.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,489,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,490,"* For example, a datetime of 2002-11-02T23:34:56.789, rounded to the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,491,* highest whole hour is 2002-11-03T00:00:00.000.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,492,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,493,"* The default implementation calls roundFloor, and if the instant is"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,494,"* modified as a result, adds one field unit. Subclasses are encouraged to"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,495,* provide a more efficient implementation.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,497,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,498,* @return rounded milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,500,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,501,long newInstant = roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,502,if (newInstant != instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,503,"instant = add(newInstant, 1);"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,505,return instant;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,509,* Round to the nearest whole unit of this field. If the given millisecond
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,510,"* value is closer to the floor or is exactly halfway, this function"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,511,* behaves like roundFloor. If the millisecond value is closer to the
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,512,"* ceiling, this function behaves like roundCeiling."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,514,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,515,* @return rounded milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,517,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,518,long floor = roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,519,long ceiling = roundCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,521,long diffFromFloor = instant - floor;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,522,long diffToCeiling = ceiling - instant;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,524,if (diffFromFloor <= diffToCeiling) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,525,"// Closer to the floor, or halfway - round floor"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,526,return floor;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,527,} else {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,528,return ceiling;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,533,* Round to the nearest whole unit of this field. If the given millisecond
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,534,"* value is closer to the floor, this function behaves like roundFloor. If"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,535,"* the millisecond value is closer to the ceiling or is exactly halfway,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,536,* this function behaves like roundCeiling.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,538,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,539,* @return rounded milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,541,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,542,long floor = roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,543,long ceiling = roundCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,545,long diffFromFloor = instant - floor;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,546,long diffToCeiling = ceiling - instant;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,548,if (diffToCeiling <= diffFromFloor) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,549,"// Closer to the ceiling, or halfway - round ceiling"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,550,return ceiling;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,551,} else {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,552,return floor;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,557,* Round to the nearest whole unit of this field. If the given millisecond
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,558,"* value is closer to the floor, this function behaves like roundFloor. If"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,559,"* the millisecond value is closer to the ceiling, this function behaves"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,560,* like roundCeiling.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,561,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,562,* If the millisecond value is exactly halfway between the floor and
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,563,"* ceiling, the ceiling is chosen over the floor only if it makes this"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,564,* field's value even.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,566,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,567,* @return rounded milliseconds
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,569,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,570,long floor = roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,571,long ceiling = roundCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,573,long diffFromFloor = instant - floor;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,574,long diffToCeiling = ceiling - instant;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,576,if (diffFromFloor < diffToCeiling) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,577,// Closer to the floor - round floor
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,578,return floor;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,579,} else if (diffToCeiling < diffFromFloor) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,580,// Closer to the ceiling - round ceiling
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,581,return ceiling;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,582,} else {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,583,// Round to the instant that makes this field even. If both values
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,584,"// make this field even (unlikely), favor the ceiling."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,585,if ((get(ceiling) & 1) == 0) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,586,return ceiling;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,588,return floor;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,593,* Returns the fractional duration milliseconds of this field. In other
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,594,"* words, calling remainder returns the duration that roundFloor would"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,595,* subtract.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,596,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,597,"* For example, on a datetime of 2002-11-02T23:34:56.789, the remainder by"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,598,* hour is 34 minutes and 56.789 seconds.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,599,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,600,* The default implementation computes
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,601,* <code>instant - roundFloor(instant)</code>. Subclasses are encouraged to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,602,* provide a more efficient implementation.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,604,* @param instant the milliseconds from 1970-01-01T00:00:00Z to get the
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,605,* remainder
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,606,"* @return remainder duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,608,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,609,return instant - roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,613,* Get a suitable debug string.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,615,* @return debug string
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,617,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDateTimeField.java,618,"return ""DateTimeField["" + getName() + ']';"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,60,* AbstractDurationField provides the common behaviour for DurationField
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,61,* implementations.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,62,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,63,* This class should generally not be used directly by API users. The
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,64,* DurationField interface should be used when different kinds of DurationField
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,65,* objects are to be referenced.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,66,* <p>
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,67,"* AbstractDurationField is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,68,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,70,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,71,* @see DecoratedDurationField
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,73,"public abstract class AbstractDurationField implements DurationField, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,75,static final long serialVersionUID = -2554245107589433218L;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,77,/** A desriptive name for the field */
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,78,private final String iName;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,80,protected AbstractDurationField(String name) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,81,super();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,82,if (name == null) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,83,"throw new IllegalArgumentException(""The name must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,85,iName = name;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,88,public final String getName() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,89,return iName;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,93,* @return true always
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,95,public final boolean isSupported() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,96,return true;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,101,"* Get the value of this field from the milliseconds, which is approximate"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,102,* if this field is imprecise.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,104,"* @param duration  the milliseconds to query, which may be negative"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,105,"* @return the value of the field, in the units of the field, which may be"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,106,* negative
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,108,public int getValue(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,109,return Utils.safeToInt(getValueAsLong(duration));
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,113,"* Get the value of this field from the milliseconds, which is approximate"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,114,* if this field is imprecise.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,116,"* @param duration  the milliseconds to query, which may be negative"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,117,"* @return the value of the field, in the units of the field, which may be"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,118,* negative
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,120,public long getValueAsLong(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,121,return duration / getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,125,* Get the value of this field from the milliseconds relative to an
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,126,* instant.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,128,"* <p>If the milliseconds is positive, then the instant is treated as a"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,129,"* ""start instant"". If negative, the instant is treated as an ""end"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,130,"* instant""."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,132,* <p>The default implementation returns
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,133,"* <code>Utils.safeToInt(getAsLong(millisDuration, instant))</code>."
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,135,"* @param duration  the milliseconds to query, which may be negative"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,136,* @param instant  the start instant to calculate relative to
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,137,"* @return the value of the field, in the units of the field, which may be"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,138,* negative
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,140,"public int getValue(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,141,"return Utils.safeToInt(getValueAsLong(duration, instant));"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,145,"* Get the millisecond duration of this field from its value, which is"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,146,* approximate if this field is imprecise.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,148,"* @param value  the value of the field, which may be negative"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,149,"* @return the milliseconds that the field represents, which may be"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,150,* negative
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,152,public long getMillis(int value) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,153,return value * getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,157,"* Get the millisecond duration of this field from its value, which is"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,158,* approximate if this field is imprecise.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,160,"* @param value  the value of the field, which may be negative"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,161,"* @return the milliseconds that the field represents, which may be"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,162,* negative
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,164,public long getMillis(long value) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,165,return value * getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,168,// Calculation API
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,170,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,171,"return Utils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,175,public int compareTo(Object durationField) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,176,DurationField otherField = (DurationField) durationField;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,177,long otherMillis = otherField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,178,long thisMillis = getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,179,// cannot do (thisMillis - otherMillis) as can overflow
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,180,if (thisMillis == otherMillis) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,181,return 0;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,183,if (thisMillis < otherMillis) {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,184,return -1;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,185,} else {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,186,return 1;
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,191,* Get a suitable debug string.
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,193,* @return debug string
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,195,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,JodaTime/src/java/org/joda/time/chrono/AbstractDurationField.java,196,"return ""DurationField["" + getName() + ']';"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,57,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,60,"* <code>DecoratedChronology</code> extends {@link Chronology}, implementing"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,61,* only the minimum required set of methods. These implemented methods delegate
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,62,"* to a wrapped field. The withUTC, withDateTimeZone, and toString methods are"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,63,"* exceptions, and are left abstract."
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,64,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,65,* This design allows new Chronology types to be defined that piggyback on top
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,66,"* of another, inheriting all the safe method implementations from"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,67,"* Chronology. Should any method require pure delegation to the wrapped field,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,68,* simply override and use the provided getWrappedChronology method.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,69,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,70,"* DecoratedChronology is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,71,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,73,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,74,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,75,* @see DelegatedChronology
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,77,public abstract class DecoratedChronology extends Chronology {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,79,static final long serialVersionUID = 7094038875466049631L;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,81,/** The Chronology being wrapped */
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,82,private final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,85,* Create a DecoratedChronology for any chronology.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,87,* @param chrono the chronology
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,88,* @throws IllegalArgumentException if chronology is null
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,90,protected DecoratedChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,91,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,92,"throw new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,94,iChronology = chrono;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,98,* Gets the wrapped chronology.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,100,* @return the wrapped Chronology
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,102,protected Chronology getWrappedChronology() {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,103,return iChronology;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,107,* Get the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,109,* @return Chronology in UTC
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,111,public abstract Chronology withUTC();
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,114,* Get the Chronology in the any time zone.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,116,* @return Chronology in ant time zone
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,118,public abstract Chronology withDateTimeZone(DateTimeZone zone);
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,121,* Gets the time zone that this chronology is using.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,123,* @return the DateTimeZone
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,125,public DateTimeZone getDateTimeZone() {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,JodaTime/src/java/org/joda/time/chrono/DecoratedChronology.java,126,return iChronology.getDateTimeZone();
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,56,mport java.util.Locale;
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,60, <code>DelegateDateTimeField</code> delegates each method call to the
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,61, date time field it wraps.
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,60,"* <code>DecoratedDateTimeField</code> extends {@link AbstractDateTimeField},"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,61,* implementing only the minimum required set of methods. These implemented
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,62,* methods delegate to a wrapped field.
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,63,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,64,* This design allows new DateTimeField types to be defined that piggyback on
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,65,"* top of another, inheriting all the safe method implementations from"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,66,* AbstractDateTimeField. Should any method require pure delegation to the
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,67,"* wrapped field, simply override and use the provided getWrappedField method."
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,68,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,69,"* DecoratedDateTimeField is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,70,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,74,* @see DelegatedDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,66,ublic abstract class DelegateDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,76,public class DecoratedDateTimeField extends AbstractDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,68,rivate static DateTimeField getField(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,69,f (field == null) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,70,"hrow new IllegalArgumentException(""The field must not be null"");"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,72,eturn field;
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,78,static final long serialVersionUID = 203115783733757597L;
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,78,rotected DelegateDateTimeField(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,79,uper(getField(field).getName());
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,80,Field = field;
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,83,"rotected DelegateDateTimeField(String name, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,84,* @param name allow name to be overridden
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,86,"public DecoratedDateTimeField(DateTimeField field, String name) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,85,Field = getField(field);
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,88,if (field == null) {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,89,"throw new IllegalArgumentException(""The field must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,91,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,92,"throw new IllegalArgumentException(""The field must be supported"");"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,94,iField = field;
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,93,rotected DateTimeField getDateTimeField() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,102,public final DateTimeField getWrappedField() {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,97,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,98,eturn iField.get(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,101,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,102,"eturn iField.getAsText(millis, locale);"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,105,"ublic String getAsShortText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,106,"eturn iField.getAsShortText(millis, locale);"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,109,"ublic long add(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,110,"eturn iField.add(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,113,"ublic long add(long millis, long value) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,114,"eturn iField.add(millis, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,106,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,107,return iField.isLenient();
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,117,"ublic long addWrapped(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,118,"eturn iField.addWrapped(millis, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,110,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,111,return iField.get(instant);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,121,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,122,"eturn iField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,114,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,115,"return iField.set(instant, value);"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,125,"ublic long set(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,126,"eturn iField.set(millis, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,118,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,119,return iField.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,129,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,130,"eturn iField.set(millis, text, locale);"
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,133,ublic boolean isLeap(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,134,eturn iField.isLeap(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,137,ublic int getLeapAmount(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,138,eturn iField.getLeapAmount(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,141,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,142,eturn iField.getUnitMillis();
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,145,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,146,eturn iField.getRangeMillis();
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,122,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,123,return iField.getRangeDurationField();
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,153,ublic int getMinimumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,154,eturn iField.getMinimumValue(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,161,ublic int getMaximumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,162,eturn iField.getMaximumValue(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,165,ublic int getMaximumTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,166,eturn iField.getMaximumTextLength(locale);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,169,ublic int getMaximumShortTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,170,eturn iField.getMaximumShortTextLength(locale);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,173,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,174,eturn iField.roundFloor(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,177,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,178,eturn iField.roundCeiling(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,181,ublic long roundHalfFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,182,eturn iField.roundHalfFloor(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,185,ublic long roundHalfCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,186,eturn iField.roundHalfCeiling(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,189,ublic long roundHalfEven(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,190,eturn iField.roundHalfEven(millis);
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,134,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,135,return iField.roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,193,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,194,eturn iField.remainder(millis);
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,197,ublic String toString() {
False,JodaTime/src/java/org/joda/time/chrono/DelegateDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDateTimeField.java,198,eturn iField.toString();
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,55,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,60,"* <code>DecoratedDurationField</code> extends {@link AbstractDurationField},"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,61,* implementing only the minimum required set of methods. These implemented
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,62,* methods delegate to a wrapped field.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,63,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,64,* This design allows new DurationField types to be defined that piggyback on
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,65,"* top of another, inheriting all the safe method implementations from"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,66,* AbstractDurationField. Should any method require pure delegation to the
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,67,"* wrapped field, simply override and use the provided getWrappedField method."
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,68,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,69,"* DecoratedDurationField is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,70,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,72,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,73,* @see DelegatedDurationField
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,75,public class DecoratedDurationField extends AbstractDurationField {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,77,static final long serialVersionUID = 8019982251647420015L;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,79,/** The DurationField being wrapped */
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,80,private final DurationField iField;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,83,* @param name allow name to be overridden
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,85,"public DecoratedDurationField(DurationField field, String name) {"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,86,super(name);
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,87,if (field == null) {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,88,"throw new IllegalArgumentException(""The field must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,90,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,91,"throw new IllegalArgumentException(""The field must be supported"");"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,93,iField = field;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,97,* Gets the wrapped duration field.
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,99,* @return the wrapped DurationField
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,101,public final DurationField getWrappedField() {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,102,return iField;
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,105,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,106,return iField.isPrecise();
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,109,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,110,"return iField.getValueAsLong(duration, instant);"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,113,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,114,"return iField.getMillis(value, instant);"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,117,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,118,"return iField.getMillis(value, instant);"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,121,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,122,"return iField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,125,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,126,"return iField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,129,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,130,"return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,133,public long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DecoratedDurationField.java,134,return iField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,59,import org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,61, <code>DelegateChronology</code> delegates each method call to the
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,62,* <code>DelegatedChronology</code> delegates each method call to the
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,64,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,65,"* DelegatedChronology is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,66,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,69,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,71,* @see DecoratedChronology
False,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,67,ublic abstract class DelegateChronology extends Chronology {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,73,public abstract class DelegatedChronology extends Chronology {
False,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,69,** The Chonology being wrapped */
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,75,static final long serialVersionUID = 216867504527676612L;
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,77,/** The Chronology being wrapped */
False,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,73, Create a DelegateChronology for any chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,81,* Create a DelegatedChronology for any chronology.
False,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,78,rotected DelegateChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,86,protected DelegatedChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,90,rotected Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,98,protected Chronology getWrappedChronology() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,125,public long getDateOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,126,return iChronology.getDateOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,129,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,130,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,132,"return iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,135,public long getTimeOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,136,return iChronology.getTimeOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,139,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,140,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,141,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,143,return iChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,144,"(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,147,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,148,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,149,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,150,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,152,return iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,153,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,156,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,157,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,158,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,160,"return iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,163,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,164,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,165,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,166,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,168,return iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,169,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,170,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,177,* Get the millis duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,179,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,181,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,182,return iChronology.millis();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,207,* Get the seconds duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,209,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,211,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,212,return iChronology.seconds();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,237,* Get the minutes duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,239,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,241,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,242,return iChronology.minutes();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,267,* Get the hours duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,269,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,271,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,272,return iChronology.hours();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,324,* Get the days duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,326,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,328,public DurationField days() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,329,return iChronology.days();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,363,* Get the weeks duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,365,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,367,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,368,return iChronology.weeks();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,381,* Get the weekyears duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,383,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,385,public DurationField weekyears() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,386,return iChronology.weekyears();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,402,* Get the months duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,404,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,406,public DurationField months() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,407,return iChronology.months();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,423,* Get the years duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,425,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,427,public DurationField years() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,428,return iChronology.years();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,459,* Get the centuries duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,461,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,463,public DurationField centuries() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,464,return iChronology.centuries();
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,477,* Get the eras duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,479,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,481,public DurationField eras() {
True,JodaTime/src/java/org/joda/time/chrono/DelegateChronology.java,JodaTime/src/java/org/joda/time/chrono/DelegatedChronology.java,482,return iChronology.eras();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,57,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,58,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,62,* <code>DelegatedDateTimeField</code> delegates each method call to the
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,63,* date time field it wraps.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,64,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,65,"* DelegatedDateTimeField is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,66,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,68,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,69,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,70,* @see DecoratedDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,72,"public class DelegatedDateTimeField implements DateTimeField, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,74,static final long serialVersionUID = -4730164440214502503L;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,76,/** The DateTimeField being wrapped */
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,77,private final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,78,/** A desriptive name for the field */
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,79,private final String iName;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,81,protected DelegatedDateTimeField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,82,"this(field, null);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,85,"protected DelegatedDateTimeField(DateTimeField field, String name) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,86,super();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,87,if (field == null) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,88,"throw new IllegalArgumentException(""The field must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,90,iField = field;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,91,iName = name;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,95,* Gets the wrapped date time field.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,97,* @return the wrapped DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,99,public final DateTimeField getWrappedField() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,100,return iField;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,103,public String getName() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,104,return (iName == null) ? iField.getName() : iName;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,107,public boolean isSupported() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,108,return iField.isSupported();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,111,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,112,return iField.isLenient();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,115,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,116,return iField.get(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,119,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,120,"return iField.getAsText(instant, locale);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,123,public String getAsText(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,124,return iField.getAsText(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,127,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,128,"return iField.getAsShortText(instant, locale);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,131,public String getAsShortText(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,132,return iField.getAsShortText(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,135,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,136,"return iField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,139,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,140,"return iField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,143,"public long addWrapped(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,144,"return iField.addWrapped(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,147,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,148,"return iField.getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,151,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,152,"return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,155,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,156,"return iField.set(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,159,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,160,"return iField.set(instant, text, locale);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,163,"public long set(long instant, String text) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,164,"return iField.set(instant, text);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,167,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,168,return iField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,171,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,172,return iField.getRangeDurationField();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,175,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,176,return iField.isLeap(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,179,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,180,return iField.getLeapAmount(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,183,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,184,return iField.getLeapDurationField();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,187,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,188,return iField.getMinimumValue();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,191,public int getMinimumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,192,return iField.getMinimumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,195,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,196,return iField.getMaximumValue();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,199,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,200,return iField.getMaximumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,203,public int getMaximumTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,204,return iField.getMaximumTextLength(locale);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,207,public int getMaximumShortTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,208,return iField.getMaximumShortTextLength(locale);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,211,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,212,return iField.roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,215,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,216,return iField.roundCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,219,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,220,return iField.roundHalfFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,223,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,224,return iField.roundHalfCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,227,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,228,return iField.roundHalfEven(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,231,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,232,return iField.remainder(instant);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,235,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,236,return (iName == null) ? iField.toString() :
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDateTimeField.java,237,"(""DateTimeField["" + iName + ']');"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,55,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,57,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,58,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,61,* <code>DelegatedDurationField</code> delegates each method call to the
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,62,* duration field it wraps.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,63,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,64,"* DelegatedDurationField is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,65,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,67,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,68,* @see DecoratedDurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,70,"public class DelegatedDurationField implements DurationField, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,72,static final long serialVersionUID = -5576443481242007829L;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,74,/** The DurationField being wrapped */
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,75,private final DurationField iField;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,76,/** A desriptive name for the field */
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,77,private final String iName;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,79,protected DelegatedDurationField(DurationField field) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,80,"this(field, null);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,84,* @param name allow name to be overridden
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,86,"protected DelegatedDurationField(DurationField field, String name) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,87,if (field == null) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,88,"throw new IllegalArgumentException(""The field must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,90,iField = field;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,91,iName = name;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,95,* Gets the wrapped duration field.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,97,* @return the wrapped DurationField
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,99,public final DurationField getWrappedField() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,100,return iField;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,103,public String getName() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,104,return (iName == null) ? iField.getName() : iName;
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,108,* Returns true if this field is supported.
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,110,public boolean isSupported() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,111,return iField.isSupported();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,114,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,115,return iField.isPrecise();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,118,public int getValue(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,119,return iField.getValue(duration);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,122,public long getValueAsLong(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,123,return iField.getValueAsLong(duration);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,126,"public int getValue(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,127,"return iField.getValue(duration, instant);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,130,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,131,"return iField.getValueAsLong(duration, instant);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,134,public long getMillis(int value) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,135,return iField.getMillis(value);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,138,public long getMillis(long value) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,139,return iField.getMillis(value);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,142,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,143,"return iField.getMillis(value, instant);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,146,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,147,"return iField.getMillis(value, instant);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,150,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,151,"return iField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,154,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,155,"return iField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,158,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,159,"return iField.getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,162,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,163,"return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,166,public long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,167,return iField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,170,public int compareTo(Object durationField) {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,171,return iField.compareTo(durationField);
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,174,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,175,return (iName == null) ? iField.toString() :
True,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/chrono/DelegatedDurationField.java,176,"(""DurationField["" + iName + ']');"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,59, Generic division datetime field.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,60,* Divides a DateTimeField such that the retrieved values are reduced by a
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,61,"* fixed divisor. The field's unit duration is scaled accordingly, but the"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,62,* range duration is unchanged.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,63,* <p>
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,64,* DividedDateTimeField is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,67,ublic class DividedDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,72,public class DividedDateTimeField extends DecoratedDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,69,** The field to divide */
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,70,rivate final DateTimeField iField;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,71,** The amount to divide by in the correct units */
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,72,rivate final int iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,74,static final long serialVersionUID = 8318475124230605365L;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,76,// Shared with RemainderDateTimeField.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,77,final int iDivisor;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,78,final DurationField iDurationField;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,78, Constructor
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,84,* Constructor.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,80," @param name  short, descriptive name, like ""century""."
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,82," @param unitDivisor  divisor in units, such as 100 years in a century"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,83, @throws IllegalArgumentException if unit is less than two
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,87,"* @param name  short, descriptive name, like ""century""."
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,88,"* @param durationName  short, descriptive name, like ""centuries""."
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,89,"* @param divisor  divisor, such as 100 years in a century"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,90,* @throws IllegalArgumentException if divisor is less than two
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,85,"ublic DividedDateTimeField(String name, DateTimeField field, int unitDivisor) {"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,86,uper(name);
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,92,"public DividedDateTimeField(DateTimeField field,"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,93,"String name, String durationName, int divisor) {"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,94,"super(field, name);"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,88,f (field == null) {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,89,"hrow new IllegalArgumentException(""The field must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,96,if (divisor < 2) {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,97,"throw new IllegalArgumentException(""The divisor must be at least 2"");"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,91,f (unitDivisor < 2) {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,92,"hrow new IllegalArgumentException(""The unit divisor must be at least 2"");"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,100,DurationField unitField = field.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,101,if (unitField == null) {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,102,iDurationField = null;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,103,} else {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,104,"iDurationField = new ScaledDurationField(unitField, durationName, divisor);"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,94,Field = field;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,95,UnitDivisor = unitDivisor;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,97,nt i = iField.getMinimumValue();
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,98,nt min = (i >= 0) ? i / unitDivisor : ((i + 1) / unitDivisor - 1);
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,107,iDivisor = divisor;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,109,int i = field.getMinimumValue();
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,110,int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,112,int j = field.getMaximumValue();
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,113,int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,115,iMin = min;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,116,iMax = max;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,120,* Construct a DividedDateTimeField that compliments the given
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,121,* RemainderDateTimeField.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,123,"* @param remainderField  complimentary remainder field, like ""yearOfCentury()""."
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,124,"* @param name  short, descriptive name, like ""century""."
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,126,"public DividedDateTimeField(RemainderDateTimeField remainderField, String name) {"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,127,"super(remainderField.getWrappedField(), name);"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,128,int divisor = iDivisor = remainderField.iDivisor;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,129,iDurationField = remainderField.iRangeField;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,131,DateTimeField field = getWrappedField();
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,132,int i = field.getMinimumValue();
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,133,int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,100,nt j = iField.getMaximumValue();
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,101,nt max = (j >= 0) ? j / unitDivisor : ((j + 1) / unitDivisor - 1);
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,135,int j = field.getMaximumValue();
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,136,int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,108, Get the amount of divided units from the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,143,* Get the amount of scaled units from the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,110, @param millis  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,111, @return the amount of divided units extracted from the input.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,145,* @param instant  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,146,* @return the amount of scaled units extracted from the input.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,113,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,114,nt value = iField.get(millis);
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,148,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,149,int value = getWrappedField().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,116,eturn value / iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,151,return value / iDivisor;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,118,eturn ((value + 1) / iUnitDivisor) - 1;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,153,return ((value + 1) / iDivisor) - 1;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,123, Add the specified amount of divided units to the specified time
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,158,* Add the specified amount of scaled units to the specified time
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,126, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,127, @param amount  the amount of divided units to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,161,* @param instant  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,162,* @param amount  the amount of scaled units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,130,"ublic long add(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,131,"eturn iField.add(millis, amount * iUnitDivisor);"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,165,"public long add(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,166,"return getWrappedField().add(instant, amount * iDivisor);"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,135, Add the specified amount of divided units to the specified time
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,170,* Add the specified amount of scaled units to the specified time
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,138, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,139, @param amount  the amount of divided units to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,173,* @param instant  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,174,* @param amount  the amount of scaled units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,142,"ublic long add(long millis, long amount) {"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,143,"eturn iField.add(millis, amount * iUnitDivisor);"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,177,"public long add(long instant, long amount) {"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,178,"return getWrappedField().add(instant, amount * iDivisor);"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,147," Add to the divided component of the specified time instant,"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,182,"* Add to the scaled component of the specified time instant,"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,150, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,151, @param amount  the amount of divided units to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,185,* @param instant  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,186,* @param amount  the amount of scaled units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,154,"ublic long addWrapped(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,155,"eturn set(millis, getWrappedValue(get(millis), amount, iMin, iMax));"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,189,"public long addWrapped(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,190,"return set(instant, Utils.getWrappedValue(get(instant), amount, iMin, iMax));"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,158,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,159,"eturn iField.getDifference(minuendMillis, subtrahendMillis) / iUnitDivisor;"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,193,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,194,"return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,197,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,198,"return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,163, Set the specified amount of divided units to the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,202,* Set the specified amount of scaled units to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,165, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,166, @param value  value of divided units to set.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,204,* @param instant  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,205,* @param value  value of scaled units to set.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,170,"ublic long set(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,171,"erifyValueBounds(value, iMin, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,172,nt remainder = getRemainder(iField.get(millis));
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,173,"eturn iField.set(millis, value * iUnitDivisor + remainder);"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,209,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,210,"Utils.verifyValueBounds(this, value, iMin, iMax);"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,211,int remainder = getRemainder(getWrappedField().get(instant));
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,212,"return getWrappedField().set(instant, value * iDivisor + remainder);"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,177, Returns the wrapped field's unit size multiplied by the unit divisor.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,216,* Returns a scaled version of the wrapped field's unit duration field.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,179,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,180,eturn iField.getUnitMillis() * iUnitDivisor;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,184, Returns the wrapped field's range.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,186,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,187,eturn iField.getRangeMillis();
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,218,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,219,return iDurationField;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,208,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,209,"eturn iField.roundFloor(iField.set(millis, get(millis) * iUnitDivisor));"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,212,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,213,"eturn set(millis, get(iField.remainder(millis)));"
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,240,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,241,DateTimeField field = getWrappedField();
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,242,"return field.roundFloor(field.set(instant, get(instant) * iDivisor));"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,217, Returns the DateTimeField being wrapped.
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,219, @return field
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,221,ublic DateTimeField getField() {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,222,eturn iField;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,245,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,246,"return set(instant, get(getWrappedField().remainder(instant)));"
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,226, Returns the divisor to apply to the field in the field's units.
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,250,"* Returns the divisor applied, in the field's units."
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,230,ublic int getUnitDivisor() {
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,231,eturn iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,254,public int getDivisor() {
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,255,return iDivisor;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,236,eturn value % iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,260,return value % iDivisor;
False,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,238,eturn (iUnitDivisor - 1) + ((value + 1) % iUnitDivisor);
True,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/DividedDateTimeField.java,262,return (iDivisor - 1) + ((value + 1) % iDivisor);
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,5, Copyright (c) 2001-03 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,54,ackage org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,56,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,59, Generic fractional datetime field.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,60, <p>
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,61, This DateTimeField is useful for extracting a fractional part from the
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,62, milliseconds. This is very useful for time values.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,64, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,65, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,66, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,68,ublic class FractionalDateTimeField extends DateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,70,** The fractional unit in millis */
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,71,rivate final long iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,72,** The maximum range in the correct units */
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,73,rivate final int iRange;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,76, Constructor.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,78," @param name  short, descriptive name, like ""secondOfMinute""."
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,79," @param unitMillis  milliseconds per unit, such as 1000 for one second"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,80," @param range  range in units, such as 60 seconds per minute"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,81," @throws IllegalArgumentException if fractional unit is less than one, or if range is"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,82,  less than two.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,84,"ublic FractionalDateTimeField(String name, long unitMillis, int range) {"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,85,uper(name);
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,87,f (unitMillis < 1) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,88,"hrow new IllegalArgumentException(""The unit milliseconds must be at least 1"");"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,90,f (range < 2) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,91,"hrow new IllegalArgumentException(""The range must be at least 2"");"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,93,UnitMillis = unitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,94,Range = range;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,98, Get the amount of fractional units from the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,100, @param millis  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,101, @return the amount of fractional units extracted from the input.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,103,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,104,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,105,eturn (int) ((millis / iUnitMillis) % iRange);
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,106, else {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,107,eturn iRange - 1 + (int) (((millis + 1) / iUnitMillis) % iRange);
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,112, Add the specified amount of fractional units to the specified time
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,113, instant. The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,115, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,116, @param amount  the amount of fractional units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,117, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,119,"ublic long add(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,120,eturn millis + amount * iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,124, Add the specified amount of fractional units to the specified time
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,125, instant. The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,127, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,128, @param amount  the amount of fractional units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,129, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,131,"ublic long add(long millis, long amount) {"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,132,eturn millis + amount * iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,136," Add to the fractional component of the specified time instant,"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,137, wrapping around within that component if necessary.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,139, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,140, @param amount  the amount of fractional units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,141, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,143,"ublic long addWrapped(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,144,nt thisValue = get(millis);
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,145,"nt wrappedValue = getWrappedValue(thisValue, amount, getMinimumValue(), getMaximumValue());"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,146,/ copy code from set() to avoid repeat call to get()
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,147,eturn millis + (wrappedValue - thisValue) * iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,150,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,151,eturn (minuendMillis - subtrahendMillis) / iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,155, Set the specified amount of fractional units to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,157, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,158, @param value  value of fractional units to set.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,159, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,160, @throws IllegalArgumentException if value is too large or too small.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,162,"ublic long set(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,163,"erifyValueBounds(value, getMinimumValue(), getMaximumValue());"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,164,eturn millis + (value - get(millis)) * iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,168, Returns the milliseconds representing one unit of the field.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,169, <p>
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,170," For example, 1000 for one second."
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,172, @return unit millis
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,174,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,175,eturn iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,178,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,179,eturn iRange * iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,183, Get the minimum value for the field.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,185, @return the minimum value
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,187,ublic int getMinimumValue() {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,188,eturn 0;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,192, Get the maximum value for the field.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,194, @return the maximum value
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,196,ublic int getMaximumValue() {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,197,eturn iRange - 1;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,200,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,201,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,202,eturn millis - millis % iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,203, else {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,204,illis += 1;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,205,eturn millis - millis % iUnitMillis - iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,209,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,210,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,211,illis -= 1;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,212,eturn millis - millis % iUnitMillis + iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,213, else {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,214,eturn millis - millis % iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,218,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,219,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,220,eturn millis % iUnitMillis;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,221, else {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,222,eturn (millis + 1) % iUnitMillis + iUnitMillis - 1;
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,227, Returns the range of the field in the field's units.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,228, <p>
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,229," For example, 60 for seconds per minute. The field is allowed values"
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,230, from 0 to range - 1.
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,232, @return unit range
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,234,ublic int getRange() {
False,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/FractionalDateTimeField.java,235,eturn iRange;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,55,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,60,"* Abstract datetime field class that defines its own DurationField, which"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,61,* delegates back into this ImpreciseDateTimeField.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,62,* <p>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,63,* This DateTimeField is useful for defining DateTimeFields that are composed
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,64,"* of imprecise durations. If both duration fields are precise, then a"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,65,* {@link PreciseDateTimeField} should be used instead.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,66,* <p>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,67,* When defining imprecise DateTimeFields where a matching DurationField is
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,68,"* already available, just extend AbstractDateTimeField directly so as not to"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,69,* create redundant DurationField instances.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,70,* <p>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,71,"* ImpreciseDateTimeField is thread-safe and immutable, and its subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,72,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,74,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,75,* @see PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,77,public abstract class ImpreciseDateTimeField extends AbstractDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,79,static final long serialVersionUID = 7190739608550251860L;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,81,final long iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,82,private final DurationField iDurationField;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,85,* Constructor.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,87,"* @param name  short, descriptive name, like ""monthOfYear""."
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,88,"* @param durationName  short, descriptive name, like ""months""."
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,89,* @param unitMillis  the average duration unit milliseconds
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,91,"public ImpreciseDateTimeField(String name, String durationName, long unitMillis) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,92,super(name);
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,93,iUnitMillis = unitMillis;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,94,iDurationField = new LinkedDurationField(durationName);
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,97,public abstract int get(long instant);
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,99,"public abstract long set(long instant, int value);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,101,"public abstract long add(long instant, int value);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,103,"public abstract long add(long instant, long value);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,106,"* Computes the difference between two instants, as measured in the units"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,107,* of this field. Any fractional units are dropped from the result. Calling
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,108,* getDifference reverses the effect of calling add. In the following code:
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,110,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,111,* long instant = ...
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,112,* int v = ...
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,113,"* int age = getDifference(add(instant, v), instant);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,114,* </pre>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,116,* The value 'age' is the same as the value 'v'.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,117,* <p>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,118,* The default implementation call getDifferenceAsLong and converts the
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,119,* return value to an int.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,121,* @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,122,* subtract from
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,123,* @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,124,* subtract off the minuend
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,125,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,127,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,128,"return Utils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,132,"* Computes the difference between two instants, as measured in the units"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,133,* of this field. Any fractional units are dropped from the result. Calling
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,134,* getDifference reverses the effect of calling add. In the following code:
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,136,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,137,* long instant = ...
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,138,* long v = ...
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,139,"* long age = getDifferenceAsLong(add(instant, v), instant);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,140,* </pre>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,142,* The value 'age' is the same as the value 'v'.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,143,* <p>
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,144,* The default implementation performs a guess-and-check algorithm using
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,145,* getDurationField().getUnitMillis() and the add() method. Subclasses are
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,146,* encouraged to provide a more efficient implementation.
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,148,* @param minuendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,149,* subtract from
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,150,* @param subtrahendInstant the milliseconds from 1970-01-01T00:00:00Z to
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,151,* subtract off the minuend
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,152,* @return the difference in the units of this field
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,154,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,155,if (minuendInstant < subtrahendInstant) {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,156,"return -getDifferenceAsLong(subtrahendInstant, minuendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,159,long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,160,"if (add(subtrahendInstant, difference) < minuendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,161,do {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,162,difference++;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,163,"} while (add(subtrahendInstant, difference) <= minuendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,164,difference--;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,165,"} else if (add(subtrahendInstant, difference) > minuendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,166,do {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,167,difference--;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,168,"} while (add(subtrahendInstant, difference) > minuendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,170,return difference;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,173,public final DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,174,return iDurationField;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,177,public abstract DurationField getRangeDurationField();
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,179,public abstract long roundFloor(long instant);
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,181,protected final long getDurationUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,182,return iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,185,private final class LinkedDurationField extends AbstractDurationField {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,186,static final long serialVersionUID = -203813474600094134L;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,188,LinkedDurationField(String name) {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,189,super(name);
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,192,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,193,return false;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,196,public long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,197,return iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,200,"public int getValue(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,201,return ImpreciseDateTimeField.this
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,202,".getDifference(instant + duration, instant);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,205,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,206,return ImpreciseDateTimeField.this
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,207,".getDifferenceAsLong(instant + duration, instant);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,210,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,211,"return ImpreciseDateTimeField.this.add(instant, value) - instant;"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,214,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,215,"return ImpreciseDateTimeField.this.add(instant, value) - instant;"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,218,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,219,"return ImpreciseDateTimeField.this.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,222,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,223,"return ImpreciseDateTimeField.this.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,226,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,227,return ImpreciseDateTimeField.this
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,228,".getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,231,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,232,return ImpreciseDateTimeField.this
True,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ImpreciseDateTimeField.java,233,".getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,57,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,58,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,61,"* Wraps another chronology, ensuring all the fields are lenient."
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,62,* <p>
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,63,* LenientChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,65,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,66,* @see LenientDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,67,* @see StrictChronology
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,69,public class LenientChronology extends DelegatedChronology {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,71,static final long serialVersionUID = -3148237568046877177L;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,73,private transient DateTimeField iYearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,74,private transient DateTimeField iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,75,private transient DateTimeField iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,76,private transient DateTimeField iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,77,private transient DateTimeField iEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,78,private transient DateTimeField iDayOfWeekField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,79,private transient DateTimeField iDayOfMonthField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,80,private transient DateTimeField iDayOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,81,private transient DateTimeField iMonthOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,82,private transient DateTimeField iWeekOfWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,83,private transient DateTimeField iWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,85,private transient DateTimeField iMillisOfSecondField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,86,private transient DateTimeField iMillisOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,87,private transient DateTimeField iSecondOfMinuteField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,88,private transient DateTimeField iSecondOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,89,private transient DateTimeField iMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,90,private transient DateTimeField iMinuteOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,91,private transient DateTimeField iHourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,92,private transient DateTimeField iHourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,93,private transient DateTimeField iClockhourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,94,private transient DateTimeField iClockhourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,95,private transient DateTimeField iHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,97,private transient Chronology iWithUTC;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,100,* Create a LenientChronology for any chronology.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,102,* @param chrono the chronology
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,103,* @throws IllegalArgumentException if chronology is null
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,105,public LenientChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,106,super(chrono);
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,109,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,110,if (iWithUTC == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,111,iWithUTC = new LenientChronology(getWrappedChronology().withUTC());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,113,return iWithUTC;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,116,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,117,return new LenientChronology(getWrappedChronology().withDateTimeZone(zone));
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,121,* Overridden to ensure lenient fields are used.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,123,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,124,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,126,"return getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,130,* Overridden to ensure lenient fields are used.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,132,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,133,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,134,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,136,"long instant = hourOfDay().set(0, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,137,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,138,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,139,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,143,* Overridden to ensure lenient fields are used.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,145,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,146,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,147,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,149,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,150,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,151,"instant = dayOfMonth().set(instant, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,152,"return millisOfDay().set(instant, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,156,* Overridden to ensure lenient fields are used.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,158,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,159,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,160,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,161,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,163,"instant = hourOfDay().set(instant, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,164,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,165,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,166,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,170,* Overridden to ensure lenient fields are used.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,172,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,173,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,174,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,175,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,177,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,178,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,179,"instant = dayOfMonth().set(instant, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,180,"instant = hourOfDay().set(instant, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,181,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,182,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,183,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,186,// Milliseconds
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,189,public DateTimeField millisOfSecond() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,190,if (iMillisOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,191,iMillisOfSecondField = LenientDateTimeField.getInstance(super.millisOfSecond());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,193,return iMillisOfSecondField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,196,public DateTimeField millisOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,197,if (iMillisOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,198,iMillisOfDayField = LenientDateTimeField.getInstance(super.millisOfDay());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,200,return iMillisOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,203,// Seconds
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,206,public DateTimeField secondOfMinute() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,207,if (iSecondOfMinuteField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,208,iSecondOfMinuteField = LenientDateTimeField.getInstance(super.secondOfMinute());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,210,return iSecondOfMinuteField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,213,public DateTimeField secondOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,214,if (iSecondOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,215,iSecondOfDayField = LenientDateTimeField.getInstance(super.secondOfDay());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,217,return iSecondOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,220,// Minutes
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,223,public DateTimeField minuteOfHour() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,224,if (iMinuteOfHourField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,225,iMinuteOfHourField = LenientDateTimeField.getInstance(super.minuteOfHour());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,227,return iMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,230,public DateTimeField minuteOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,231,if (iMinuteOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,232,iMinuteOfDayField = LenientDateTimeField.getInstance(super.minuteOfDay());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,234,return iMinuteOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,237,// Hours
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,240,public DateTimeField hourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,241,if (iHourOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,242,iHourOfDayField = LenientDateTimeField.getInstance(super.hourOfDay());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,244,return iHourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,247,public DateTimeField clockhourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,248,if (iClockhourOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,249,iClockhourOfDayField = LenientDateTimeField.getInstance(super.clockhourOfDay());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,251,return iClockhourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,254,public DateTimeField hourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,255,if (iHourOfHalfdayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,256,iHourOfHalfdayField = LenientDateTimeField.getInstance(super.hourOfHalfday());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,258,return iHourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,261,public DateTimeField clockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,262,if (iClockhourOfHalfdayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,263,iClockhourOfHalfdayField =
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,264,LenientDateTimeField.getInstance(super.clockhourOfHalfday());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,266,return iClockhourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,269,public DateTimeField halfdayOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,270,if (iHalfdayOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,271,iHalfdayOfDayField = LenientDateTimeField.getInstance(super.halfdayOfDay());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,273,return iHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,276,// Day
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,279,public DateTimeField dayOfWeek() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,280,if (iDayOfWeekField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,281,iDayOfWeekField = LenientDateTimeField.getInstance(super.dayOfWeek());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,283,return iDayOfWeekField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,286,public DateTimeField dayOfMonth() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,287,if (iDayOfMonthField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,288,iDayOfMonthField = LenientDateTimeField.getInstance(super.dayOfMonth());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,290,return iDayOfMonthField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,293,public DateTimeField dayOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,294,if (iDayOfYearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,295,iDayOfYearField = LenientDateTimeField.getInstance(super.dayOfYear());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,297,return iDayOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,300,// Week
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,303,public DateTimeField weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,304,if (iWeekOfWeekyearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,305,iWeekOfWeekyearField = LenientDateTimeField.getInstance(super.weekOfWeekyear());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,307,return iWeekOfWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,310,public DateTimeField weekyear() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,311,if (iWeekyearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,312,iWeekyearField = LenientDateTimeField.getInstance(super.weekyear());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,314,return iWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,317,// Month
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,320,public DateTimeField monthOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,321,if (iMonthOfYearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,322,iMonthOfYearField = LenientDateTimeField.getInstance(super.monthOfYear());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,324,return iMonthOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,327,// Year
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,330,public DateTimeField year() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,331,if (iYearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,332,iYearField = LenientDateTimeField.getInstance(super.year());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,334,return iYearField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,337,public DateTimeField yearOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,338,if (iYearOfEraField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,339,iYearOfEraField = LenientDateTimeField.getInstance(super.yearOfEra());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,341,return iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,344,public DateTimeField yearOfCentury() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,345,if (iYearOfCenturyField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,346,iYearOfCenturyField = LenientDateTimeField.getInstance(super.yearOfCentury());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,348,return iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,351,public DateTimeField centuryOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,352,if (iCenturyOfEraField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,353,iCenturyOfEraField = LenientDateTimeField.getInstance(super.centuryOfEra());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,355,return iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,358,public DateTimeField era() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,359,if (iEraField == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,360,iEraField = LenientDateTimeField.getInstance(super.era());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,362,return iEraField;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,365,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,366,"return ""LenientChronology["" + getWrappedChronology().toString() + ']';"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,56,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,59,"* Converts a strict DateTimeField into a lenient one. By being lenient, the"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,60,"* set method accepts out of bounds values, performing an addition instead."
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,61,* <p>
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,62,* LenientDateTimeField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,64,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,65,* @see StrictDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,67,public class LenientDateTimeField extends DelegatedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,69,static final long serialVersionUID = 8714085824173290599L;
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,72,"* Returns a lenient version of the given field. If it is already lenient,"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,73,"* then it is returned as-is. Otherwise, a new LenientDateTimeField is"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,74,* returned.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,76,public static DateTimeField getInstance(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,77,if (field == null) {
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,78,return null;
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,80,if (field instanceof StrictDateTimeField) {
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,81,field = ((StrictDateTimeField)field).getWrappedField();
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,83,if (field.isLenient()) {
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,84,return field;
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,86,return new LenientDateTimeField(field);
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,89,protected LenientDateTimeField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,90,super(field);
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,93,public final boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,94,return true;
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,98,"* Set values which may be out of bounds. If the value is out of bounds,"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,99,"* the instant is first set to the minimum allowed value, and then the"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,100,* difference is added.
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,102,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,103,int min = getMinimumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,104,if (value >= min && value < getMaximumValue(instant)) {
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,105,"return super.set(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LenientDateTimeField.java,107,"return add(super.set(instant, min), value - min);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,57,import java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,58,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,60,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,61,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,63,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,64,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,65,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,66,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,67,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,68,import org.joda.time.MutableDateTime;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,69,import org.joda.time.ReadableDateTime;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,70,import org.joda.time.format.DateTimePrinter;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,71,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,74,* Imposes limits on the range of instants that the fields within a Chronology
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,75,* may support. The limits are applied to both DateTimeFields and
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,76,* DurationFields.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,77,* <p>
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,78,* Methods in DateTimeField and DurationField throw an IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,79,* whenever given an input instant that is outside the limits or when an
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,80,* attempt is made to move an instant outside the limits.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,81,* <p>
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,82,* LimitChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,84,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,85,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,86,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,88,public class LimitChronology extends Chronology {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,90,static final long serialVersionUID = 7670866536893052522L;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,92,private final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,94,final DateTime iLowerLimit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,95,final DateTime iUpperLimit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,97,private transient LimitChronology iWithUTC;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,99,private transient DurationField iErasField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,100,private transient DurationField iCenturiesField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,101,private transient DurationField iYearsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,102,private transient DurationField iMonthsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,103,private transient DurationField iWeekyearsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,104,private transient DurationField iWeeksField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,105,private transient DurationField iDaysField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,107,private transient DurationField iHoursField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,108,private transient DurationField iMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,109,private transient DurationField iSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,110,private transient DurationField iMillisField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,112,private transient DateTimeField iYearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,113,private transient DateTimeField iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,114,private transient DateTimeField iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,115,private transient DateTimeField iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,116,private transient DateTimeField iEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,117,private transient DateTimeField iDayOfWeekField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,118,private transient DateTimeField iDayOfMonthField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,119,private transient DateTimeField iDayOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,120,private transient DateTimeField iMonthOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,121,private transient DateTimeField iWeekOfWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,122,private transient DateTimeField iWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,124,private transient DateTimeField iMillisOfSecondField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,125,private transient DateTimeField iMillisOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,126,private transient DateTimeField iSecondOfMinuteField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,127,private transient DateTimeField iSecondOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,128,private transient DateTimeField iMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,129,private transient DateTimeField iMinuteOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,130,private transient DateTimeField iHourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,131,private transient DateTimeField iHourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,132,private transient DateTimeField iClockhourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,133,private transient DateTimeField iClockhourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,134,private transient DateTimeField iHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,137,"* Wraps another chronology, with datetime limits. When withUTC or"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,138,"* withDateTimeZone is called, the returned LimitChronology instance has"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,139,"* the same limits, except they are time zone adjusted."
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,141,"* @param lowerLimit  inclusive lower limit, or null if none"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,142,"* @param upperLimit  exclusive upper limit, or null if none"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,143,* @throws IllegalArgumentException if chronology is null or limits are invalid
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,145,"public LimitChronology(Chronology chrono,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,146,"ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,147,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,148,"throw new IllegalArgumentException(""Must supply a chronology"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,151,iChronology = chrono;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,153,iLowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,154,iUpperLimit = upperLimit == null ? null : upperLimit.toDateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,156,if (iLowerLimit != null && iUpperLimit != null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,157,if (!iLowerLimit.isBefore(iUpperLimit)) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,158,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,159,"(""The lower limit must be come before than the upper limit"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,163,setFields();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,166,private void setFields() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,167,Chronology c = iChronology;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,169,// Keep a local cache of converted fields so as not to create redundant
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,170,// objects.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,171,HashMap converted = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,173,// Convert duration fields...
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,175,"iErasField = convertField(c.eras(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,176,"iCenturiesField = convertField(c.centuries(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,177,"iYearsField = convertField(c.years(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,178,"iMonthsField = convertField(c.months(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,179,"iWeekyearsField = convertField(c.weekyears(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,180,"iWeeksField = convertField(c.weeks(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,181,"iDaysField = convertField(c.days(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,183,"iHoursField = convertField(c.hours(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,184,"iMinutesField = convertField(c.minutes(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,185,"iSecondsField = convertField(c.seconds(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,186,"iMillisField = convertField(c.millis(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,188,// Convert datetime fields...
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,190,"iYearField = convertField(c.year(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,191,"iYearOfEraField = convertField(c.yearOfEra(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,192,"iYearOfCenturyField = convertField(c.yearOfCentury(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,193,"iCenturyOfEraField = convertField(c.centuryOfEra(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,194,"iEraField = convertField(c.era(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,195,"iDayOfWeekField = convertField(c.dayOfWeek(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,196,"iDayOfMonthField = convertField(c.dayOfMonth(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,197,"iDayOfYearField = convertField(c.dayOfYear(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,198,"iMonthOfYearField = convertField(c.monthOfYear(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,199,"iWeekOfWeekyearField = convertField(c.weekOfWeekyear(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,200,"iWeekyearField = convertField(c.weekyear(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,202,"iMillisOfSecondField = convertField(c.millisOfSecond(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,203,"iMillisOfDayField = convertField(c.millisOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,204,"iSecondOfMinuteField = convertField(c.secondOfMinute(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,205,"iSecondOfDayField = convertField(c.secondOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,206,"iMinuteOfHourField = convertField(c.minuteOfHour(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,207,"iMinuteOfDayField = convertField(c.minuteOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,208,"iHourOfDayField = convertField(c.hourOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,209,"iHourOfHalfdayField = convertField(c.hourOfHalfday(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,210,"iClockhourOfDayField = convertField(c.clockhourOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,211,"iClockhourOfHalfdayField = convertField(c.clockhourOfHalfday(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,212,"iHalfdayOfDayField = convertField(c.halfdayOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,215,"private DurationField convertField(DurationField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,216,if (field == null || !field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,217,return field;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,219,if (converted.containsKey(field)) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,220,return (DurationField)converted.get(field);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,222,LimitDurationField limitField = new LimitDurationField(field);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,223,"converted.put(field, limitField);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,224,return limitField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,227,"private DateTimeField convertField(DateTimeField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,228,if (field == null || !field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,229,return field;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,231,if (converted.containsKey(field)) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,232,return (DateTimeField)converted.get(field);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,234,LimitDateTimeField limitField =
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,235,"new LimitDateTimeField(field,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,236,"convertField(field.getDurationField(), converted),"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,237,"convertField(field.getRangeDurationField(), converted),"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,238,"convertField(field.getLeapDurationField(), converted));"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,239,"converted.put(field, limitField);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,240,return limitField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,244,* Returns the inclusive lower limit instant.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,246,* @return lower limit
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,248,public DateTime getLowerLimit() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,249,return iLowerLimit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,253,* Returns the inclusive upper limit instant.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,255,* @return upper limit
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,257,public DateTime getUpperBound() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,258,return iUpperLimit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,262,* Gets the wrapped chronology.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,264,* @return the wrapped Chronology
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,266,protected Chronology getWrappedChronology() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,267,return iChronology;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,271,"* If this LimitChronology is already UTC, then this is"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,272,"* returned. Otherwise, a new instance is returned, with the limits"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,273,* adjusted to the new time zone.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,275,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,276,return withDateTimeZone(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,280,"* If this LimitChronology has the same time zone as the one given, then"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,281,"* this is returned. Otherwise, a new instance is returned, with the limits"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,282,* adjusted to the new time zone.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,284,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,285,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,286,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,288,if (zone == getDateTimeZone()) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,289,return this;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,292,if (zone == DateTimeZone.UTC && iWithUTC != null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,293,return iWithUTC;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,296,DateTime lowerLimit = iLowerLimit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,297,if (lowerLimit != null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,298,MutableDateTime mdt = lowerLimit.toMutableDateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,299,mdt.moveDateTimeZone(zone);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,300,lowerLimit = mdt.toDateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,303,DateTime upperLimit = iUpperLimit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,304,if (upperLimit != null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,305,MutableDateTime mdt = upperLimit.toMutableDateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,306,mdt.moveDateTimeZone(zone);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,307,upperLimit = mdt.toDateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,310,LimitChronology chrono = new LimitChronology
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,311,"(iChronology.withDateTimeZone(zone), lowerLimit, upperLimit);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,313,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,314,iWithUTC = chrono;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,317,return chrono;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,320,public DateTimeZone getDateTimeZone() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,321,return iChronology.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,324,public long getDateOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,325,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,326,instant = iChronology.getDateOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,327,"checkLimits(instant, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,328,return instant;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,331,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,332,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,334,"long instant = iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,335,"checkLimits(instant, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,336,return instant;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,339,public long getTimeOnlyMillis(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,340,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,341,instant = iChronology.getTimeOnlyMillis(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,342,"checkLimits(instant, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,343,return instant;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,346,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,347,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,348,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,350,long instant = iChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,351,"(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,352,"checkLimits(instant, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,353,return instant;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,356,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,357,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,358,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,360,"long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,361,"checkLimits(instant, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,362,return instant;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,365,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,366,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,367,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,368,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,370,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,371,instant = iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,372,"(instant, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,373,"checkLimits(instant, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,374,return instant;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,377,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,378,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,379,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,380,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,382,long instant = iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,383,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,384,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,385,"checkLimits(instant, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,386,return instant;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,389,// Milliseconds
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,392,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,393,return iMillisField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,396,public DateTimeField millisOfSecond() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,397,return iMillisOfSecondField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,400,public DateTimeField millisOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,401,return iMillisOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,404,// Seconds
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,407,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,408,return iSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,411,public DateTimeField secondOfMinute() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,412,return iSecondOfMinuteField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,415,public DateTimeField secondOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,416,return iSecondOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,419,// Minutes
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,422,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,423,return iMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,426,public DateTimeField minuteOfHour() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,427,return iMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,430,public DateTimeField minuteOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,431,return iMinuteOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,434,// Hours
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,437,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,438,return iHoursField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,441,public DateTimeField hourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,442,return iHourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,445,public DateTimeField clockhourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,446,return iClockhourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,449,public DateTimeField hourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,450,return iHourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,453,public DateTimeField clockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,454,return iClockhourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,457,public DateTimeField halfdayOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,458,return iHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,461,// Day
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,464,public DurationField days() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,465,return iDaysField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,468,public DateTimeField dayOfWeek() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,469,return iDayOfWeekField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,472,public DateTimeField dayOfMonth() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,473,return iDayOfMonthField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,476,public DateTimeField dayOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,477,return iDayOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,480,// Week
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,483,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,484,return iWeeksField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,487,public DateTimeField weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,488,return iWeekOfWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,491,public DurationField weekyears() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,492,return iWeekyearsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,495,public DateTimeField weekyear() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,496,return iWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,499,// Month
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,502,public DurationField months() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,503,return iMonthsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,506,public DateTimeField monthOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,507,return iMonthOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,510,// Year
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,513,public DurationField years() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,514,return iYearsField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,517,public DateTimeField year() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,518,return iYearField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,521,public DateTimeField yearOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,522,return iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,525,public DateTimeField yearOfCentury() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,526,return iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,529,public DurationField centuries() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,530,return iCenturiesField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,533,public DateTimeField centuryOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,534,return iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,537,public DurationField eras() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,538,return iErasField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,541,public DateTimeField era() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,542,return iEraField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,545,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,546,return iChronology.toString();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,549,private void readObject(ObjectInputStream in)
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,550,"throws IOException, ClassNotFoundException"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,552,in.defaultReadObject();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,553,setFields();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,556,"void checkLimits(long instant, String desc) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,557,DateTime limit;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,558,if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,559,"throw new LimitException(desc, true);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,561,if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,562,"throw new LimitException(desc, false);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,567,* Extends IllegalArgumentException such that the exception message is not
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,568,* generated unless it is actually requested.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,570,private class LimitException extends IllegalArgumentException {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,571,static final long serialVersionUID = -5924689995607498581L;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,573,private final boolean iIsLow;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,575,"LimitException(String desc, boolean isLow) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,576,super(desc);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,577,iIsLow = isLow;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,580,public String getMessage() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,581,StringBuffer buf = new StringBuffer(85);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,582,"buf.append(""The"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,583,String desc = super.getMessage();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,584,if (desc != null) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,585,buf.append(' ');
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,586,buf.append(desc);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,588,"buf.append("" instant is "");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,590,DateTimePrinter p = ISODateTimeFormat.getInstance(getWrappedChronology()).dateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,592,if (iIsLow) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,593,"buf.append(""below the supported minimum of "");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,594,"p.printTo(buf, iLowerLimit);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,595,} else {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,596,"buf.append(""above the supported maximum of "");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,597,"p.printTo(buf, iUpperLimit);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,600,"buf.append("" ("");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,601,buf.append(getWrappedChronology());
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,602,buf.append(')');
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,604,return buf.toString();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,607,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,608,"return ""IllegalArgumentException: "" + getMessage();"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,612,private class LimitDurationField extends DecoratedDurationField {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,613,static final long serialVersionUID = 8049297699408782284L;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,615,LimitDurationField(DurationField field) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,616,"super(field, field.getName());"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,619,"public int getValue(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,620,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,621,"return getWrappedField().getValue(duration, instant);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,624,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,625,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,626,"return getWrappedField().getValueAsLong(duration, instant);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,629,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,630,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,631,"return getWrappedField().getMillis(value, instant);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,634,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,635,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,636,"return getWrappedField().getMillis(value, instant);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,639,"public long add(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,640,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,641,"long result = getWrappedField().add(instant, amount);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,642,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,643,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,646,"public long add(long instant, long amount) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,647,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,648,"long result = getWrappedField().add(instant, amount);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,649,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,650,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,653,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,654,"checkLimits(minuendInstant, ""minuend"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,655,"checkLimits(subtrahendInstant, ""subtrahend"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,656,"return getWrappedField().getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,659,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,660,"checkLimits(minuendInstant, ""minuend"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,661,"checkLimits(subtrahendInstant, ""subtrahend"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,662,"return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,667,private class LimitDateTimeField extends DecoratedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,668,static final long serialVersionUID = -2435306746995699312L;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,670,private final DurationField iDurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,671,private final DurationField iRangeDurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,672,private final DurationField iLeapDurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,674,"LimitDateTimeField(DateTimeField field,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,675,"DurationField durationField,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,676,"DurationField rangeDurationField,"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,677,DurationField leapDurationField) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,678,"super(field, field.getName());"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,679,iDurationField = durationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,680,iRangeDurationField = rangeDurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,681,iLeapDurationField = leapDurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,684,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,685,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,686,return getWrappedField().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,689,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,690,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,691,"return getWrappedField().getAsText(instant, locale);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,694,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,695,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,696,"return getWrappedField().getAsShortText(instant, locale);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,699,"public long add(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,700,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,701,"long result = getWrappedField().add(instant, amount);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,702,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,703,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,706,"public long add(long instant, long amount) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,707,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,708,"long result = getWrappedField().add(instant, amount);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,709,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,710,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,713,"public long addWrapped(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,714,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,715,"long result = getWrappedField().addWrapped(instant, amount);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,716,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,717,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,720,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,721,"checkLimits(minuendInstant, ""minuend"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,722,"checkLimits(subtrahendInstant, ""subtrahend"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,723,"return getWrappedField().getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,726,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,727,"checkLimits(minuendInstant, ""minuend"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,728,"checkLimits(subtrahendInstant, ""subtrahend"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,729,"return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,732,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,733,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,734,"long result = getWrappedField().set(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,735,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,736,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,739,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,740,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,741,"long result = getWrappedField().set(instant, text, locale);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,742,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,743,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,746,public final DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,747,return iDurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,750,public final DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,751,return iRangeDurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,754,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,755,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,756,return getWrappedField().isLeap(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,759,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,760,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,761,return getWrappedField().getLeapAmount(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,764,public final DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,765,return iLeapDurationField;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,768,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,769,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,770,long result = getWrappedField().roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,771,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,772,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,775,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,776,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,777,long result = getWrappedField().roundCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,778,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,779,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,782,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,783,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,784,long result = getWrappedField().roundHalfFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,785,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,786,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,789,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,790,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,791,long result = getWrappedField().roundHalfCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,792,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,793,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,796,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,797,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,798,long result = getWrappedField().roundHalfEven(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,799,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,800,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,803,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,804,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,805,long result = getWrappedField().remainder(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,806,"checkLimits(result, ""resulting"");"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,807,return result;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,810,public int getMinimumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,811,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,812,return getWrappedField().getMinimumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,815,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,816,"checkLimits(instant, null);"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,817,return getWrappedField().getMaximumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,820,public int getMaximumTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,821,return getWrappedField().getMaximumTextLength(locale);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,824,public int getMaximumShortTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,825,return getWrappedField().getMaximumShortTextLength(locale);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,5, Copyright (c) 2001-03 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,10, are met:
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,54,ackage org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,56,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,58,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,61, Generic limiting datetime field.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,62, <p>
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,63, This DateTimeField allows specific millisecond boundaries to be applied
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,64, to DateTimeFields.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,66, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,67, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,68, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,70,ublic class LimitDateTimeField extends DateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,72,** The field to wrap */
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,73,rivate final DateTimeField iField;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,74,** The lower boundary in millis */
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,75,rivate final long iLowerBound;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,76,** The upper boundary in millis */
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,77,rivate final long iUpperBound;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,80, Constructor
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,82," @param name  short, descriptive name, like ""secondOfMinute""."
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,83, @param lowerBound  milliseconds to form the lower boundary inclusive
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,84, @param upperBound  milliseconds to form the upper boundary inclusive
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,85, @throws IllegalArgumentException if field is null or boundary is invalid
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,87,"ublic LimitDateTimeField(String name, DateTimeField field, long lowerBound, long upperBound) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,88,uper(name);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,90,f (field == null) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,91,"hrow new IllegalArgumentException(""The field must not be null"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,93,f (lowerBound >= upperBound) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,94,"hrow new IllegalArgumentException(""The lowerBound must be less than the upperBound"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,96,Field = field;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,97,LowerBound = lowerBound;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,98,UpperBound = upperBound;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,102, Get the amount of fractional units from the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,104, @param millis  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,105, @return the amount of fractional units extracted from the input.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,107,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,108,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,109,eturn iField.get(millis);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,112,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,113,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,114,"eturn iField.getAsText(millis, locale);"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,117,"ublic String getAsShortText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,118,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,119,"eturn iField.getAsShortText(millis, locale);"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,123, Add the specified amount of fractional units to the specified time
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,124, instant. The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,126, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,127, @param amount  the amount of fractional units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,128, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,130,"ublic long add(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,131,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,132,"ong result = iField.add(millis, amount);"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,133,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,134,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,138, Add the specified amount of fractional units to the specified time
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,139, instant. The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,141, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,142, @param amount  the amount of fractional units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,143, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,145,"ublic long add(long millis, long amount) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,146,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,147,"ong result = iField.add(millis, amount);"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,148,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,149,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,153," Add to the fractional component of the specified time instant,"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,154, wrapping around within that component if necessary.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,156, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,157, @param amount  the amount of fractional units to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,158, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,160,"ublic long addWrapped(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,161,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,162,"ong result = iField.addWrapped(millis, amount);"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,163,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,164,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,167,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,168,"heckBounds(minuendMillis, ""minuend"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,169,"heckBounds(subtrahendMillis, ""subtrahend"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,170,"eturn iField.getDifference(minuendMillis, subtrahendMillis);"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,174, Set the specified amount of fractional units to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,176, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,177, @param value  value of fractional units to set.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,178, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,179, @throws IllegalArgumentException if value is too large or too small.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,181,"ublic long set(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,182,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,183,"ong result = iField.set(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,184,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,185,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,188,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,189,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,190,"ong result = iField.set(millis, text, locale);"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,191,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,192,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,195,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,196,eturn iField.getUnitMillis();
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,199,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,200,eturn iField.getRangeMillis();
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,204, Get the minimum value for the field.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,206, @return the minimum value
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,208,ublic int getMinimumValue() {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,209,eturn iField.getMinimumValue();
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,213, Get the maximum value for the field.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,215, @return the maximum value
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,217,ublic int getMaximumValue() {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,218,eturn iField.getMaximumValue();
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,221,ublic int getMaximumTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,222,eturn iField.getMaximumTextLength(locale);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,225,ublic int getMaximumShortTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,226,eturn iField.getMaximumShortTextLength(locale);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,229,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,230,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,231,ong result = iField.roundFloor(millis);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,232,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,233,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,236,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,237,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,238,ong result = iField.roundCeiling(millis);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,239,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,240,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,243,ublic long roundHalfFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,244,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,245,ong result = iField.roundHalfFloor(millis);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,246,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,247,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,250,ublic long roundHalfCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,251,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,252,ong result = iField.roundHalfCeiling(millis);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,253,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,254,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,257,ublic long roundHalfEven(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,258,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,259,ong result = iField.roundHalfEven(millis);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,260,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,261,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,264,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,265,"heckBounds(millis, ""value"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,266,ong result = iField.remainder(millis);
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,267,"heckBounds(millis, ""result"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,268,eturn result;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,272, Returns the DateTimeField being wrapped.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,274, @return field
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,276,ublic DateTimeField getField() {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,277,eturn iField;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,281, Returns the milliseconds lower bound.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,283, @return lower bound
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,285,ublic long getLowerBound() {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,286,eturn iLowerBound;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,290, Returns the milliseconds upper bound.
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,292, @return upper bound
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,294,ublic long getUpperBound() {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,295,eturn iUpperBound;
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,298,"rivate void checkBounds(long millis, String desc) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,299,f (millis < iLowerBound) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,300,"hrow new IllegalArgumentException(""The millisecond "" + desc + "" is below the minimum"");"
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,302,f (millis > iUpperBound) {
False,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/LimitDateTimeField.java,303,"hrow new IllegalArgumentException(""The millisecond "" + desc + "" is above the maximum"");"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,60,* Duration field class representing a field with a fixed unit length of one
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,61,* millisecond.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,62,* <p>
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,63,* MillisDurationField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,65,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,67,"public final class MillisDurationField implements DurationField, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,69,static final long serialVersionUID = 2656707858124633367L;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,71,public static final DurationField INSTANCE = new MillisDurationField();
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,73,private MillisDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,77,public String getName() {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,78,"return ""millis"";"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,82,* @return true always
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,84,public boolean isSupported() {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,85,return true;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,89,* This field is precise.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,91,* @return true always
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,93,public final boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,94,return true;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,98,* Returns the amount of milliseconds per unit value of this field.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,100,* @return one always
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,102,public final long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,103,return 1;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,107,public int getValue(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,108,return Utils.safeToInt(duration);
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,111,public long getValueAsLong(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,112,return duration;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,115,"public int getValue(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,116,return Utils.safeToInt(duration);
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,119,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,120,return duration;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,123,public long getMillis(int value) {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,124,return value;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,127,public long getMillis(long value) {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,128,return value;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,131,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,132,return value;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,135,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,136,return value;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,139,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,140,return instant + value;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,143,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,144,return instant + value;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,147,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,148,return Utils.safeToInt(minuendInstant - subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,151,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,152,return minuendInstant - subtrahendInstant;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,156,public int compareTo(Object durationField) {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,157,DurationField otherField = (DurationField) durationField;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,158,long otherMillis = otherField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,159,long thisMillis = getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,160,// cannot do (thisMillis - otherMillis) as can overflow
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,161,if (thisMillis == otherMillis) {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,162,return 0;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,164,if (thisMillis < otherMillis) {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,165,return -1;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,166,} else {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,167,return 1;
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,172,* Get a suitable debug string.
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,174,* @return debug string
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,176,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,177,"return ""DurationField["" + getName() + ']';"
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,181,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,183,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,JodaTime/src/java/org/joda/time/chrono/MillisDurationField.java,184,return INSTANCE;
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,63,* <p>
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,64,* NonZeroDateTimeField is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,66,ublic final class NonZeroDateTimeField extends DateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,67,rivate final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,69,public final class NonZeroDateTimeField extends DecoratedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,71,static final long serialVersionUID = 961749798233026866L;
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,73,"ublic NonZeroDateTimeField(String name, DateTimeField field) {"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,74,uper(name);
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,75,f (field == null) {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,76,"hrow new IllegalArgumentException(""The field must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,77,"public NonZeroDateTimeField(DateTimeField field, String name) {"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,78,"super(field, name);"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,81,Field = field;
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,84,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,85,nt value = iField.get(millis);
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,84,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,85,int value = getWrappedField().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,92,"ublic long add(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,93,"eturn iField.add(millis, amount);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,92,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,93,"return getWrappedField().add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,96,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,97,"return getWrappedField().add(instant, value);"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,96,"ublic long add(long millis, long amount) {"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,97,"eturn iField.add(millis, amount);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,100,"public long addWrapped(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,101,"return getWrappedField().addWrapped(instant, value);"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,100,"ublic long addWrapped(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,101,"eturn iField.addWrapped(millis, amount);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,104,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,105,"return getWrappedField().getDifference(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,104,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,105,"eturn iField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,108,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,109,"return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,108,"ublic long set(long millis, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,112,"public long set(long instant, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,110,"erifyValueBounds(value, 1, max);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,114,"Utils.verifyValueBounds(this, value, 1, max);"
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,114,"eturn iField.set(millis, value);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,118,"return getWrappedField().set(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,121,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,122,return getWrappedField().isLeap(instant);
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,117,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,118,eturn iField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,125,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,126,return getWrappedField().getLeapAmount(instant);
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,121,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,122,eturn iField.getRangeMillis();
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,129,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,130,return getWrappedField().getLeapDurationField();
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,139,ublic int getMinimumValue(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,147,public int getMinimumValue(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,150,eturn iField.getMaximumValue() + 1;
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,158,return getWrappedField().getMaximumValue() + 1;
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,159,ublic int getMaximumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,160,eturn iField.getMaximumValue(millis) + 1;
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,167,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,168,return getWrappedField().getMaximumValue(instant) + 1;
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,163,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,164,eturn iField.roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,171,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,172,return getWrappedField().roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,167,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,168,eturn iField.roundCeiling(millis);
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,175,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,176,return getWrappedField().roundCeiling(instant);
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,171,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,172,eturn iField.remainder(millis);
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,179,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,180,return getWrappedField().roundHalfFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,176, Returns the DateTimeField being wrapped.
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,178, @return field
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,180,ublic DateTimeField getField() {
False,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,181,eturn iField;
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,183,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,184,return getWrappedField().roundHalfCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,187,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,188,return getWrappedField().roundHalfEven(instant);
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,191,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/NonZeroDateTimeField.java,192,return getWrappedField().remainder(instant);
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,61,* <p>
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,62,* OffsetDateTimeField is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,64,ublic class OffsetDateTimeField extends DateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,65,** The field to adjust */
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,66,rivate final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,67,public class OffsetDateTimeField extends DecoratedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,68,static final long serialVersionUID = 3145790132623583142L;
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,75," @param name  short, descriptive name, like ""offsetYear""."
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,79,"* @param name  short, descriptive name, like ""offsetYear""."
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,80,"ublic OffsetDateTimeField(String name, DateTimeField field, int offset) {"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,81,"his(name, field, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,83,"public OffsetDateTimeField(DateTimeField field, String name, int offset) {"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,84,"this(field, name, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,87," @param name  short, descriptive name, like ""offsetYear""."
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,91,"* @param name  short, descriptive name, like ""offsetYear""."
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,94,"ublic OffsetDateTimeField(String name, DateTimeField field, int offset,"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,97,"public OffsetDateTimeField(DateTimeField field, String name, int offset,"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,96,uper(name);
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,99,"super(field, name);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,98,f (field == null) {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,99,"hrow new IllegalArgumentException(""The field must not be null"");"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,105,Field = field;
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,108,f (minValue < (iField.getMinimumValue() + offset)) {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,109,Min = iField.getMinimumValue() + offset;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,107,if (minValue < (field.getMinimumValue() + offset)) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,108,iMin = field.getMinimumValue() + offset;
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,113,f (maxValue > (iField.getMaximumValue() + offset)) {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,114,Max = iField.getMaximumValue() + offset;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,112,if (maxValue > (field.getMaximumValue() + offset)) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,113,iMax = field.getMaximumValue() + offset;
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,123, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,122,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,126,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,127,eturn iField.get(millis) + iOffset;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,125,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,126,return super.get(instant) + iOffset;
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,134, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,133,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,138,"ublic long add(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,139,"illis = iField.add(millis, amount);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,140,"erifyValueBounds(get(millis), iMin, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,141,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,137,"public long add(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,138,"instant = super.add(instant, amount);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,139,"Utils.verifyValueBounds(this, get(instant), iMin, iMax);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,140,return instant;
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,148, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,147,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,152,"ublic long add(long millis, long amount) {"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,153,"illis = iField.add(millis, amount);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,154,"erifyValueBounds(get(millis), iMin, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,155,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,151,"public long add(long instant, long amount) {"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,152,"instant = super.add(instant, amount);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,153,"Utils.verifyValueBounds(this, get(instant), iMin, iMax);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,154,return instant;
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,162, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,161,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,166,"ublic long addWrapped(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,167,"eturn set(millis, getWrappedValue(get(millis), amount, iMin, iMax));"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,170,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,171,"eturn iField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,165,"public long addWrapped(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,166,"return set(instant, Utils.getWrappedValue(get(instant), amount, iMin, iMax));"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,177, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,172,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,182,"ublic long set(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,183,"erifyValueBounds(value, iMin, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,184,"eturn iField.set(millis, value - iOffset);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,177,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,178,"Utils.verifyValueBounds(this, value, iMin, iMax);"
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,179,"return super.set(instant, value - iOffset);"
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,187,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,188,eturn iField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,182,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,183,return getWrappedField().isLeap(instant);
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,191,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,192,eturn iField.getRangeMillis();
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,186,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,187,return getWrappedField().getLeapAmount(instant);
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,190,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,191,return getWrappedField().getLeapDurationField();
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,213,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,214,eturn iField.roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,212,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,213,return getWrappedField().roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,217,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,218,eturn iField.roundCeiling(millis);
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,216,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,217,return getWrappedField().roundCeiling(instant);
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,221,ublic long roundHalfFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,222,eturn iField.roundHalfFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,220,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,221,return getWrappedField().roundHalfFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,225,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,226,eturn iField.remainder(millis);
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,224,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,225,return getWrappedField().roundHalfCeiling(instant);
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,230, Returns the DateTimeField being wrapped.
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,232, @return field
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,234,ublic DateTimeField getField() {
False,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,235,eturn iField;
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,228,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,229,return getWrappedField().roundHalfEven(instant);
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,232,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/OffsetDateTimeField.java,233,return getWrappedField().remainder(instant);
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,56,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,59,"* Precise datetime field, composed of two precise duration fields."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,60,* <p>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,61,* This DateTimeField is useful for defining DateTimeFields that are composed
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,62,"* of precise durations, like time of day fields. If either duration field is"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,63,"* imprecise, then an {@link ImpreciseDateTimeField} may be used instead."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,64,* <p>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,65,* PreciseDateTimeField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,67,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,68,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,69,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,70,* @see ImpreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,72,public class PreciseDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,74,static final long serialVersionUID = -5586801265774496376L;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,76,/** The maximum range in the correct units */
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,77,private final int iRange;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,79,private final DurationField iRangeField;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,82,* Constructor.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,84,"* @param name  short, descriptive name, like ""secondOfMinute""."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,85,"* @param unit  precise unit duration, like ""seconds()""."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,86,"* @param range precise range duration, preferably a multiple of the unit,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,87,"* like ""minutes()""."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,88,* @throws IllegalArgumentException if either duration field is imprecise
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,89,* @throws IllegalArgumentException if unit milliseconds is less than one
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,90,* or effective value range is less than two.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,92,"public PreciseDateTimeField(String name,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,93,"DurationField unit, DurationField range) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,94,"super(name, unit);"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,96,if (!range.isPrecise()) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,97,"throw new IllegalArgumentException(""Range duration field must be precise"");"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,100,long rangeMillis = range.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,101,iRange = (int)(rangeMillis / getUnitMillis());
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,102,if (iRange < 2) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,103,"throw new IllegalArgumentException(""The effective range must be at least 2"");"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,106,iRangeField = range;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,110,* Get the amount of fractional units from the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,112,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,113,* @return the amount of fractional units extracted from the input.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,115,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,116,if (instant >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,117,return (int) ((instant / getUnitMillis()) % iRange);
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,118,} else {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,119,return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,124,"* Add to the component of the specified time instant, wrapping around"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,125,* within that component if necessary.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,127,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,128,* @param amount  the amount of units to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,129,* @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,131,"public long addWrapped(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,132,int thisValue = get(instant);
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,133,int wrappedValue = Utils.getWrappedValue
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,134,"(thisValue, amount, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,135,// copy code from set() to avoid repeat call to get()
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,136,return instant + (wrappedValue - thisValue) * getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,140,"* Returns the range duration of this field. For example, if this field"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,141,"* represents ""minute of hour"", then the range duration field is an hours."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,143,"* @return the range duration of this field, or null if field has no range"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,145,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,146,return iRangeField;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,150,* Get the maximum value for the field.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,152,* @return the maximum value
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,154,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,155,return iRange - 1;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,159,* Returns the range of the field in the field's units.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,160,* <p>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,161,"* For example, 60 for seconds per minute. The field is allowed values"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,162,* from 0 to range - 1.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,164,* @return unit range
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,166,public int getRange() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDateTimeField.java,167,return iRange;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,55,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,60,"* Precise datetime field, which has a precise unit duration field."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,61,* <p>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,62,"* PreciseDurationDateTimeField is thread-safe and immutable, and its"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,63,* subclasses must be as well.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,65,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,67,public abstract class PreciseDurationDateTimeField extends AbstractDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,69,static final long serialVersionUID = 5004523158306266035L;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,71,/** The fractional unit in millis */
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,72,private final long iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,74,private final DurationField iUnitField;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,77,* Constructor.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,79,"* @param name  short, descriptive name, like ""dayOfMonth""."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,80,"* @param unit  precise unit duration, like ""days()""."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,81,* @throws IllegalArgumentException if duration field is imprecise
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,82,* @throws IllegalArgumentException if unit milliseconds is less than one
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,84,"public PreciseDurationDateTimeField(String name, DurationField unit) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,85,super(name);
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,87,if (!unit.isPrecise()) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,88,"throw new IllegalArgumentException(""Unit duration field must be precise"");"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,91,iUnitMillis = unit.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,92,if (iUnitMillis < 1) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,93,"throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,96,iUnitField = unit;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,100,* Returns false by default.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,102,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,103,return false;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,107,* Add the specified amount of units to the specified time instant. The
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,108,* amount added may be negative.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,110,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,111,* @param amount  the amount of units to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,112,* @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,114,"public long add(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,115,return instant + amount * iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,119,* Add the specified amount of units to the specified time instant. The
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,120,* amount added may be negative.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,122,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,123,* @param amount  the amount of units to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,124,* @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,126,"public long add(long instant, long amount) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,127,return instant + amount * iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,130,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,131,"return Utils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,134,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,135,return (minuendInstant - subtrahendInstant) / iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,139,* Set the specified amount of units to the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,141,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,142,* @param value  value of units to set.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,143,* @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,144,* @throws IllegalArgumentException if value is too large or too small.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,146,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,147,"Utils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,148,return instant + (value - get(instant)) * iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,152,* This method assumes that this field is properly rounded on
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,153,"* 1970-01-01T00:00:00. If the rounding alignment differs, override this"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,154,* method as follows:
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,155,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,156,* return super.roundFloor(instant + ALIGNMENT_MILLIS) - ALIGNMENT_MILLIS;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,157,* </pre>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,159,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,160,if (instant >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,161,return instant - instant % iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,162,} else {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,163,instant += 1;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,164,return instant - instant % iUnitMillis - iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,169,* This method assumes that this field is properly rounded on
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,170,"* 1970-01-01T00:00:00. If the rounding alignment differs, override this"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,171,* method as follows:
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,172,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,173,* return super.roundCeiling(instant + ALIGNMENT_MILLIS) - ALIGNMENT_MILLIS;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,174,* </pre>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,176,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,177,if (instant >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,178,instant -= 1;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,179,return instant - instant % iUnitMillis + iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,180,} else {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,181,return instant - instant % iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,186,* This method assumes that this field is properly rounded on
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,187,"* 1970-01-01T00:00:00. If the rounding alignment differs, override this"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,188,* method as follows:
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,189,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,190,* return super.remainder(instant + ALIGNMENT_MILLIS);
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,191,* </pre>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,193,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,194,if (instant >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,195,return instant % iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,196,} else {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,197,return (instant + 1) % iUnitMillis + iUnitMillis - 1;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,202,"* Returns the duration per unit value of this field. For example, if this"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,203,"* field represents ""minute of hour"", then the duration field is minutes."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,205,"* @return the duration of this field, or UnsupportedDurationField if field"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,206,* has no duration
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,208,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,209,return iUnitField;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,213,* Get the minimum value for the field.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,215,* @return the minimum value
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,217,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,218,return 0;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,221,public final long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java,222,return iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,57,* Duration field class representing a field with a fixed unit length.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,58,* <p>
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,59,* PreciseDurationField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,61,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,62,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,63,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,65,public class PreciseDurationField extends AbstractDurationField {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,67,static final long serialVersionUID = -8346152187724495365L;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,69,/** The size of the unit */
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,70,private final long iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,73,* Constructor.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,75,"* @param name  the name of the field, like ""seconds"""
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,76,* @param unitMillis  the unit milliseconds
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,78,"public PreciseDurationField(String name, long unitMillis) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,79,super(name);
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,80,iUnitMillis = unitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,85,* This field is precise.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,87,* @return true always
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,89,public final boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,90,return true;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,94,* Returns the amount of milliseconds per unit value of this field.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,96,"* @return the unit size of this field, in milliseconds"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,98,public final long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,99,return iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,104,* Get the value of this field from the milliseconds.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,106,"* @param duration  the milliseconds to query, which may be negative"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,107,* @param instant  ignored
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,108,"* @return the value of the field, in the units of the field, which may be"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,109,* negative
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,111,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,112,return duration / iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,116,* Get the millisecond duration of this field from its value.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,118,"* @param value  the value of the field, which may be negative"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,119,* @param instant  ignored
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,120,"* @return the milliseconds that the field represents, which may be"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,121,* negative
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,123,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,124,return value * iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,128,* Get the millisecond duration of this field from its value.
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,130,"* @param value  the value of the field, which may be negative"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,131,* @param instant  ignored
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,132,"* @return the milliseconds that the field represents, which may be"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,133,* negative
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,135,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,136,return value * iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,139,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,140,return instant + value * iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,143,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,144,return instant + value * iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,147,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,JodaTime/src/java/org/joda/time/chrono/PreciseDurationField.java,148,return (minuendInstant - subtrahendInstant) / iUnitMillis;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,59, Generic remainder datetime field.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,60,* Counterpart remainder datetime field to {@link DividedDateTimeField}. The
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,61,"* field's unit duration is unchanged, but the range duration is scaled"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,62,* accordingly.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,63,* <p>
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,64,* RemainderDateTimeField is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,66,ublic class RemainderDateTimeField extends DateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,67,** The field to get the remainder */
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,68,rivate final DateTimeField iField;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,69,** The amount to divide by in the correct units */
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,70,rivate final int iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,71,public class RemainderDateTimeField extends DecoratedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,73,static final long serialVersionUID = 5708241235177666790L;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,75,// Shared with DividedDateTimeField.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,76,final int iDivisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,77,final DurationField iRangeField;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,73, Constructor
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,80,* Constructor.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,75," @param name  short, descriptive name, like ""yearOfCentury""."
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,77," @param unitDivisor  divisor in units, such as 100 years in a century"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,78, @throws IllegalArgumentException if unit is less than two
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,83,"* @param name  short, descriptive name, like ""yearOfCentury""."
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,84,"* @param rangeName  short, descriptive name, like ""centuries""."
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,85,"* @param divisor  divisor, such as 100 years in a century"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,86,* @throws IllegalArgumentException if divisor is less than two
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,80,"ublic RemainderDateTimeField(String name, DateTimeField field, int unitDivisor) {"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,81,uper(name);
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,83,f (field == null) {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,84,"hrow new IllegalArgumentException(""The field must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,88,"public RemainderDateTimeField(DateTimeField field,"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,89,"String name, String rangeName, int divisor) {"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,90,"super(field, name);"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,92,if (divisor < 2) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,93,"throw new IllegalArgumentException(""The divisor must be at least 2"");"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,86,f (unitDivisor < 2) {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,87,"hrow new IllegalArgumentException(""The unit divisor must be at least 2"");"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,96,DurationField rangeField = field.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,97,if (rangeField == null) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,98,iRangeField = null;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,99,} else {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,100,"iRangeField = new ScaledDurationField(rangeField, rangeName, divisor);"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,89,Field = field;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,90,UnitDivisor = unitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,103,iDivisor = divisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,107,* Construct a RemainderDateTimeField that compliments the given
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,108,* DividedDateTimeField.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,110,"* @param dividedField  complimentary divided field, like ""century()""."
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,111,"* @param name  short, descriptive name, like ""yearOfCentury""."
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,113,"public RemainderDateTimeField(DividedDateTimeField dividedField, String name) {"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,114,"super(dividedField.getWrappedField(), name);"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,115,iDivisor = dividedField.iDivisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,116,iRangeField = dividedField.iDurationField;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,96, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,122,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,99,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,100,nt value = iField.get(millis);
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,125,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,126,int value = getWrappedField().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,102,eturn value % iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,128,return value % iDivisor;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,104,eturn (iUnitDivisor - 1) + ((value + 1) % iUnitDivisor);
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,130,return (iDivisor - 1) + ((value + 1) % iDivisor);
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,109, Add the specified amount to the specified time instant. The amount added
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,110, may be negative.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,112, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,113, @param amount  the amount to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,114, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,116,"ublic long add(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,117,"eturn iField.add(millis, amount);"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,121, Add the specified amount to the specified time instant. The amount added
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,122, may be negative.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,124, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,125, @param amount  the amount to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,126, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,128,"ublic long add(long millis, long amount) {"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,129,"eturn iField.add(millis, amount);"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,137, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,139,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,141,"ublic long addWrapped(long millis, int amount) {"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,142,"eturn set(millis, getWrappedValue(get(millis), amount, 0, iUnitDivisor - 1));"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,145,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,146,"eturn iField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,143,"public long addWrapped(long instant, int amount) {"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,144,"return set(instant, Utils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,152, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,150,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,157,"ublic long set(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,158,"erifyValueBounds(value, 0, iUnitDivisor - 1);"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,159,nt divided = getDivided(iField.get(millis));
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,160,"eturn iField.set(millis, divided * iUnitDivisor + value);"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,163,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,164,eturn iField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,155,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,156,"Utils.verifyValueBounds(this, value, 0, iDivisor - 1);"
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,157,int divided = getDivided(getWrappedField().get(instant));
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,158,"return getWrappedField().set(instant, divided * iDivisor + value);"
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,168, Returns the wrapped field's unit size multiplied by the unit divisor.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,162,* Returns a scaled version of the wrapped field's unit duration field.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,170,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,171,eturn iField.getUnitMillis() * iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,164,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,165,return iRangeField;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,185, unit divisor.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,179,* divisor.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,190,eturn iUnitDivisor - 1;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,184,return iDivisor - 1;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,193,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,194,eturn iField.roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,187,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,188,return getWrappedField().roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,197,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,198,eturn iField.roundCeiling(millis);
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,191,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,192,return getWrappedField().roundCeiling(instant);
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,201,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,202,eturn iField.remainder(millis);
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,195,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,196,return getWrappedField().roundHalfFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,206, Returns the DateTimeField being wrapped.
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,208, @return field
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,210,ublic DateTimeField getField() {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,211,eturn iField;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,199,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,200,return getWrappedField().roundHalfCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,203,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,204,return getWrappedField().roundHalfEven(instant);
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,207,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,208,return getWrappedField().remainder(instant);
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,215, Returns the divisor to apply to the field in the field's units.
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,212,"* Returns the divisor applied, in the field's units."
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,219,ublic int getUnitDivisor() {
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,220,eturn iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,216,public int getDivisor() {
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,217,return iDivisor;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,225,eturn value / iUnitDivisor;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,222,return value / iDivisor;
False,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,227,eturn ((value + 1) / iUnitDivisor) - 1;
True,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/RemainderDateTimeField.java,224,return ((value + 1) / iDivisor) - 1;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,55,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,60,* Scales a DurationField such that it's unit millis becomes larger in
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,61,* magnitude.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,62,* <p>
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,63,* ScaledDurationField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,65,* @see PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,67,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,69,public class ScaledDurationField extends DecoratedDurationField {
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,71,static final long serialVersionUID = -3205227092378684157L;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,73,private final int iScalar;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,76,* Constructor
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,78,"* @param field  the field to wrap, like ""year()""."
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,79,"* @param name  short, descriptive name, like ""centuries""."
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,80,"* @param scalar  scalar, such as 100 years in a century"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,81,* @throws IllegalArgumentException if scalar is zero or one.
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,83,"public ScaledDurationField(DurationField field, String name, int scalar) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,84,"super(field, name);"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,85,if (scalar == 0 || scalar == 1) {
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,86,"throw new IllegalArgumentException(""The scalar must not be 0 or 1"");"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,88,iScalar = scalar;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,91,public int getValue(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,92,return getWrappedField().getValue(duration) / iScalar;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,95,public long getValueAsLong(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,96,return getWrappedField().getValueAsLong(duration) / iScalar;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,99,"public int getValue(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,100,"return getWrappedField().getValue(duration, instant) / iScalar;"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,103,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,104,"return getWrappedField().getValueAsLong(duration, instant) / iScalar;"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,107,public long getMillis(int value) {
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,108,return getWrappedField().getMillis(value * iScalar);
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,111,public long getMillis(long value) {
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,112,return getWrappedField().getMillis(value * iScalar);
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,115,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,116,"return getWrappedField().getMillis(value * iScalar, instant);"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,119,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,120,"return getWrappedField().getMillis(value * iScalar, instant);"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,123,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,124,"return getWrappedField().add(instant, value * iScalar);"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,127,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,128,"return getWrappedField().add(instant, value * iScalar);"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,131,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,132,"return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,135,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,136,"return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;"
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,139,public long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,140,return getWrappedField().getUnitMillis() * iScalar;
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,144,"* Returns the scalar applied, in the field's units."
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,146,* @return the scalar
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,148,public int getScalar() {
True,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,JodaTime/src/java/org/joda/time/chrono/ScaledDurationField.java,149,return iScalar;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,57,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,58,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,61,"* Wraps another chronology, ensuring all the fields are strict."
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,62,* <p>
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,63,* StrictChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,65,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,66,* @see StrictDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,67,* @see LenientChronology
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,69,public class StrictChronology extends DelegatedChronology {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,71,static final long serialVersionUID = 6633006628097111960L;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,73,private transient DateTimeField iYearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,74,private transient DateTimeField iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,75,private transient DateTimeField iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,76,private transient DateTimeField iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,77,private transient DateTimeField iEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,78,private transient DateTimeField iDayOfWeekField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,79,private transient DateTimeField iDayOfMonthField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,80,private transient DateTimeField iDayOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,81,private transient DateTimeField iMonthOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,82,private transient DateTimeField iWeekOfWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,83,private transient DateTimeField iWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,85,private transient DateTimeField iMillisOfSecondField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,86,private transient DateTimeField iMillisOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,87,private transient DateTimeField iSecondOfMinuteField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,88,private transient DateTimeField iSecondOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,89,private transient DateTimeField iMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,90,private transient DateTimeField iMinuteOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,91,private transient DateTimeField iHourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,92,private transient DateTimeField iHourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,93,private transient DateTimeField iClockhourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,94,private transient DateTimeField iClockhourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,95,private transient DateTimeField iHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,97,private transient Chronology iWithUTC;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,100,* Create a StrictChronology for any chronology.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,102,* @param chrono the chronology
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,103,* @throws IllegalArgumentException if chronology is null
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,105,public StrictChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,106,super(chrono);
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,109,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,110,if (iWithUTC == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,111,iWithUTC = new StrictChronology(getWrappedChronology().withUTC());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,113,return iWithUTC;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,116,public Chronology withDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,117,return new StrictChronology(getWrappedChronology().withDateTimeZone(zone));
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,121,* Overridden to ensure strict fields are used.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,123,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,124,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,126,"return getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,130,* Overridden to ensure strict fields are used.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,132,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,133,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,134,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,136,"long instant = hourOfDay().set(0, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,137,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,138,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,139,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,143,* Overridden to ensure strict fields are used.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,145,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,146,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,147,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,149,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,150,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,151,"instant = dayOfMonth().set(instant, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,152,"return millisOfDay().set(instant, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,156,* Overridden to ensure strict fields are used.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,158,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,159,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,160,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,161,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,163,"instant = hourOfDay().set(instant, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,164,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,165,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,166,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,170,* Overridden to ensure strict fields are used.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,172,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,173,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,174,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,175,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,177,"long instant = year().set(0, year);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,178,"instant = monthOfYear().set(instant, monthOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,179,"instant = dayOfMonth().set(instant, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,180,"instant = hourOfDay().set(instant, hourOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,181,"instant = minuteOfHour().set(instant, minuteOfHour);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,182,"instant = secondOfMinute().set(instant, secondOfMinute);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,183,"return millisOfSecond().set(instant, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,186,// Milliseconds
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,189,public DateTimeField millisOfSecond() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,190,if (iMillisOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,191,iMillisOfSecondField = StrictDateTimeField.getInstance(super.millisOfSecond());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,193,return iMillisOfSecondField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,196,public DateTimeField millisOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,197,if (iMillisOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,198,iMillisOfDayField = StrictDateTimeField.getInstance(super.millisOfDay());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,200,return iMillisOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,203,// Seconds
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,206,public DateTimeField secondOfMinute() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,207,if (iSecondOfMinuteField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,208,iSecondOfMinuteField = StrictDateTimeField.getInstance(super.secondOfMinute());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,210,return iSecondOfMinuteField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,213,public DateTimeField secondOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,214,if (iSecondOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,215,iSecondOfDayField = StrictDateTimeField.getInstance(super.secondOfDay());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,217,return iSecondOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,220,// Minutes
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,223,public DateTimeField minuteOfHour() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,224,if (iMinuteOfHourField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,225,iMinuteOfHourField = StrictDateTimeField.getInstance(super.minuteOfHour());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,227,return iMinuteOfHourField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,230,public DateTimeField minuteOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,231,if (iMinuteOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,232,iMinuteOfDayField = StrictDateTimeField.getInstance(super.minuteOfDay());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,234,return iMinuteOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,237,// Hours
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,240,public DateTimeField hourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,241,if (iHourOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,242,iHourOfDayField = StrictDateTimeField.getInstance(super.hourOfDay());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,244,return iHourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,247,public DateTimeField clockhourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,248,if (iClockhourOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,249,iClockhourOfDayField = StrictDateTimeField.getInstance(super.clockhourOfDay());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,251,return iClockhourOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,254,public DateTimeField hourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,255,if (iHourOfHalfdayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,256,iHourOfHalfdayField = StrictDateTimeField.getInstance(super.hourOfHalfday());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,258,return iHourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,261,public DateTimeField clockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,262,if (iClockhourOfHalfdayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,263,iClockhourOfHalfdayField =
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,264,StrictDateTimeField.getInstance(super.clockhourOfHalfday());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,266,return iClockhourOfHalfdayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,269,public DateTimeField halfdayOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,270,if (iHalfdayOfDayField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,271,iHalfdayOfDayField = StrictDateTimeField.getInstance(super.halfdayOfDay());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,273,return iHalfdayOfDayField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,276,// Day
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,279,public DateTimeField dayOfWeek() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,280,if (iDayOfWeekField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,281,iDayOfWeekField = StrictDateTimeField.getInstance(super.dayOfWeek());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,283,return iDayOfWeekField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,286,public DateTimeField dayOfMonth() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,287,if (iDayOfMonthField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,288,iDayOfMonthField = StrictDateTimeField.getInstance(super.dayOfMonth());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,290,return iDayOfMonthField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,293,public DateTimeField dayOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,294,if (iDayOfYearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,295,iDayOfYearField = StrictDateTimeField.getInstance(super.dayOfYear());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,297,return iDayOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,300,// Week
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,303,public DateTimeField weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,304,if (iWeekOfWeekyearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,305,iWeekOfWeekyearField = StrictDateTimeField.getInstance(super.weekOfWeekyear());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,307,return iWeekOfWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,310,public DateTimeField weekyear() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,311,if (iWeekyearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,312,iWeekyearField = StrictDateTimeField.getInstance(super.weekyear());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,314,return iWeekyearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,317,// Month
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,320,public DateTimeField monthOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,321,if (iMonthOfYearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,322,iMonthOfYearField = StrictDateTimeField.getInstance(super.monthOfYear());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,324,return iMonthOfYearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,327,// Year
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,330,public DateTimeField year() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,331,if (iYearField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,332,iYearField = StrictDateTimeField.getInstance(super.year());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,334,return iYearField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,337,public DateTimeField yearOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,338,if (iYearOfEraField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,339,iYearOfEraField = StrictDateTimeField.getInstance(super.yearOfEra());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,341,return iYearOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,344,public DateTimeField yearOfCentury() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,345,if (iYearOfCenturyField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,346,iYearOfCenturyField = StrictDateTimeField.getInstance(super.yearOfCentury());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,348,return iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,351,public DateTimeField centuryOfEra() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,352,if (iCenturyOfEraField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,353,iCenturyOfEraField = StrictDateTimeField.getInstance(super.centuryOfEra());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,355,return iCenturyOfEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,358,public DateTimeField era() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,359,if (iEraField == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,360,iEraField = StrictDateTimeField.getInstance(super.era());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,362,return iEraField;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,365,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,366,"return ""StrictChronology["" + getWrappedChronology().toString() + ']';"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,56,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,59,"* Converts a lenient DateTimeField into a strict one. By being strict, the set"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,60,* throws an IllegalArgumentException if the value is out of bounds.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,61,* <p>
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,62,* StrictDateTimeField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,64,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,65,* @see LenientDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,67,public class StrictDateTimeField extends DelegatedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,69,static final long serialVersionUID = 3154803964207950910L;
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,72,"* Returns a strict version of the given field. If it is already strict,"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,73,"* then it is returned as-is. Otherwise, a new StrictDateTimeField is"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,74,* returned.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,76,public static DateTimeField getInstance(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,77,if (field == null) {
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,78,return null;
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,80,if (field instanceof LenientDateTimeField) {
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,81,field = ((LenientDateTimeField)field).getWrappedField();
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,83,if (!field.isLenient()) {
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,84,return field;
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,86,return new StrictDateTimeField(field);
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,89,protected StrictDateTimeField(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,90,super(field);
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,93,public final boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,94,return false;
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,98,* Does a bounds check before setting the value.
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,100,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,102,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,103,Utils.verifyValueBounds
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,104,"(this, value, getMinimumValue(instant), getMaximumValue(instant));"
True,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/StrictDateTimeField.java,105,"return super.set(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,55,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,57,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,58,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,59,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,60,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,61,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,64,* A placeholder implementation to use when a datetime field is not supported.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,65,* <p>
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,66,* UnsupportedDateTimeField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,68,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,70,"public final class UnsupportedDateTimeField implements DateTimeField, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,72,static final long serialVersionUID = -1934618396111902255L;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,75,"* Instance with the name ""unsupported""."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,77,public static final UnsupportedDateTimeField INSTANCE =
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,78,"getInstance(""unsupported"", UnsupportedDurationField.INSTANCE);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,80,private static HashMap cCache;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,83,* @throws IllegalArgumentException if durationField is null
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,85,public static synchronized UnsupportedDateTimeField getInstance
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,86,"(String name, DurationField durationField) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,88,UnsupportedDateTimeField field;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,89,if (cCache == null) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,90,cCache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,91,field = null;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,92,} else {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,93,field = (UnsupportedDateTimeField)cCache.get(name);
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,94,if (field != null && field.getDurationField() != durationField) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,95,field = null;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,98,if (field == null) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,99,"field = new UnsupportedDateTimeField(name, durationField);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,100,"cCache.put(name, field);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,102,return field;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,105,private final String iName;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,106,private final DurationField iDurationField;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,108,"private UnsupportedDateTimeField(String name, DurationField durationField) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,109,if (durationField == null) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,110,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,112,iName = name;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,113,iDurationField = durationField;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,116,"// Design note: Simple accessors return a suitable value, but methods"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,117,// intended to perform calculations throw an UnsupportedOperationException.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,119,public String getName() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,120,return iName;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,124,* This field is not supported.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,126,* @return false always
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,128,public boolean isSupported() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,129,return false;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,133,* This field is not lenient.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,135,* @return false always
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,137,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,138,return false;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,142,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,144,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,146,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,147,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,151,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,153,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,155,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,156,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,160,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,162,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,164,public String getAsText(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,165,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,169,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,171,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,173,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,174,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,178,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,180,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,182,public String getAsShortText(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,183,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,187,* Delegates to the duration field.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,189,* @throws UnsupportedOperationException if the duration is unsupported
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,191,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,192,"return getDurationField().add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,196,* Delegates to the duration field.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,198,* @throws UnsupportedOperationException if the duration is unsupported
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,200,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,201,"return getDurationField().add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,205,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,207,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,209,"public long addWrapped(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,210,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,214,* Delegates to the duration field.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,216,* @throws UnsupportedOperationException if the duration is unsupported
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,218,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,219,"return getDurationField().getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,223,* Delegates to the duration field.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,225,* @throws UnsupportedOperationException if the duration is unsupported
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,227,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,228,"return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,232,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,234,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,236,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,237,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,241,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,243,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,245,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,246,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,250,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,252,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,254,"public long set(long instant, String text) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,255,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,259,"* Even though this DateTimeField is unsupported, the duration field might"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,260,* be supported.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,262,* @return a possibly supported DurationField
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,264,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,265,return iDurationField;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,269,* Always returns null.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,271,* @return null always
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,273,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,274,return null;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,278,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,280,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,282,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,283,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,287,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,289,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,291,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,292,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,296,* Always returns null.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,298,* @return null always
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,300,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,301,return null;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,305,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,307,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,309,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,310,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,314,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,316,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,318,public int getMinimumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,319,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,323,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,325,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,327,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,328,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,332,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,334,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,336,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,337,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,341,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,343,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,345,public int getMaximumTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,346,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,350,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,352,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,354,public int getMaximumShortTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,355,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,359,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,361,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,363,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,364,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,368,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,370,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,372,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,373,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,377,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,379,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,381,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,382,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,386,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,388,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,390,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,391,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,395,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,397,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,399,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,400,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,404,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,406,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,408,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,409,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,414,* Get a suitable debug string.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,416,* @return debug string
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,418,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,419,"return ""UnsupportedDateTimeField"";"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,423,* Ensure proper singleton serialization
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,425,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,426,"return getInstance(iName, iDurationField);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,429,private UnsupportedOperationException unsupported() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDateTimeField.java,430,"return new UnsupportedOperationException(iName + "" field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,55,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,57,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,58,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,62,* A placeholder implementation to use when a duration field is not supported.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,63,* <p>
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,64,* UnsupportedDurationField is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,66,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,68,"public final class UnsupportedDurationField implements DurationField, Serializable {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,70,static final long serialVersionUID = -6390301302770925357L;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,73,"* Instance with the name ""unsupported""."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,75,"public static final UnsupportedDurationField INSTANCE = getInstance(""unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,77,private static HashMap cCache;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,79,public static synchronized UnsupportedDurationField getInstance(String name) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,80,UnsupportedDurationField field;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,81,if (cCache == null) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,82,cCache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,83,field = null;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,84,} else {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,85,field = (UnsupportedDurationField)cCache.get(name);
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,87,if (field == null) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,88,field = new UnsupportedDurationField(name);
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,89,"cCache.put(name, field);"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,91,return field;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,94,private final String iName;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,96,private UnsupportedDurationField(String name) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,97,iName = name;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,100,"// Design note: Simple Accessors return a suitable value, but methods"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,101,// intended to perform calculations throw an UnsupportedOperationException.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,103,public String getName() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,104,return iName;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,108,* This field is not supported.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,110,* @return false always
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,112,public boolean isSupported() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,113,return false;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,117,* This field is precise.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,119,* @return true always
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,121,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,122,return true;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,126,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,128,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,130,public int getValue(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,131,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,135,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,137,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,139,public long getValueAsLong(long duration) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,140,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,144,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,146,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,148,"public int getValue(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,149,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,153,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,155,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,157,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,158,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,162,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,164,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,166,public long getMillis(int value) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,167,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,171,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,173,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,175,public long getMillis(long value) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,176,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,180,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,182,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,184,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,185,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,189,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,191,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,193,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,194,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,198,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,200,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,202,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,203,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,207,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,209,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,211,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,212,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,216,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,218,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,220,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,221,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,225,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,227,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,229,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,230,throw unsupported();
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,234,* Always returns zero.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,236,* @return zero always
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,238,public long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,239,return 0;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,243,"* Always returns zero, indicating that sort order is not relevent."
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,245,* @return zero always
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,247,public int compareTo(Object durationField) {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,248,return 0;
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,253,* Get a suitable debug string.
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,255,* @return debug string
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,257,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,258,"return ""UnsupportedDurationField"";"
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,262,* Ensure proper singleton serialization
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,264,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,265,return getInstance(iName);
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,268,private UnsupportedOperationException unsupported() {
True,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/chrono/UnsupportedDurationField.java,269,"return new UnsupportedOperationException(iName + "" field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,10,* are met:
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,54,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,56,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,59,* General utilities that don't fit elsewhere.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,60,* <p>
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,61,* Utils is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,63,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,64,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,66,public class Utils {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,69,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,71,private Utils() {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,72,super();
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,77,* Add two values throwing an exception if overflow occurs.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,79,* @param val1  the first value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,80,* @param val2  the second value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,81,* @return the new total
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,83,"public static long safeAdd(long val1, long val2) {"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,84,long total = val1 + val2;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,85,if (val1 > 0 && val2 > 0 && total < 0) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,86,"throw new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" + "" + val2);"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,88,if (val1 < 0 && val2 < 0 && total > 0) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,89,"throw new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" + "" + val2);"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,91,return total;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,95,* Multiply two values throwing an exception if overflow occurs.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,97,* @param val1  the first value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,98,* @param val2  the second value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,99,* @return the new total
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,101,"public static long safeMultiply(long val1, long val2) {"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,102,if (val1 == 0  || val2 == 0) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,103,return 0L;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,105,long total = val1 * val2;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,106,if (total / val2 != val1) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,107,"throw new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" * "" + val2);"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,109,return total;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,113,* Casts to an int throwing an exception if overflow occurs.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,115,* @param value  the value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,116,* @return the value as an int
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,118,public static int safeToInt(long value) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,119,if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,120,return (int) value;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,122,"throw new ArithmeticException(""Value cannot fit in an int: "" + value);"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,126,* Verify that input values are within specified bounds.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,128,* @param value  the value to check
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,129,* @param lowerBound  the lower bound allowed for value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,130,* @param upperBound  the upper bound allowed for value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,131,* @throws IllegalArgumentException if value is not in the specified bounds
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,133,"public static void verifyValueBounds(DateTimeField field,"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,134,"int value, int lowerBound, int upperBound) {"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,135,if ((value < lowerBound) || (value > upperBound)) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,136,throw new IllegalArgumentException(
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,137,"""Value: """
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,138,+ value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,139,"+ "" for """
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,140,+ field.getName()
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,141,"+ "" must be in the range ("""
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,142,+ lowerBound
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,144,+ upperBound
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,150,* Verify that input values are within specified bounds.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,152,* @param value  the value to check
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,153,* @param lowerBound  the lower bound allowed for value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,154,* @param upperBound  the upper bound allowed for value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,155,* @throws IllegalArgumentException if value is not in the specified bounds
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,157,"public static void verifyValueBounds(String fieldName,"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,158,"int value, int lowerBound, int upperBound) {"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,159,if ((value < lowerBound) || (value > upperBound)) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,160,throw new IllegalArgumentException(
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,161,"""Value: """
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,162,+ value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,163,"+ "" for """
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,164,+ fieldName
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,165,"+ "" must be in the range ("""
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,166,+ lowerBound
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,168,+ upperBound
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,174,* Utility method used by addWrapped implementations to ensure the new
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,175,* value lies within the field's legal value range.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,177,"* @param currentValue the current value of the data, which may lie outside"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,178,* the wrapped value range
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,179,* @param wrapValue  the value to add to current value before
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,180,*  wrapping.  This may be negative.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,181,* @param minValue the wrap range minimum value.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,182,* @param maxValue the wrap range maximum value.  This must be
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,183,*  greater than minValue (checked by the method).
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,184,* @return the wrapped value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,185,* @throws IllegalArgumentException if minValue is greater
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,186,*  than or equal to maxValue
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,188,"public static int getWrappedValue(int currentValue, int wrapValue,"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,189,"int minValue, int maxValue) {"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,190,"return getWrappedValue(currentValue + wrapValue, minValue, maxValue);"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,194,* Utility method that ensures the given value lies within the field's
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,195,* legal value range.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,197,* @param value  the value to fit into the wrapped value range
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,198,* @param minValue the wrap range minimum value.
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,199,* @param maxValue the wrap range maximum value.  This must be
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,200,*  greater than minValue (checked by the method).
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,201,* @return the wrapped value
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,202,* @throws IllegalArgumentException if minValue is greater
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,203,*  than or equal to maxValue
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,205,"public static int getWrappedValue(int value, int minValue, int maxValue) {"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,206,if (minValue >= maxValue) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,207,"throw new IllegalArgumentException(""MIN > MAX"");"
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,210,int wrapRange = maxValue - minValue + 1;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,211,value -= minValue;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,213,if (value >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,214,return (value % wrapRange) + minValue;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,217,int remByRange = (-value) % wrapRange;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,219,if (remByRange == 0) {
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,220,return 0 + minValue;
True,JodaTime/src/java/org/joda/time/chrono/Utils.java,JodaTime/src/java/org/joda/time/chrono/Utils.java,222,return (wrapRange - remByRange) + minValue;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,59,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,63,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,66,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,70,* <p>
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,71,* ZonedChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,79,static final long serialVersionUID = -1079258847191166848L;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,81,static boolean useTimeArithmetic(DurationField field) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,82,// Use time of day arithmetic rules for unit durations less than
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,83,// typical time zone offsets.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,84,return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,90,private transient DurationField iErasField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,91,private transient DurationField iCenturiesField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,92,private transient DurationField iYearsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,93,private transient DurationField iMonthsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,94,private transient DurationField iWeekyearsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,95,private transient DurationField iWeeksField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,96,private transient DurationField iDaysField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,98,private transient DurationField iHoursField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,99,private transient DurationField iMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,100,private transient DurationField iSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,101,private transient DurationField iMillisField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,127,ateTimeZone z = iZone;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,129,"YearField = new ZonedDateField(c.year(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,130,"YearOfEraField = new ZonedDateField(c.yearOfEra(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,131,"YearOfCenturyField = new ZonedDateField(c.yearOfCentury(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,132,"CenturyOfEraField = new ZonedDateField(c.centuryOfEra(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,133,"EraField = new ZonedDateField(c.era(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,134,"DayOfMonthField = new ZonedDateField(c.dayOfMonth(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,135,"DayOfWeekField = new ZonedDateField(c.dayOfWeek(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,136,"DayOfYearField = new ZonedDateField(c.dayOfYear(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,137,"MonthOfYearField = new ZonedDateField(c.monthOfYear(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,138,"WeekOfWeekyearField = new ZonedDateField(c.weekOfWeekyear(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,139,"WeekyearField = new ZonedDateField(c.weekyear(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,141,"MillisOfSecondField = new ZonedTimeField(c.millisOfSecond(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,142,"MillisOfDayField = new ZonedTimeField(c.millisOfDay(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,143,"SecondOfMinuteField = new ZonedTimeField(c.secondOfMinute(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,144,"SecondOfDayField = new ZonedTimeField(c.secondOfDay(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,145,"MinuteOfHourField = new ZonedTimeField(c.minuteOfHour(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,146,"MinuteOfDayField = new ZonedTimeField(c.minuteOfDay(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,147,"HourOfDayField = new ZonedTimeField(c.hourOfDay(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,148,"HourOfHalfdayField = new ZonedTimeField(c.hourOfHalfday(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,149,"ClockhourOfDayField = new ZonedTimeField(c.clockhourOfDay(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,150,"ClockhourOfHalfdayField = new ZonedTimeField(c.clockhourOfHalfday(), z);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,152,/ Treat halfday as a date field for adds.
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,153,"HalfdayOfDayField = new ZonedDateField(c.halfdayOfDay(), z);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,155,// Keep a local cache of converted fields so as not to create redundant
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,156,// objects.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,157,HashMap converted = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,159,// Convert duration fields...
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,161,"iErasField = convertField(c.eras(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,162,"iCenturiesField = convertField(c.centuries(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,163,"iYearsField = convertField(c.years(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,164,"iMonthsField = convertField(c.months(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,165,"iWeekyearsField = convertField(c.weekyears(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,166,"iWeeksField = convertField(c.weeks(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,167,"iDaysField = convertField(c.days(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,169,"iHoursField = convertField(c.hours(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,170,"iMinutesField = convertField(c.minutes(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,171,"iSecondsField = convertField(c.seconds(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,172,"iMillisField = convertField(c.millis(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,174,// Convert datetime fields...
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,176,"iYearField = convertField(c.year(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,177,"iYearOfEraField = convertField(c.yearOfEra(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,178,"iYearOfCenturyField = convertField(c.yearOfCentury(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,179,"iCenturyOfEraField = convertField(c.centuryOfEra(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,180,"iEraField = convertField(c.era(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,181,"iDayOfWeekField = convertField(c.dayOfWeek(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,182,"iDayOfMonthField = convertField(c.dayOfMonth(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,183,"iDayOfYearField = convertField(c.dayOfYear(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,184,"iMonthOfYearField = convertField(c.monthOfYear(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,185,"iWeekOfWeekyearField = convertField(c.weekOfWeekyear(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,186,"iWeekyearField = convertField(c.weekyear(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,188,"iMillisOfSecondField = convertField(c.millisOfSecond(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,189,"iMillisOfDayField = convertField(c.millisOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,190,"iSecondOfMinuteField = convertField(c.secondOfMinute(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,191,"iSecondOfDayField = convertField(c.secondOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,192,"iMinuteOfHourField = convertField(c.minuteOfHour(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,193,"iMinuteOfDayField = convertField(c.minuteOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,194,"iHourOfDayField = convertField(c.hourOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,195,"iHourOfHalfdayField = convertField(c.hourOfHalfday(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,196,"iClockhourOfDayField = convertField(c.clockhourOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,197,"iClockhourOfHalfdayField = convertField(c.clockhourOfHalfday(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,198,"iHalfdayOfDayField = convertField(c.halfdayOfDay(), converted);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,201,"private DurationField convertField(DurationField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,202,if (field == null || !field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,203,return field;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,205,if (converted.containsKey(field)) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,206,return (DurationField)converted.get(field);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,208,"ZonedDurationField zonedField = new ZonedDurationField(field, iZone);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,209,"converted.put(field, zonedField);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,210,return zonedField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,213,"private DateTimeField convertField(DateTimeField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,214,if (field == null || !field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,215,return field;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,217,if (converted.containsKey(field)) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,218,return (DateTimeField)converted.get(field);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,220,ZonedDateTimeField zonedField =
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,221,"new ZonedDateTimeField(field, iZone,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,222,"convertField(field.getDurationField(), converted),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,223,"convertField(field.getRangeDurationField(), converted),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,224,"convertField(field.getLeapDurationField(), converted));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,225,"converted.put(field, zonedField);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,226,return zonedField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,166,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,239,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,250,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,251,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,253,return localToUTC(iChronology.getDateOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,254,"(year, monthOfYear, dayOfMonth));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,257,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,258,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,259,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,261,return localToUTC(iChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,262,"(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,265,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,266,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,267,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,269,return localToUTC(iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,270,"(year, monthOfYear, dayOfMonth, millisOfDay));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,273,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,274,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,275,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,276,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,278,return localToUTC(iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,279,"(instant + iZone.getOffset(instant),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,280,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,283,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,284,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,285,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,286,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,288,return localToUTC(iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,289,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,290,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,294,* @param instant instant from 1970-01-01T00:00:00 local time
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,296,private long localToUTC(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,297,int offset = iZone.getOffsetFromLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,298,instant -= offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,299,if (offset != iZone.getOffset(instant)) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,300,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,301,"(""Illegal instant due to time zone offset transition"");"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,303,return instant;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,309,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,310,return iMillisField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,324,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,325,return iSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,339,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,340,return iMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,354,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,355,return iHoursField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,381,public DurationField days() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,382,return iDaysField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,400,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,401,return iWeeksField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,408,public DurationField weekyears() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,409,return iWeekyearsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,419,public DurationField months() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,420,return iMonthsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,430,public DurationField years() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,431,return iYearsField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,446,public DurationField centuries() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,447,return iCenturiesField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,454,public DurationField eras() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,455,return iErasField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,462,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,463,return iChronology.toString();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,474,"* Because time durations are typically smaller than time zone offsets, the"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,475,* arithmetic methods subtract the original offset. This produces a more
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,476,"* expected behavior when crossing time zone offset transitions. For dates,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,477,"* the new offset is subtracted off. This behavior, if applied to time"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,478,"* fields, can nullify or reverse an add when crossing a transition."
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,481,static class ZonedDurationField extends AbstractDurationField {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,482,static final long serialVersionUID = -485345310999208286L;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,484,final DurationField iField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,485,final boolean iTimeField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,486,final DateTimeZone iZone;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,488,"ZonedDurationField(DurationField field, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,489,super(field.getName());
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,490,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,491,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,493,iField = field;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,494,iTimeField = useTimeArithmetic(field);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,495,this.iZone = zone;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,498,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,499,return iTimeField ? iField.isPrecise() : iZone.isFixed();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,502,public long getUnitMillis() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,503,return iField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,506,"public int getValue(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,507,"return iField.getValue(duration, instant + this.iZone.getOffset(instant));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,510,"public long getValueAsLong(long duration, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,511,"return iField.getValueAsLong(duration, instant + this.iZone.getOffset(instant));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,514,"public long getMillis(int value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,515,"return iField.getMillis(value, instant + this.iZone.getOffset(instant));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,518,"public long getMillis(long value, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,519,"return iField.getMillis(value, instant + this.iZone.getOffset(instant));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,522,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,523,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,524,"instant = iField.add(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,525,return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,528,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,529,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,530,"instant = iField.add(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,531,return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,534,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,535,int offset = this.iZone.getOffset(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,536,return iField.getDifference
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,537,"(minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,538,subtrahendInstant + offset);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,541,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,542,int offset = this.iZone.getOffset(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,543,return iField.getDifferenceAsLong
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,544,"(minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,545,subtrahendInstant + offset);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,299," This class converts passed in millis to local wall millis, and"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,300, vice versa on output.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,552,"* This class converts passed in instants to local wall time, and vice"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,553,* versa on output.
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,302,tatic class ZonedDateField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,555,static final class ZonedDateTimeField extends AbstractDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,556,static final long serialVersionUID = -3968986277775529794L;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,306,"onedDateField(DateTimeField field, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,560,final DurationField iDurationField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,561,final boolean iTimeField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,562,final DurationField iRangeDurationField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,563,final DurationField iLeapDurationField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,565,"ZonedDateTimeField(DateTimeField field,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,566,"DateTimeZone zone,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,567,"DurationField durationField,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,568,"DurationField rangeDurationField,"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,569,DurationField leapDurationField) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,571,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,572,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,576,iDurationField = durationField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,577,iTimeField = useTimeArithmetic(durationField);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,578,iRangeDurationField = rangeDurationField;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,579,iLeapDurationField = leapDurationField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,312,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,313,eturn iField.get(millis + this.iZone.getOffset(millis));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,582,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,583,return iField.isLenient();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,316,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,317,"eturn iField.getAsText(millis + this.iZone.getOffset(millis), locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,586,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,587,return iField.get(instant + this.iZone.getOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,320,"ublic String getAsShortText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,321,"eturn iField.getAsShortText(millis + this.iZone.getOffset(millis), locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,590,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,591,"return iField.getAsText(instant + this.iZone.getOffset(instant), locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,324,"ublic long add(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,325,"illis = iField.add(millis + this.iZone.getOffset(millis), value);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,326,eturn millis - this.iZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,594,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,595,"return iField.getAsShortText(instant + this.iZone.getOffset(instant), locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,329,"ublic long add(long millis, long value) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,330,"illis = iField.add(millis + this.iZone.getOffset(millis), value);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,331,eturn millis - this.iZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,598,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,599,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,600,"instant = iField.add(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,601,return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,334,"ublic long addWrapped(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,335,"illis = iField.addWrapped(millis + this.iZone.getOffset(millis), value);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,336,eturn millis - this.iZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,604,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,605,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,606,"instant = iField.add(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,607,return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,339,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,340,"eturn iField.getDifference(minuendMillis + this.iZone.getOffset(minuendMillis),"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,341,ubtrahendMillis + this.iZone.getOffset(subtrahendMillis));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,610,"public long addWrapped(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,611,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,612,"instant = iField.addWrapped(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,613,return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,344,"ublic long set(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,345,ong offset = this.iZone.getOffset(millis);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,347,"illis = iField.set(millis + offset, value);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,348,ong offsetFromLocal = this.iZone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,349,illis -= offsetFromLocal;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,616,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,617,long offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,619,"instant = iField.set(instant + offset, value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,620,long offsetFromLocal = this.iZone.getOffsetFromLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,621,instant -= offsetFromLocal;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,352,f (get(millis) != value) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,624,if (get(instant) != value) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,358,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,630,return instant;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,361,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,362,"illis = iField.set(millis + this.iZone.getOffset(millis), text, locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,633,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,634,"instant = iField.set(instant + this.iZone.getOffset(instant), text, locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,364,eturn millis - this.iZone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,367,ublic boolean isLeap(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,368,eturn iField.isLeap(millis + this.iZone.getOffset(millis));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,636,return instant - this.iZone.getOffsetFromLocal(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,371,ublic int getLeapAmount(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,372,eturn iField.getLeapAmount(millis + this.iZone.getOffset(millis));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,375,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,376,eturn iField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,639,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,640,int offset = this.iZone.getOffset(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,641,return iField.getDifference
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,642,"(minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,643,subtrahendInstant + offset);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,379,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,380,eturn iField.getRangeMillis();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,646,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,647,int offset = this.iZone.getOffset(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,648,return iField.getDifferenceAsLong
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,649,"(minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,650,subtrahendInstant + offset);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,383,ublic int getMinimumValue() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,384,eturn iField.getMinimumValue();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,387,ublic int getMinimumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,388,eturn iField.getMinimumValue(millis + this.iZone.getOffset(millis));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,653,public final DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,654,return iDurationField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,391,ublic int getMaximumValue() {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,392,eturn iField.getMaximumValue();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,657,public final DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,658,return iRangeDurationField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,395,ublic int getMaximumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,396,eturn iField.getMaximumValue(millis + this.iZone.getOffset(millis));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,661,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,662,return iField.isLeap(instant + this.iZone.getOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,399,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,400,illis = iField.roundFloor(millis + this.iZone.getOffset(millis));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,401,eturn millis - this.iZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,665,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,666,return iField.getLeapAmount(instant + this.iZone.getOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,404,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,405,illis = iField.roundCeiling(millis + this.iZone.getOffset(millis));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,406,eturn millis - this.iZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,669,public final DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,670,return iLeapDurationField;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,409,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,410,illis = iField.remainder(millis + this.iZone.getOffset(millis));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,411,eturn millis - this.iZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,673,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,674,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,675,instant = iField.roundFloor(instant + offset);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,676,return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,414,ublic int getMaximumTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,415,eturn iField.getMaximumTextLength(locale);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,679,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,680,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,681,instant = iField.roundCeiling(instant + offset);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,682,return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,418,ublic int getMaximumShortTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,419,eturn iField.getMaximumShortTextLength(locale);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,685,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,686,return iField.remainder(instant + this.iZone.getOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,423,tatic class ZonedTimeField extends ZonedDateField {
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,424,"onedTimeField(DateTimeField field, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,425,"uper(field, zone);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,689,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,690,return iField.getMinimumValue();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,428,"/ Because time fields are smaller than time zone offsets, override the"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,429,/ arithmetic methods to follow more expected behavior when crossing
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,430,/ time zone offset transitions. The original add method can nullify or
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,431,/ reverse an add when crossing a transition.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,693,public int getMinimumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,694,return iField.getMinimumValue(instant + this.iZone.getOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,433,"ublic long add(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,434,nt offset = this.iZone.getOffset(millis);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,435,"eturn iField.add(millis + offset, value) - offset;"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,697,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,698,return iField.getMaximumValue();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,438,"ublic long add(long millis, long value) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,439,nt offset = this.iZone.getOffset(millis);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,440,"eturn iField.add(millis + offset, value) - offset;"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,701,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,702,return iField.getMaximumValue(instant + this.iZone.getOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,443,"ublic long addWrapped(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,444,nt offset = this.iZone.getOffset(millis);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,445,"eturn iField.addWrapped(millis + offset, value) - offset;"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,705,public int getMaximumTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,706,return iField.getMaximumTextLength(locale);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,448,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,449,nt offset = this.iZone.getOffset(subtrahendMillis);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,450,"eturn iField.getDifference(minuendMillis + offset, subtrahendMillis + offset);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,709,public int getMaximumShortTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,710,return iField.getMaximumShortTextLength(locale);
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,60,import org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,63,mport org.joda.time.chrono.DelegateChronology;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,64,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,65,import org.joda.time.chrono.DecoratedChronology;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,66,import org.joda.time.chrono.DividedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,67,import org.joda.time.chrono.LimitChronology;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,69,import org.joda.time.chrono.RemainderDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,75, At present the century fields are unsupported.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,80,* BuddhistChronology is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,81,ublic final class BuddhistChronology extends DelegateChronology {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,86,public final class BuddhistChronology extends DecoratedChronology {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,88,static final long serialVersionUID = -3474595157769370126L;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,92,** UTC instance of the chronology */
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,93,rivate static final BuddhistChronology INSTANCE_UTC =
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,94,"ew BuddhistChronology(GJChronology.getInstance(DateTimeZone.UTC, null, false));"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,98,tatic {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,99,"Cache.put(DateTimeZone.UTC, INSTANCE_UTC);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,102,/** UTC instance of the chronology */
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,103,private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,128, @throws IllegalArgumentException if the zone is null
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,149,private transient DateTimeField iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,150,private transient DateTimeField iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,151,rivate BuddhistChronology(GJChronology gjChronology) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,152,uper(gjChronology);
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,153,ateTimeField field = gjChronology.year();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,154,"YearField = new OffsetDateTimeField(field.getName(), field, BUDDHIST_OFFSET);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,155,ield = gjChronology.weekyear();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,156,"WeekyearField = new OffsetDateTimeField(field.getName(), field, BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,155,private BuddhistChronology(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,156,"this(chronology, false);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,160,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,162,"private BuddhistChronology(Chronology chronology, boolean unlimited) {"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,163,// BuddhistChronology is constructed in three magic steps:
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,165,"// 1. Wrap a BuddhistChronology with proper offset, but no range limits"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,166,"// 2. Wrap a LimitChronology, which will copy and wrap all the fields"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,167,// 3. Wrap a BuddhistChronology which purely delegates to LimitChronology
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,169,// Why is it done this way? So that the LimitChronology error message
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,170,// shows the limit printed using BuddhistChronology fields. This extra
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,171,// wrapping does not impose any additional overhead when accessing
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,172,// fields because LimitChronology copies them.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,174,// Is this a good design? No.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,176,super(unlimited ? chronology : limitChronology(chronology));
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,178,DateTimeField field = getWrappedChronology().year();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,179,if (unlimited) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,180,"field = new OffsetDateTimeField(field, field.getName(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,182,iYearField = field;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,184,field = getWrappedChronology().weekyear();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,185,if (unlimited) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,186,"field = new OffsetDateTimeField(field, field.getName(), BUDDHIST_OFFSET);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,188,iWeekyearField = field;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,194,* Returns a LimitChronology that wraps an unlimited BuddhistChronology
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,195,* that wraps the given Chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,197,private static Chronology limitChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,198,"chrono = new BuddhistChronology(chrono, true);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,199,"DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,200,"return new LimitChronology(chrono, lowerLimit, null);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,164,eturn getInstance(getChronology().getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,207,return getInstance(getWrappedChronology().getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,237,// Millis
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,241,* Get the millis duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,243,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,245,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,246,return getWrappedChronology().millis();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,250,* Get the millis of second field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,252,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,254,public DateTimeField millisOfSecond() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,255,return getWrappedChronology().millisOfSecond();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,259,* Get the millis of day field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,261,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,263,public DateTimeField millisOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,264,return getWrappedChronology().millisOfDay();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,267,// Seconds
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,271,* Get the seconds duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,273,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,275,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,276,return getWrappedChronology().seconds();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,280,* Get the second of minute field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,282,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,284,public DateTimeField secondOfMinute() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,285,return getWrappedChronology().secondOfMinute();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,289,* Get the second of day field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,291,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,293,public DateTimeField secondOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,294,return getWrappedChronology().secondOfDay();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,297,// Minutes
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,301,* Get the minutes duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,303,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,305,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,306,return getWrappedChronology().minutes();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,310,* Get the minute of hour field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,312,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,314,public DateTimeField minuteOfHour() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,315,return getWrappedChronology().minuteOfHour();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,319,* Get the minute of day field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,321,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,323,public DateTimeField minuteOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,324,return getWrappedChronology().minuteOfDay();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,327,// Hours
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,331,* Get the hours duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,333,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,335,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,336,return getWrappedChronology().hours();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,340,* Get the hour of day (0-23) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,342,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,344,public DateTimeField hourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,345,return getWrappedChronology().hourOfDay();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,349,* Get the hour of day (offset to 1-24) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,351,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,353,public DateTimeField clockhourOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,354,return getWrappedChronology().clockhourOfDay();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,358,* Get the hour of am/pm (0-11) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,360,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,362,public DateTimeField hourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,363,return getWrappedChronology().hourOfHalfday();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,367,* Get the hour of am/pm (offset to 1-12) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,369,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,371,public DateTimeField clockhourOfHalfday() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,372,return getWrappedChronology().clockhourOfHalfday();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,376,* Get the AM(0) PM(1) field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,378,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,380,public DateTimeField halfdayOfDay() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,381,return getWrappedChronology().halfdayOfDay();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,384,// Day
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,388,* Get the days duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,390,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,392,public DurationField days() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,393,return getWrappedChronology().days();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,397,* Get the day of week field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,399,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,401,public DateTimeField dayOfWeek() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,402,return getWrappedChronology().dayOfWeek();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,406,* Get the day of month field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,408,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,410,public DateTimeField dayOfMonth() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,411,return getWrappedChronology().dayOfMonth();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,415,* Get the day of year field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,417,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,419,public DateTimeField dayOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,420,return getWrappedChronology().dayOfYear();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,427,* Get the weeks duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,429,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,431,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,432,return getWrappedChronology().weeks();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,436,* Get the week of a week based year field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,438,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,440,public DateTimeField weekOfWeekyear() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,441,return getWrappedChronology().weekOfWeekyear();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,445,* Get the weekyears duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,447,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,449,public DurationField weekyears() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,450,return getWrappedChronology().weekyears();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,462,// Month
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,466,* Get the months duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,468,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,470,public DurationField months() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,471,return getWrappedChronology().months();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,475,* Get the month of year field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,477,* @return DateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,479,public DateTimeField monthOfYear() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,480,return getWrappedChronology().monthOfYear();
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,487,* Get the years duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,489,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,491,public DurationField years() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,492,return getWrappedChronology().years();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,213,/ TODO block negative years
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,223,/ TODO block negative years
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,231, @throws UnsupportedOperationException always
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,234,/ TODO
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,235,"hrow new UnsupportedOperationException(""yearOfCentury is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,519,if (iYearOfCenturyField == null) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,520,DateTimeField tempField = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,521,"((DividedDateTimeField)centuryOfEra(), """");"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,522,"iYearOfCenturyField = new OffsetDateTimeField(tempField, ""yearOfCentury"", 1);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,524,return iYearOfCenturyField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,528,* Get the centuries duration field for this chronology.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,530,* @return DurationField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,532,public DurationField centuries() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,533,return getWrappedChronology().centuries();
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,242, @throws UnsupportedOperationException always
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,245,/ TODO
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,246,"hrow new UnsupportedOperationException(""centuryOfEra is unsupported for "" + getClass().getName());"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,542,if (iCenturyOfEraField == null) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,543,"DateTimeField tempField = new OffsetDateTimeField(yearOfEra(), """", 99);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,544,iCenturyOfEraField = new DividedDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,545,"(tempField, ""centuryOfEra"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,547,return iCenturyOfEraField;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,249,/ Misc
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,567,"String str = ""BuddhistChronology"";"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,269,"eturn ""BuddhistChronology["" + (zone == null ? """" : zone.getID()) + ""]"";"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,569,if (zone != null) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,570,str = str + '[' + zone.getID() + ']';
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistChronology.java,572,return str;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,60,import org.joda.time.chrono.AbstractDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,61,import org.joda.time.chrono.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,62,import org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,68,* @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,66,inal class BuddhistEraDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,71,final class BuddhistEraDateTimeField extends AbstractDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,73,static final long serialVersionUID = -9175876774456816364L;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,94,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,95,return false;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,93,ublic int get(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,104,public int get(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,98, Unsupported - add the specified eras to the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,109,* Set the Era component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,101, @param years  the years to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,112,* @param era  the era (BuddhistChronology.BE) to update the time to.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,114,* @throws IllegalArgumentException  if era is invalid.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,104,"ublic long add(long millis, int era) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,105,"hrow new UnsupportedOperationException(""Adding to Era field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,116,"public long set(long instant, int era) {"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,117,"Utils.verifyValueBounds(this, era, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,119,return instant;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,109, Unsupported - add the specified eras to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,111, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,112, @param years  the years to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,113, @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,123,"* @see org.joda.time.DateTimeField#set(long, String, Locale)"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,115,"ublic long add(long millis, long era) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,116,"hrow new UnsupportedOperationException(""Adding to Era field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,125,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,126,"if (""BE"".equals(text) == false) {"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,127,"throw new IllegalArgumentException(""Invalid era text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,129,return instant;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,120, Unsupported - add the specified eras to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,122, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,123, @param era  the era to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,124, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,126,"ublic long addWrapped(long millis, int era) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,127,"hrow new UnsupportedOperationException(""Adding to Era field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,132,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,133,return Long.MIN_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,130,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,131,"hrow new UnsupportedOperationException(""Era field difference is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,136,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,137,return Long.MAX_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,135, Set the Era component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,137, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,138, @param era  the era (BuddhistChonology.BE) to update the time to.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,139, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,140, @throws IllegalArgumentException  if era is invalid.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,142,"ublic long set(long millis, int era) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,143,"uper.verifyValueBounds(era, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,140,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,141,return Long.MIN_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,145,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,144,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,145,return Long.MIN_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,148,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,149,"/ Should actually be double this, but that is not possible since Java"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,150,/ doesn't support unsigned types.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,151,eturn Long.MAX_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,148,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,149,return Long.MIN_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,154,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,155,"/ Should actually be double this, but that is not possible since Java"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,156,/ doesn't support unsigned types.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,157,eturn Long.MAX_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,152,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,153,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,156,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,157,return null;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,171,"ublic String getAsShortText(long millis, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,171,"public String getAsShortText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,185,"ublic String getAsText(long millis, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,185,"public String getAsText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,197," @see org.joda.time.DateTimeField#set(long, String, Locale)"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,199,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,200,"f (""BE"".equals(text) == false) {"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,201,"hrow new IllegalArgumentException(""Invalid era text: "" + text);"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,203,eturn millis;
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,208, Unsupported.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,209, @throws UnsupportedOperationException always
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,211,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,212,"hrow new UnsupportedOperationException(""Rounding an Era field is unsupported"");"
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,216, Unsupported.
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,217, @throws UnsupportedOperationException always
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,219,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/buddhist/BuddhistEraDateTimeField.java,220,"hrow new UnsupportedOperationException(""Calculating remainder from Era field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,61,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,62,import org.joda.time.chrono.AbstractDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,63,import org.joda.time.chrono.DecoratedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,75,static final long serialVersionUID = -2545574827706931671L;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,74,"rivate static long convert(long millis, Chronology from, Chronology to) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,75,f (from == to) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,76,eturn millis;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,79,nt year = from.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,80,nt monthOfYear = from.monthOfYear().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,81,nt dayOfMonth = from.dayOfMonth().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,82,nt millisOfDay = from.millisOfDay().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,84,"illis = to.year().set(0, year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,85,"illis = to.monthOfYear().set(millis, monthOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,86,"illis = to.dayOfMonth().set(millis, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,87,"illis = to.millisOfDay().set(millis, millisOfDay);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,89,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,80,"private static long convert(long instant, Chronology from, Chronology to) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,81,return to.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,82,"(from.year().get(instant),"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,83,"from.monthOfYear().get(instant),"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,84,"from.dayOfMonth().get(instant),"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,85,from.millisOfDay().get(instant));
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,102,inal long iCutoverMillis;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,103,ransient final long iGapMillis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,98,final long iCutoverInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,99,transient final long iGapDuration;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,108, @param cutoverMillis instant when the gregorian chronology began
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,104,* @param cutoverInstant instant when the gregorian chronology began
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,110,"utoverChronology(JulianChronology julian, GregorianChronology gregorian, long cutoverMillis) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,106,"CutoverChronology(JulianChronology julian, GregorianChronology gregorian, long cutoverInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,123,CutoverMillis = cutoverMillis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,119,iCutoverInstant = cutoverInstant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,126,GapMillis = cutoverMillis - julianToGregorian(cutoverMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,122,iGapDuration = cutoverInstant - julianToGregorian(cutoverInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,126,// First just copy all the Gregorian fields and then override those
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,127,// that need special attention.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,128,copyFields(gregorian);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,132,MillisOfSecondField = gregorian.millisOfSecond();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,133,MillisOfDayField = gregorian.millisOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,134,SecondOfMinuteField = gregorian.secondOfMinute();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,135,SecondOfDayField = gregorian.secondOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,136,MinuteOfHourField = gregorian.minuteOfHour();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,137,MinuteOfDayField = gregorian.minuteOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,138,HourOfDayField = gregorian.hourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,139,HourOfHalfdayField = gregorian.hourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,140,ClockhourOfDayField = gregorian.clockhourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,141,ClockhourOfHalfdayField = gregorian.clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,142,HalfdayOfDayField = gregorian.halfdayOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,145,f (gregorian.millisOfDay().get(cutoverMillis) == 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,134,if (gregorian.millisOfDay().get(cutoverInstant) == 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,163,"EraField = new CutoverField(julian.era(), gregorian.era());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,164,"DayOfMonthField = new CutoverField(julian.dayOfMonth(), gregorian.dayOfMonth());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,166,/ These fields require special attention when add is called since they
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,167,/ internally call set.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,168,"YearField = new CutoverVarField(julian.year(), gregorian.year());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,169,"YearOfEraField = new CutoverVarField(julian.yearOfEra(), gregorian.yearOfEra());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,170,"YearOfCenturyField = new CutoverVarField(julian.yearOfCentury(), gregorian.yearOfCentury());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,171,"CenturyOfEraField = new CutoverVarField(julian.centuryOfEra(), gregorian.centuryOfEra());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,172,"MonthOfYearField = new CutoverVarField(julian.monthOfYear(), gregorian.monthOfYear());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,173,"WeekyearField = new CutoverVarField(julian.weekyear(), gregorian.weekyear());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,153,"iEraField = new CutoverField(julian.era(), gregorian.era());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,154,"iDayOfMonthField = new CutoverField(julian.dayOfMonth(), gregorian.dayOfMonth());"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,181,ong cutover = gregorian.year().roundCeiling(iCutoverMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,163,long cutover = gregorian.year().roundCeiling(iCutoverInstant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,187,ong cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,169,long cutover = gregorian.weekyear().roundCeiling(iCutoverInstant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,192,/ Day of week is unaffected by cutover. Either julian or gregorian will work.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,193,DayOfWeekField = gregorian.dayOfWeek();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,174,// These fields are special because they have imprecise durations. The
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,175,// family of addition methods need special attention. Override affected
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,176,// duration fields as well.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,178,"iYearField = new ImpreciseCutoverField(julian.year(), gregorian.year());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,179,iYearsField = iYearField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,180,iYearOfEraField = new ImpreciseCutoverField
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,181,"(julian.yearOfEra(), gregorian.yearOfEra(), iYearsField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,182,iYearOfCenturyField = new ImpreciseCutoverField
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,183,"(julian.yearOfCentury(), gregorian.yearOfCentury(), iYearsField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,185,"iCenturyOfEraField = new ImpreciseCutoverField(julian.centuryOfEra(), gregorian.centuryOfEra());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,186,iCenturiesField = iCenturyOfEraField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,188,"iMonthOfYearField = new ImpreciseCutoverField(julian.monthOfYear(), gregorian.monthOfYear());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,189,iMonthsField = iMonthOfYearField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,191,"iWeekyearField = new ImpreciseCutoverField(julian.weekyear(), gregorian.weekyear());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,192,iWeekyearsField = iWeekyearField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,200,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,201,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,203,"return getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,206,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,207,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,208,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,210,// Time fields are same for Julian and Gregorian.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,211,return iGregorianChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,212,"(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,215,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,216,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,217,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,219,// Assume date is Gregorian.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,220,long instant = iGregorianChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,221,"(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,222,if (instant < iCutoverInstant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,223,// Maybe it's Julian.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,224,instant = iJulianChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,225,"(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,226,if (instant >= iCutoverInstant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,227,"// Okay, it's in the illegal cutover gap."
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,228,"throw new IllegalArgumentException(""Specified date does not exist"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,231,return instant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,234,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,235,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,236,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,237,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,239,return getDateOnlyMillis(instant)
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,240,"+ getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,243,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,244,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,245,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,246,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,248,"return getDateTimeMillis(year, monthOfYear, dayOfMonth, 0)"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,249,"+ getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,201,eturn iCutoverMillis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,253,return iCutoverInstant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,212,ong julianToGregorian(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,213,"eturn convert(millis, iJulianChronology, iGregorianChronology);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,264,long julianToGregorian(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,265,"return convert(instant, iJulianChronology, iGregorianChronology);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,216,ong gregorianToJulian(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,217,"eturn convert(millis, iGregorianChronology, iJulianChronology);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,268,long gregorianToJulian(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,269,"return convert(instant, iGregorianChronology, iJulianChronology);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,224,rivate class CutoverField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,276,private class CutoverField extends AbstractDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,277,static final long serialVersionUID = 3528501219481026402L;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,283,protected DurationField iDurationField;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,234,uper(gregorianField.getName());
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,235,JulianField = julianField;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,236,GregorianField = gregorianField;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,237,Cutover = iCutoverMillis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,290,"this(julianField, gregorianField, iCutoverInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,240,"utoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,293,"CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,244,Cutover = cutoverMillis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,297,iCutover = cutoverInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,298,"// Although average length of Julian and Gregorian years differ,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,299,// use the Gregorian duration field because it is more accurate.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,300,iDurationField = gregorianField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,303,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,304,return false;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,247,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,248,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,249,eturn iGregorianField.get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,307,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,308,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,309,return iGregorianField.get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,251,eturn iJulianField.get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,311,return iJulianField.get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,255,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,256,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,257,"eturn iGregorianField.getAsText(millis, locale);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,315,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,316,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,317,"return iGregorianField.getAsText(instant, locale);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,259,"eturn iJulianField.getAsText(millis, locale);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,319,"return iJulianField.getAsText(instant, locale);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,263,"ublic String getAsShortText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,264,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,265,"eturn iGregorianField.getAsShortText(millis, locale);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,323,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,324,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,325,"return iGregorianField.getAsShortText(instant, locale);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,267,"eturn iJulianField.getAsShortText(millis, locale);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,327,"return iJulianField.getAsShortText(instant, locale);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,271,"ublic long add(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,272,"eturn iGregorianField.add(millis, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,331,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,332,"return iGregorianField.add(instant, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,275,"ublic long add(long millis, long value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,276,"eturn iGregorianField.add(millis, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,335,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,336,"return iGregorianField.add(instant, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,279,"ublic long addWrapped(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,280,"eturn iGregorianField.addWrapped(millis, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,339,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,340,"return iGregorianField.getDifference(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,283,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,284,"eturn iGregorianField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,343,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,344,"return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,287,"ublic long set(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,288,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,289,"illis = iGregorianField.set(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,290,f (millis < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,347,"public long set(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,348,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,349,"instant = iGregorianField.set(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,350,if (instant < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,292,f (millis + iGapMillis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,293,illis = gregorianToJulian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,352,if (instant + iGapDuration < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,353,instant = gregorianToJulian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,296,f (get(millis) != value) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,356,if (get(instant) != value) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,302,"illis = iJulianField.set(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,303,f (millis >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,362,"instant = iJulianField.set(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,363,if (instant >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,305,f (millis - iGapMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,306,illis = julianToGregorian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,365,if (instant - iGapDuration >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,366,instant = julianToGregorian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,309,f (get(millis) != value) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,369,if (get(instant) != value) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,315,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,375,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,318,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,319,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,320,"illis = iGregorianField.set(millis, text, locale);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,321,f (millis < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,378,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,379,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,380,"instant = iGregorianField.set(instant, text, locale);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,381,if (instant < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,323,f (millis + iGapMillis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,324,illis = gregorianToJulian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,383,if (instant + iGapDuration < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,384,instant = gregorianToJulian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,329,illis = iJulianField.set
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,330,"millis, text, locale);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,331,f (millis >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,389,"instant = iJulianField.set(instant, text, locale);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,390,if (instant >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,333,f (millis - iGapMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,334,illis = julianToGregorian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,392,if (instant - iGapDuration >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,393,instant = julianToGregorian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,339,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,398,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,342,ublic boolean isLeap(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,343,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,344,eturn iGregorianField.isLeap(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,345, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,346,eturn iJulianField.isLeap(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,401,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,402,return iDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,405,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,406,DurationField rangeField = iGregorianField.getRangeDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,407,if (rangeField == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,408,rangeField = iJulianField.getRangeDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,410,return rangeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,350,ublic int getLeapAmount(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,351,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,352,eturn iGregorianField.getLeapAmount(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,413,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,414,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,415,return iGregorianField.isLeap(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,354,eturn iJulianField.getLeapAmount(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,417,return iJulianField.isLeap(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,358,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,359,"/ Since getUnitSize doesn't accept a millis argument, return"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,360,/ Gregorian unit size because it is more accurate.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,361,eturn iGregorianField.getUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,421,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,422,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,423,return iGregorianField.getLeapAmount(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,424,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,425,return iJulianField.getLeapAmount(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,364,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,365,eturn iGregorianField.getRangeMillis();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,429,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,430,return iGregorianField.getLeapDurationField();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,368,/ Note on getMinimumValue and getMaximumValue: For all fields but
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,369,"/ year, yearOfEra, and centuryOfEra, the Julian and Gregorian limits"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,370,/ are identical. The Julian limit is returned for getMaximumValue
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,371,/ because it is smaller than the Gregorian limit. This is to prevent
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,372,/ calling a field mutator that advances so far beyond the gap that the
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,373,/ Julian calendar overflows.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,435,"// For all precise fields, the Julian and Gregorian limits are"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,436,// identical. Choose Julian to tighten up the year limits.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,379,ublic int getMinimumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,380,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,381,eturn iGregorianField.getMinimumValue(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,382, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,383,eturn iJulianField.getMinimumValue(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,440,public int getMinimumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,441,if (instant < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,442,return iJulianField.getMinimumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,445,int min = iGregorianField.getMinimumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,447,"// Because the cutover may reduce the length of this field, verify"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,448,// the minimum by setting it.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,449,"instant = iGregorianField.set(instant, min);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,450,if (instant < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,451,min = iGregorianField.get(iCutover);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,454,return min;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,388,eturn iJulianField.getMaximumValue();
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,458,"// For all precise fields, the Julian and Gregorian limits are"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,459,// identical.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,460,return iGregorianField.getMaximumValue();
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,391,ublic int getMaximumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,392,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,393,eturn iGregorianField.getMaximumValue(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,394, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,395,eturn iJulianField.getMaximumValue(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,463,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,464,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,465,return iGregorianField.getMaximumValue(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,399,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,400,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,401,illis = iGregorianField.roundFloor(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,402,f (millis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,403,/ Only adjust if gap fully crossed.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,404,f (millis + iGapMillis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,405,illis = gregorianToJulian(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,408, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,409,illis = iJulianField.roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,468,int max = iJulianField.getMaximumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,470,"// Because the cutover may reduce the length of this field, verify"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,471,// the maximum by setting it.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,472,"instant = iJulianField.set(instant, max);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,473,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,474,"max = iJulianField.get(iJulianField.add(iCutover, -1));"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,411,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,477,return max;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,414,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,415,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,416,illis = iGregorianField.roundCeiling(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,417, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,418,illis = iJulianField.roundCeiling(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,419,f (millis >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,480,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,481,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,482,instant = iGregorianField.roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,483,if (instant < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,421,f (millis - iGapMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,422,illis = julianToGregorian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,485,if (instant + iGapDuration < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,486,instant = gregorianToJulian(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,489,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,490,instant = iJulianField.roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,426,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,492,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,429,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,430,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,431,illis = iGregorianField.remainder(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,432,f (millis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,433,/ Only adjust if gap fully crossed.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,434,f (millis + iGapMillis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,435,illis = gregorianToJulian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,495,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,496,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,497,instant = iGregorianField.roundCeiling(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,439,illis = iJulianField.remainder(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,440,f (millis >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,499,instant = iJulianField.roundCeiling(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,500,if (instant >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,442,f (millis - iGapMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,443,illis = julianToGregorian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,502,if (instant - iGapDuration >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,503,instant = julianToGregorian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,447,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,507,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,467,rivate class CutoverVarField extends CutoverField {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,468,"utoverVarField(DateTimeField julianField, DateTimeField gregorianField) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,527,private final class ImpreciseCutoverField extends CutoverField {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,528,static final long serialVersionUID = 3410248757173576441L;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,531,* Creates a duration field that links back to this.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,533,"ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,534,"this(julianField, gregorianField, null);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,538,* Uses a shared duration field rather than creating a new one.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,540,* @param durationField shared duration field
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,542,"ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,543,DurationField durationField)
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,546,if (durationField == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,547,"durationField = new LinkedDurationField(iDurationField, this);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,549,iDurationField = durationField;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,472,"ublic long add(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,473,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,474,"illis = iGregorianField.add(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,475,f (millis < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,552,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,553,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,554,"instant = iGregorianField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,555,if (instant < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,477,f (millis + iGapMillis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,478,illis = gregorianToJulian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,557,if (instant + iGapDuration < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,558,instant = gregorianToJulian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,482,"illis = iJulianField.add(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,483,f (millis >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,562,"instant = iJulianField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,563,if (instant >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,485,f (millis - iGapMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,486,illis = julianToGregorian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,565,if (instant - iGapDuration >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,566,instant = julianToGregorian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,490,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,570,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,493,"ublic long add(long millis, long value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,494,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,495,"illis = iGregorianField.add(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,496,f (millis < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,573,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,574,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,575,"instant = iGregorianField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,576,if (instant < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,498,f (millis + iGapMillis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,499,illis = gregorianToJulian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,578,if (instant + iGapDuration < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,579,instant = gregorianToJulian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,503,"illis = iJulianField.add(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,504,f (millis >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,583,"instant = iJulianField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,584,if (instant >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,506,f (millis - iGapMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,507,illis = julianToGregorian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,586,if (instant - iGapDuration >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,587,instant = julianToGregorian(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,511,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,591,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,514,"ublic long addWrapped(long millis, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,515,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,516,"illis = iGregorianField.addWrapped(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,517,f (millis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,518,/ Only adjust if gap fully crossed.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,519,f (millis + iGapMillis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,520,illis = gregorianToJulian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,594,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,595,if (minuendInstant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,596,if (subtrahendInstant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,597,"return iGregorianField.getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,599,"// Remember, the add is being reversed. Since subtrahend is"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,600,"// Julian, convert minuend to Julian to match."
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,601,minuendInstant = gregorianToJulian(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,602,"return iJulianField.getDifference(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,524,"illis = iJulianField.addWrapped(millis, value);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,525,f (millis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,526,/ Only adjust if gap fully crossed.
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,527,f (millis - iGapMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,528,illis = julianToGregorian(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,604,if (subtrahendInstant < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,605,"return iJulianField.getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,607,"// Remember, the add is being reversed. Since subtrahend is"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,608,"// Gregorian, convert minuend to Gregorian to match."
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,609,minuendInstant = julianToGregorian(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,610,"return iGregorianField.getDifference(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,532,eturn millis;
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,535,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,536,f (minuendMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,537,f (subtrahendMillis >= iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,538,"eturn iGregorianField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,614,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,615,if (minuendInstant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,616,if (subtrahendInstant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,617,"return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,542,inuendMillis = gregorianToJulian(minuendMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,543,"eturn iJulianField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,621,minuendInstant = gregorianToJulian(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,622,"return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,545,f (subtrahendMillis < iCutover) {
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,546,"eturn iJulianField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,624,if (subtrahendInstant < iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,625,"return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,550,inuendMillis = julianToGregorian(minuendMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,551,"eturn iGregorianField.getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,629,minuendInstant = julianToGregorian(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,630,"return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,634,// Since the imprecise fields have durations longer than the gap
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,635,"// duration, keep these methods simple. The inherited implementations"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,636,// produce incorrect results.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,638,"// Degenerate case: If this field is a month, and the cutover is set"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,639,"// far into the future, then the gap duration may be so large as to"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,640,// reduce the number of months in a year. If the missing month(s) are
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,641,"// at the beginning or end of the year, then the minimum and maximum"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,642,// values are not 1 and 12. I don't expect this case to ever occur.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,644,public int getMinimumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,645,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,646,return iGregorianField.getMinimumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,647,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,648,return iJulianField.getMinimumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,652,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,653,if (instant >= iCutover) {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,654,return iGregorianField.getMaximumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,655,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,656,return iJulianField.getMaximumValue(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,662,* Links the duration back to a ImpreciseCutoverField.
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,664,private static class LinkedDurationField extends DecoratedDurationField {
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,665,static final long serialVersionUID = 4097975388007713084L;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,667,private final ImpreciseCutoverField iField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,669,"LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,670,"super(durationField, durationField.getName());"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,671,iField = dateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,674,"public long add(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,675,"return iField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,678,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,679,"return iField.add(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,682,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,683,"return iField.getDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,686,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java,687,"return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,62,mport org.joda.time.chrono.NonZeroDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,62,import org.joda.time.chrono.RemainderDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,66, century of year ranges from 1 to 100.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,66,* year of century ranges from 1 to 100.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,74,static final long serialVersionUID = -8572000567534692411L;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,91,copyFields(chrono);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,89,YearField = chrono.year();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,90,YearOfEraField = chrono.yearOfEra();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,91,EraField = chrono.era();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,92,DayOfMonthField = chrono.dayOfMonth();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,93,DayOfWeekField = chrono.dayOfWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,94,DayOfYearField = chrono.dayOfYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,95,MonthOfYearField = chrono.monthOfYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,96,WeekOfWeekyearField = chrono.weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,97,WeekyearField = chrono.weekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,99,MillisOfSecondField = chrono.millisOfSecond();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,100,MillisOfDayField = chrono.millisOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,101,SecondOfMinuteField = chrono.secondOfMinute();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,102,SecondOfDayField = chrono.secondOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,103,MinuteOfHourField = chrono.minuteOfHour();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,104,MinuteOfDayField = chrono.minuteOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,105,HourOfDayField = chrono.hourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,106,HourOfHalfdayField = chrono.hourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,107,ClockhourOfDayField = chrono.clockhourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,108,ClockhourOfHalfdayField = chrono.clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,109,HalfdayOfDayField = chrono.halfdayOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,111,ateTimeField offsetYear =
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,112,"ew OffsetDateTimeField(""yearOfEra"", iYearOfEraField, 99);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,113,CenturyOfEraField =
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,114,"ew DividedDateTimeField(""centuryOfEra"", offsetYear, 100);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,115,YearOfCenturyField =
False,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,116,"ew NonZeroDateTimeField(""yearOfCentury"", chrono.yearOfCentury());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,93,"DateTimeField tempField = new OffsetDateTimeField(iYearOfEraField, """", 99);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,94,iCenturyOfEraField = new DividedDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,95,"(tempField, ""centuryOfEra"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,97,tempField = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,98,"((DividedDateTimeField)iCenturyOfEraField, """");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,99,"iYearOfCenturyField = new OffsetDateTimeField(tempField, ""yearOfCentury"", 1);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,106,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,107,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,109,"return iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,112,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,113,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,114,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,116,return iChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,117,"(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,120,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,121,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,122,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,124,"return iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,127,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,128,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,129,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,130,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,132,return iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,133,"(instant,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,134,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,137,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,138,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,139,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,140,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,142,return iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,143,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJCenturyChronology.java,144,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,65,// Import for @link support
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,66,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,69,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,72,import org.joda.time.format.DateTimePrinter;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,73,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,104,* <p>
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,105,* GJChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,113,static final long serialVersionUID = 3258844765135550418L;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,123,transient DurationField iYearsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,124,transient DurationField iCenturiesField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,125,transient DurationField iMonthsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,126,transient DurationField iWeekyearsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,128,transient DurationField iMillisField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,129,transient DurationField iSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,130,transient DurationField iMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,131,transient DurationField iHoursField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,132,transient DurationField iDaysField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,133,transient DurationField iWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,243,ong millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,265,long cutover;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,245,illis = gregorianCutover.getMillis();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,267,cutover = gregorianCutover.getMillis();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,247,illis = DEFAULT_CUTOVER;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,269,cutover = DEFAULT_CUTOVER;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,249,"eturn getInstance(zone, millis, centuryISO, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,271,"return getInstance(zone, cutover, centuryISO, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,298,"hrow new IllegalArgumentException(""The DateTimeZone must not be null"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,320,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,366,public DurationField millis() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,367,return iMillisField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,381,public DurationField seconds() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,382,return iSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,393,// Minutes
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,396,public DurationField minutes() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,397,return iMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,411,public DurationField hours() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,412,return iHoursField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,438,public DurationField days() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,439,return iDaysField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,457,public DurationField weeks() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,458,return iWeeksField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,465,public DurationField weekyears() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,466,return iWeekyearsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,476,public DurationField months() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,477,return iMonthsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,487,public DurationField years() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,488,return iYearsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,503,public DurationField centuries() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,504,return iCenturiesField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,515,// Output
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,518,* Gets a debugging toString.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,520,* @return a debugging string
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,522,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,523,StringBuffer sb = new StringBuffer(50);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,524,"sb.append(""GJChronology"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,525,sb.append('[');
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,526,sb.append(getDateTimeZone().getID());
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,527,"sb.append("", "");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,529,long cutover = getGregorianJulianCutoverMillis();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,530,if (cutover == Long.MAX_VALUE) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,531,"sb.append(""julian"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,532,} else if (cutover == Long.MIN_VALUE) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,533,"sb.append(""gregorian"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,534,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,535,"sb.append(""cutover="");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,536,ISODateTimeFormat format = ISODateTimeFormat.getInstance(withUTC());
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,537,DateTimePrinter printer;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,538,if (withUTC().getTimeOnlyMillis(cutover) == 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,539,printer = format.date();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,540,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,541,printer = format.dateTime();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,543,"printer.printTo(sb, cutover);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,546,"sb.append("", century="");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,547,"sb.append(isCenturyISO() ? ""iso"" : ""gj"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,549,"sb.append("", mdfw="");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,550,sb.append(getMinimumDaysInFirstWeek());
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,551,sb.append(']');
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,553,return sb.toString();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,571,* Used by subclass constructors to copy all the fields of another
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,572,* chronology into this one.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,574,void copyFields(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,575,iYearsField = chrono.years();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,576,iCenturiesField = chrono.centuries();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,577,iMonthsField = chrono.months();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,578,iWeekyearsField = chrono.weekyears();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,580,iMillisField = chrono.millis();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,581,iSecondsField = chrono.seconds();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,582,iMinutesField = chrono.minutes();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,583,iHoursField = chrono.hours();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,584,iDaysField = chrono.days();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,585,iWeeksField = chrono.weeks();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,587,iYearField = chrono.year();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,588,iYearOfEraField = chrono.yearOfEra();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,589,iYearOfCenturyField = chrono.yearOfCentury();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,590,iCenturyOfEraField = chrono.centuryOfEra();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,591,iEraField = chrono.era();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,592,iDayOfWeekField = chrono.dayOfWeek();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,593,iDayOfMonthField = chrono.dayOfMonth();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,594,iDayOfYearField = chrono.dayOfYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,595,iMonthOfYearField = chrono.monthOfYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,596,iWeekOfWeekyearField = chrono.weekOfWeekyear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,597,iWeekyearField = chrono.weekyear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,599,iMillisOfSecondField = chrono.millisOfSecond();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,600,iMillisOfDayField = chrono.millisOfDay();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,601,iSecondOfMinuteField = chrono.secondOfMinute();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,602,iSecondOfDayField = chrono.secondOfDay();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,603,iMinuteOfHourField = chrono.minuteOfHour();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,604,iMinuteOfDayField = chrono.minuteOfDay();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,605,iHourOfDayField = chrono.hourOfDay();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,606,iHourOfHalfdayField = chrono.hourOfHalfday();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,607,iClockhourOfDayField = chrono.clockhourOfDay();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,608,iClockhourOfHalfdayField = chrono.clockhourOfHalfday();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,609,iHalfdayOfDayField = chrono.halfdayOfDay();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,613,static final long serialVersionUID = -1220272966668670015L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,537,f (gregorianCutover == Long.MAX_VALUE) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,538,hrono = new JulianChronology(minDaysInFirstWeek);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,539, else if (gregorianCutover == Long.MIN_VALUE) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,540,hrono = new GregorianChronology(minDaysInFirstWeek);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,687,if (iZone != DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,688,chrono = GJChronology.getInstance
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,689,"(DateTimeZone.UTC, gregorianCutover, centuryISO, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,690,"chrono = new GJZonedChronology(chrono, iZone);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,542,ulianChronology julian_utc = (JulianChronology)GJChronology.getInstance
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,543,"DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,544,regorianChronology gregorian_utc = (GregorianChronology)GJChronology.getInstance
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,545,"DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,547,"hrono = new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,692,if (gregorianCutover == Long.MAX_VALUE) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,693,chrono = new JulianChronology(minDaysInFirstWeek);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,694,} else if (gregorianCutover == Long.MIN_VALUE) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,695,chrono = new GregorianChronology(minDaysInFirstWeek);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,696,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,697,JulianChronology julian_utc = (JulianChronology)GJChronology.getInstance
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,698,"(DateTimeZone.UTC, Long.MAX_VALUE, true, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,699,GregorianChronology gregorian_utc = (GregorianChronology)GJChronology.getInstance
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,700,"(DateTimeZone.UTC, Long.MIN_VALUE, true, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,702,"chrono = new CutoverChronology(julian_utc, gregorian_utc, gregorianCutover);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,550,f (!centuryISO) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,551,hrono = new GJCenturyChronology(chrono);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,705,if (!centuryISO) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,706,chrono = new GJCenturyChronology(chrono);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,554,f (iZone != DateTimeZone.UTC) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJChronology.java,555,"hrono = new GJZonedChronology(chrono, iZone);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,57,mport org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,58,import org.joda.time.chrono.PreciseDurationDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,59,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,67,inal class GJDayOfMonthDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,69,final class GJDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,71,static final long serialVersionUID = -4677223814028011723L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,72, Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,76,* Restricted constructor.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,74,JDayOfMonthDateTimeField(ProlepticChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,75,"uper(""dayOfMonth"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,78,"GJDayOfMonthDateTimeField(ProlepticChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,79,"super(""dayOfMonth"", days);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,82, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,86,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,85,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,86,eturn iChronology.getDayOfMonth(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,90, Add the specified day of the month to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,91, The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,93, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,94, @param days  the days to add to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,95, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,97,"ublic long add(long millis, int days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,98,eturn millis + days * (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,101,"ublic long add(long millis, long days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,102,eturn millis + days * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,106, Add to the day of the month component of the specified time instant
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,107, wrapping around within that component if necessary.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,108, The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,110, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,111, @param days  the days to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,112, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,114,"ublic long addWrapped(long millis, int days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,115,/ This method deviates from the normal logic found in
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,116,/ concrete subclasses of DateTimeField.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,117,/ This is because the maximum allowed day for a given
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,118,/ month must be calculated at run time.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,119,nt thisYear = iChronology.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,120,"nt thisMonth = iChronology.getMonthOfYear(millis, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,121,"nt thisDom = iChronology.getDayOfMonth(millis, thisYear, thisMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,122,nt wrappedDom = getWrappedValue
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,123,"thisDom, days, 1, iChronology.getDaysInYearMonth(thisYear, thisMonth));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,124,"eturn set(millis, wrappedDom);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,127,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,128,eturn (minuendMillis - subtrahendMillis) / DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,132, Set the day of the month component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,134, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,135," @param year  the day (1,28-31) to update the time to."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,136, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,137, @throws IllegalArgumentException  if day is is invalid for this year and month.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,139,"ublic long set(long millis, int day) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,140,nt thisYear = iChronology.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,141,"nt thisMonth = iChronology.getMonthOfYear(millis, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,142,"erifyValueBounds(day, 1, iChronology.getDaysInYearMonth(thisYear, thisMonth));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,143,"nt thisDom = iChronology.getDayOfMonth(millis, thisYear, thisMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,144,eturn millis + (day - thisDom) * (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,147,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,148,eturn DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,89,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,90,return iChronology.getDayOfMonth(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,151,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,152,eturn iChronology.getRoughMillisPerMonth();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,93,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,94,return iChronology.months();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,163,ublic int getMaximumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,164,nt thisYear = iChronology.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,165,"nt thisMonth = iChronology.getMonthOfYear(millis, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,105,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,106,int thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,107,"int thisMonth = iChronology.getMonthOfYear(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,169,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,170,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,171,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,172, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,173,illis += 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,174,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY - DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,178,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,179,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,180,illis -= 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,181,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY + DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,182, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,183,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,187,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,188,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,189,eturn millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,190, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfMonthDateTimeField.java,191,eturn (millis + 1) % DateTimeConstants.MILLIS_PER_DAY + DateTimeConstants.MILLIS_PER_DAY - 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,59,mport org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,60,import org.joda.time.chrono.PreciseDurationDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,61,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,70,inal class GJDayOfWeekDateTimeField extends DateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,72,rivate static final int MIN = DateTimeConstants.MONDAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,73,rivate static final int MAX = DateTimeConstants.SUNDAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,72,final class GJDayOfWeekDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,74,static final long serialVersionUID = -3857947176719041436L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,80,JDayOfWeekDateTimeField(ProlepticChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,81,"uper(""dayOfWeek"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,81,"GJDayOfWeekDateTimeField(ProlepticChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,82,"super(""dayOfWeek"", days);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,88, @param millis  the time instant in millis to query
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,89,* @param instant  the time instant in millis to query
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,91,ublic int get(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,92,public int get(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,95,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,96,aysSince19700101 = millis / DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,96,if (instant >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,97,daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,98,aysSince19700101 = (millis - (DateTimeConstants.MILLIS_PER_DAY - 1))
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,99,daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,111, @param millis  the time instant in millis to query
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,112,* @param instant  the time instant in millis to query
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,115,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,116,eturn GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(get(millis));
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,116,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,117,return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(get(instant));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,122, @param millis  the time instant in millis to query
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,123,* @param instant  the time instant in millis to query
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,126,"ublic String getAsShortText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,127,eturn GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(get(millis));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,131, Add to the value of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,132, The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,134, @param millis  the time instant in millis to update
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,135, @param day  the day of the week to add (can be negative)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,136, @return the updated time instant
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,138,"ublic long add(long millis, int days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,139,eturn millis + days * (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,142,"ublic long add(long millis, long days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,143,eturn millis + days * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,147, Add to the value of the specified time instant wrapping around
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,148, within that component if necessary.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,149, The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,151, @param millis  the time instant in millis to update
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,152, @param day  the day of the week to add (can be negative)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,153, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,155,"ublic long addWrapped(long millis, int days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,156,nt thisDow = get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,157,"nt wrappedDow = getWrappedValue(thisDow, days, MIN, MAX);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,158,/ copy code from set() to avoid repeat call to get()
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,159,eturn millis + (wrappedDow - thisDow) * (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,162,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,163,eturn (minuendMillis - subtrahendMillis) / DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,167, Set the value of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,169, @param millis  the time instant in millis to update
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,170," @param day  the day of the week (1,7) to update the time to"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,171, @return the updated time instant
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,172, @throws IllegalArgumentException  if day is invalid
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,174,"ublic long set(long millis, int day) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,175,"erifyValueBounds(day, MIN, MAX);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,176,nt thisDow = get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,177,eturn millis + (day - thisDow) * (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,127,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,128,return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(get(instant));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,183, @param millis  the time instant in millis to update
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,134,* @param instant  the time instant in millis to update
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,188,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,189,"eturn set(millis, GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,192,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,193,eturn DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,139,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,140,"return set(instant, GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,196,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,197,eturn DateTimeConstants.MILLIS_PER_WEEK;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,143,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,144,return iChronology.weeks();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,206,eturn MIN;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,153,return DateTimeConstants.MONDAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,215,eturn MAX;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,162,return DateTimeConstants.SUNDAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,238,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,239,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,240,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,241, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,242,illis += 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,243,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY - DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,247,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,248,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,249,illis -= 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,250,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY + DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,251, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,252,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,256,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,257,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,258,eturn millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,259, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfWeekDateTimeField.java,260,eturn (millis + 1) % DateTimeConstants.MILLIS_PER_DAY + (DateTimeConstants.MILLIS_PER_DAY - 1);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,57,mport org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,57,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,58,import org.joda.time.chrono.PreciseDurationDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,59,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,67,inal class GJDayOfYearDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,69,final class GJDayOfYearDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,71,static final long serialVersionUID = -6821236822336841037L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,73,JDayOfYearDateTimeField(ProlepticChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,74,"uper(""dayOfYear"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,78,"GJDayOfYearDateTimeField(ProlepticChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,79,"super(""dayOfYear"", days);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,81, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,86,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,84,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,85,ong dateMillis = iChronology.year().roundFloor(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,86,eturn (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,90, Add the specified day of the year to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,91, The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,93, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,94, @param days  the days to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,95, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,97,"ublic long add(long millis, int days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,98,eturn millis + days * (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,101,"ublic long add(long millis, long days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,102,eturn millis + days * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,106, Add to the day of the year component of the specified time instant
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,107, wrapping around within that component if necessary.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,109, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,110, @param years  the years to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,111, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,113,"ublic long addWrapped(long millis, int days) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,114,nt thisDoy = get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,115,"nt wrappedDoy = getWrappedValue(thisDoy, days, getMinimumValue(millis), getMaximumValue(millis));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,116,/ avoid recalculating fields in set
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,117,eturn millis + (wrappedDoy - thisDoy) * (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,89,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,90,long dateInstant = iChronology.year().roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,91,return (int) ((instant - dateInstant) / DateTimeConstants.MILLIS_PER_DAY) + 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,120,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,121,eturn (minuendMillis - subtrahendMillis) / DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,125, Set the day of the year component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,127, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,128," @param day  the day of the year (1,365/366) to update the time to."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,129, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,130, @throws IllegalArgumentException  if year is invalid.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,132,"ublic long set(long millis, int day) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,133,"erifyValueBounds(day, getMinimumValue(millis), getMaximumValue(millis));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,134,nt thisDoy = get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,135,eturn millis + (day - thisDoy) * (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,138,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,139,eturn DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,142,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,143,eturn iChronology.getRoughMillisPerYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,94,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,95,return iChronology.years();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,154,ublic int getMaximumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,155,nt thisYear = iChronology.year().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,106,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,107,int thisYear = iChronology.year().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,159,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,160,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,161,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,162, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,163,illis += 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,164,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY - DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,168,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,169,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,170,illis -= 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,171,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY + DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,172, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,173,eturn millis - millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,177,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,178,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,179,eturn millis % DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,180, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJDayOfYearDateTimeField.java,181,eturn (millis + 1) % DateTimeConstants.MILLIS_PER_DAY + (DateTimeConstants.MILLIS_PER_DAY - 1);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,59,mport org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,60,import org.joda.time.chrono.AbstractDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,61,import org.joda.time.chrono.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,62,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,69,inal class GJEraDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,72,final class GJEraDateTimeField extends AbstractDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,74,static final long serialVersionUID = 4240986525305515528L;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,86,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,87,return false;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,84, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,93,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,86,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,87,f (iChronology.year().get(millis) <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,95,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,96,if (iChronology.year().get(instant) <= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,94,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,95,eturn GJLocaleSymbols.forLocale(locale).eraValueToText(get(millis));
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,103,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,104,return GJLocaleSymbols.forLocale(locale).eraValueToText(get(instant));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,99, Unsupported - add the specified eras to the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,108,* Set the Era component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,101, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,102, @param eras
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,110,* @param instant  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,111,* @param era  the era to update the time to.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,113,* @throws IllegalArgumentException  if era is invalid.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,105,"ublic long add(long millis, int eras) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,106,"hrow new UnsupportedOperationException(""Adding to Era field is unsupported"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,109,"ublic long add(long millis, long value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,110,"hrow new UnsupportedOperationException(""Adding to Era field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,115,"public long set(long instant, int era) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,116,"Utils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,118,int oldEra = get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,119,if (oldEra != era) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,120,int year = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,121,"return iChronology.year().set(instant, -year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,122,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,123,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,114, Unsupported - add the specified eras to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,116, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,117, @param eras
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,118, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,120,"ublic long addWrapped(long millis, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,121,"hrow new UnsupportedOperationException(""Adding to Era field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,127,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,128,"return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,124,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,125,"hrow new UnsupportedOperationException(""Era field difference is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,131,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,132,if (get(instant) == DateTimeConstants.CE) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,133,"return iChronology.year().set(0, 1);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,134,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,135,return Long.MIN_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,129, Set the Era component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,131, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,132, @param era  the era to update the time to.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,133, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,134, @throws IllegalArgumentException  if era is invalid.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,136,"ublic long set(long millis, int era) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,137,"uper.verifyValueBounds(era, DateTimeConstants.BCE, DateTimeConstants.CE);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,139,nt oldEra = get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,140,f (oldEra != era) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,141,nt year = iChronology.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,142,"eturn iChronology.year().set(millis, -year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,139,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,140,if (get(instant) == DateTimeConstants.BCE) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,141,"return iChronology.year().set(0, 1);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,144,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,143,return Long.MAX_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,148,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,149,"eturn set(millis, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,147,public long roundHalfFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,148,"// In reality, the era is infinite, so there is no halfway point."
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,149,return roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,152,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,153,eturn Long.MAX_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,152,public long roundHalfCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,153,"// In reality, the era is infinite, so there is no halfway point."
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,154,return roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,156,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,157,"/ Should actually be double this, but that is not possible since Java"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,158,/ doesn't support unsigned types.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,159,eturn Long.MAX_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,157,public long roundHalfEven(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,158,"// In reality, the era is infinite, so there is no halfway point."
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,159,return roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,162,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,163,return UnsupportedDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,166,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,167,return null;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,175, Unsupported.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,177,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,178,"hrow new UnsupportedOperationException(""Rounding an Era field is unsupported"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,182, Unsupported.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,184,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJEraDateTimeField.java,185,"hrow new UnsupportedOperationException(""Calculating remainder from Era field is unsupported"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,57,import java.lang.ref.WeakReference;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,58,mport java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,59,import java.util.WeakHashMap;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,67,rivate static HashMap cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,68,private static final int FAST_CACHE_SIZE = 64;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,69,ublic static synchronized GJLocaleSymbols forLocale(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,70,JLocaleSymbols symbols = (GJLocaleSymbols)cCache.get(locale);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,71,f (symbols == null) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,72,ymbols = new GJLocaleSymbols(locale);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,73,"Cache.put(locale, symbols);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,70,private static final GJLocaleSymbols[] cFastCache = new GJLocaleSymbols[FAST_CACHE_SIZE];
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,72,private static WeakHashMap cCache = new WeakHashMap();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,74,public static GJLocaleSymbols forLocale(Locale locale) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,75,int index = System.identityHashCode(locale) & (FAST_CACHE_SIZE - 1);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,76,GJLocaleSymbols symbols = cFastCache[index];
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,77,if (symbols != null && symbols.iLocale.get() == locale) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,78,return symbols;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,80,synchronized (cCache) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,81,symbols = (GJLocaleSymbols) cCache.get(locale);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,82,if (symbols == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,83,symbols = new GJLocaleSymbols(locale);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,84,"cCache.put(locale, symbols);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,87,cFastCache[index] = symbols;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,121,private final WeakReference iLocale;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/gj/GJLocaleSymbols.java,142,iLocale = new WeakReference(locale);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,61,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,62,import org.joda.time.chrono.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,63,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,71,inal class GJMonthOfYearDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,74,final class GJMonthOfYearDateTimeField extends ImpreciseDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,76,static final long serialVersionUID = -4748157875845286249L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,81,"uper(""monthOfYear"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,87,"super(""monthOfYear"", ""months"", chronology.getRoughMillisPerMonth());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,91,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,92,return false;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,90, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,100,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,93,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,94,eturn iChronology.getMonthOfYear(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,103,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,104,return iChronology.getMonthOfYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,97,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,98,eturn GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(get(millis));
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,107,"public String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,108,return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(get(instant));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,101,"ublic String getAsShortText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,102,eturn GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(get(millis));
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,111,"public String getAsShortText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,112,return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(get(instant));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,116, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,126,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,120,"ublic long add(long millis, int months) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,130,"public long add(long instant, int months) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,122,eturn millis; // the easy case
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,132,return instant; // the easy case
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,127,ong timePart = iChronology.millisOfDay().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,137,long timePart = iChronology.millisOfDay().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,132,nt thisYear = iChronology.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,133,"nt thisMonth = iChronology.getMonthOfYear(millis, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,142,int thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,143,"int thisMonth = iChronology.getMonthOfYear(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,165,"nt dayToUse = iChronology.getDayOfMonth(millis, thisYear, thisMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,175,"int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,178,"ublic long add(long millis, long months) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,188,"public long add(long instant, long months) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,181,"eturn add(millis, i_months);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,191,"return add(instant, i_months);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,186,ong timePart = iChronology.millisOfDay().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,196,long timePart = iChronology.millisOfDay().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,188,nt thisYear = iChronology.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,189,"nt thisMonth = iChronology.getMonthOfYear(millis, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,198,int thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,199,"int thisMonth = iChronology.getMonthOfYear(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,219,"nt dayToUse = iChronology.getDayOfMonth(millis, thisYear, thisMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,229,"int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,236, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,246,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,240,"ublic long addWrapped(long millis, int months) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,241,"eturn set(millis, getWrappedValue(get(millis), months, MIN, MAX));"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,250,"public long addWrapped(long instant, int months) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,251,"return set(instant, Utils.getWrappedValue(get(instant), months, MIN, MAX));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,244,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,245,f (minuendMillis < subtrahendMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,246,"eturn -getDifference(subtrahendMillis, minuendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,254,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,255,if (minuendInstant < subtrahendInstant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,256,"return -getDifference(subtrahendInstant, minuendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,250,nt minuendYear = yearField.get(minuendMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,251,"nt minuendMonth = iChronology.getMonthOfYear(minuendMillis, minuendYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,252,nt subtrahendYear = yearField.get(subtrahendMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,253,"nt subtrahendMonth = iChronology.getMonthOfYear(subtrahendMillis, subtrahendYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,260,int minuendYear = yearField.get(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,261,"int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,262,int subtrahendYear = yearField.get(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,263,"int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,260,"minuendMillis, minuendYear, minuendMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,270,"(minuendInstant, minuendYear, minuendMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,264,"subtrahendMillis, subtrahendYear, subtrahendMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,274,"(subtrahendInstant, subtrahendYear, subtrahendMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,267,"ubtrahendMillis = iChronology.dayOfMonth().set(subtrahendMillis, minuendDom);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,277,"subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,272,ong minuendRem = minuendMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,282,long minuendRem = minuendInstant
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,274,ong subtrahendRem = subtrahendMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,284,long subtrahendRem = subtrahendInstant
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,292, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,302,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,297,"ublic long set(long millis, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,298,"uper.verifyValueBounds(month, MIN, MAX);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,307,"public long set(long instant, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,308,"Utils.verifyValueBounds(this, month, MIN, MAX);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,300,nt thisYear = iChronology.year().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,310,int thisYear = iChronology.year().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,302,"nt thisDom = iChronology.getDayOfMonth(millis, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,312,"int thisDom = iChronology.getDayOfMonth(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,310,Chronology.millisOfDay().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,320,iChronology.millisOfDay().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,323,"public long set(long instant, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,324,"return set(instant, GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text));"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,327,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,328,return iChronology.years();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,313,"ublic long set(long millis, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,314,"eturn set(millis, GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text));"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,331,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,332,int thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,333,"int thisMonth = iChronology.getMonthOfYear(instant, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,334,if (thisMonth != 2) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,335,return false;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,336,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,337,"return 29 == iChronology.getDaysInYearMonth(thisYear, thisMonth);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,317,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,318,eturn iChronology.getRoughMillisPerMonth();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,341,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,342,return isLeap(instant) ? 1 : 0;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,321,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,322,eturn iChronology.getRoughMillisPerYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,345,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,346,return iChronology.days();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,341,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,342,nt year = iChronology.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,343,"nt month = iChronology.getMonthOfYear(millis, year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,365,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,366,int year = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,367,"int month = iChronology.getMonthOfYear(instant, year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,347,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,348,eturn millis - roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,371,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJMonthOfYearDateTimeField.java,372,return instant - roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,58,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,59,import org.joda.time.chrono.PreciseDurationDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,60,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,68,inal class GJWeekOfWeekyearDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,71,final class GJWeekOfWeekyearDateTimeField extends PreciseDurationDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,70,rivate static final int MIN = 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,71,rivate static final int MAX = 53;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,73,static final long serialVersionUID = -1587436826395135328L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,78,JWeekOfWeekyearDateTimeField(ProlepticChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,79,"uper(""weekOfWeekyear"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,80,"GJWeekOfWeekyearDateTimeField(ProlepticChronology chronology, DurationField weeks) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,81,"super(""weekOfWeekyear"", weeks);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,87, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,89,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,90,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,91,nt year = iChronology.year().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,92,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,93,int year = iChronology.year().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,94,f (millis < firstWeekMillis1) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,96,if (instant < firstWeekMillis1) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,98,f (millis >= firstWeekMillis2) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,100,if (instant >= firstWeekMillis2) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,101,eturn (int) ((millis - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,103,return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,105, Add the specified weeks to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,106, <p>
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,107, The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,109, @see org.joda.time.DateTimeField#add
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,110, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,111, @param weeks  the weeks to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,112, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,114,"ublic long add(long millis, int weeks) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,115,/ Return newly calculated millis value
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,116,eturn millis + (weeks * (long)DateTimeConstants.MILLIS_PER_WEEK);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,106,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,107,return iChronology.weekyears();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,119,"ublic long add(long millis, long weeks) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,120,/ Return newly calculated millis value
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,121,eturn millis + (weeks * DateTimeConstants.MILLIS_PER_WEEK);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,110,"// 1970-01-01 is day of week 4, Thursday. The rounding methods need to"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,111,"// apply a corrective alignment since weeks begin on day of week 1, Monday."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,125, Add to the week component of the specified time instant
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,126, wrapping around within that component if necessary.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,128, @see org.joda.time.DateTimeField#addWrapped
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,129, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,130, @param years  the years to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,131, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,133,"ublic long addWrapped(long millis, int weeks) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,134,nt thisWeek = get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,135,"nt wrappedWeek = getWrappedValue(thisWeek, weeks, 1, getMaximumValue(millis));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,136,eturn millis + (wrappedWeek - thisWeek) * (long)DateTimeConstants.MILLIS_PER_WEEK;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,113,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,114,return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,115,- 3 * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,139,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,140,eturn (minuendMillis - subtrahendMillis) / DateTimeConstants.MILLIS_PER_WEEK;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,118,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,119,return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,120,- 3 * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,144, Set the week of a week based year component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,146, @see org.joda.time.DateTimeField#set
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,147, @param millis  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,148," @param week  the week (1,53) to update the time to."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,149, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,150, @throws IllegalArgumentException  if week is invalid.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,152,"ublic long set(long millis, int week) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,153,"erifyValueBounds(week, 1, getMaximumValue(millis));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,154,nt thisWeek = get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,155,eturn millis + (week - thisWeek) * (long)DateTimeConstants.MILLIS_PER_WEEK;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,158,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,159,eturn DateTimeConstants.MILLIS_PER_WEEK;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,162,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,163,eturn iChronology.getRoughMillisPerYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,123,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,124,return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,167,eturn MIN;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,128,return 1;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,171,eturn MAX;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,132,return 53;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,174,ublic int getMaximumValue(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,175,nt thisYear = iChronology.weekyear().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,135,public int getMaximumValue(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,136,int thisYear = iChronology.weekyear().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,179,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,180,ateTimeField dowField = iChronology.dayOfWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,181,illis = dowField.roundFloor(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,182,nt dow = dowField.get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,183,f (dow > 1) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,184,"illis = dowField.add(millis, 1 - dow);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,186,eturn millis;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,189,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekOfWeekyearDateTimeField.java,190,eturn millis - roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,58,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,59,import org.joda.time.chrono.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,60,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,69,inal class GJWeekyearDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,72,final class GJWeekyearDateTimeField extends ImpreciseDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,74,static final long serialVersionUID = 6215066916806820644L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,79,"uper(""weekyear"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,84,"super(""weekyear"", ""weekyears"", chronology.getRoughMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,88,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,89,return false;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,87, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,96,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,90,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,91,nt week = iChronology.weekOfWeekyear().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,99,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,100,int week = iChronology.weekOfWeekyear().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,93,eturn iChronology.year().get(millis + DateTimeConstants.MILLIS_PER_WEEK);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,102,return iChronology.year().get(instant + DateTimeConstants.MILLIS_PER_WEEK);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,95,eturn iChronology.year().get(millis - (2 * DateTimeConstants.MILLIS_PER_WEEK));
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,104,return iChronology.year().get(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,97,eturn iChronology.year().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,106,return iChronology.year().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,105, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,114,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,109,"ublic long add(long millis, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,118,"public long add(long instant, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,111,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,120,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,113,"eturn set(millis, get(millis) + years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,122,"return set(instant, get(instant) + years);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,116,"ublic long add(long millis, long value) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,117,"eturn addLong(millis, value);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,125,"public long add(long instant, long value) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,126,"return add(instant, Utils.safeToInt(value));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,125, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,134,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,129,"ublic long addWrapped(long millis, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,130,"eturn add(millis, years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,138,"public long addWrapped(long instant, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,139,"return add(instant, years);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,133,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,134,f (minuendMillis < subtrahendMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,135,"eturn -getDifference(subtrahendMillis, minuendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,142,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,143,if (minuendInstant < subtrahendInstant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,144,"return -getDifference(subtrahendInstant, minuendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,138,nt minuendWeekyear = get(minuendMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,139,nt subtrahendWeekyear = get(subtrahendMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,147,int minuendWeekyear = get(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,148,int subtrahendWeekyear = get(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,141,ong minuendRem = remainder(minuendMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,142,ong subtrahendRem = remainder(subtrahendMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,150,long minuendRem = remainder(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,151,long subtrahendRem = remainder(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,160, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,169,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,165,"ublic long set(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,166,"uper.verifyValueBounds(Math.abs(year),"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,174,"public long set(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,175,"Utils.verifyValueBounds(this, Math.abs(year),"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,171,nt thisWeekyear = get( millis );
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,180,int thisWeekyear = get( instant );
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,173,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,182,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,178,nt thisDow = iChronology.dayOfWeek().get( millis );
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,187,int thisDow = iChronology.dayOfWeek().get( instant );
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,192,nt setToWeek = iChronology.weekOfWeekyear().get( millis );
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,201,int setToWeek = iChronology.weekOfWeekyear().get( instant );
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,200,ong workMillis = millis; // Get a copy
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,209,long workInstant = instant; // Get a copy
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,206,"orkMillis = iChronology.year().set( workMillis, year );"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,215,"workInstant = iChronology.year().set( workInstant, year );"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,211,nt workWoyYear = iChronology.weekyear().get( workMillis );
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,213,/ *TEMP Debugging
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,215,"utableDateTime temp = new MutableDateTime(workMillis,"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,216,SOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,217,"ystem.out.println(""Current mdt value 01: """
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,218, temp
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,219," "" "" + workWoyYear"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,221,"ystem.out.println(""->Temp: "" + temp.toString()"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,222," "" WOYYr="" + temp.getWeekyear()"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,223," "" WOYWk="" + temp.getWeekOfWeekyear()"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,224," "" DoW="" + temp.getDayOfWeek()"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,220,int workWoyYear = iChronology.weekyear().get( workInstant );
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,233,"/ System.out.println(""Year: Adding ""+workWoyYear+"" ""+year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,234,orkMillis += DateTimeConstants.MILLIS_PER_WEEK;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,227,workInstant += DateTimeConstants.MILLIS_PER_WEEK;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,236,"/ System.out.println(""Year: Subing ""+workWoyYear+"" ""+year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,237,orkMillis -= DateTimeConstants.MILLIS_PER_WEEK;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,229,workInstant -= DateTimeConstants.MILLIS_PER_WEEK;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,244,nt currentWoyWeek = iChronology.weekOfWeekyear().get( workMillis );
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,236,int currentWoyWeek = iChronology.weekOfWeekyear().get( workInstant );
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,246,orkMillis = workMillis + (setToWeek - currentWoyWeek)
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,238,workInstant = workInstant + (setToWeek - currentWoyWeek)
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,253,"orkMillis = iChronology.dayOfWeek().set( workMillis, thisDow );"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,245,"workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,257,eturn workMillis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,249,return workInstant;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,252,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,253,return null;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,256,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,257,return iChronology.weekOfWeekyear().getMaximumValue(instant) > 52;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,260,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,261,eturn iChronology.getRoughMillisPerYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,260,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,261,return iChronology.weekOfWeekyear().getMaximumValue(instant) - 52;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,264,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,265,"/ Should actually be double this, but that is not possible since Java"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,266,/ doesn't support unsigned types.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,267,eturn Long.MAX_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,264,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,265,return iChronology.weeks();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,278,ublic long roundFloor(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,276,public long roundFloor(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,280,illis = wowField.roundFloor(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,281,nt wow = wowField.get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,278,instant = wowField.roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,279,int wow = wowField.get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,283,"illis = wowField.add(millis, 1 - wow);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,281,"instant = wowField.add(instant, 1 - wow);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,285,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,283,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,288,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,289,eturn millis - roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,286,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJWeekyearDateTimeField.java,287,return instant - roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,58,mport org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,58,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,59,import org.joda.time.chrono.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,60,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,68,inal class GJYearDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,70,final class GJYearDateTimeField extends ImpreciseDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,72,static final long serialVersionUID = -679076949530018869L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,73,rivate final transient long iRoughMillisPerYear;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,79,"uper(""year"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,82,"super(""year"", ""years"", chronology.getRoughMillisPerYear());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,81,RoughMillisPerYear = chronology.getRoughMillisPerYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,86,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,87,return false;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,87, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,93,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,90,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,91,"/ Get an initial estimate of the year, and the millis value"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,92,/ that represents the start of that year.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,93,nt year = 1970 + (int) (millis / iRoughMillisPerYear);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,94,ong yearStartMillis = iChronology.getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,96,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,97,"// Get an initial estimate of the year, and the millis value that"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,98,// represents the start of that year. Then verify estimate and fix if
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,99,// necessary.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,96,f (millis > yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,97,or (;;) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,98,/ Actual year may be greater than what we estimated. Check if
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,99,/ year should advance.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,100,f (iChronology.isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,101,earStartMillis += DateTimeConstants.MILLIS_PER_DAY * 366L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,102, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,103,earStartMillis += DateTimeConstants.MILLIS_PER_DAY * 365L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,105,f (millis < yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,106,"/ Year was correct, no need to advance."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,107,reak;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,109,ear++;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,110,f (millis == yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,111,"/ Millis is at start of year; year is now correct, so no"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,112,/ need to check anymore.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,113,reak;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,115,f ((millis ^ yearStartMillis) < 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,116,"/ Sign mismatch, operation overflowed."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,117,eturn getOverflow(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,101,int year;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,103,long unitMillis = getDurationUnitMillis();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,104,if (instant >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,105,year = 1970 + (int) (instant / unitMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,106,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,107,year = 1970 + (int) ((instant - unitMillis + 1) / unitMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,110,long yearStart = iChronology.getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,111,if ((yearStart ^ instant) < 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,112,"// Sign mismatch, operation overflowed."
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,113,return getOverflow(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,116,long diff = instant - yearStart;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,118,if (diff < 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,119,// Subtract one year to fix estimate.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,120,year--;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,121,} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,122,// One year may need to be added to fix estimate.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,123,long oneYear;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,124,if (iChronology.isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,125,oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,126,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,127,oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,120, else if (millis < yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,121,or (;;) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,122,/ Actual year less than what we estimated. Go to previous year
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,123,/ and check.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,124,ear--;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,125,f (iChronology.isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,126,earStartMillis -= DateTimeConstants.MILLIS_PER_DAY * 366L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,127, else {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,128,earStartMillis -= DateTimeConstants.MILLIS_PER_DAY * 365L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,130,f (millis >= yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,131,/ Year is now correct.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,132,reak;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,134,f ((millis ^ yearStartMillis) < 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,135,"/ Sign mismatch, operation overflowed."
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,136,eturn getOverflow(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,130,yearStart += oneYear;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,131,if ((yearStart ^ instant) < 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,132,"// Sign mismatch, operation overflowed."
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,133,return getOverflow(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,136,if (yearStart <= instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,137,"// Didn't go too far, so actually add one year."
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,138,year++;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,144,rivate int getOverflow(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,145,f (millis > 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,145,private int getOverflow(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,146,if (instant > 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,155,f (millis <= yearEndMillis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,156,if (instant <= yearEndMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,160,"""Instant too large: "" + millis + "" > "" + yearEndMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,161,"(""Instant too large: "" + instant + "" > "" + yearEndMillis);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,164,f (millis >= yearStartMillis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,165,if (instant >= yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,169,"""Instant too small: "" + millis + "" < "" + yearStartMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,170,"(""Instant too small: "" + instant + "" < "" + yearStartMillis);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,177, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,178,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,181,"ublic long add(long millis, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,182,"public long add(long instant, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,183,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,184,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,185,nt thisYear = get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,186,int thisYear = get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,187,"eturn set(millis, newYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,188,"return set(instant, newYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,190,"ublic long add(long millis, long years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,191,"eturn addLong(millis, years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,191,"public long add(long instant, long years) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,192,"return add(instant, Utils.safeToInt(years));"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,198, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,199,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,202,"ublic long addWrapped(long millis, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,203,"public long addWrapped(long instant, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,204,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,205,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,207,nt thisYear = iChronology.year().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,208,nt wrappedYear = getWrappedValue
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,208,int thisYear = iChronology.year().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,209,int wrappedYear = Utils.getWrappedValue
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,210,"eturn set(millis, wrappedYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,211,"return set(instant, wrappedYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,213,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,214,f (minuendMillis < subtrahendMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,215,"eturn -getDifference(subtrahendMillis, minuendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,214,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,215,if (minuendInstant < subtrahendInstant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,216,"return -getDifference(subtrahendInstant, minuendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,218,nt minuendYear = get(minuendMillis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,219,nt subtrahendYear = get(subtrahendMillis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,219,int minuendYear = get(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,220,int subtrahendYear = get(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,222,ong minuendRem = minuendMillis - iChronology.getYearMillis(minuendYear);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,223,ong subtrahendRem = subtrahendMillis - iChronology.getYearMillis(subtrahendYear);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,223,long minuendRem = minuendInstant - iChronology.getYearMillis(minuendYear);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,224,long subtrahendRem = subtrahendInstant - iChronology.getYearMillis(subtrahendYear);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,246, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,247,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,251,"ublic long set(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,252,"uper.verifyValueBounds(year, iChronology.getMinYear(), iChronology.getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,252,"public long set(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,253,Utils.verifyValueBounds
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,254,"(this, year, iChronology.getMinYear(), iChronology.getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,254,nt dayOfYear = iChronology.dayOfYear().get(millis);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,255,nt millisOfDay = iChronology.millisOfDay().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,256,int dayOfYear = iChronology.dayOfYear().get(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,257,int millisOfDay = iChronology.millisOfDay().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,258,f (isLeap(millis)) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,260,if (isLeap(instant)) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,273,"illis = iChronology.getYearMonthDayMillis(year, 1, dayOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,274,illis += millisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,275,"instant = iChronology.getYearMonthDayMillis(year, 1, dayOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,276,instant += millisOfDay;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,276,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,278,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,279,ublic boolean isLeap(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,280,eturn iChronology.isLeapYear(get(millis));
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,281,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,282,return null;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,283,ublic int getLeapAmount(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,284,f (iChronology.isLeapYear(get(millis))) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,285,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,286,return iChronology.isLeapYear(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,289,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,290,if (iChronology.isLeapYear(get(instant))) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,291,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,292,eturn iRoughMillisPerYear;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,295,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,296,"/ Should actually be double this, but that is not possible since Java"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,297,/ doesn't support unsigned types.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,298,eturn Long.MAX_VALUE;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,297,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,298,return iChronology.days();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,309,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,310,eturn iChronology.getYearMillis(get(millis));
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,309,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,310,return iChronology.getYearMillis(get(instant));
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,313,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,314,nt year = get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,313,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,314,int year = get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,316,f (millis != yearStartMillis) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,316,if (instant != yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,318,illis = iChronology.getYearMillis(year + 1);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,318,instant = iChronology.getYearMillis(year + 1);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,320,eturn millis;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,320,return instant;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,323,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,324,eturn millis - roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,323,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearDateTimeField.java,324,return instant - roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,59,import org.joda.time.chrono.DecoratedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,60,import org.joda.time.chrono.Utils;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,65,inal class GJYearOfEraDateTimeField extends DateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,67,final class GJYearOfEraDateTimeField extends DecoratedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,69,static final long serialVersionUID = -5961050944769862059L;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,69, Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,74,* Restricted constructor.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,71,JYearOfEraDateTimeField(ProlepticChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,72,"uper(""yearOfEra"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,76,"GJYearOfEraDateTimeField(DateTimeField yearField, ProlepticChronology chronology) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,77,"super(yearField, ""yearOfEra"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,79, @param millis  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,84,* @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,82,ublic int get(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,83,nt year = iChronology.year().get(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,87,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,88,int year = getWrappedField().get(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,94, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,99,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,98,"ublic long add(long millis, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,99,"eturn iChronology.year().add(millis, years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,103,"public long add(long instant, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,104,"return getWrappedField().add(instant, years);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,102,"ublic long add(long millis, long years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,103,"eturn addLong(millis, years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,107,"public long add(long instant, long years) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,108,"return getWrappedField().add(instant, years);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,110, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,115,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,114,"ublic long addWrapped(long millis, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,115,"eturn iChronology.year().addWrapped(millis, years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,119,"public long addWrapped(long instant, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,120,"return getWrappedField().addWrapped(instant, years);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,123,"public int getDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,124,"return getWrappedField().getDifference(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,118,"ublic long getDifference(long minuendMillis, long subtrahendMillis) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,119,"eturn iChronology.year().getDifference(minuendMillis, subtrahendMillis);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,127,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,128,"return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,125, @param millis  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,134,* @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,130,"ublic long set(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,131,"uper.verifyValueBounds(year, 1, iChronology.getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,132,f (iChronology.era().get(millis) == DateTimeConstants.BCE) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,133,"eturn iChronology.year().set(millis, 1 - year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,139,"public long set(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,140,"Utils.verifyValueBounds(this, year, 1, getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,141,if (iChronology.era().get(instant) == DateTimeConstants.BCE) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,142,"return super.set(instant, 1 - year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,135,"eturn iChronology.year().set(millis, year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,144,"return super.set(instant, year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,139,ublic long getUnitMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,140,eturn iChronology.getRoughMillisPerYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,143,ublic long getRangeMillis() {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,144,eturn Long.MAX_VALUE;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,152,eturn iChronology.getMaxYear();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,153,return getWrappedField().getMaximumValue();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,155,ublic long roundFloor(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,156,eturn iChronology.year().roundFloor(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,156,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,157,return getWrappedField().roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,159,ublic long roundCeiling(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,160,eturn iChronology.year().roundCeiling(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,160,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,161,return getWrappedField().roundCeiling(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,163,ublic long remainder(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,164,eturn iChronology.year().remainder(millis);
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,164,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/gj/GJYearOfEraDateTimeField.java,165,return getWrappedField().remainder(instant);
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,61, A specialism of zoned chronology for the GJ chronology.
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,61,* A special zoned chronology for the GJ chronology.
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,67,lass GJZonedChronology extends GJChronology {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,67,final class GJZonedChronology extends GJChronology {
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,69,static final long serialVersionUID = -4148749408058922172L;
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,73,private final ZonedChronology iZonedChronology;
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,75,"hronology zc = new ZonedChronology(chrono, zone);"
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,77,YearField = zc.year();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,78,YearOfEraField = zc.yearOfEra();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,79,YearOfCenturyField = zc.yearOfCentury();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,80,CenturyOfEraField = zc.centuryOfEra();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,81,EraField = zc.era();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,82,DayOfMonthField = zc.dayOfMonth();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,83,DayOfWeekField = zc.dayOfWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,84,DayOfYearField = zc.dayOfYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,85,MonthOfYearField = zc.monthOfYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,86,WeekOfWeekyearField = zc.weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,87,WeekyearField = zc.weekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,89,MillisOfSecondField = zc.millisOfSecond();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,90,MillisOfDayField = zc.millisOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,91,SecondOfMinuteField = zc.secondOfMinute();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,92,SecondOfDayField = zc.secondOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,93,MinuteOfHourField = zc.minuteOfHour();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,94,MinuteOfDayField = zc.minuteOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,95,HourOfDayField = zc.hourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,96,HourOfHalfdayField = zc.hourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,97,ClockhourOfDayField = zc.clockhourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,98,ClockhourOfHalfdayField = zc.clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,99,HalfdayOfDayField = zc.halfdayOfDay();
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,78,"copyFields(iZonedChronology = new ZonedChronology(chrono, zone));"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,89,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,90,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,92,"return iZonedChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,95,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,96,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,97,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,99,return iZonedChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,100,"(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,103,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,104,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,105,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,107,"return iZonedChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,110,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,111,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,112,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,113,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,115,return iZonedChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,116,"(instant,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,117,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,120,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,121,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,122,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,123,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,125,return iZonedChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,126,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GJZonedChronology.java,127,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/GregorianChronology.java,66,static final long serialVersionUID = 3691407383323710523L;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,58,mport org.joda.time.chrono.DelegateDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,58,import org.joda.time.chrono.DelegatedDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,59,import org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,68,static final long serialVersionUID = -8731039522547897247L;
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,79,copyFields(chrono);
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,81,// Override only the fields that differ.
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,77,YearOfEraField = chrono.yearOfEra();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,78,YearOfCenturyField = chrono.yearOfCentury();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,79,CenturyOfEraField = chrono.centuryOfEra();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,80,EraField = chrono.era();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,81,DayOfMonthField = chrono.dayOfMonth();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,82,DayOfWeekField = chrono.dayOfWeek();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,83,DayOfYearField = chrono.dayOfYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,84,MonthOfYearField = chrono.monthOfYear();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,85,WeekOfWeekyearField = chrono.weekOfWeekyear();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,88,MillisOfSecondField = chrono.millisOfSecond();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,89,MillisOfDayField = chrono.millisOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,90,SecondOfMinuteField = chrono.secondOfMinute();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,91,SecondOfDayField = chrono.secondOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,92,MinuteOfHourField = chrono.minuteOfHour();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,93,MinuteOfDayField = chrono.minuteOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,94,HourOfDayField = chrono.hourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,95,HourOfHalfdayField = chrono.hourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,96,ClockhourOfDayField = chrono.clockhourOfDay();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,97,ClockhourOfHalfdayField = chrono.clockhourOfHalfday();
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,98,HalfdayOfDayField = chrono.halfdayOfDay();
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,91,"public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,92,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,94,year = adjustYearForSet(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,95,"return iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,98,"public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,99,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,100,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,102,return iChronology.getTimeOnlyMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,103,"(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,106,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,107,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,108,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,110,year = adjustYearForSet(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,111,"return iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,114,"public long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,115,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,116,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,117,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,119,return iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,120,"(instant,"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,121,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,124,"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,125,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,126,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,127,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,129,year = adjustYearForSet(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,130,return iChronology.getDateTimeMillis
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,131,"(year, monthOfYear, dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,132,"hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,117,rivate class NoYearZeroField extends DelegateDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,147,int adjustYearForSet(int year) {
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,148,if (year <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,149,if (year == 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,150,"throw new IllegalArgumentException(""Invalid year: "" + year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,152,year++;
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,154,return year;
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,157,private class NoYearZeroField extends DelegatedDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,158,static final long serialVersionUID = -8869148464118507846L;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,134,"uper.verifyValueBounds(year, iMinYear, getMaximumValue());"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,135,f (year <= 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,136,f (year == 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,137,"hrow new IllegalArgumentException(""Invalid year: "" + year);"
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,139,ear++;
False,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,141,"eturn super.set(millis, year);"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,176,"Utils.verifyValueBounds(this, year, iMinYear, getMaximumValue());"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,177,"return super.set(millis, adjustYearForSet(year));"
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianChronology.java,190,static final long serialVersionUID = -5013429014495501104L;
True,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/JulianWithYearZeroChronology.java,67,static final long serialVersionUID = 9044685826106463217L;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,61,import org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,62,mport org.joda.time.chrono.FractionalDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,63,/import org.joda.time.chrono.OneBasedFractionalDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,63,import org.joda.time.chrono.MillisDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,66,import org.joda.time.chrono.PreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,67,import org.joda.time.chrono.PreciseDurationField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,68,import org.joda.time.chrono.Utils;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,80,static final long serialVersionUID = 541866437970475456L;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,99,private static final DurationField cMillisField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,100,private static final DurationField cSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,101,private static final DurationField cMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,102,private static final DurationField cHoursField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,103,private static final DurationField cHalfdaysField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,104,private static final DurationField cDaysField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,105,private static final DurationField cWeeksField;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,123,MillisOfSecondField = new FractionalDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,124,"""millisOfSecond"","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,125,","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,126,ateTimeConstants.MILLIS_PER_SECOND);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,128,MillisOfDayField = new FractionalDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,129,"""millisOfDay"","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,130,","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,131,ateTimeConstants.MILLIS_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,133,SecondOfMinuteField = new FractionalDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,134,"""secondOfMinute"","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,135,"ateTimeConstants.MILLIS_PER_SECOND,"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,136,ateTimeConstants.SECONDS_PER_MINUTE);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,138,SecondOfDayField = new FractionalDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,139,"""secondOfDay"","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,140,"ateTimeConstants.MILLIS_PER_SECOND,"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,141,ateTimeConstants.SECONDS_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,143,MinuteOfHourField = new FractionalDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,144,"""minuteOfHour"","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,145,"ateTimeConstants.MILLIS_PER_MINUTE,"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,146,ateTimeConstants.MINUTES_PER_HOUR);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,148,MinuteOfDayField = new FractionalDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,149,"""minuteOfDay"","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,150,"ateTimeConstants.MILLIS_PER_MINUTE,"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,151,ateTimeConstants.MINUTES_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,153,HourOfDayField = new FractionalDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,154,"""hourOfDay"","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,155,"ateTimeConstants.MILLIS_PER_HOUR,"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,156,ateTimeConstants.HOURS_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,158,HourOfHalfdayField = new FractionalDateTimeField
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,159,"""hourOfHalfday"","
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,160,"ateTimeConstants.MILLIS_PER_HOUR,"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,161,ateTimeConstants.HOURS_PER_DAY / 2);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,137,cMillisField = MillisDurationField.INSTANCE;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,138,cSecondsField = new PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,139,"(""seconds"", DateTimeConstants.MILLIS_PER_SECOND);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,140,cMinutesField = new PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,141,"(""minutes"", DateTimeConstants.MILLIS_PER_MINUTE);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,142,cHoursField = new PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,143,"(""hours"", DateTimeConstants.MILLIS_PER_HOUR);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,144,cHalfdaysField = new PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,145,"(""halfdays"", DateTimeConstants.MILLIS_PER_DAY / 2);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,146,cDaysField = new PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,147,"(""days"", DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,148,cWeeksField = new PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,149,"(""weeks"", DateTimeConstants.MILLIS_PER_WEEK);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,151,cMillisOfSecondField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,152,"(""millisOfSecond"", cMillisField, cSecondsField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,154,cMillisOfDayField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,155,"(""millisOfDay"", cMillisField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,157,cSecondOfMinuteField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,158,"(""secondOfMinute"", cSecondsField, cMinutesField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,160,cSecondOfDayField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,161,"(""secondOfDay"", cSecondsField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,163,cMinuteOfHourField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,164,"(""minuteOfHour"", cMinutesField, cHoursField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,166,cMinuteOfDayField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,167,"(""minuteOfDay"", cMinutesField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,169,cHourOfDayField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,170,"(""hourOfDay"", cHoursField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,172,cHourOfHalfdayField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,173,"(""hourOfHalfday"", cHoursField, cHalfdaysField);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,164,"""clockhourOfDay"", cHourOfDayField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,176,"(cHourOfDayField, ""clockhourOfDay"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,167,"""clockhourOfHalfday"", cHourOfHalfdayField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,179,"(cHourOfHalfdayField, ""clockhourOfHalfday"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,181,"nteger i = Integer.getInteger(""org.joda.time.gj.ProlepticChronology.yearInfoCacheSize"");"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,182,nt cacheSize = (i == null) ? 1024 : i.intValue();
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,183,/ Ensure cache size is even power of 2.
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,184,acheSize--;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,185,nt shift = 0;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,186,hile (cacheSize > 0) {
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,187,hift++;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,188,acheSize >>= 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,193,Integer i;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,194,try {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,195,"i = Integer.getInteger(""org.joda.time.gj.ProlepticChronology.yearInfoCacheSize"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,196,} catch (SecurityException e) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,197,i = null;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,190,acheSize = 1 << shift;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,200,int cacheSize;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,201,if (i == null) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,202,cacheSize = 1024; // (1 << 10)
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,203,} else {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,204,cacheSize = i.intValue();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,205,// Ensure cache size is even power of 2.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,206,cacheSize--;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,207,int shift = 0;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,208,while (cacheSize > 0) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,209,shift++;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,210,cacheSize >>= 1;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,212,cacheSize = 1 << shift;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,194,YearField = new GJYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,195,YearOfEraField = new GJYearOfEraDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,218,// First copy fields that are the same for all Gregorian and Julian
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,219,// chronologies.
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,197,"CenturyOfEraField = new DividedDateTimeField(""centuryOfEra"", iYearOfEraField, 100);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,198,"YearOfCenturyField = new RemainderDateTimeField(""yearOfCentury"", iYearOfEraField, 100);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,200,EraField = new GJEraDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,201,DayOfWeekField = new GJDayOfWeekDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,202,DayOfMonthField = new GJDayOfMonthDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,203,DayOfYearField = new GJDayOfYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,204,MonthOfYearField = new GJMonthOfYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,205,WeekOfWeekyearField = new GJWeekOfWeekyearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,206,WeekyearField = new GJWeekyearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,221,iMillisField = cMillisField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,222,iSecondsField = cSecondsField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,223,iMinutesField = cMinutesField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,224,iHoursField = cHoursField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,225,//iHalfdaysField = cHalfdaysField;  Doesn't exist in public interface
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,226,iDaysField = cDaysField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,227,iWeeksField = cWeeksField;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,241,// Now create fields that have unique behavior for Gregorian and Julian
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,242,// chronologies.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,244,iYearField = new GJYearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,245,"iYearOfEraField = new GJYearOfEraDateTimeField(iYearField, this);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,247,iCenturyOfEraField = new DividedDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,248,"(iYearOfEraField, ""centuryOfEra"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,249,iYearOfCenturyField = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,250,"((DividedDateTimeField)iCenturyOfEraField, ""yearOfCentury"");"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,252,iEraField = new GJEraDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,253,"iDayOfWeekField = new GJDayOfWeekDateTimeField(this, iDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,254,"iDayOfMonthField = new GJDayOfMonthDateTimeField(this, iDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,255,"iDayOfYearField = new GJDayOfYearDateTimeField(this, iDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,256,iMonthOfYearField = new GJMonthOfYearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,257,iWeekyearField = new GJWeekyearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,258,"iWeekOfWeekyearField = new GJWeekOfWeekyearDateTimeField(this, iWeeksField);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,260,// The remaining (imprecise) durations are available from the newly
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,261,// created datetime fields.
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,263,iYearsField = iYearField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,264,iCenturiesField = iCenturyOfEraField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,265,iMonthsField = iMonthOfYearField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,266,iWeekyearsField = iWeekyearField.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,274,* Override the default implementation
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,276,"public final long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,277,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,279,boolean isLeap = isLeapYear(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,281,"Utils.verifyValueBounds(""monthOfYear"", monthOfYear, 1, 12);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,282,"Utils.verifyValueBounds(""dayOfMonth"", dayOfMonth, 1,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,283,(isLeap ? MAX_DAYS_PER_MONTH_ARRAY : MIN_DAYS_PER_MONTH_ARRAY)
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,284,[monthOfYear - 1]);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,286,long instant = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,288,if (monthOfYear > 1) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,289,instant +=
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,290,(isLeap ? MAX_TOTAL_MILLIS_BY_MONTH_ARRAY : MIN_TOTAL_MILLIS_BY_MONTH_ARRAY)
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,291,[monthOfYear - 2];
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,294,if (dayOfMonth != 1) {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,295,instant += (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,298,return instant;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,302,* Override the default implementation
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,304,"public final long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,305,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,306,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,309,"Utils.verifyValueBounds(""hourOfDay"", hourOfDay, 0, 23);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,310,"Utils.verifyValueBounds(""minuteOfHour"", minuteOfHour, 0, 59);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,311,"Utils.verifyValueBounds(""secondOfMinute"", secondOfMinute, 0, 59);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,312,"Utils.verifyValueBounds(""millisOfSecond"", millisOfSecond, 0, 999);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,314,return hourOfDay * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,315,+ minuteOfHour * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,316,+ secondOfMinute * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,317,+ millisOfSecond;
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,321,* Override the default implementation
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,323,"public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,324,int millisOfDay)
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,325,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,327,"Utils.verifyValueBounds(""millisOfDay"", millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,328,"return getDateOnlyMillis(year, monthOfYear, dayOfMonth) + millisOfDay;"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,332,* Override the default implementation
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,334,"public final long getDateTimeMillis(long instant,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,335,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,336,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,337,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,339,return getDateOnlyMillis(instant)
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,340,"+ getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,344,* Override the default implementation
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,346,"public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,347,"int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,348,"int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,349,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,351,"return getDateOnlyMillis(year, monthOfYear, dayOfMonth)"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,352,"+ getTimeOnlyMillis(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,436,rivate static class HalfdayField extends FractionalDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,566,private static class HalfdayField extends PreciseDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,567,static final long serialVersionUID = 581601443656929254L;
False,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,438,"uper(""halfdayOfDay"", DateTimeConstants.MILLIS_PER_HOUR * 12, 2);"
True,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,JodaTime/src/java/org/joda/time/chrono/gj/ProlepticChronology.java,570,"super(""halfdayOfDay"", cHalfdaysField, cDaysField);"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,57,import java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,58,import java.io.ObjectOutputStream;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,59,import java.io.Serializable;
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,61,mport org.joda.time.chrono.DelegateChronology;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,65,import org.joda.time.chrono.DelegatedChronology;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,73,* <p>
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,74,* ISOChronology is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,74,ublic final class ISOChronology extends DelegateChronology {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,80,public final class ISOChronology extends DelegatedChronology {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,82,static final long serialVersionUID = -6212696554273812441L;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,88,private static final int FAST_CACHE_SIZE = 64;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,90,/** Fast cache of zone to chronology */
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,91,private static final ISOChronology[] cFastCache = new ISOChronology[FAST_CACHE_SIZE];
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,111,ublic static synchronized ISOChronology getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,124,public static ISOChronology getInstance(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,115,SOChronology chrono = (ISOChronology) cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,116,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,117,"hrono = new ISOChronology(GJChronology.getInstance(zone, Long.MIN_VALUE, true));"
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,118,"Cache.put(zone, chrono);"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,128,int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,129,ISOChronology chrono = cFastCache[index];
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,130,if (chrono != null && chrono.getDateTimeZone() == zone) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,131,return chrono;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,133,synchronized (cCache) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,134,chrono = (ISOChronology) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,135,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,136,chrono = new ISOChronology
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,137,"(GJChronology.getInstance(zone, Long.MIN_VALUE, true));"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,138,"cCache.put(zone, chrono);"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,141,cFastCache[index] = chrono;
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,133, Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,155,* Serialize ISOChronology instances using a small stub. This reduces the
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,156,"* serialized size, and deserialized instances come from the cache."
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,135,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,136,eturn getInstance(getChronology().getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,158,private Object writeReplace() {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,159,return new Stub(getDateTimeZone());
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,197,"String str = ""ISOChronology"";"
False,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,175,"eturn ""ISOChronology["" + (zone == null ? """" : zone.getID()) + ""]"";"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,199,if (zone != null) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,200,str = str + '[' + zone.getID() + ']';
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,202,return str;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,205,private static final class Stub implements Serializable {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,206,static final long serialVersionUID = -6212696554273812441L;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,208,private transient DateTimeZone iZone;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,210,Stub(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,211,iZone = zone;
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,214,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,215,return ISOChronology.getInstance(iZone);
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,218,private void writeObject(ObjectOutputStream out) throws IOException {
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,219,out.writeObject(iZone);
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,222,private void readObject(ObjectInputStream in)
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,223,"throws IOException, ClassNotFoundException"
True,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/iso/ISOChronology.java,225,iZone = (DateTimeZone)in.readObject();
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,57,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,58,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,61,* AbstractConverter simplifies the process of implementing a converter.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,63,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,64,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,66,public abstract class AbstractConverter implements Converter {
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,69,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,71,protected AbstractConverter() {
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,72,super();
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,77,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,78,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,79,"* This implementation calls {@link #getInstantMillis(Object, DateTimeZone)}."
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,81,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,82,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,83,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,85,public long getInstantMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,86,"return getInstantMillis(object, (DateTimeZone) null);"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,90,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,91,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,92,* This implementation calls {@link #getInstantMillis(Object)}.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,94,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,95,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,96,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,97,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,99,"public long getInstantMillis(Object object, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,100,return getInstantMillis(object);
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,104,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,105,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,106,* This implementation calls {@link #getInstantMillis(Object)}.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,108,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,109,"* @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,110,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,111,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,113,"public long getInstantMillis(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,114,return getInstantMillis(object);
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,119,* Extracts the chronology from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,120,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,121,* This implementation returns the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,123,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,124,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,125,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,127,public Chronology getChronology(Object object) {
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,128,return ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,132,* Extracts the chronology from an object of this convertor's type
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,133,* where the time zone is specified.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,134,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,135,* This implementation returns the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,137,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,138,"* @param zone  the specified zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,139,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,140,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,142,"public Chronology getChronology(Object object, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,143,return ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,147,* Extracts the chronology from an object of this convertor's type
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,148,* where the chronology is specified.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,149,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,150,"* This implementation returns the chronology specified, or the"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,151,* ISOChronology in the default zone if null passed in.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,153,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,154,"* @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,155,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,156,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,158,"public Chronology getChronology(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,159,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,160,return ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,162,return chrono;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,56,import java.util.Calendar;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,57,import java.util.GregorianCalendar;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,60,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,61,import org.joda.time.chrono.buddhist.BuddhistChronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,62,import org.joda.time.chrono.gj.GJChronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,63,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,66,* CalendarConverter converts a java util Calendar to milliseconds in the
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,67,* chronology that best matches the calendar.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,69,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,70,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,72,final class CalendarConverter extends AbstractConverter implements InstantConverter {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,75,* Singleton instance.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,77,static final CalendarConverter INSTANCE = new CalendarConverter();
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,80,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,82,protected CalendarConverter() {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,83,super();
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,88,"* Gets the millis, which is the Calendar millis value."
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,90,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,91,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,93,public long getInstantMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,94,return ((Calendar) object).getTime().getTime();
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,98,"* Gets the chronology, which is the GJChronology if a GregorianCalendar is used,"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,99,* BuddhistChronology if a BuddhistCalendar is used or ISOChronology otherwise.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,100,"* The time zone is extracted from the calendar if possible, default used if not."
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,102,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,103,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,105,public Chronology getChronology(Object object) {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,106,Calendar cal = (Calendar) object;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,107,DateTimeZone zone = null;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,108,try {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,109,zone = DateTimeZone.getInstance(cal.getTimeZone());
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,111,} catch (IllegalArgumentException ex) {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,112,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,114,"return getChronology(cal, zone);"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,118,"* Gets the chronology, which is the GJChronology if a GregorianCalendar is used,"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,119,* BuddhistChronology if a BuddhistCalendar is used or ISOChronology otherwise.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,120,* The time zone specified is used in preference to that on the calendar.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,122,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,123,"* @param zone  the specified zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,124,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,126,"public Chronology getChronology(Object object, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,127,if (object instanceof GregorianCalendar) {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,128,GregorianCalendar gc = (GregorianCalendar) object;
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,129,"return GJChronology.getInstance(zone, gc.getGregorianChange().getTime(), false);"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,131,"} else if (object.getClass().getName().endsWith("".BuddhistCalendar"")) {"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,132,return BuddhistChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,134,} else {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,135,return ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,141,* Returns Calendar.class.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,143,* @return Calendar.class
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,145,public Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,146,return Calendar.class;
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,57,* Basic converter interface for specifying what object type can be converted.
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,59,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,60,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,62,public interface Converter {
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,64,"* Returns the object type that this converter supports, which may"
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,65,"* specified by a class, superclass, abstract class, interface, or null."
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,67,* @return the object type that this converter supports
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,69,Class getSupportedType();
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,56,import java.util.ArrayList;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,57,import java.util.Arrays;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,58,import java.util.List;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,61,* ConverterManager controls the date and time converters.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,62,* <p>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,63,* This class enables additional conversion classes to be added via
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,64,"* {@link #addInstantConverter(InstantConverter)}, which may replace an"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,65,* existing converter. Similar methods exist for duration converters.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,66,* <p>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,67,"* This class is threadsafe, so adding/removing converters can be done at any"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,68,"* time. Updating the set of convertors is relatively expensive, and so should"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,69,* not be performed often.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,70,* <p>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,71,* The default instant converters are:
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,72,* <ul>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,73,* <li>ReadableInstant
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,74,* <li>PartialInstant
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,75,* <li>String
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,76,* <li>Calendar
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,77,* <li>Date
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,78,* <li>Long
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,79,* </ul>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,80,* The default duration converters are:
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,81,* <ul>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,82,* <li>ReadableDuration
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,83,* <li>Long
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,84,* </ul>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,86,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,87,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,88,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,90,public final class ConverterManager {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,93,"* Singleton instance, lazily loaded to avoid class loading."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,95,private static ConverterManager INSTANCE;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,97,public static ConverterManager getInstance() {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,98,if (INSTANCE == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,99,INSTANCE = new ConverterManager();
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,101,return INSTANCE;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,104,private ConverterSet iInstantConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,105,private ConverterSet iDurationConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,108,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,110,protected ConverterManager() {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,111,super();
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,113,iInstantConverters = new ConverterSet(new Converter[] {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,114,"ReadableInstantConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,115,"PartialInstantConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,116,"StringConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,117,"CalendarConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,118,"DateConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,119,"LongConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,122,iDurationConverters = new ConverterSet(new Converter[] {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,123,"ReadableDurationConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,124,"LongConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,130,* Gets the best converter for the object specified.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,132,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,133,* @return the converter to use
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,134,* @throws IllegalArgumentException if no suitable converter
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,135,* @throws IllegalStateException if multiple converters match the type
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,136,* equally well
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,138,public InstantConverter getInstantConverter(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,139,InstantConverter converter =
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,140,(InstantConverter)iInstantConverters.select(object == null ? null : object.getClass());
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,141,if (converter != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,142,return converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,144,"throw new IllegalArgumentException(""No instant converter found for type: "" +"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,145,"(object == null ? ""null"" : object.getClass().getName()));"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,150,* Gets a copy of the set of converters.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,152,"* @return the converters, a copy of the real data, never null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,154,public InstantConverter[] getInstantConverters() {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,155,ConverterSet set = iInstantConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,156,InstantConverter[] converters = new InstantConverter[set.size()];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,157,set.copyInto(converters);
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,158,return converters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,162,* Adds a converter to the set of converters. If a matching converter is
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,163,"* already in the set, the given converter replaces it. If the converter is"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,164,"* exactly the same as one already in the set, no changes are made."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,165,* <p>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,166,* The order in which converters are added is not relevent. The best
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,167,* converter is selected by examining the object hierarchy.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,169,"* @param converter  the converter to add, null ignored"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,170,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,172,public InstantConverter addInstantConverter(InstantConverter converter) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,173,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,174,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,176,InstantConverter[] removed = new InstantConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,177,"iInstantConverters = iInstantConverters.add(converter, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,178,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,182,* Removes a converter from the set of converters. If the converter was
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,183,"* not in the set, no changes are made."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,185,"* @param converter  the converter to remove, null ignored"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,186,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,188,public InstantConverter removeInstantConverter(InstantConverter converter) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,189,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,190,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,192,InstantConverter[] removed = new InstantConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,193,"iInstantConverters = iInstantConverters.remove(converter, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,194,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,198,"* Removes a converter from the set of converters, by index."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,200,* @param index  the index to remove
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,201,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,202,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,204,public InstantConverter removeInstantConverter(int index) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,205,InstantConverter[] removed = new InstantConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,206,"iInstantConverters = iInstantConverters.remove(index, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,207,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,212,* Gets the best converter for the object specified.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,214,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,215,* @return the converter to use
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,216,* @throws IllegalArgumentException if no suitable converter
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,217,* @throws IllegalStateException if multiple converters match the type
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,218,* equally well
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,220,public DurationConverter getDurationConverter(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,221,DurationConverter converter =
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,222,(DurationConverter)iDurationConverters.select(object == null ? null : object.getClass());
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,223,if (converter != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,224,return converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,226,"throw new IllegalArgumentException(""No duration converter found for type: "" +"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,227,"(object == null ? ""null"" : object.getClass().getName()));"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,232,* Gets a copy of the list of converters.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,234,"* @return the converters, a copy of the real data, never null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,236,public DurationConverter[] getDurationConverters() {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,237,ConverterSet set = iDurationConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,238,DurationConverter[] converters = new DurationConverter[set.size()];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,239,set.copyInto(converters);
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,240,return converters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,244,* Adds a converter to the set of converters. If a matching converter is
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,245,"* already in the set, the given converter replaces it. If the converter is"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,246,"* exactly the same as one already in the set, no changes are made."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,247,* <p>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,248,* The order in which converters are added is not relevent. The best
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,249,* converter is selected by examining the object hierarchy.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,251,"* @param converter  the converter to add, null ignored"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,252,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,254,public DurationConverter addDurationConverter(DurationConverter converter) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,255,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,256,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,258,DurationConverter[] removed = new DurationConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,259,"iDurationConverters = iDurationConverters.add(converter, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,260,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,264,* Removes a converter from the set of converters. If the converter was
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,265,"* not in the set, no changes are made."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,267,"* @param converter  the converter to remove, null ignored"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,268,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,270,public DurationConverter removeDurationConverter(DurationConverter converter) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,271,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,272,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,274,DurationConverter[] removed = new DurationConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,275,"iDurationConverters = iDurationConverters.remove(converter, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,276,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,280,"* Removes a converter from the set of converters, by index."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,282,* @param index  the index to remove
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,283,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,284,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,286,public DurationConverter removeDurationConverter(int index) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,287,DurationConverter[] removed = new DurationConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,288,"iDurationConverters = iDurationConverters.remove(index, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,289,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,294,* Gets a debug representation of the object
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,296,public String toString() {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,297,"return ""ConverterManager["" +"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,298,"iInstantConverters.size() + "" instant converters,"" +"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,299,"iDurationConverters.size() + "" duration converters]"";"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,57,"* A set of converters, which allows exact converters to be quickly"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,58,* selected. This class is threadsafe because it is (essentially) immutable.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,60,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,61,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,63,class ConverterSet {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,64,private final Converter[] iConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,66,"// A simple immutable hashtable: closed hashing, linear probing, sized"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,67,"// power of 2, at least one null slot."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,68,private Entry[] iSelectEntries;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,70,ConverterSet(Converter[] converters) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,71,"// Since this is a package private constructor, we trust ourselves not"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,72,// to alter the array outside this class.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,73,iConverters = converters;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,74,iSelectEntries = new Entry[1 << 4]; // 16
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,78,"* Returns the closest matching converter for the given type, or null if"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,79,* none found.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,81,"* @param type type to select, which may be null"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,82,* @throws IllegalStateException if multiple converters match the type
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,83,* equally well
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,85,public Converter select(Class type) throws IllegalStateException {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,86,// Check the hashtable first.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,87,Entry[] entries = iSelectEntries;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,88,int length = entries.length;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,89,int index = type == null ? 0 : type.hashCode() & (length - 1);
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,91,Entry e;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,92,// This loop depends on there being at least one null slot.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,93,while ((e = entries[index]) != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,94,if (e.iType == type) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,95,return e.iConverter;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,97,if (++index >= length) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,98,index = 0;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,102,"// Not found in the hashtable, so do actual work."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,104,"Converter converter = selectSlow(this, type);"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,105,"e = new Entry(type, converter);"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,107,"// Save the entry for future selects. This class must be threadsafe,"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,108,// but there is no synchronization. Since the hashtable is being used
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,109,"// as a cache, it is okay to destroy existing entries. This isn't"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,110,// likely to occur unless there is a high amount of concurrency. As
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,111,"// time goes on, cache updates will occur less often, and the cache"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,112,// will fill with all the necessary entries.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,114,// Do all updates on a copy: slots in iSelectEntries must not be
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,115,// updated by multiple threads as this can allow all null slots to be
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,116,// consumed.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,117,entries = (Entry[])entries.clone();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,119,// Add new entry.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,120,entries[index] = e;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,122,// Verify that at least one null slot exists!
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,123,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,124,if (entries[i] == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,125,"// Found a null slot, swap in new hashtable."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,126,iSelectEntries = entries;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,127,return converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,131,// Double capacity and re-hash.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,133,int newLength = length << 1;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,134,Entry[] newEntries = new Entry[newLength];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,135,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,136,e = entries[i];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,137,type = e.iType;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,138,index = type == null ? 0 : type.hashCode() & (newLength - 1);
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,139,while (newEntries[index] != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,140,if (++index >= newLength) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,141,index = 0;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,144,newEntries[index] = e;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,147,// Swap in new hashtable.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,148,iSelectEntries = newEntries;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,149,return converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,153,* Returns the amount of converters in the set.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,155,public int size() {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,156,return iConverters.length;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,160,* Copies all the converters in the set to the given array.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,162,public void copyInto(Converter[] converters) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,163,"System.arraycopy(iConverters, 0, converters, 0, iConverters.length);"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,167,"* Returns a copy of this set, with the given converter added. If a"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,168,"* matching converter is already in the set, the given converter replaces"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,169,"* it. If the converter is exactly the same as one already in the set, the"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,170,* original set is returned.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,172,* @param converter converter to add
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,173,"* @param removed if not null, element 0 is set to the removed converter"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,174,* @throws IllegalArgumentException if converter is null
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,176,"public ConverterSet add(Converter converter, Converter[] removed) {"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,177,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,178,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,181,Converter[] converters = iConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,182,int length = converters.length;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,184,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,185,Converter existing = converters[i];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,186,if (converter.equals(existing)) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,187,// Already in the set.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,188,if (removed != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,189,removed[0] = null;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,191,return this;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,194,if (converter.getSupportedType() == existing.getSupportedType()) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,195,// Replace the converter.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,196,Converter[] copy = new Converter[length];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,198,for (int j=0; j<length; j++) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,199,if (j != i) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,200,copy[j] = converters[j];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,201,} else {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,202,copy[j] = converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,206,if (removed != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,207,removed[0] = existing;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,209,return new ConverterSet(copy);
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,213,"// Not found, so add it."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,214,Converter[] copy = new Converter[length + 1];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,215,"System.arraycopy(converters, 0, copy, 0, length);"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,216,copy[length] = converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,218,if (removed != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,219,removed[0] = null;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,221,return new ConverterSet(copy);
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,225,"* Returns a copy of this set, with the given converter removed. If the"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,226,"* converter was not in the set, the original set is returned."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,228,* @param converter converter to remove
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,229,"* @param removed if not null, element 0 is set to the removed converter"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,230,* @throws NullPointerException if converter is null
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,232,"public ConverterSet remove(Converter converter, Converter[] removed) {"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,233,Converter[] converters = iConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,234,int length = converters.length;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,236,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,237,if (converter.equals(converters[i])) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,238,"return remove(i, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,242,// Not found.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,243,if (removed != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,244,removed[0] = null;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,246,return this;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,250,"* Returns a copy of this set, with the converter at the given index"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,251,* removed.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,253,* @param converter converter to remove
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,254,"* @param removed if not null, element 0 is set to the removed converter"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,255,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,257,"public ConverterSet remove(final int index, Converter[] removed) {"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,258,Converter[] converters = iConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,259,int length = converters.length;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,260,if (index >= length) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,261,throw new IndexOutOfBoundsException();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,264,if (removed != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,265,removed[0] = converters[index];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,268,Converter[] copy = new Converter[length - 1];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,270,int j = 0;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,271,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,272,if (i != index) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,273,copy[j++] = converters[i];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,277,return new ConverterSet(copy);
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,281,"* Returns the closest matching converter for the given type, but not very"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,282,* efficiently.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,284,"private static Converter selectSlow(ConverterSet set, Class type) {"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,285,Converter[] converters = set.iConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,286,int length = converters.length;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,287,Converter converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,289,for (int i=length; --i>=0; ) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,290,converter = converters[i];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,291,Class supportedType = converter.getSupportedType();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,293,if (supportedType == type) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,294,// Exact match.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,295,return converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,298,if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,299,// Eliminate the impossible.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,300,"set = set.remove(i, null);"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,301,converters = set.iConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,302,length = converters.length;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,306,"// Haven't found exact match, so check what remains in the set."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,308,if (type == null || length == 0) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,309,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,311,if (length == 1) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,312,// Found the one best match.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,313,return converters[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,316,"// At this point, there exist multiple potential converters."
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,318,// Eliminate supertypes.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,319,for (int i=length; --i>=0; ) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,320,converter = converters[i];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,321,Class supportedType = converter.getSupportedType();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,322,for (int j=length; --j>=0; ) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,323,if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,324,// Eliminate supertype.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,325,"set = set.remove(j, null);"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,326,converters = set.iConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,327,length = converters.length;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,328,i = length - 1;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,333,// Check what remains in the set.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,335,if (length == 1) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,336,// Found the one best match.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,337,return converters[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,340,"// Class c implements a, b {}"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,341,// Converters exist only for a and b. Which is better? Neither.
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,343,StringBuffer msg = new StringBuffer();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,344,"msg.append(""Unable to find best converter for type \"""");"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,345,msg.append(type.getName());
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,346,"msg.append(""\"" from remaining set: "");"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,347,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,348,converter = converters[i];
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,349,Class supportedType = converter.getSupportedType();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,351,msg.append(converter.getClass().getName());
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,352,msg.append('[');
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,353,msg.append(supportedType == null ? null : supportedType.getName());
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,354,"msg.append(""], "");"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,357,throw new IllegalStateException(msg.toString());
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,360,private static class Entry {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,361,public final Class iType;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,362,public final Converter iConverter;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,364,"Entry(Class type, Converter converter) {"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,365,iType = type;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,366,iConverter = converter;
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,56,import java.util.Date;
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,59,* DateConverter converts a java util Date to milliseconds in the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,61,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,62,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,64,final class DateConverter extends AbstractConverter implements InstantConverter {
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,67,* Singleton instance.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,69,static final DateConverter INSTANCE = new DateConverter();
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,72,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,74,protected DateConverter() {
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,75,super();
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,80,"* Gets the millis, which is the Date millis value."
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,82,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,83,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,85,public long getInstantMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,86,return ((Date) object).getTime();
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,91,* Returns Date.class.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,93,* @return Date.class
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,95,public Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,96,return Date.class;
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,57,* DurationConverter defines how an object is converted to a millisecond duration.
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,59,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,60,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,62,public interface DurationConverter extends Converter {
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,65,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,67,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,68,* @return the millisecond duration
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,69,* @throws IllegalArgumentException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,JodaTime/src/java/org/joda/time/convert/DurationConverter.java,71,long getDurationMillis(Object object);
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,57,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,60,* InstantConverter defines how an object is converted to milliseconds/chronology.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,62,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,63,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,65,public interface InstantConverter extends Converter {
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,68,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,70,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,71,* @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,72,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,74,long getInstantMillis(Object object);
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,77,* Extracts the millis from an object of this convertor's type. The zone
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,78,"* parameter is a hint to the converter, should it require a time zone to"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,79,* aid in conversion.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,81,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,82,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,83,* @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,84,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,86,"long getInstantMillis(Object object, DateTimeZone zone);"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,89,* Extracts the millis from an object of this convertor's type. The chrono
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,90,"* parameter is a hint to the converter, should it require a chronology to"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,91,* aid in conversion.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,93,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,94,"* @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,95,* @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,96,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,98,"long getInstantMillis(Object object, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,102,* Extracts the chronology from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,104,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,105,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,106,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,108,Chronology getChronology(Object object);
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,111,* Extracts the chronology from an object of this convertor's type
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,112,* where the time zone is specified.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,114,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,115,"* @param zone  the specified zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,116,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,117,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,119,"Chronology getChronology(Object object, DateTimeZone zone);"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,122,* Extracts the chronology from an object of this convertor's type
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,123,* where the chronology is specified.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,125,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,126,"* @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,127,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,128,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,130,"Chronology getChronology(Object object, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,58,* LongConverter converts a Long to milliseconds in the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,60,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,61,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,63,"class LongConverter extends AbstractConverter implements InstantConverter, DurationConverter {"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,66,* Singleton instance.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,68,static final LongConverter INSTANCE = new LongConverter();
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,71,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,73,protected LongConverter() {
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,74,super();
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,79,"* Gets the millisecond instant, which is the Long value."
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,81,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,82,* @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,84,public long getInstantMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,85,return ((Long) object).longValue();
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,89,"* Gets the millisecond duration, which is the Long value."
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,91,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,92,* @return the millisecond duration
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,94,public long getDurationMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,95,return ((Long) object).longValue();
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,100,* Returns Long.class.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,102,* @return Long.class
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,104,public Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,105,return Long.class;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,57,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,58,import org.joda.time.PartialInstant;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,59,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,62,* PartialInstantConverter extracts milliseconds and chronology from a
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,63,"* PartialInstant. Since supplying a time zone requires special attention, the"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,64,* regular ReadableInstantConverter is not quite right.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,66,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,67,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,69,class PartialInstantConverter extends ReadableInstantConverter {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,71,* Singleton instance.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,73,static final PartialInstantConverter INSTANCE = new PartialInstantConverter();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,76,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,78,protected PartialInstantConverter() {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,79,super();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,83,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,85,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,86,* @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,88,public long getInstantMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,89,"return getInstantMillis(object, (DateTimeZone) null);"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,93,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,95,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,96,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,97,* @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,99,"public long getInstantMillis(Object object, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,100,if (zone == null) {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,101,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,103,long millis = ((PartialInstant) object).getMillis();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,104,return millis - zone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,108,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,110,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,111,"* @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,112,* @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,114,"public long getInstantMillis(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,115,long millis = ((PartialInstant) object).getMillis();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,116,DateTimeZone zone;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,117,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,118,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,119,} else {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,120,zone = chrono.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,122,if (zone != null) {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,123,millis -= zone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,125,return millis;
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,130,"* Gets the chronology, which is taken from the PartialDateTime.  If the"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,131,"* chronology on the datetime is null, the ISOChronology in the default"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,132,"* time zone is used. Otherwise, the chronology is returned in the default"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,133,* time zone.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,135,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,136,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,138,public Chronology getChronology(Object object) {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,139,Chronology chrono = ((PartialInstant) object).getChronology();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,140,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,141,return ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,143,return chrono.withDateTimeZone(DateTimeZone.getDefault());
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,148,* Returns PartialDateTime.class.
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,150,* @return PartialDateTime.class
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,152,public Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,JodaTime/src/java/org/joda/time/convert/PartialInstantConverter.java,153,return PartialInstant.class;
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,56,import org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,59,* ReadableDurationConverter extracts milliseconds and chronology from a ReadableDuration.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,61,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,62,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,64,class ReadableDurationConverter extends AbstractConverter implements DurationConverter {
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,67,* Singleton instance.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,69,static final ReadableDurationConverter INSTANCE = new ReadableDurationConverter();
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,72,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,74,protected ReadableDurationConverter() {
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,75,super();
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,80,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,82,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,83,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,85,public long getDurationMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,86,return ((ReadableDuration) object).getTotalMillis();
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,91,* Returns ReadableDuration.class.
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,93,* @return ReadableDuration.class
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,95,public Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,96,return ReadableDuration.class;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,57,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,58,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,59,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,62,* ReadableInstantConverter extracts milliseconds and chronology from a ReadableInstant.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,64,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,65,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,67,class ReadableInstantConverter extends AbstractConverter implements InstantConverter {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,70,* Singleton instance.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,72,static final ReadableInstantConverter INSTANCE = new ReadableInstantConverter();
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,75,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,77,protected ReadableInstantConverter() {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,78,super();
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,83,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,85,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,86,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,88,public long getInstantMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,89,return ((ReadableInstant) object).getMillis();
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,93,"* Gets the chronology, which is taken from the ReadableInstant."
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,94,"* If the chronology on the instant is null, the ISOChronology in the"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,95,* default time zone is used.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,97,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,98,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,100,public Chronology getChronology(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,101,Chronology chrono = ((ReadableInstant) object).getChronology();
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,102,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,103,return ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,105,return chrono;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,109,"* Gets the chronology, which is taken from the ReadableInstant."
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,110,"* If the chronology on the instant is null, the ISOChronology in the"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,111,* specified time zone is used.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,112,"* If the chronology on the instant is not in the specified zone, it is"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,113,* adapted.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,115,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,116,"* @param zone  the specified zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,117,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,119,"public Chronology getChronology(Object object, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,120,Chronology chrono = ((ReadableInstant) object).getChronology();
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,121,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,122,return ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,124,DateTimeZone chronoZone = chrono.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,125,if (chronoZone != zone) {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,126,chrono = chrono.withDateTimeZone(zone);
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,127,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,128,return ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,131,return chrono;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,136,* Returns ReadableInstant.class.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,138,* @return ReadableInstant.class
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,140,public Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,141,return ReadableInstant.class;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,57,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,58,import org.joda.time.chrono.iso.ISOChronology;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,59,import org.joda.time.format.DateTimeParser;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,60,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,63,* StringConverter converts a String to milliseconds in the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,65,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,66,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,68,class StringConverter extends AbstractConverter implements InstantConverter {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,71,* Singleton instance.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,73,static final StringConverter INSTANCE = new StringConverter();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,76,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,78,protected StringConverter() {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,79,super();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,84,"* Gets the millis, which is the ISO parsed string value."
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,86,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,87,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,88,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,89,* @throws IllegalArgumentException if the value if invalid
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,91,"public long getInstantMillis(Object object, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,92,String str = (String) object;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,93,Chronology chrono = ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,94,DateTimeParser p = ISODateTimeFormat.getInstance(chrono).dateTimeParser();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,95,return p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,99,"* Gets the millis, which is the ISO parsed string value."
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,101,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,102,"* @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,103,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,104,* @throws IllegalArgumentException if the value if invalid
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,106,"public long getInstantMillis(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,107,String str = (String) object;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,108,"chrono = getChronology(object, chrono);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,109,DateTimeParser p = ISODateTimeFormat.getInstance(chrono).dateTimeParser();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,110,return p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,115,* Returns String.class.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,117,* @return String.class
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,119,public Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,120,return String.class;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,58,mport java.lang.reflect.Method;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,59,mport java.text.ParseException;
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,79,* <p>
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,80,* AbstractDateTimeFormatter is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,83,* @since 1.0
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,86,rivate static Method cInitCauseMethod;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,88,tatic {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,89,/ cope with JDK 1.4 enhancements
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,90,ethod initCauseMethod = null;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,91,ry {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,92,nitCauseMethod = Throwable.class.getMethod
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,93,"""initCause"", new Class[] {Throwable.class});"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,95, catch (NoSuchMethodException ex) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,96,/ ignore
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,97, catch (SecurityException ex) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,98,/ ignore
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,100,InitCauseMethod = initCauseMethod;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,104,"tatic String createErrorMessage(String text, int errorPos) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,88,"static String createErrorMessage(final String text, final int errorPos) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,125,"rivate static void setCause(ParseException pe, Throwable initCause) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,126,f (cInitCauseMethod != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,127,ry {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,128,"InitCauseMethod.invoke(pe, new Object[]{initCause});"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,129, catch (Exception e) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,130,InitCauseMethod = null;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,140,"ublic void printTo(StringBuffer buf, ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,115,"* Returns the DateTimeZone from the formatter's Chronology, defaulting to"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,116,* UTC if the Chronology or its DateTimeZone is null.
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,118,public DateTimeZone getDateTimeZone() {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,119,Chronology chrono = getChronology();
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,120,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,121,return DateTimeZone.UTC;
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,123,DateTimeZone zone = chrono.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,124,return zone == null ? DateTimeZone.UTC : zone;
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,127,"public void printTo(final StringBuffer buf, final ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,146,"(DateTimePrinter)this).printTo(buf, millisUTC, null, millisUTC);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,133,"((DateTimePrinter)this).printTo(buf, millisUTC, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,150,"ublic void printTo(Writer out, ReadableInstant instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,137,"public void printTo(final Writer out, final ReadableInstant instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,156,"(DateTimePrinter)this).printTo(out, millisUTC, null, millisUTC);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,143,"((DateTimePrinter)this).printTo(out, millisUTC, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,160,"ublic void printTo(StringBuffer buf, long millisUTC) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,161,"rintTo(buf, millisUTC, null);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,147,"public void printTo(final StringBuffer buf, final long instant) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,148,"printTo(buf, instant, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,164,"ublic void printTo(Writer out, long millisUTC) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,165,"rintTo(out, millisUTC, null);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,151,"public void printTo(final Writer out, final long instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,152,"printTo(out, instant, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,168,"ublic void printTo(StringBuffer buf, long millisUTC, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,169,f (zone != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,170,(DateTimePrinter)this).printTo
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,171,"buf, millisUTC, zone, millisUTC + zone.getOffset(millisUTC));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,172, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,173,"(DateTimePrinter)this).printTo(buf, millisUTC, null, millisUTC);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,155,"public void printTo(final StringBuffer buf, final long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,156,if (zone == null) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,157,zone = getDateTimeZone();
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,159,((DateTimePrinter) this).printTo
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,160,"(buf, instant, zone, instant + zone.getOffset(instant));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,177,"ublic void printTo(Writer out, long millisUTC, DateTimeZone zone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,178,f (zone != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,179,(DateTimePrinter)this).printTo
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,180,"out, millisUTC, zone, millisUTC + zone.getOffset(millisUTC));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,181, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,182,"(DateTimePrinter)this).printTo(out, millisUTC, null, millisUTC);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,163,"public void printTo(final Writer out, final long instant, DateTimeZone zone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,164,if (zone == null) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,165,zone = getDateTimeZone();
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,167,((DateTimePrinter) this).printTo
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,168,"(out, instant, zone, instant + zone.getOffset(instant));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,186,ublic String print(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,171,public String print(final ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,192,"eturn print(millisUTC, null, millisUTC);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,177,"return print(millisUTC, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,196,ublic String print(long millisUTC) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,197,"eturn print(millisUTC, null);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,181,public String print(final long instant) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,182,"return print(instant, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,200,"ublic String print(long millisUTC, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,201,f (zone != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,202,eturn print
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,203,"millisUTC, zone, millisUTC + zone.getOffset(millisUTC));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,204, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,205,"eturn print(millisUTC, null, millisUTC);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,185,"public String print(final long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,186,if (zone == null) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,187,zone = getDateTimeZone();
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,189,"return print(instant, zone, instant + zone.getOffset(instant));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,209,"ublic String print(long millisUTC, DateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,192,"public String print(final long instant, final DateTimeZone zone, final long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,212,".printTo(buf, millisUTC, zone, millisLocal);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,195,"p.printTo(buf, instant, zone, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,216,"ublic int parseInto(ReadWritableInstant instant, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,199,"public int parseInto(final ReadWritableInstant instant, final String text, final int position) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,230,"osition = p.parseInto(bucket, text, position);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,213,"int resultPos = p.parseInto(bucket, text, position);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,232,eturn position;
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,215,return resultPos;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,235,ublic long parseMillis(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,218,public long parseMillis(final String text) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,239,"ublic long parseMillis(String text, long millis) throws ParseException {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,222,"public long parseMillis(final String text, final long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,241,ateTimeParserBucket bucket = createBucket(millis);
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,224,DateTimeParserBucket bucket = createBucket(instantLocal);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,246,ry {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,247,eturn bucket.computeMillis();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,248, catch (IllegalArgumentException ex) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,249,"arseException pe = new ParseException(ex.getMessage(), 0);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,250,"etCause(pe, ex);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,251,hrow pe;
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,229,return bucket.computeMillis();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,258,"hrow new ParseException(createErrorMessage(text, newPos), newPos);"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,235,"throw new IllegalArgumentException(createErrorMessage(text, newPos));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,261,ublic DateTime parseDateTime(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,238,public DateTime parseDateTime(final String text) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,265,ublic MutableDateTime parseMutableDateTime(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,242,"public DateTime parseDateTime(final String text, final ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,243,"return new DateTime(parseMillis(text, getInstantLocal(instant)), getChronology());"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,246,public MutableDateTime parseMutableDateTime(final String text) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,269,rivate DateTimeParserBucket createBucket(long millis) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,250,"public MutableDateTime parseMutableDateTime(final String text, final ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,251,"return new MutableDateTime(parseMillis(text, getInstantLocal(instant)), getChronology());"
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,254,private long getInstantLocal(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,255,long instantLocal;
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,256,if (instant == null) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,257,instantLocal = 0;
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,258,} else {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,259,instantLocal = instant.getMillis();
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,260,DateTimeZone zone = instant.getDateTimeZone();
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,261,if (zone != null) {
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,262,instantLocal += zone.getOffset(instantLocal);
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,265,return instantLocal;
True,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,268,private DateTimeParserBucket createBucket(final long millis) {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,56,import org.joda.time.Duration;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,57,import org.joda.time.DurationType;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,58,import org.joda.time.MutableDuration;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,59,import org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,62,"* Abstract base class for implementing {@link DurationPrinter}s,"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,63,"* {@link DurationParser}s, and {@link DurationFormatter}s. This class"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,64,* intentionally does not implement any of those interfaces. You can subclass
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,65,* and implement only the interfaces that you need to.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,66,* <p>
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,67,* The print methods assume that your subclass has implemented DurationPrinter or
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,68,"* DurationFormatter. If not, a ClassCastException is thrown when calling those"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,69,* methods.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,70,* <p>
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,71,"* Likewise, the parse methods assume that your subclass has implemented"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,72,"* DurationParser or DurationFormatter. If not, a ClassCastException is thrown"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,73,* when calling the parse methods.
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,75,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,76,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,78,public abstract class AbstractDurationFormatter {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,80,public int countFieldsToPrint(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,81,"return ((DurationPrinter) this).countFieldsToPrint(duration, Integer.MAX_VALUE);"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,84,public String print(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,85,DurationPrinter p = (DurationPrinter) this;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,86,StringBuffer buf = new StringBuffer(p.calculatePrintedLength(duration));
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,87,"p.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,88,return buf.toString();
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,91,"public Duration parseDuration(DurationType type, String text) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,92,"return parseMutableDuration(type, text).toDuration();"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,95,"public MutableDuration parseMutableDuration(DurationType type, String text) {"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,96,DurationParser p = (DurationParser) this;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,97,"MutableDuration duration = new MutableDuration(type, 0);"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,99,"int newPos = p.parseInto(duration, text, 0);"
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,100,if (newPos >= 0) {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,101,if (newPos >= text.length()) {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,102,return duration;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,104,} else {
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,105,newPos = ~newPos;
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,108,throw new IllegalArgumentException(AbstractDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDurationFormatter.java,109,".createErrorMessage(text, newPos));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,59,mport java.text.ParseException;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,66,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,71,import org.joda.time.chrono.RemainderDateTimeField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,77,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,78,* This class provides access to the actual DateTimeFormatter instances in two ways:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,79,* <ul>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,80,* <li>{@link #forPattern(String) Pattern} provides a DateTimeFormatter based on
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,81,* a pattern string that is compatible with the JDK date patterns.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,82,* <li>{@link #forStyle(String) Style} provides a DateTimeFormatter based on a
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,83,"* two character style, representing short, medium, long and full."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,84,* </ul>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,85,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,86,"* For example, to use a patterm:"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,87,* <pre>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,88,* DateTime dt = new DateTime();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,89,"* DateTimeFormatter fmt = DateTimeFormat.getInstance().forPattern(""MMMM, yyyy"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,90,* String str = fmt.print(dt);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,91,* </pre>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,93,"* The pattern syntax is compatible with java.text.SimpleDateFormat, but a few"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,94,* more symbols are also supported. All ASCII letters are reserved as pattern
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,95,"* letters, which are defined as the following:"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,96,* <blockquote>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,97,* <pre>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,98,* Symbol  Meaning                      Presentation  Examples
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,100,* G       era                          text          AD
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,101,* C       century of era (&gt;=0)         number        20
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,102,* Y       year of era (&gt;=0)            year          1996
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,104,* x       weekyear                     year          1996
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,105,* w       week of weekyear             number        27
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,106,* e       day of week                  number        2
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,107,* E       day of week                  text          Tuesday; Tue
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,109,* y       year                         year          1996
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,110,* D       day of year                  number        189
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,111,* M       month of year                month         July; Jul; 07
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,112,* d       day of month                 number        10
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,114,* a       halfday of day               text          PM
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,115,* K       hour of halfday (0~11)       number        0
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,116,* h       clockhour of halfday (1~12)  number        12
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,118,* H       hour of day (0~23)           number        0
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,119,* k       clockhour of day (1~24)      number        24
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,120,* m       minute of hour               number        30
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,121,* s       second of minute             number        55
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,122,* S       fraction of second           number        978
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,124,* z       time zone                    text          Pacific Standard Time; PST
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,125,* Z       time zone offset             text          -08:00; -0800
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,127,* '       escape for text              delimiter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,128,* ''      single quote                 literal       '
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,129,* </pre>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,130,* </blockquote>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,131,* The count of pattern letters determine the format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,132,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,133,"* <strong>Text</strong>: If the number of pattern letters is 4 or more,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,134,* the full form is used; otherwise a short or abbreviated form is used if
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,135,* available.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,136,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,137,* <strong>Number</strong>: The minimum number of digits. Shorter numbers
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,138,* are zero-padded to this amount.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,139,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,140,* <strong>Year</strong>: Numeric presentation for year and weekyear fields
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,141,"* are handled specially. For example, if the count of 'y' is 2, the year"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,142,"* will be displayed as the zero-based year of the century, which is two"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,143,* digits.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,144,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,145,"* <strong>Month</strong>: 3 or over, use text, otherwise use number."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,146,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,147,* Any characters in the pattern that are not in the ranges of ['a'..'z']
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,148,"* and ['A'..'Z'] will be treated as quoted text. For instance, characters"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,149,"* like ':', '.', ' ', '#' and '@' will appear in the resulting time text"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,150,* even they are not embraced within single quotes.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,151,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,152,"* DateTimeFormat is thread-safe and immutable, and the formatters it returns"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,153,* are as well.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,156,* @since 1.0
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,83,/ Maps Chronology instances to maps that map Locales to DateTimeFormat instances.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,163,* Cache that maps Chronology instances to maps that map
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,164,* Locales to DateTimeFormat instances.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,169,* Gets an instance of a formatter that works using the ISOChronology in UTC
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,170,* in the default locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,172,* @return a format provider
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,179,* Gets an instance of a formatter that works using the ISOChronology in the
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,180,* default time zone and the default locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,182,* @return a format provider
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,94,ublic static DateTimeFormat getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,189,* Gets an instance of a formatter that works using the ISOChronology in the
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,190,* specified time zone and the default locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,192,"* @param zone  the time zone to use, null for default zone"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,193,* @return a format provider
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,195,public static DateTimeFormat getInstance(final DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,98,"ublic static DateTimeFormat getInstance(DateTimeZone zone, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,200,* Gets an instance of a formatter that works using the ISOChronology in the
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,201,* specified time zone and locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,203,"* @param zone  the time zone to use, null for default zone"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,204,"* @param locale  the Locale to use, null for default locale"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,205,* @return a format provider
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,207,"public static DateTimeFormat getInstance(final DateTimeZone zone, final Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,103, @param chrono Chronology to use
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,212,* Gets an instance of a formatter that works using the specified chronology
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,213,* in the default locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,215,"* @param chrono  the chronology to use, null means ISOChronology in the default time zone"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,216,* @return a format provider
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,105,ublic static DateTimeFormat getInstance(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,218,public static DateTimeFormat getInstance(final Chronology chrono) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,110, @param chrono Chronology to use
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,111, @param locale Locale to use
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,223,* Gets an instance of a formatter that works using the specified chronology
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,224,* and locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,226,"* @param chrono  the chronology to use, null means ISOChronology in the default time zone"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,227,"* @param locale  the Locale to use, null for default locale"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,228,* @return a format provider
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,115,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,232,chrono = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,118,"hrow new IllegalArgumentException(""The Locale must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,235,locale = Locale.getDefault();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,251,* Parses the given pattern and appends the rules to the given
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,252,* DateTimeFormatterBuilder.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,254,* @param pattern  pattern specification
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,255,* @throws IllegalArgumentException if the pattern is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,256,* @see #forPattern
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,258,"public static void appendPatternTo(DateTimeFormatterBuilder builder, String pattern) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,259,int length = pattern.length();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,260,int[] indexRef = new int[1];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,262,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,263,indexRef[0] = i;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,264,"String token = parseToken(pattern, indexRef);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,265,i = indexRef[0];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,267,int tokenLen = token.length();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,268,if (tokenLen == 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,269,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,271,char c = token.charAt(0);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,273,switch (c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,274,case 'G': // era designator (text)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,275,builder.appendEraText();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,276,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,277,case 'C': // century of era (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,278,"builder.appendCenturyOfEra(tokenLen, tokenLen);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,279,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,280,case 'x': // weekyear (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,281,case 'y': // year (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,282,case 'Y': // year of era (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,283,if (tokenLen == 2) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,284,// Use a new RemainderDateTimeField to ensure that the year
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,285,// of century is zero-based.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,286,DateTimeField field;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,287,Chronology chronoUTC = builder.getChronology().withUTC();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,288,switch (c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,289,case 'x':
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,290,field = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,291,"(chronoUTC.weekyear(), ""weekyearOfCentury"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,292,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,293,case 'y': default:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,294,field = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,295,"(chronoUTC.year(), ""yearOfCentury"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,296,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,297,case 'Y':
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,298,field = new RemainderDateTimeField
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,299,"(chronoUTC.yearOfEra(), ""yearOfCentury"", ""centuries"", 100);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,300,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,302,"builder.appendNumeric(field, 2, 2);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,303,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,304,// Try to support long year values.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,305,int maxDigits = 9;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,307,// Peek ahead to next token.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,308,if (i + 1 < length) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,309,indexRef[0]++;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,310,"if (isNumericToken(parseToken(pattern, indexRef))) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,311,"// If next token is a number, cannot support long years."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,312,maxDigits = tokenLen;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,314,indexRef[0]--;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,317,switch (c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,318,case 'x':
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,319,"builder.appendWeekyear(tokenLen, maxDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,320,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,321,case 'y':
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,322,"builder.appendYear(tokenLen, maxDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,323,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,324,case 'Y':
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,325,"builder.appendYearOfEra(tokenLen, maxDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,326,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,329,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,330,case 'M': // month of year (text and number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,331,if (tokenLen >= 3) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,332,if (tokenLen >= 4) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,333,builder.appendMonthOfYearText();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,334,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,335,builder.appendMonthOfYearShortText();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,337,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,338,builder.appendMonthOfYear(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,340,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,341,case 'd': // day of month (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,342,builder.appendDayOfMonth(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,343,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,344,"case 'h': // hour of day (number, 1..12)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,345,builder.appendClockhourOfHalfday(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,346,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,347,"case 'H': // hour of day (number, 0..23)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,348,builder.appendHourOfDay(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,349,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,350,case 'm': // minute of hour (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,351,builder.appendMinuteOfHour(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,352,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,353,case 's': // second of minute (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,354,builder.appendSecondOfMinute(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,355,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,356,case 'S': // fraction of second (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,357,"builder.appendFractionOfSecond(tokenLen, tokenLen);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,358,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,359,case 'e': // day of week (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,360,builder.appendDayOfWeek(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,361,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,362,case 'E': // dayOfWeek (text)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,363,if (tokenLen >= 4) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,364,builder.appendDayOfWeekText();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,365,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,366,builder.appendDayOfWeekShortText();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,368,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,369,case 'D': // day of year (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,370,builder.appendDayOfYear(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,371,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,372,case 'w': // week of weekyear (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,373,builder.appendWeekOfWeekyear(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,374,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,375,case 'a': // am/pm marker (text)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,376,builder.appendHalfdayOfDayText();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,377,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,378,case 'k': // hour of day (1..24)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,379,builder.appendClockhourOfDay(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,380,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,381,case 'K': // hour of day (0..11)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,382,builder.appendClockhourOfHalfday(tokenLen);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,383,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,384,case 'z': // time zone (text)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,385,if (tokenLen >= 4) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,386,builder.appendTimeZoneName();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,387,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,388,builder.appendTimeZoneShortName();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,390,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,391,case 'Z': // time zone offset
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,392,if (tokenLen >= 4) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,393,"builder.appendTimeZoneOffset(null, true, 2, 2);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,394,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,395,"builder.appendTimeZoneOffset(null, false, 2, 2);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,397,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,398,case '\'': // literal text
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,399,String sub = token.substring(1);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,400,if (sub.length() == 1) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,401,builder.appendLiteral(sub.charAt(0));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,402,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,403,// Create copy of sub since otherwise the temporary quoted
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,404,// string would still be referenced internally.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,405,builder.appendLiteral(new String(sub));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,407,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,408,default:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,409,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,410,"(""Illegal pattern component: "" + token);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,415,"private static String parseToken(final String pattern, final int[] indexRef) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,416,StringBuffer buf = new StringBuffer();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,418,int i = indexRef[0];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,419,int length = pattern.length();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,421,char c = pattern.charAt(i);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,422,if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,423,"// Scan a run of the same character, which indicates a time"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,424,// pattern.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,425,buf.append(c);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,427,while (i + 1 < length) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,428,char peek = pattern.charAt(i + 1);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,429,if (peek == c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,430,buf.append(c);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,431,i++;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,432,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,433,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,436,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,437,// This will identify token as text.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,438,buf.append('\'');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,440,boolean inLiteral = false;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,442,for (; i < length; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,443,c = pattern.charAt(i);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,445,if (c == '\'') {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,446,if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,447,// '' is treated as escaped '
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,448,i++;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,449,buf.append(c);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,450,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,451,inLiteral = !inLiteral;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,453,} else if (!inLiteral &&
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,454,(c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,455,i--;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,456,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,457,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,458,buf.append(c);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,463,indexRef[0] = i;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,464,return buf.toString();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,467,// Returns true if token should be parsed as a numeric field.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,468,private static boolean isNumericToken(final String token) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,469,int tokenLen = token.length();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,470,if (tokenLen > 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,471,char c = token.charAt(0);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,472,switch (c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,473,case 'c': // century (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,474,case 'C': // century of era (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,475,case 'x': // weekyear (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,476,case 'y': // year (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,477,case 'Y': // year of era (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,478,case 'd': // day of month (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,479,"case 'h': // hour of day (number, 1..12)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,480,"case 'H': // hour of day (number, 0..23)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,481,case 'm': // minute of hour (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,482,case 's': // second of minute (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,483,case 'S': // fraction of second (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,484,case 'e': // day of week (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,485,case 'D': // day of year (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,486,case 'F': // day of week in month (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,487,case 'w': // week of year (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,488,case 'W': // week of month (number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,489,case 'k': // hour of day (1..24)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,490,case 'K': // hour of day (0..11)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,491,return true;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,492,case 'M': // month of year (text and number)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,493,if (tokenLen <= 2) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,494,return true;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,499,return false;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,503,/** The chronology to use */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,505,/** The locale to use */
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,136,/ Maps patterns to formatters.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,137,rivate Map iPatternedCache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,508,/** Maps patterns to formatters */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,509,private transient Map iPatternedCache = new HashMap(7);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,139,/ Maps styles to formatters.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,140,rivate Map iStyledCache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,511,/** Maps styles to formatters */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,512,private transient Map iStyledCache = new HashMap(7);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,142,"rivate DateTimeFormat(Chronology chrono, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,515,* Constructor.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,517,"* @param chrono  the chronology to use, must not be null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,518,"* @param locale  the locale to use, must not be null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,520,"private DateTimeFormat(final Chronology chrono, final Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,521,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,148, Select a format from a custom {@link DateTimeFormatterBuilder#appendPattern pattern}.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,528,* Select a format from a custom pattern.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,150, @param pattern pattern specification
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,151, @throws IllegalArgumentException
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,152, @see DateTimeFormatterBuilder#appendPattern
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,530,* @param pattern  pattern specification
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,531,* @throws IllegalArgumentException if the pattern is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,532,* @see #appendPatternTo
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,154,ublic synchronized DateTimeFormatter forPattern(String pattern) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,155,ateTimeFormatter formatter = (DateTimeFormatter)iPatternedCache.get(pattern);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,534,public synchronized DateTimeFormatter forPattern(final String pattern) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,535,DateTimeFormatter formatter = (DateTimeFormatter) iPatternedCache.get(pattern);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,164,ateTimeFormatterBuilder builder =
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,165,"ew DateTimeFormatterBuilder(iChrono, iLocale).appendPattern(pattern);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,544,"DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder(iChrono, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,545,"appendPatternTo(builder, pattern);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,188," @param style two characters from the set {""S"", ""M"", ""L"", ""F"", ""-""}"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,189, @throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,568,"* @param style  two characters from the set {""S"", ""M"", ""L"", ""F"", ""-""}"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,569,* @throws IllegalArgumentException if the style is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,191,ublic synchronized DateTimeFormatter forStyle(String style) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,571,public synchronized DateTimeFormatter forStyle(final String style) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,207," @param style two characters from the set {""S"", ""M"", ""L"", ""F"", ""-""}"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,208, @throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,587,"* @param style  two characters from the set {""S"", ""M"", ""L"", ""F"", ""-""}"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,588,* @throws IllegalArgumentException if the style is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,210,ublic String getPatternForStyle(String style) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,590,public String getPatternForStyle(final String style) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,227,rivate String getDatePattern(char style) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,607,private String getDatePattern(final char style) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,236,rivate String getTimePattern(char style) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,616,private String getTimePattern(final char style) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,245,"rivate String getDateTimePattern(char dateStyle, char timeStyle) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,625,"private String getDateTimePattern(final char dateStyle, final char timeStyle) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,256,rivate int selectStyle(char c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,636,private int selectStyle(final char c) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,274,rivate static class FPrinter implements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,655,static class FPrinter implements DateTimeFormatter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,277,Printer(DateTimePrinter printer) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,658,FPrinter(final DateTimePrinter printer) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,659,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,289,"ublic void printTo(StringBuffer buf, ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,671,"public void printTo(final StringBuffer buf, final ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,293,"ublic void printTo(Writer out, ReadableInstant instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,675,"public void printTo(final Writer out, final ReadableInstant instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,297,"ublic void printTo(StringBuffer buf, long millisUTC) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,298,"Printer.printTo(buf, millisUTC);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,679,"public void printTo(final StringBuffer buf, final long instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,680,"mPrinter.printTo(buf, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,301,"ublic void printTo(Writer out, long millisUTC) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,302,"Printer.printTo(out, millisUTC);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,683,"public void printTo(final Writer out, final long instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,684,"mPrinter.printTo(out, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,305,"ublic void printTo(StringBuffer buf, long millisUTC, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,306,"Printer.printTo(buf, millisUTC, zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,687,"public void printTo(final StringBuffer buf, final long instant, final DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,688,"mPrinter.printTo(buf, instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,309,"ublic void printTo(Writer out, long millisUTC, DateTimeZone zone)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,691,"public void printTo(final Writer out, final long instant, final DateTimeZone zone)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,311,"Printer.printTo(out, millisUTC, zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,693,"mPrinter.printTo(out, instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,314,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,315,"ateTimeZone zone, long millisLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,316,"Printer.printTo(buf, millisUTC, zone, millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,696,"public void printTo(final StringBuffer buf, final long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,697,"final DateTimeZone zone, final long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,698,"mPrinter.printTo(buf, instant, zone, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,319,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,320,"ateTimeZone zone, long millisLocal)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,701,"public void printTo(final Writer out, final long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,702,"final DateTimeZone zone, final long instantLocal)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,322,"Printer.printTo(out, millisUTC, zone, millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,704,"mPrinter.printTo(out, instant, zone, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,325,ublic String print(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,707,public String print(final ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,329,ublic String print(long millisUTC) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,330,eturn mPrinter.print(millisUTC);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,711,public String print(final long instant) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,712,return mPrinter.print(instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,333,"ublic String print(long millisUTC, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,334,"eturn mPrinter.print(millisUTC, zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,715,"public String print(final long instant, final DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,716,"return mPrinter.print(instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,337,"ublic String print(long millisUTC, DateTimeZone zone, long millisLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,338,"eturn mPrinter.print(millisUTC, zone, millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,719,"public String print(final long instant, final DateTimeZone zone, final long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,720,"return mPrinter.print(instant, zone, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,345,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,727,"public int parseInto(final DateTimeParserBucket bucket, final String text, final int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,349,"ublic int parseInto(ReadWritableInstant instant, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,731,"public int parseInto(final ReadWritableInstant instant, final String text, final int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,353,ublic long parseMillis(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,735,public long parseMillis(final String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,357,"ublic long parseMillis(String text, long millis) throws ParseException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,739,"public long parseMillis(final String text, final long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,361,ublic DateTime parseDateTime(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,743,public DateTime parseDateTime(final String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,365,ublic MutableDateTime parseMutableDateTime(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,747,"public DateTime parseDateTime(final String text, final ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,748,throw unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,751,public MutableDateTime parseMutableDateTime(final String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,752,throw unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,755,"public MutableDateTime parseMutableDateTime(final String text,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,756,final ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,377,rivate static class FParser implements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,769,static class FParser implements DateTimeFormatter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,380,Parser(DateTimeParser parser) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,772,FParser(final DateTimeParser parser) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,773,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,392,"ublic void printTo(StringBuffer buf, ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,785,"public void printTo(final StringBuffer buf, final ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,396,"ublic void printTo(Writer out, ReadableInstant instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,789,"public void printTo(final Writer out, final ReadableInstant instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,400,"ublic void printTo(StringBuffer buf, long millisUTC) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,793,"public void printTo(final StringBuffer buf, final long instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,404,"ublic void printTo(Writer out, long millisUTC) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,797,"public void printTo(final Writer out, final long instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,408,"ublic void printTo(StringBuffer buf, long millisUTC, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,801,"public void printTo(final StringBuffer buf, final long instant, final DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,412,"ublic void printTo(Writer out, long millisUTC, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,805,"public void printTo(final Writer out, final long instant, final DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,416,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,417,"ateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,809,"public void printTo(final StringBuffer buf, final long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,810,"final DateTimeZone zone, final long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,421,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,422,"ateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,814,"public void printTo(final Writer out, final long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,815,"final DateTimeZone zone, final long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,426,ublic String print(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,819,public String print(final ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,430,ublic String print(long millisUTC) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,823,public String print(final long instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,434,"ublic String print(long millisUTC, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,827,"public String print(final long instant, final DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,438,"ublic String print(long millisUTC, DateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,831,"public String print(final long instant, final DateTimeZone zone, final long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,446,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,839,"public int parseInto(final DateTimeParserBucket bucket, final String text, final int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,450,"ublic int parseInto(ReadWritableInstant instant, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,843,"public int parseInto(final ReadWritableInstant instant, final String text, final int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,454,ublic long parseMillis(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,847,public long parseMillis(final String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,458,"ublic long parseMillis(String text, long millis) throws ParseException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,459,"eturn mParser.parseMillis(text, millis);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,851,"public long parseMillis(final String text, final long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,852,"return mParser.parseMillis(text, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,462,ublic DateTime parseDateTime(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,855,public DateTime parseDateTime(final String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,466,ublic MutableDateTime parseMutableDateTime(String text) throws ParseException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,859,"public DateTime parseDateTime(final String text, final ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,860,"return mParser.parseDateTime(text, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,863,public MutableDateTime parseMutableDateTime(final String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,867,"public MutableDateTime parseMutableDateTime(final String text,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,868,final ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,869,"return mParser.parseMutableDateTime(text, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,56,mport java.io.IOException;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,57,mport java.io.Writer;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,58,mport java.text.ParseException;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,60,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,61,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,62,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,63,mport org.joda.time.MutableDateTime;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,64,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,65,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,68, Combined interface for printing and parsing.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,57,* Defines a combined interface for printing and parsing.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,75," Returns the Chronology being used by the formatter, or null if none."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,77,hronology getChronology();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,80, Returns the expected maximum number of characters produced. The actual
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,81, amount should rarely exceed this estimate.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,83,nt estimatePrintedLength();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,86," Prints a ReadableInstant, attempting to use the DateTimeZone supplied by"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,87, the instant.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,89, @param buf formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,90, @param instant instant to format
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,92,"oid printTo(StringBuffer buf, ReadableInstant instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,95," Prints a ReadableInstant, attempting to use the DateTimeZone supplied by"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,96, the instant.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,98, @param out formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,99, @param instant instant to format
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,101,"oid printTo(Writer out, ReadableInstant instant) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,104," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,105, using the formatter's DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,107, @param buf formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,108, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,110,"oid printTo(StringBuffer buf, long millisUTC);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,113," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,114, using the formatter's DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,116, @param out formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,117, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,119,"oid printTo(Writer out, long millisUTC) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,122," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,123, attempting to use the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,125, @param buf formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,126, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,127," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,128, not null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,130,"oid printTo(StringBuffer buf, long millisUTC, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,133," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,134, attempting to use the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,136, @param out formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,137, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,138," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,139, not null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,141,"oid printTo(Writer out, long millisUTC, DateTimeZone zone) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,144," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,145, attempting to use the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,147, @param buf formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,148," @param millisUTC millis since 1970-01-01T00:00:00Z, used by time zone"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,149, printers
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,150," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,151, not null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,152," @param millisLocal pre-calculated millis since 1970-01-01T00:00:00,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,153, local time
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,155,"oid printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,156,"ateTimeZone zone, long millisLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,159," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,160, attempting to use the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,162, @param out formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,163," @param millisUTC millis since 1970-01-01T00:00:00Z, used by time zone"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,164, printers
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,165," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,166, not null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,167," @param millisLocal pre-calculated millis since 1970-01-01T00:00:00,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,168, local time
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,170,"oid printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,171,"ateTimeZone zone, long millisLocal) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,174," Prints a ReadableInstant to a new String, attempting to use the"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,175, DateTimeZone supplied by the instant.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,177, @param instant instant to format
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,178, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,180,tring print(ReadableInstant instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,183," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,184, using the formatter's DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,186, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,187, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,189,tring print(long millisUTC);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,192," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,193, attempting to use the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,195, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,196," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,197, not null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,198, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,200,"tring print(long millisUTC, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,203," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,204, attempting to use the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,206, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,207," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,208, not null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,209," @param millisLocal pre-calculated millis since 1970-01-01T00:00:00,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,210, local time
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,211, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,213,"tring print(long millisUTC, DateTimeZone zone, long millisLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,216, Returns the expected maximum number of characters consumed. The actual
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,217, amount should rarely exceed this estimate.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,219,nt estimateParsedLength();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,222," Parse an element from the given text, saving any fields into the given"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,223," DateTimeParserBucket. If the parse succeeds, the return value is the new"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,224, text position. Note that the parse may succeed without fully reading the
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,225, text.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,226, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,227," If it fails, the return value is negative. To determine the position"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,228," where the parse failed, apply the one's complement operator (~) on the"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,229, return value.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,231, @param bucket field are saved into this
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,232, @param text the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,233, @param position position to start parsing from
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,234," @return new position, if negative, parse failed. Apply complement"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,235, operator (~) to get position of failure
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,236, @throws IllegalArgumentException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,238,"nt parseInto(DateTimeParserBucket bucket, String text, int position);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,241," Parses a datetime from the given text, at the given position, saving the"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,242, result into the fields of the given ReadWritableInstant. If the parse
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,243," succeeds, the return value is the new text position. Note that the parse"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,244, may succeed without fully reading the text.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,245, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,246," If it fails, the return value is negative, but the instant may still be"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,247," modified. To determine the position where the parse failed, apply the"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,248, one's complement operator (~) on the return value.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,250, @param instant an instant that will be modified
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,251, @param text text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,252, @param position position to start parsing from
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,253," @return new position, if negative, parse failed. Apply complement"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,254, operator (~) to get position of failure
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,255, @throws IllegalArgumentException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,257,"nt parseInto(ReadWritableInstant instant, String text, int position);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,260," Parses a datetime from the given text, returning the number of"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,261," milliseconds since the epoch, 1970-01-01T00:00:00Z."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,263, @param text text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,264, @return parsed value expressed in milliseconds since the epoch
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,265, @throws ParseException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,267,ong parseMillis(String text) throws ParseException;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,270," Parses a datetime from the given text, at the given position, returning"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,271," the number of milliseconds since the epoch, 1970-01-01T00:00:00Z. An"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,272," initial millisecond value is passed in, which is relative to the epoch,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,273, local time.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,275, @param text text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,276," @param millis initial value of millis, relative to the epoch, local time"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,277," @return parsed value expressed in milliseconds since the epoch, UTC"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,278, @throws ParseException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,280,"ong parseMillis(String text, long millis) throws ParseException;"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,283," Parses a datetime from the given text, returning a new DateTime."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,285, @param text text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,286, @return parsed value in a DateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,287, @throws ParseException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,289,ateTime parseDateTime(String text) throws ParseException;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,292," Parses a datetime from the given text, returning a new MutableDateTime."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,294, @param text text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,295, @return parsed value in a MutabkeDateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,296, @throws ParseException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,298,utableDateTime parseMutableDateTime(String text) throws ParseException;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,63,// Methods inherited
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,65,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,66,mport org.joda.time.chrono.FractionalDateTimeField;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,67,mport org.joda.time.chrono.RemainderDateTimeField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,65,import org.joda.time.chrono.MillisDurationField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,66,import org.joda.time.chrono.PreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,72," DateTimeFormatters can be built by appending specific fields, patterns, or"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,73, other formatters.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,71,* DateTimeFormatters can be built by appending specific fields or other
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,72,* formatters.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,85,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,86,"* DateTimeFormatterBuilder itself is mutable and not thread-safe, but the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,87,* formatters that it builds are thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,92,"rivate static String parseToken(String pattern, int[] indexRef) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,93,tringBuffer buf = new StringBuffer();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,95,nt i = indexRef[0];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,96,nt length = pattern.length();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,98,har c = pattern.charAt(i);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,99,f (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,100,"/ Scan a run of the same character, which indicates a time"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,101,/ pattern.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,102,uf.append(c);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,104,hile (i + 1 < length) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,105,har peek = pattern.charAt(i + 1);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,106,f (peek == c) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,107,uf.append(c);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,108,++;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,109, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,110,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,113, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,114,/ This will identify token as text.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,115,uf.append('\'');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,117,oolean inLiteral = false;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,119,or (; i < length; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,120, = pattern.charAt(i);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,122,f (c == '\'') {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,123,f (i + 1 < length && pattern.charAt(i + 1) == '\'') {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,124,/ '' is treated as escaped '
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,125,++;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,126,uf.append(c);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,127, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,128,nLiteral = !inLiteral;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,130, else if (!inLiteral &&
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,131,c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,132,--;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,133,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,134, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,135,uf.append(c);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,140,ndexRef[0] = i;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,141,eturn buf.toString();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,164,ublic DateTimeFormatterBuilder(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,114,public DateTimeFormatterBuilder(final DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,172,"ublic DateTimeFormatterBuilder(DateTimeZone zone, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,122,"public DateTimeFormatterBuilder(final DateTimeZone zone, final Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,182,ublic DateTimeFormatterBuilder(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,132,public DateTimeFormatterBuilder(final Chronology chrono) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,189, @param chrono Chronology to use
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,190, @param locale Locale to use
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,139,"* @param chrono Chronology to use, or null for default iso"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,140,"* @param locale Locale to use, or null for default"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,194,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,144,chrono = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,197,"hrow new IllegalArgumentException(""The Locale must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,147,locale = Locale.getDefault();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,306,ublic DateTimeFormatterBuilder append(DateTimeFormatter formatter)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,256,public DateTimeFormatterBuilder append(final DateTimeFormatter formatter)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,321,ublic DateTimeFormatterBuilder append(DateTimePrinter printer)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,271,public DateTimeFormatterBuilder append(final DateTimePrinter printer)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,336,ublic DateTimeFormatterBuilder append(DateTimeParser parser) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,286,public DateTimeFormatterBuilder append(final DateTimeParser parser) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,348,"ublic DateTimeFormatterBuilder append(DateTimePrinter printer,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,349,ateTimeParser parser)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,298,"public DateTimeFormatterBuilder append(final DateTimePrinter printer,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,299,final DateTimeParser parser)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,374,"ublic DateTimeFormatterBuilder append(DateTimePrinter printer,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,375,ateTimeParser[] parsers)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,324,"public DateTimeFormatterBuilder append(final DateTimePrinter printer,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,325,final DateTimeParser[] parsers)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,405,ublic DateTimeFormatterBuilder appendOptional(DateTimeParser parser) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,355,public DateTimeFormatterBuilder appendOptional(final DateTimeParser parser) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,412,rivate DateTimeFormatterBuilder append0(Object element) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,362,private DateTimeFormatterBuilder append0(final Object element) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,420,"rivate DateTimeFormatterBuilder append0(DateTimePrinter printer,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,421,ateTimeParser parser)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,370,private DateTimeFormatterBuilder append0(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,371,"final DateTimePrinter printer, final DateTimeParser parser) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,433,ublic DateTimeFormatterBuilder appendLiteral(char c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,382,public DateTimeFormatterBuilder appendLiteral(final char c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,390,* @throws IllegalArgumentException if text is null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,441,ublic DateTimeFormatterBuilder appendLiteral(String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,392,public DateTimeFormatterBuilder appendLiteral(final String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,393,if (text == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,394,"throw new IllegalArgumentException(""Literal must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,407,* @throws IllegalArgumentException if field is null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,454,"ublic DateTimeFormatterBuilder appendNumeric(DateTimeField field,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,455,"nt minDigits, int maxDigits)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,409,public DateTimeFormatterBuilder appendNumeric(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,410,"DateTimeField field, int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,411,if (field == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,412,"throw new IllegalArgumentException(""Field must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,435,* @throws IllegalArgumentException if field is null
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,479,"ublic DateTimeFormatterBuilder appendSignedNumeric(DateTimeField field,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,480,"nt minDigits, int maxDigits)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,437,public DateTimeFormatterBuilder appendSignedNumeric(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,438,"DateTimeField field, int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,439,if (field == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,440,"throw new IllegalArgumentException(""Field must not be null"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,501,ublic DateTimeFormatterBuilder appendText(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,461,public DateTimeFormatterBuilder appendText(final DateTimeField field) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,511,ublic DateTimeFormatterBuilder appendShortText(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,471,public DateTimeFormatterBuilder appendShortText(final DateTimeField field) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,517," sans decimal point. For example, if the range is specified as 60000"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,518," (milliseconds in one minute) and the time is 12:30:45, the value printed"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,519," is 75. A decimal point is implied, so the fraction is 0.75, or three-quarters"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,520, of a minute.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,477,"* sans decimal point. For example, if the field is specified as"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,478,"* minuteOfHour and the time is 12:30:45, the value printed is 75. A"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,479,"* decimal point is implied, so the fraction is 0.75, or three-quarters of"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,480,* a minute.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,482,* @param field field should operate in UTC or be time zone agnostic
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,524, @param rangeInMillis range of values in fraction
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,485,* @throws IllegalArgumentException if field's duration is not precise
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,526,"ublic DateTimeFormatterBuilder appendFraction(int minDigits, int maxDigits,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,527,nt rangeInMillis)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,487,public DateTimeFormatterBuilder appendFraction(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,488,"DateTimeField field, int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,489,if (field.getDurationField().isPrecise() == false) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,490,"throw new IllegalArgumentException(""Field duration must be precise"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,535,"eturn append0(new Fraction(iChrono, minDigits, maxDigits, rangeInMillis));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,498,"return append0(new Fraction(iChrono, field, minDigits, maxDigits));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,542,"ublic DateTimeFormatterBuilder appendFractionOfSecond(int minDigits, int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,543,"eturn appendFraction(minDigits, maxDigits, DateTimeConstants.MILLIS_PER_SECOND);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,505,"public DateTimeFormatterBuilder appendFractionOfSecond(final int minDigits, final int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,506,"return appendFraction(iChronoUTC.secondOfDay(), minDigits, maxDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,550,"ublic DateTimeFormatterBuilder appendFractionOfMinute(int minDigits, int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,551,"eturn appendFraction(minDigits, maxDigits, DateTimeConstants.MILLIS_PER_MINUTE);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,513,"public DateTimeFormatterBuilder appendFractionOfMinute(final int minDigits, final int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,514,"return appendFraction(iChronoUTC.minuteOfDay(), minDigits, maxDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,558,"ublic DateTimeFormatterBuilder appendFractionOfHour(int minDigits, int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,559,"eturn appendFraction(minDigits, maxDigits, DateTimeConstants.MILLIS_PER_HOUR);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,521,"public DateTimeFormatterBuilder appendFractionOfHour(final int minDigits, final int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,522,"return appendFraction(iChronoUTC.hourOfDay(), minDigits, maxDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,566,"ublic DateTimeFormatterBuilder appendFractionOfDay(int minDigits, int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,567,eturn appendFraction
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,568,"minDigits, maxDigits, DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,529,"public DateTimeFormatterBuilder appendFractionOfDay(final int minDigits, final int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,530,"return appendFraction(iChronoUTC.dayOfYear(), minDigits, maxDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,576,ublic DateTimeFormatterBuilder appendMillisOfSecond(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,538,public DateTimeFormatterBuilder appendMillisOfSecond(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,585,ublic DateTimeFormatterBuilder appendMillisOfDay(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,547,public DateTimeFormatterBuilder appendMillisOfDay(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,594,ublic DateTimeFormatterBuilder appendSecondOfMinute(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,556,public DateTimeFormatterBuilder appendSecondOfMinute(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,603,ublic DateTimeFormatterBuilder appendSecondOfDay(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,565,public DateTimeFormatterBuilder appendSecondOfDay(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,612,ublic DateTimeFormatterBuilder appendMinuteOfHour(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,574,public DateTimeFormatterBuilder appendMinuteOfHour(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,621,ublic DateTimeFormatterBuilder appendMinuteOfDay(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,583,public DateTimeFormatterBuilder appendMinuteOfDay(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,630,ublic DateTimeFormatterBuilder appendHourOfDay(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,592,public DateTimeFormatterBuilder appendHourOfDay(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,639,ublic DateTimeFormatterBuilder appendClockhourOfDay(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,601,public DateTimeFormatterBuilder appendClockhourOfDay(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,648,ublic DateTimeFormatterBuilder appendHourOfHalfday(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,610,public DateTimeFormatterBuilder appendHourOfHalfday(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,657,ublic DateTimeFormatterBuilder appendClockhourOfHalfday(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,619,public DateTimeFormatterBuilder appendClockhourOfHalfday(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,666,ublic DateTimeFormatterBuilder appendDayOfWeek(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,628,public DateTimeFormatterBuilder appendDayOfWeek(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,675,ublic DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,637,public DateTimeFormatterBuilder appendDayOfMonth(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,684,ublic DateTimeFormatterBuilder appendDayOfYear(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,646,public DateTimeFormatterBuilder appendDayOfYear(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,693,ublic DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,655,public DateTimeFormatterBuilder appendWeekOfWeekyear(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,704,"ublic DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,666,"public DateTimeFormatterBuilder appendWeekyear(final int minDigits, final int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,714,ublic DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,676,public DateTimeFormatterBuilder appendMonthOfYear(final int minDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,725,"ublic DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,687,"public DateTimeFormatterBuilder appendYear(final int minDigits, final int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,736,"ublic DateTimeFormatterBuilder appendYearOfEra(int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,698,"public DateTimeFormatterBuilder appendYearOfEra(final int minDigits, final int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,747,"ublic DateTimeFormatterBuilder appendYearOfCentury(int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,709,"public DateTimeFormatterBuilder appendYearOfCentury(final int minDigits, final int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,758,"ublic DateTimeFormatterBuilder appendCenturyOfEra(int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,720,"public DateTimeFormatterBuilder appendCenturyOfEra(final int minDigits, final int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,843,"ublic DateTimeFormatterBuilder appendTimeZoneOffset(String zeroOffsetText,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,844,"oolean showSeparators,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,845,"nt minFields, int maxFields)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,805,public DateTimeFormatterBuilder appendTimeZoneOffset(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,806,"final String zeroOffsetText, final boolean showSeparators,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,807,"final int minFields, final int maxFields) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,852," The pattern syntax is compatible with java.text.SimpleDateFormat, but a"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,853, few more symbols are also supported.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,854, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,855, To specify the time format use a <em>time pattern</em> string.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,856," In this pattern, all ASCII letters are reserved as pattern letters,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,857, which are defined as the following:
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,858, <blockquote>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,859, <pre>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,860, Symbol  Meaning                      Presentation  Examples
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,862, G       era                          text          AD
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,863, C       century of era (&gt;=0)         number        20
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,864, Y       year of era (&gt;=0)            year          1996
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,866, x       weekyear                     year          1996
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,867, w       week of weekyear             number        27
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,868, e       day of week                  number        2
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,869, E       day of week                  text          Tuesday; Tue
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,871, y       year                         year          1996
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,872, D       day of year                  number        189
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,873, M       month of year                month         July; Jul; 07
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,874, d       day of month                 number        10
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,876, a       halfday of day               text          PM
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,877, K       hour of halfday (0~11)       number        0
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,878, h       clockhour of halfday (1~12)  number        12
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,880, H       hour of day (0~23)           number        0
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,881, k       clockhour of day (1~24)      number        24
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,882, m       minute of hour               number        30
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,883, s       second of minute             number        55
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,884, S       fraction of second           number        978
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,886, z       time zone                    text          Pacific Standard Time; PST
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,887, Z       RFC 822 time zone            text          -0800; -08:00
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,889, '       escape for text              delimiter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,890, ''      single quote                 literal       '
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,891, </pre>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,892, </blockquote>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,893, The count of pattern letters determine the format.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,894, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,895," <strong>Text</strong>: If the number of pattern letters is 4 or more,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,896, the full form is used; otherwise a short or abbreviated form is used if
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,897, available.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,898, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,899, <strong>Number</strong>: The minimum number of digits. Shorter numbers
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,900, are zero-padded to this amount.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,901, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,902, <strong>Year</strong>: Numeric presentation for year and weekyear fields
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,903," are handled specially. For example, if the count of 'y' is 2, the year"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,904," will be displayed as the zero-based year of the century, which is two"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,905, digits.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,906, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,907," <strong>Month</strong>: 3 or over, use text, otherwise use number."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,908, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,909, Any characters in the pattern that are not in the ranges of ['a'..'z']
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,910," and ['A'..'Z'] will be treated as quoted text. For instance, characters"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,911," like ':', '.', ' ', '#' and '@' will appear in the resulting time text"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,912, even they are not embraced within single quotes.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,914,ublic DateTimeFormatterBuilder appendPattern(String pattern)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,915,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,917,nt length = pattern.length();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,918,nt[] indexRef = new int[1];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,920,or (int i=0; i<length; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,921,ndexRef[0] = i;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,922,"tring token = parseToken(pattern, indexRef);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,923, = indexRef[0];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,925,nt tokenLen = token.length();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,926,f (tokenLen == 0) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,927,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,929,har c = token.charAt(0);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,931,witch (c) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,932,ase 'G': // era designator (text)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,933,ppendEraText();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,934,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,935,ase 'C': // century of era (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,936,"ppendCenturyOfEra(tokenLen, tokenLen);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,937,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,938,ase 'x': // weekyear (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,939,ase 'y': // year (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,940,ase 'Y': // year of era (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,941,f (tokenLen == 2) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,942,/ Use a new RemainderDateTimeField to ensure that the year
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,943,/ of century is zero-based.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,944,ateTimeField field;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,945,witch (c) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,946,ase 'x':
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,947,"ield = new RemainderDateTimeField(""weekyearOfCentury"", iChronoUTC.weekyear(), 100);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,948,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,949,ase 'y': default:
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,950,"ield = new RemainderDateTimeField(""yearOfCentury"", iChronoUTC.year(), 100);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,951,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,952,ase 'Y':
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,953,"ield = new RemainderDateTimeField(""yearOfCentury"", iChronoUTC.yearOfEra(), 100);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,954,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,956,"ppendNumeric(field, 2, 2);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,957, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,958,/ Try to support long year values.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,959,nt maxDigits = 9;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,961,/ Peek ahead to next token.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,962,f (i + 1 < length) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,963,ndexRef[0]++;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,964,"f (isNumericToken(parseToken(pattern, indexRef))) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,965,"/ If next token is a number, cannot support long years."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,966,axDigits = tokenLen;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,968,ndexRef[0]--;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,971,witch (c) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,972,ase 'x':
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,973,"ppendWeekyear(tokenLen, maxDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,974,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,975,ase 'y':
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,976,"ppendYear(tokenLen, maxDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,977,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,978,ase 'Y':
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,979,"ppendYearOfEra(tokenLen, maxDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,980,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,983,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,984,ase 'M': // month of year (text and number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,985,f (tokenLen >= 3) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,986,f (tokenLen >= 4) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,987,ppendMonthOfYearText();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,988, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,989,ppendMonthOfYearShortText();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,991, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,992,ppendMonthOfYear(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,994,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,995,ase 'd': // day of month (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,996,ppendDayOfMonth(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,997,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,998,"ase 'h': // hour of day (number, 1..12)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,999,ppendClockhourOfHalfday(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1000,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1001,"ase 'H': // hour of day (number, 0..23)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1002,ppendHourOfDay(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1003,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1004,ase 'm': // minute of hour (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1005,ppendMinuteOfHour(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1006,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1007,ase 's': // second of minute (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1008,ppendSecondOfMinute(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1009,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1010,ase 'S': // fraction of second (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1011,"ppendFractionOfSecond(tokenLen, tokenLen);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1012,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1013,ase 'e': // day of week (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1014,ppendDayOfWeek(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1015,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1016,ase 'E': // dayOfWeek (text)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1017,f (tokenLen >= 4) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1018,ppendDayOfWeekText();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1019, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1020,ppendDayOfWeekShortText();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1022,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1023,ase 'D': // day of year (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1024,ppendDayOfYear(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1025,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1026,ase 'w': // week of weekyear (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1027,ppendWeekOfWeekyear(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1028,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1029,ase 'a': // am/pm marker (text)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1030,ppendHalfdayOfDayText();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1031,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1032,ase 'k': // hour of day (1..24)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1033,ppendClockhourOfDay(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1034,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1035,ase 'K': // hour of day (0..11)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1036,ppendClockhourOfHalfday(tokenLen);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1037,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1038,ase 'z': // time zone (text)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1039,f (tokenLen >= 4) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1040,ppendTimeZoneName();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1041, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1042,ppendTimeZoneShortName();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1044,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1045,ase 'Z': // RFC 822 time zone
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1046,f (tokenLen >= 4) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1047,"ppendTimeZoneOffset(null, true, 2, 2);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1048, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1049,"ppendTimeZoneOffset(null, false, 2, 2);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1051,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1052,ase '\'': // literal text
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1053,tring sub = token.substring(1);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1054,f (sub.length() == 1) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1055,ppendLiteral(sub.charAt(0));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1056, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1057,/ Create copy of sub since otherwise the temporary quoted
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1058,/ string would still be referenced internally.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1059,ppendLiteral(new String(sub));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1061,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1062,efault:
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1063,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1064,"""Illegal pattern component: "" + token);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1068,eturn this;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1071,/ Returns true if token should be parsed as a numeric field.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1072,rivate boolean isNumericToken(String token) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1073,nt tokenLen = token.length();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1074,f (tokenLen > 0) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1075,har c = token.charAt(0);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1076,witch (c) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1077,ase 'c': // century (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1078,ase 'C': // century of era (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1079,ase 'x': // weekyear (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1080,ase 'y': // year (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1081,ase 'Y': // year of era (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1082,ase 'd': // day of month (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1083,"ase 'h': // hour of day (number, 1..12)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1084,"ase 'H': // hour of day (number, 0..23)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1085,ase 'm': // minute of hour (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1086,ase 's': // second of minute (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1087,ase 'S': // fraction of second (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1088,ase 'e': // day of week (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1089,ase 'D': // day of year (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1090,ase 'F': // day of week in month (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1091,ase 'w': // week of year (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1092,ase 'W': // week of month (number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1093,ase 'k': // hour of day (1..24)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1094,ase 'K': // hour of day (0..11)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1095,eturn true;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1096,ase 'M': // month of year (text and number)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1097,f (tokenLen <= 2) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1098,eturn true;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1103,eturn false;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1133,rivate boolean isPrinter(Object f) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,839,private boolean isPrinter(final Object f) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1143,rivate boolean isParser(Object f) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,849,private boolean isParser(final Object f) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1153,rivate boolean isFormatter(Object f) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,859,private boolean isFormatter(final Object f) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1175,rotected final DateTimeZone getDateTimeZone() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1176,ateTimeZone zone = iChrono.getDateTimeZone();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1177,eturn zone == null ? DateTimeZone.UTC : zone;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1195,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1196,"ateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,896,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,897,"DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1200,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1201,"ateTimeZone zone, long millisLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,901,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,902,"DateTimeZone zone, long instantLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1205,"ublic String print(long millisUTC, DateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,906,"public String print(long instant, DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1251,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1252,"ateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,952,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,953,"DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1256,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1257,"ateTimeZone zone, long millisLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,957,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,958,"DateTimeZone zone, long instantLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1261,"ublic String print(long millisUTC, DateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,962,"public String print(long instant, DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1284,"umberFormatter(Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1285,"ateTimeField field, int maxParsedDigits,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1286,oolean signed) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,985,NumberFormatter(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,986,"Chronology chrono, DateTimeField field,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,987,"int maxParsedDigits, boolean signed) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1354,"npaddedNumber(Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1355,"ateTimeField field, int maxParsedDigits,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1356,oolean signed)
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1055,"UnpaddedNumber(Chronology chrono, DateTimeField field,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1056,"int maxParsedDigits, boolean signed)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1365,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1366,"ateTimeZone zone, long millisLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1367,"ormatUtils.appendUnpaddedInteger(buf, iField.get(millisLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1065,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1066,"DateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1067,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1068,"FormatUtils.appendUnpaddedInteger(buf, iField.get(instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1069,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1070,buf.append('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1370,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1371,"ateTimeZone zone, long millisLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1372,"ormatUtils.writeUnpaddedInteger(out, iField.get(millisLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1074,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1075,"DateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1076,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1077,"FormatUtils.writeUnpaddedInteger(out, iField.get(instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1078,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1079,out.write('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1391,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1392,"ateTimeZone zone, long millisLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1393,ormatUtils.appendPaddedInteger
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1394,"buf, iField.get(millisLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1099,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1100,"DateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1101,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1102,FormatUtils.appendPaddedInteger
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1103,"(buf, iField.get(instantLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1104,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1105,for (int i=iMinPrintedDigits; --i>=0; ) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1106,buf.append('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1397,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1398,"ateTimeZone zone, long millisLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1399,ormatUtils.writePaddedInteger
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1400,"out, iField.get(millisLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1111,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1112,"DateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1113,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1114,FormatUtils.writePaddedInteger
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1115,"(out, iField.get(instantLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1116,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1117,for (int i=iMinPrintedDigits; --i>=0; ) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1118,out.write('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1411,"extField(Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1412,"ateTimeField field, Locale locale, boolean isShort) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1131,"TextField(Chronology chrono, DateTimeField field,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1132,"Locale locale, boolean isShort) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1420,f (iShort) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1421,eturn iField.getMaximumShortTextLength(iLocale);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1422, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1423,eturn iField.getMaximumTextLength(iLocale);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1140,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1141,if (iShort) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1142,return iField.getMaximumShortTextLength(iLocale);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1143,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1144,return iField.getMaximumTextLength(iLocale);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1146,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1147,return 1;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1427,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1428,"ateTimeZone zone, long millisLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1429,"uf.append(print(millisUTC, zone, millisLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1151,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1152,"DateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1153,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1154,"buf.append(print(instant, zone, instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1155,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1156,buf.append('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1432,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1433,"ateTimeZone zone, long millisLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1434,"ut.write(print(millisUTC, zone, millisLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1160,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1161,"DateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1162,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1163,"out.write(print(instant, zone, instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1164,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1165,out.write('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1437,"ublic final String print(long millisUTC, DateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1169,"public final String print(long instant, DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1439,"eturn iField.getAsShortText(millisLocal, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1171,"return iField.getAsShortText(instantLocal, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1441,"eturn iField.getAsText(millisLocal, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1173,"return iField.getAsText(instantLocal, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1208,private final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1209,private final long iRangeMillis;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1478,rivate final int iRange;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1482,rivate transient DateTimeField iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1215,private transient DateTimeField iParseField;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1484,"raction(Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1485,"nt minDigits, int maxDigits, int rangeInMillis) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1217,"Fraction(Chronology chrono, DateTimeField field,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1218,"int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1220,iField = field;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1221,iRangeMillis = field.getDurationField().getUnitMillis();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1494,Range = rangeInMillis;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1519,f (((rangeInMillis * scaler) / scaler) == rangeInMillis) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1253,if (((iRangeMillis * scaler) / scaler) == iRangeMillis) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1534,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1535,"ateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1268,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1269,"DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1537,"rintTo(buf, null, millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1271,"printTo(buf, null, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1543,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1544,"ateTimeZone zone, long millisLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1545,"rintTo(null, out, millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1277,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1278,"DateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1279,"printTo(null, out, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1548,"rivate void printTo(StringBuffer buf, Writer out, long millis)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1282,"private void printTo(StringBuffer buf, Writer out, long instantLocal)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1285,int minDigits = iMinDigits;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1552,f (millis >= 0) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1553,raction = millis % iRange;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1554, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1555,raction = iRange - 1 + (millis + 1) % iRange;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1288,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1289,fraction = iField.remainder(instantLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1290,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1291,if (buf != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1292,while (--minDigits >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1293,buf.append('\ufffd');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1295,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1296,while (--minDigits >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1297,out.write('\ufffd');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1300,return;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1558,nt minDigits = iMinDigits;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1574,ong scaled = fraction * iScaler / iRange;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1317,long scaled = fraction * iScaler / iRangeMillis;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1632,ong n = iRange;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1375,long n = iRangeMillis;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1654,f (iField == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1655,"Field = new FractionalDateTimeField("""", 1, iRange);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1397,if (iParseField == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1398,iParseField = new PreciseDateTimeField
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1399,"("""", MillisDurationField.INSTANCE, iField.getDurationField());"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1658,"ucket.saveField(iField, (int)value);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1402,"bucket.saveField(iParseField, (int)value);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1702,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1703,"ateTimeZone zone, long millisLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1704,nt offset = (int)(millisLocal - millisUTC);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1446,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1447,"DateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1448,int offset = (int)(instantLocal - instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1759,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1760,"ateTimeZone zone, long millisLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1761,nt offset = (int)(millisLocal - millisUTC);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1503,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1504,"DateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1505,int offset = (int)(instantLocal - instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2013,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2014,"ateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1757,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1758,"DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2019,"uf.append(zone.getShortName(millisUTC, this.iLocale));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1763,"buf.append(zone.getShortName(instant, this.iLocale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2021,"uf.append(zone.getName(millisUTC, this.iLocale));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1765,"buf.append(zone.getName(instant, this.iLocale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2025,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2026,"ateTimeZone zone, long millisLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1769,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1770,"DateTimeZone zone, long instantLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2031,"ut.write(zone.getShortName(millisUTC, this.iLocale));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1775,"out.write(zone.getShortName(instant, this.iLocale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2033,"ut.write(zone.getName(millisUTC, this.iLocale));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1777,"out.write(zone.getName(instant, this.iLocale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2037,"ublic String print(long millisUTC, DateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1781,"public String print(long instant, DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2042,"eturn zone.getShortName(millisUTC, this.iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1786,"return zone.getShortName(instant, this.iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2044,"eturn zone.getName(millisUTC, this.iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1788,"return zone.getName(instant, this.iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2108,"ublic void printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2109,"ateTimeZone zone, long millisLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1852,"public void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1853,"DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2118,"lements[i].printTo(buf, millisUTC, zone, millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1862,"elements[i].printTo(buf, instant, zone, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2122,"ublic void printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2123,"ateTimeZone zone, long millisLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1866,"public void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1867,"DateTimeZone zone, long instantLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2132,"lements[i].printTo(out, millisUTC, zone, millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1876,"elements[i].printTo(out, instant, zone, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,56,mport java.text.ParseException;
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,59,import org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,64, Converts sequences of human-readable characters into datetimes.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,63,* Defines an interface for parsing textual representations of datetimes.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,75,"* @return the chronology in use, may be null if none"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,83,* @return the estimated length
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,94, @param bucket field are saved into this
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,95, @param text the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,96, @param position position to start parsing from
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,97," @return new position, if negative, parse failed. Apply complement"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,98, operator (~) to get position of failure
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,98,* @param bucket  field are saved into this
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,99,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,100,* @param position  position to start parsing from
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,101,"* @return new position, negative value means parse failed -"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,102,*  apply complement operator (~) to get position of failure
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,113, @param instant an instant that will be modified
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,114, @param text text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,115, @param position position to start parsing from
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,116," @return new position, if negative, parse failed. Apply complement"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,117, operator (~) to get position of failure
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,117,* @param instant  an instant that will be modified
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,118,* @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,119,* @param position  position to start parsing from
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,120,"* @return new position, negative value means parse failed -"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,121,*  apply complement operator (~) to get position of failure
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,126, @param text text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,131,* @param text  text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,128, @throws ParseException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,133,* @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,130,ong parseMillis(String text) throws ParseException;
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,135,long parseMillis(String text);
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,134," the number of milliseconds since the epoch, 1970-01-01T00:00:00Z. An"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,135," initial millisecond value is passed in, which is relative to the epoch,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,139,"* the number of milliseconds since the epoch, 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,140,"* An initial millisecond value is passed in, which is relative to the epoch,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,138, @param text text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,139," @param millis initial value of millis, relative to the epoch, local time"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,143,* @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,144,"* @param instantLocal  initial value of instant, relative to the epoch, local time"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,141, @throws ParseException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,146,* @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,143,"ong parseMillis(String text, long millis) throws ParseException;"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,148,"long parseMillis(String text, long instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,148, @param text text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,154,* @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,155,* @return parsed value in a DateTime object
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,156,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,158,DateTime parseDateTime(String text);
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,161,"* Parses a datetime from the given text, returning a new DateTime, using"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,162,* the given instant to supply field values that were not parsed.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,164,* @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,165,* @param instant  initial value of DateTime
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,150, @throws ParseException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,167,* @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,152,ateTime parseDateTime(String text) throws ParseException;
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,169,"DateTime parseDateTime(String text, ReadableInstant instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,157, @param text text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,158, @return parsed value in a MutabkeDateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,159, @throws ParseException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,174,* @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,175,* @return parsed value in a MutableDateTime object
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,176,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,178,MutableDateTime parseMutableDateTime(String text);
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,181,"* Parses a datetime from the given text, returning a new MutableDateTime,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,182,* using the given instant to supply field values that were not parsed.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,184,* @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,185,* @param instant  initial value of DateTime
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,186,* @return parsed value in a MutableDateTime object
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,187,* @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,161,utableDateTime parseMutableDateTime(String text) throws ParseException;
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,189,"MutableDateTime parseMutableDateTime(String text, ReadableInstant instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,66,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,67,* DateTimeParserBucket is mutable and not thread-safe.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,80," @param millis the initial millis from 1970-01-01T00:00:00, local time"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,82,"* @param instantLocal the initial millis from 1970-01-01T00:00:00, local time"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,82,ublic DateTimeParserBucket(long millis) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,83,Millis = millis;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,84,public DateTimeParserBucket(long instantLocal) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,85,iMillis = instantLocal;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,109,ublic long getOffset() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,111,public int getOffset() {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,229, The field with the larger range is ordered first. If the ranges
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,230," match, then the field with the larger unit is ordered first. This"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,231," ordering gives preference to more precise fields. For example,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,232, dayOfYear is chosen over monthOfYear.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,231,"* The field with the larger range is ordered first, where null is"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,232,"* considered infinite. If the ranges match, then the field with the"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,233,"* larger unit is ordered first. This ordering casues ""smaller"" fields"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,234,"* to be set last, and thus their value sticks. For example, dayOfMonth"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,235,"* takes precedence over monthOfYear, and dayOfWeek takes precedence"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,236,* over dayOfMonth.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,236,ong a = iField.getRangeMillis();
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,237,ong b = other.getRangeMillis();
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,238,f (a > b) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,239,eturn -1;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,240, else if (a < b) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,241,eturn 1;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,240,int result = compareReverse
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,241,"(iField.getRangeDurationField(), other.getRangeDurationField());"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,242,if (result != 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,243,return result;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,243, = iField.getUnitMillis();
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,244, = other.getUnitMillis();
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,245,f (a > b) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,245,return compareReverse
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,246,"(iField.getDurationField(), other.getDurationField());"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,249,"private int compareReverse(Comparable a, Comparable b) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,250,if (a == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,251,if (b == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,252,return 0;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,247, else if (a < b) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,256,if (b == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,250,eturn 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,259,return -a.compareTo(b);
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,64, Converts datetimes into a sequence of human-readable characters.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,64,* Defines an interface for creating textual representations of datetimes.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,76,"* @return the chronology in use, may be null if none"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,84,* @return the estimated length
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,88, @param buf formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,89, @param instant instant to format
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,93,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,94,* @param instant  instant to format
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,97, @param out formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,98, @param instant instant to format
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,102,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,103,* @param instant  instant to format
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,106, @param buf formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,107, @param millisUTC millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,112,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,113,* @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,109,"oid printTo(StringBuffer buf, long millisUTC);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,115,"void printTo(StringBuffer buf, long instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,115, @param out formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,116, @param millisUTC millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,121,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,122,* @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,118,"oid printTo(Writer out, long millisUTC) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,124,"void printTo(Writer out, long instant) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,124, @param buf formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,125, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,126," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,127, not null
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,131,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,132,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,133,"* @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,129,"oid printTo(StringBuffer buf, long millisUTC, DateTimeZone zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,135,"void printTo(StringBuffer buf, long instant, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,135, @param out formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,136, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,137," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,138, not null
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,141,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,142,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,143,"* @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,140,"oid printTo(Writer out, long millisUTC, DateTimeZone zone) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,145,"void printTo(Writer out, long instant, DateTimeZone zone) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,146, @param buf formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,147," @param millisUTC millis since 1970-01-01T00:00:00Z, used by time zone"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,148, printers
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,149," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,150, not null
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,151," @param millisLocal pre-calculated millis since 1970-01-01T00:00:00,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,152, local time
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,152,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,153,"* @param instant  millis since 1970-01-01T00:00:00Z, used by time zone printers"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,154,"* @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,155,"* @param instantLocal  pre-calculated millis since 1970-01-01T00:00:00, local time"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,154,"oid printTo(StringBuffer buf, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,155,"ateTimeZone zone, long millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,157,"void printTo(StringBuffer buf, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,158,"DateTimeZone zone, long instantLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,161, @param out formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,162," @param millisUTC millis since 1970-01-01T00:00:00Z, used by time zone"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,163, printers
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,164," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,165, not null
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,166," @param millisLocal pre-calculated millis since 1970-01-01T00:00:00,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,167, local time
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,164,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,165,"* @param instant millis  since 1970-01-01T00:00:00Z, used by time zone printers"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,166,"* @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,167,"* @param instantLocal  pre-calculated millis since 1970-01-01T00:00:00, local time"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,169,"oid printTo(Writer out, long millisUTC,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,170,"ateTimeZone zone, long millisLocal) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,169,"void printTo(Writer out, long instant,"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,170,"DateTimeZone zone, long instantLocal) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,176, @param instant instant to format
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,177,* @param instant  instant to format
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,185, @param millisUTC millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,186,* @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,188,tring print(long millisUTC);
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,189,String print(long instant);
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,194, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,195," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,196, not null
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,195,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,196,"* @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,199,"tring print(long millisUTC, DateTimeZone zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,199,"String print(long instant, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,205, @param millisUTC millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,206," @param zone DateTimeZone to use, overriding the formatter's own zone if"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,207, not null
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,208," @param millisLocal pre-calculated millis since 1970-01-01T00:00:00,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,209, local time
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,205,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,206,"* @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,207,"* @param instantLocal  pre-calculated millis since 1970-01-01T00:00:00, local time"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,212,"tring print(long millisUTC, DateTimeZone zone, long millisLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,210,"String print(long instant, DateTimeZone zone, long instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,57,import java.io.Writer;
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,60,* Defines a formatted field's prefix or suffix text.
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,62,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,64,public interface DurationFieldAffix {
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,65,int calculatePrintedLength(int value);
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,67,"void printTo(StringBuffer buf, int value);"
True,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,JodaTime/src/java/org/joda/time/format/DurationFieldAffix.java,69,"void printTo(Writer out, int value) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,57,* Combined interface for printing and parsing.
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,58,* <p>
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,59,* See each extended interface for details of the methods.
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,61,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,62,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,63,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,JodaTime/src/java/org/joda/time/format/DurationFormatter.java,65,"public interface DurationFormatter extends DurationPrinter, DurationParser {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,57,import java.io.Writer;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,58,import java.util.ArrayList;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,59,import java.util.List;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,61,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,62,import org.joda.time.DurationType;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,63,import org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,68,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,70,public class DurationFormatterBuilder {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,71,private static final int PRINT_ZERO_NEVER = 0;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,72,private static final int PRINT_ZERO_MAYBE = 1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,73,private static final int PRINT_ZERO_ALWAYS = 2;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,75,private int iMinPrintedDigits = 1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,76,private int iPrintZeroSetting;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,78,private DurationFieldAffix iPrefix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,80,// List of separate DurationFormatters.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,81,private List iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,83,public DurationFormatterBuilder() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,84,iFormatters = new ArrayList();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,88,* Converts to a DurationPrinter that prints using all the appended
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,89,* elements. Subsequent changes to this builder do not affect the returned
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,90,* printer.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,92,public DurationPrinter toPrinter() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,93,return toPrinter(iFormatters);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,97,* Converts to a DurationPrinter that prints using all the appended
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,98,* elements. Subsequent changes to this builder do not affect the returned
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,99,* printer.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,101,* @param alternate alternate text to print when printer emits no fields
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,103,public DurationPrinter toPrinter(String alternate) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,104,DurationPrinter printer = toPrinter();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,105,if (alternate != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,106,"return new AlternateSelector(printer, new Literal(alternate));"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,108,return printer;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,112,* Converts to a DurationPrinter that prints using all the appended
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,113,* elements. Subsequent changes to this builder do not affect the returned
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,114,* printer.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,116,* @param alternate alternate printer to use when printer emits no fields
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,118,public DurationPrinter toPrinter(DurationPrinter alternate) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,119,DurationPrinter printer = toPrinter();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,120,if (alternate != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,121,"return new AlternateSelector(printer, alternate);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,123,return printer;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,126,private static DurationPrinter toPrinter(List formatters) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,127,int size = formatters.size();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,128,if (size >= 2 && formatters.get(1) instanceof Separator) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,129,DurationPrinter before = (DurationPrinter) formatters.get(0);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,130,if (size == 2) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,131,// Separator at the end would never print anything.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,132,return before;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,134,return ((Separator) formatters.get(1)).finish
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,135,"(before, toPrinter(formatters.subList(2, size)));"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,137,return createComposite(formatters);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,141,"* Depending on what rules are applied, a parser may not be buildable due"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,142,* to ambiguities that may arise during parsing.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,145,public boolean canBuildParser() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,146,// TODO
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,147,return true;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,152,"* Clears out all the appended elements, allowing this builder to be"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,153,* reused.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,155,public void clear() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,156,iMinPrintedDigits = 1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,157,iPrintZeroSetting = PRINT_ZERO_NEVER;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,158,iPrefix = null;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,159,iFormatters.clear();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,163,"* Appends just a printer. With no matching parser, a parser cannot be"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,164,* built from this DurationFormatterBuilder.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,166,public DurationFormatterBuilder append(DurationPrinter printer)
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,167,throws IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,169,if (printer == null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,170,"throw new IllegalArgumentException(""No printer supplied"");"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,172,clearPrefix();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,173,iFormatters.add(printer);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,174,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,178,"* Instructs the printer to emit specific text, and the parser to expect"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,179,* it. The parser is case-insensitive.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,181,* @throws IllegalArgumentException if text is null
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,183,public DurationFormatterBuilder appendLiteral(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,184,if (text == null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,185,"throw new IllegalArgumentException(""Literal must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,187,clearPrefix();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,188,iFormatters.add(new Literal(text));
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,189,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,193,* Set the minimum digits printed for the next and following appended
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,194,"* fields. By default, the minimum digits printed is one. If the field value"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,195,"* is zero, it is not printed unless a printZero rule is applied."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,197,public DurationFormatterBuilder minimumPrintedDigits(int minDigits) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,198,iMinPrintedDigits = minDigits;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,199,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,203,* Set the maximum digits parsed for the next and following appended
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,204,"* fields. By default, the maximum digits parsed is ten."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,206,public DurationFormatterBuilder maximumParsedDigits(int maxDigits) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,207,// TODO
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,208,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,212,* Reject signed values when parsing the next and following appended fields.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,214,public DurationFormatterBuilder rejectSignedValues() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,215,// TODO
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,216,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,220,* Never print zero values for the next and following appended fields. This
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,221,* is the default setting.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,223,public DurationFormatterBuilder printZeroNever() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,224,iPrintZeroSetting = PRINT_ZERO_NEVER;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,225,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,229,* Print zero values for the next and following appened fields only if the
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,230,* duration supports it.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,232,public DurationFormatterBuilder printZeroMaybe() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,233,iPrintZeroSetting = PRINT_ZERO_MAYBE;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,234,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,238,"* Always print zero values for the next and following appended fields,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,239,* even if the duration doesn't support it.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,241,public DurationFormatterBuilder printZeroAlways() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,242,iPrintZeroSetting = PRINT_ZERO_ALWAYS;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,243,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,247,* Append a field prefix which applies only to the next appended field. If
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,248,"* the field is not printed, neither is the prefix."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,250,* @param text text to print before field only if field is printed
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,251,* @see #appendSuffix
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,253,public DurationFormatterBuilder appendPrefix(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,254,if (text == null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,255,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,257,return appendPrefix(new SingularAffix(text));
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,261,* Append a field prefix which applies only to the next appended field. If
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,262,"* the field is not printed, neither is the prefix."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,263,* <p>
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,264,"* During parsing, the singular and plural versions are accepted whether"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,265,* or not the actual value matches plurality.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,267,* @param singularText text to print if field value is one
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,268,* @param pluralText text to print if field value is not one
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,269,* @see #appendSuffix
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,271,"public DurationFormatterBuilder appendPrefix(String singularText,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,272,String pluralText) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,273,if (singularText == null || pluralText == null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,274,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,276,"return appendPrefix(new PluralAffix(singularText, pluralText));"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,280,* Append a field prefix which applies only to the next appended field. If
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,281,"* the field is not printed, neither is the prefix."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,283,* @param prefix custom prefix
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,284,* @see #appendSuffix
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,286,public DurationFormatterBuilder appendPrefix(DurationFieldAffix prefix) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,287,if (prefix == null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,288,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,290,if (iPrefix != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,291,"prefix = new CompositeAffix(iPrefix, prefix);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,293,iPrefix = prefix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,294,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,298,"* Instruct the printer to emit a numeric years field, if supported."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,300,public DurationFormatterBuilder appendYears() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,301,appendField(1);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,302,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,306,"* Instruct the printer to emit a numeric years field, if supported."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,308,public DurationFormatterBuilder appendMonths() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,309,appendField(2);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,310,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,314,"* Instruct the printer to emit a numeric weeks field, if supported."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,316,public DurationFormatterBuilder appendWeeks() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,317,appendField(3);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,318,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,322,"* Instruct the printer to emit a numeric days field, if supported."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,324,public DurationFormatterBuilder appendDays() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,325,appendField(4);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,326,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,330,"* Instruct the printer to emit a numeric hours field, if supported."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,332,public DurationFormatterBuilder appendHours() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,333,appendField(5);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,334,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,338,"* Instruct the printer to emit a numeric minutes field, if supported."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,340,public DurationFormatterBuilder appendMinutes() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,341,appendField(6);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,342,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,346,"* Instruct the printer to emit a numeric seconds field, if supported."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,348,public DurationFormatterBuilder appendSeconds() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,349,appendField(7);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,350,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,354,"* Instruct the printer to emit a numeric millis field, if supported."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,356,public DurationFormatterBuilder appendMillis() {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,357,appendField(8);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,358,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,361,private void appendField(int type) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,362,"iFormatters.add(new FieldFormatter(iMinPrintedDigits, iPrintZeroSetting,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,363,"type, iPrefix, null));"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,364,iPrefix = null;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,368,* Append a field suffix which applies only to the last appended field. If
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,369,"* the field is not printed, neither is the suffix."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,371,* @param text text to print after field only if field is printed
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,372,* @throws IllegalStateException if no field exists to append to
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,373,* @see #appendPrefix
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,375,public DurationFormatterBuilder appendSuffix(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,376,if (text == null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,377,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,379,return appendSuffix(new SingularAffix(text));
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,383,* Append a field suffix which applies only to the last appended field. If
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,384,"* the field is not printed, neither is the suffix."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,385,* <p>
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,386,"* During parsing, the singular and plural versions are accepted whether or"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,387,* not the actual value matches plurality.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,389,* @param singularText text to print if field value is one
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,390,* @param pluralText text to print if field value is not one
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,391,* @throws IllegalStateException if no field exists to append to
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,392,* @see #appendPrefix
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,394,"public DurationFormatterBuilder appendSuffix(String singularText,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,395,String pluralText) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,396,if (singularText == null || pluralText == null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,397,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,399,"return appendSuffix(new PluralAffix(singularText, pluralText));"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,403,* Append a field suffix which applies only to the last appended field. If
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,404,"* the field is not printed, neither is the suffix."
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,406,* @param suffix custom suffix
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,407,* @throws IllegalStateException if no field exists to append to
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,408,* @see #appendPrefix
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,410,public DurationFormatterBuilder appendSuffix(DurationFieldAffix suffix) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,411,Object f = null;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,412,if (iFormatters.size() > 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,413,f = iFormatters.get(iFormatters.size() - 1);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,415,if (!(f instanceof FieldFormatter)) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,416,"throw new IllegalStateException(""No field to apply suffix to"");"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,418,clearPrefix();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,419,"f = new FieldFormatter((FieldFormatter) f, suffix);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,420,"iFormatters.set(iFormatters.size() - 1, f);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,421,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,425,"* During printing, separators are only printed if fields are printed"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,426,* following the latest one.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,427,* <p>
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,428,* Note: appending a separator discontinues any further work on the latest
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,429,* appended field.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,431,public DurationFormatterBuilder appendSeparator(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,432,"return appendSeparator(text, text);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,436,"* During printing, separators are only printed if fields are printed"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,437,* following the latest one.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,438,* <p>
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,439,"* During parsing, either text parameter is accepted, and is"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,440,* case-insensitive.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,441,* <p>
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,442,* Note: appending a separator discontinues any further work on the latest
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,443,* appended field.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,445,* @param finalText alternate used if this is the final separator
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,446,* printed
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,448,"public DurationFormatterBuilder appendSeparator(String text,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,449,String finalText) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,450,if (text == null || finalText == null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,451,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,454,clearPrefix();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,456,List formatters = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,458,if (formatters.size() == 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,459,// Separator at the beginning would never print anything.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,460,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,463,// Create a composite over all the fields between separators.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,464,int i;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,465,Separator lastSeparator = null;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,466,for (i=formatters.size(); --i>=0; ) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,467,if (formatters.get(i) instanceof Separator) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,468,lastSeparator = (Separator) formatters.get(i);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,469,"formatters = formatters.subList(i + 1, formatters.size());"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,470,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,474,if (lastSeparator != null && formatters.size() == 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,475,// Merge two adjacent separators together.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,476,"iFormatters.set(i, lastSeparator.merge(text, finalText));"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,477,} else {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,478,DurationPrinter composite = createComposite(formatters);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,479,formatters.clear();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,480,formatters.add(composite);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,482,// The separator will be finished later.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,483,"formatters.add(new Separator(text, finalText));"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,486,return this;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,489,private void clearPrefix() throws IllegalStateException {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,490,if (iPrefix != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,491,"throw new IllegalStateException(""Prefix not followed by field"");"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,493,iPrefix = null;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,496,private static DurationPrinter createComposite(List formatters) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,497,if (formatters.size() == 1) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,498,return (DurationPrinter)formatters.get(0);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,499,} else {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,500,return new Composite(formatters);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,504,private static final class SingularAffix implements DurationFieldAffix {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,505,private final String iText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,507,SingularAffix(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,508,iText = text;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,511,public int calculatePrintedLength(int value) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,512,return iText.length();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,515,"public void printTo(StringBuffer buf, int value) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,516,buf.append(iText);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,519,"public void printTo(Writer out, int value) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,520,out.write(iText);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,524,private static final class PluralAffix implements DurationFieldAffix {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,525,private final String iSingularText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,526,private final String iPluralText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,528,"PluralAffix(String singularText, String pluralText) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,529,iSingularText = singularText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,530,iPluralText = pluralText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,533,public int calculatePrintedLength(int value) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,534,return (value == 1 ? iSingularText : iPluralText).length();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,537,"public void printTo(StringBuffer buf, int value) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,538,buf.append(value == 1 ? iSingularText : iPluralText);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,541,"public void printTo(Writer out, int value) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,542,out.write(value == 1 ? iSingularText : iPluralText);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,546,private static final class CompositeAffix implements DurationFieldAffix {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,547,private final DurationFieldAffix iLeft;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,548,private final DurationFieldAffix iRight;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,550,"CompositeAffix(DurationFieldAffix left, DurationFieldAffix right) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,551,iLeft = left;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,552,iRight = right;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,555,public int calculatePrintedLength(int value) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,556,return iLeft.calculatePrintedLength(value)
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,557,+ iRight.calculatePrintedLength(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,560,"public void printTo(StringBuffer buf, int value) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,561,"iLeft.printTo(buf, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,562,"iRight.printTo(buf, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,565,"public void printTo(Writer out, int value) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,566,"iLeft.printTo(out, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,567,"iRight.printTo(out, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,571,private static final class FieldFormatter extends AbstractDurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,572,implements DurationPrinter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,574,private final int iMinPrintedDigits;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,575,private final int iPrintZeroSetting;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,577,private final int iFieldType;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,579,private final DurationFieldAffix iPrefix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,580,private final DurationFieldAffix iSuffix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,582,"FieldFormatter(int minPrintedDigits, int printZeroSetting,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,583,"int fieldType, DurationFieldAffix prefix, DurationFieldAffix suffix) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,584,iMinPrintedDigits = minPrintedDigits;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,585,iPrintZeroSetting = printZeroSetting;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,586,iFieldType = fieldType;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,587,iPrefix = prefix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,588,iSuffix = suffix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,591,"FieldFormatter(FieldFormatter field, DurationFieldAffix suffix) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,592,iMinPrintedDigits = field.iMinPrintedDigits;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,593,iPrintZeroSetting = field.iPrintZeroSetting;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,594,iFieldType = field.iFieldType;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,595,iPrefix = field.iPrefix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,596,if (field.iSuffix != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,597,"suffix = new CompositeAffix(field.iSuffix, suffix);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,599,iSuffix = suffix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,602,public int countFieldsToPrint(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,603,if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(duration) >= 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,604,return 1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,606,return 0;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,609,"public int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,610,return stopAt <= 0 ? 0 : countFieldsToPrint(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,613,public int calculatePrintedLength(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,614,long valueLong = getFieldValue(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,615,if (valueLong < 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,616,return 0;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,619,int value = (int)valueLong;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,621,int sum = Math.max
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,622,"(FormatUtils.calculateDigitCount(value), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,623,if (value < 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,624,// Account for sign character
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,625,sum++;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,628,DurationFieldAffix affix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,629,if ((affix = iPrefix) != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,630,sum += affix.calculatePrintedLength(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,632,if ((affix = iSuffix) != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,633,sum += affix.calculatePrintedLength(value);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,636,return sum;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,639,"public void printTo(StringBuffer buf, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,640,long valueLong = getFieldValue(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,641,if (valueLong < 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,642,return;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,644,int value = (int)valueLong;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,646,DurationFieldAffix affix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,647,if ((affix = iPrefix) != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,648,"affix.printTo(buf, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,650,int minDigits = iMinPrintedDigits;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,651,if (minDigits <= 1) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,652,"FormatUtils.appendUnpaddedInteger(buf, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,653,} else {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,654,"FormatUtils.appendPaddedInteger(buf, value, minDigits);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,656,if ((affix = iSuffix) != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,657,"affix.printTo(buf, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,661,"public void printTo(Writer out, ReadableDuration duration) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,662,long valueLong = getFieldValue(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,663,if (valueLong < 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,664,return;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,666,int value = (int)valueLong;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,668,DurationFieldAffix affix;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,669,if ((affix = iPrefix) != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,670,"affix.printTo(out, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,672,int minDigits = iMinPrintedDigits;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,673,if (minDigits <= 1) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,674,"FormatUtils.writeUnpaddedInteger(out, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,675,} else {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,676,"FormatUtils.writePaddedInteger(out, value, minDigits);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,678,if ((affix = iSuffix) != null) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,679,"affix.printTo(out, value);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,684,"* @return negative value if nothing to print, otherwise lower 32 bits"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,685,* is signed int value.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,687,long getFieldValue(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,688,DurationType type;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,689,if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,690,type = null; // Don't need to check if supported.
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,691,} else {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,692,type = duration.getDurationType();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,695,int value;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,697,switch (iFieldType) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,698,default:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,699,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,700,case 1:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,701,if (type != null && type.years().isSupported() == false) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,702,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,704,value = duration.getYears();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,705,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,706,case 2:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,707,if (type != null && type.months().isSupported() == false) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,708,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,710,value = duration.getMonths();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,711,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,712,case 3:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,713,if (type != null && type.weeks().isSupported() == false) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,714,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,716,value = duration.getWeeks();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,717,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,718,case 4:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,719,if (type != null && type.days().isSupported() == false) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,720,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,722,value = duration.getDays();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,723,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,724,case 5:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,725,if (type != null && type.hours().isSupported() == false) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,726,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,728,value = duration.getHours();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,729,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,730,case 6:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,731,if (type != null && type.minutes().isSupported() == false) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,732,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,734,value = duration.getMinutes();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,735,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,736,case 7:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,737,if (type != null && type.seconds().isSupported() == false) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,738,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,740,value = duration.getSeconds();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,741,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,742,case 8:
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,743,if (type != null && type.millis().isSupported() == false) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,744,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,746,value = duration.getMillis();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,747,break;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,750,if (value == 0 && iPrintZeroSetting == PRINT_ZERO_NEVER) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,751,return -1;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,754,return value & 0xffffffffL;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,758,private static final class Literal extends AbstractDurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,759,implements DurationPrinter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,761,private final String iText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,763,Literal(String text) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,764,iText = text;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,767,"public int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,768,return 0;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,771,public int calculatePrintedLength(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,772,return iText.length();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,775,"public void printTo(StringBuffer buf, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,776,buf.append(iText);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,779,"public void printTo(Writer out, ReadableDuration duration) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,780,out.write(iText);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,784,private static final class Separator extends AbstractDurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,785,implements DurationPrinter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,787,private final String iText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,788,private final String iFinalText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,790,private final DurationPrinter iBefore;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,791,private final DurationPrinter iAfter;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,793,"Separator(String text, String finalText) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,794,"this(text, finalText, null, null);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,797,"Separator(String text, String finalText,"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,798,"DurationPrinter before, DurationPrinter after) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,799,iText = text;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,800,iFinalText = finalText;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,801,iBefore = before;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,802,iAfter = after;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,805,"public int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,806,"int sum = iBefore.countFieldsToPrint(duration, stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,807,if (sum < stopAt) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,808,"sum += iAfter.countFieldsToPrint(duration, stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,810,return sum;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,813,public int calculatePrintedLength(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,814,int sum = iBefore.calculatePrintedLength(duration)
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,815,+ iAfter.calculatePrintedLength(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,817,"if (iBefore.countFieldsToPrint(duration, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,818,"int afterCount = iAfter.countFieldsToPrint(duration, 2);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,819,if (afterCount > 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,820,sum += (afterCount > 1 ? iText : iFinalText).length();
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,824,return sum;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,827,"public void printTo(StringBuffer buf, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,828,DurationPrinter before = iBefore;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,829,DurationPrinter after = iAfter;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,831,"before.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,833,"if (before.countFieldsToPrint(duration, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,834,"int afterCount = after.countFieldsToPrint(duration, 2);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,835,if (afterCount > 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,836,buf.append(afterCount > 1 ? iText : iFinalText);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,840,"after.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,843,"public void printTo(Writer out, ReadableDuration duration) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,844,DurationPrinter before = iBefore;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,845,DurationPrinter after = iAfter;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,847,"before.printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,849,"if (before.countFieldsToPrint(duration, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,850,"int afterCount = after.countFieldsToPrint(duration, 2);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,851,if (afterCount > 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,852,out.write(afterCount > 1 ? iText : iFinalText);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,856,"after.printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,859,"Separator merge(String text, String finalText) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,860,"return new Separator(iText + text, iFinalText + finalText, iBefore, iAfter);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,863,"Separator finish(DurationPrinter before, DurationPrinter after) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,864,"return new Separator(iText, iFinalText, before, after);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,868,private static final class Composite extends AbstractDurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,869,implements DurationPrinter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,871,private final DurationPrinter[] iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,873,Composite(List formatters) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,874,iFormatters = (DurationPrinter[])formatters.toArray
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,875,(new DurationPrinter[formatters.size()]);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,878,"public int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,879,int sum = 0;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,880,DurationPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,881,for (int i=printers.length; sum < stopAt && --i>=0; ) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,882,sum += printers[i].countFieldsToPrint(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,884,return sum;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,887,public int calculatePrintedLength(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,888,int sum = 0;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,889,DurationPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,890,for (int i=printers.length; --i>=0; ) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,891,sum += printers[i].calculatePrintedLength(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,893,return sum;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,896,"public void printTo(StringBuffer buf, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,897,DurationPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,898,int len = printers.length;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,899,for (int i=0; i<len; i++) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,900,"printers[i].printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,904,"public void printTo(Writer out, ReadableDuration duration) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,905,DurationPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,906,int len = printers.length;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,907,for (int i=0; i<len; i++) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,908,"printers[i].printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,913,private static final class AlternateSelector extends AbstractDurationFormatter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,914,implements DurationPrinter
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,916,private final DurationPrinter iPrimary;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,917,private final DurationPrinter iAlternate;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,919,"AlternateSelector(DurationPrinter primary, DurationPrinter alternate) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,920,iPrimary = primary;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,921,iAlternate = alternate;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,924,"public int countFieldsToPrint(ReadableDuration duration, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,925,"int count = iPrimary.countFieldsToPrint(duration, stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,926,if (count <= 0) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,927,"count = iAlternate.countFieldsToPrint(duration, stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,929,return count;
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,932,public int calculatePrintedLength(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,933,"if (iPrimary.countFieldsToPrint(duration, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,934,return iPrimary.calculatePrintedLength(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,935,} else {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,936,return iAlternate.calculatePrintedLength(duration);
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,940,"public void printTo(StringBuffer buf, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,941,"if (iPrimary.countFieldsToPrint(duration, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,942,"iPrimary.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,943,} else {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,944,"iAlternate.printTo(buf, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,948,"public void printTo(Writer out, ReadableDuration duration) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,949,"if (iPrimary.countFieldsToPrint(duration, 1) > 0) {"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,950,"iPrimary.printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,951,} else {
True,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java,952,"iAlternate.printTo(out, duration);"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,56,import org.joda.time.Duration;
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,57,import org.joda.time.DurationType;
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,58,import org.joda.time.MutableDuration;
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,59,import org.joda.time.ReadWritableDuration;
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,62,* Converts sequences of human-readable characters into durations.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,64,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,65,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,67,public interface DurationParser {
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,71,"* Parses a duration from the given text, at the given position, saving the"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,72,* result into the fields of the given ReadWritableDuration. If the parse
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,73,"* succeeds, the return value is the new text position. Note that the parse"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,74,* may succeed without fully reading the text.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,75,* <p>
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,76,"* If it fails, the return value is negative, but the duration may still be"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,77,"* modified. To determine the position where the parse failed, apply the"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,78,* one's complement operator (~) on the return value.
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,80,* @param duration  a duration that will be modified
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,81,* @param durationStr  text to parse
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,82,* @param position position to start parsing from
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,83,"* @return new position, if negative, parse failed. Apply complement"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,84,* operator (~) to get position of failure
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,85,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,87,"int parseInto(ReadWritableDuration duration, String durationStr, int position);"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,90,"* Parses a duration from the given text, returning a new Duration."
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,92,* @param type  defines which fields may be parsed
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,93,* @param durationStr  text to parse
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,94,* @return parsed value in a Duration object
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,95,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,97,"Duration parseDuration(DurationType type, String durationStr);"
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,100,"* Parses a duration from the given text, returning a new MutableDuration."
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,102,* @param type  defines which fields may be parsed
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,103,* @param durationStr  text to parse
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,104,* @return parsed value in a MutableDuration object
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,105,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DurationParser.java,JodaTime/src/java/org/joda/time/format/DurationParser.java,107,"MutableDuration parseMutableDuration(DurationType type, String durationStr);"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,57,import java.io.Writer;
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,59,import org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,62,* Converts durations into a sequence of human-readable characters.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,64,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,65,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,67,public interface DurationPrinter {
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,70,* Returns the amount of fields from the given duration that this printer
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,71,* will print.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,73,* @param duration duration to use
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,74,* @return amount of fields printed
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,76,int countFieldsToPrint(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,79,* Returns the amount of fields from the given duration that this printer
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,80,* will print.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,82,* @param duration duration to use
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,83,* @param stopAt stop counting at this value
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,84,* @return amount of fields printed
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,86,"int countFieldsToPrint(ReadableDuration duration, int stopAt);"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,89,* Returns the exact number of characters produced for the given duration.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,91,* @param duration duration to use
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,92,* @return the estimated length
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,94,int calculatePrintedLength(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,98,* Prints a ReadableDuration to a StringBuffer.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,100,* @param buf  the formatted duration is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,101,* @param duration  duration to format
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,103,"void printTo(StringBuffer buf, ReadableDuration duration);"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,106,* Prints a ReadableDuration to a Writer.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,108,* @param out  the formatted duration is written out
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,109,* @param duration  duration to format
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,111,"void printTo(Writer out, ReadableDuration duration) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,114,* Prints a ReadableDuration to a new String.
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,116,* @param duration  duration to format
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,117,* @return the printed result
True,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,JodaTime/src/java/org/joda/time/format/DurationPrinter.java,119,String print(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,62,* <p>
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,63,* FormatUtils is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,65,ublic class FormatUtils {
False,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,66,rivate static final double LOG_10 = Math.log(10);
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,67,// Note: Use strictfp and StrictMath to ensure consistent results on all VMs.
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,68,public strictfp class FormatUtils {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,69,private static final double LOG_10 = StrictMath.log(10);
False,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,112,igits = (int)(Math.log(value) / LOG_10) + 1;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,115,digits = (int)(StrictMath.log(value) / LOG_10) + 1;
False,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,150,nt digits = (int)(Math.log(value) / LOG_10) + 1;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,153,int digits = (int)(StrictMath.log(value) / LOG_10) + 1;
False,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,201,igits = (int)(Math.log(value) / LOG_10) + 1;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,204,digits = (int)(StrictMath.log(value) / LOG_10) + 1;
False,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,241,nt digits = (int)(Math.log(value) / LOG_10) + 1;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,244,int digits = (int)(StrictMath.log(value) / LOG_10) + 1;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,347,"* Calculates the number of decimal digits for the given value, ignoring"
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,348,* sign.
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,350,public static int calculateDigitCount(int value) {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,351,if (value < 0) {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,352,if (value != Integer.MIN_VALUE) {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,353,value = -value;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,354,} else {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,355,return 10;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,358,return
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,359,(value < 10 ? 1 :
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,360,(value < 100 ? 2 :
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,361,(value < 1000 ? 3 :
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,362,(value < 10000 ? 4 :
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,363,((int)(StrictMath.log(value) / LOG_10) + 1)))));
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,64, Factory methods for many ISO8601 formats (the ISO standard is a framework
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,65," for outputting data, but not an absolute standard). The most common formats"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,66," are date, time, and dateTime."
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,64,* ISODateTimeFormat provides factory methods for the ISO8601 standard.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,65,* <p>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,66,* ISO8601 is the international standard for data interchange. It defines a
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,67,"* framework, rather than an absolute standard. As a result this provider has a"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,68,* number of methods that represent common uses of the framework. The most common
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,69,"* formats are {@link #date() date}, {@link #time() time}, and {@link #dateTime() dateTime}."
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,70,* <p>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,71,"* For example, to format a date time in ISO format:"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,72,* <pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,73,* DateTime dt = new DateTime();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,74,* DateTimeFormatter fmt = DateTimeFormat.getInstance().dateTime();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,75,* String str = fmt.print(dt);
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,76,* </pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,77,* <p>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,78,"* ISODateTimeFormat is thread-safe and immutable, and the formatters it"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,79,* returns are as well.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,82,* @since 1.0
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,74,/ Maps Chronology instances to instances.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,89,* Cache that maps Chronology instances to instances.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,94,* Gets an instance of a format provider that uses the ISOChronology in UTC.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,96,* @return a format provider
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,103,* Gets an instance of a format provider that uses the ISOChronology
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,104,* in the default time zone.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,106,* @return a format provider
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,85,ublic static ISODateTimeFormat getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,113,* Gets an instance of a format provider that uses the ISOChronology
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,114,* in the specified time zone.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,116,* @return a format provider
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,118,public static ISODateTimeFormat getInstance(final DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,90, @param chrono Chronology to use
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,123,* Gets an instance of a format provider that uses the specified chronology.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,125,"* @param chrono  the chronology to use, null means default chronology"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,126,* @return a format provider
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,94,"hrow new IllegalArgumentException(""The Chronology must not be null"");"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,130,chrono = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,145,rivate ISODateTimeFormat(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,183,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,185,"* @param chrono  the chronology to use, must not be null"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,187,private ISODateTimeFormat(final Chronology chrono) {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,150, Returns a generic ISO date parser that accepts formats described by
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,193,* Returns a generic ISO date parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,173, Returns a generic ISO date parser that accepts formats described by
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,216,* Returns a generic ISO date parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,194, Returns a generic ISO time parser that accepts formats described by
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,237,* Returns a generic ISO time parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,217, Returns a generic ISO time parser that accepts formats described by
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,260,* Returns a generic ISO time parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,242, Returns a generic ISO datetime parser that accepts formats described by
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,285,* Returns a generic ISO datetime parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,328,"appendPattern(""yyyyMMdd"")"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,373,".appendYear(4, 4)"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,374,.appendMonthOfYear(2)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,375,.appendDayOfMonth(2)
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,342,"appendPattern(""HHmmss"")"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,389,.appendHourOfDay(2)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,390,.appendMinuteOfHour(2)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,391,.appendSecondOfMinute(2)
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,63,* <p>
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,64,* CachedDateTimeZone is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,70,"nteger i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");"
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,72,"/ With a cache size of 512, dates that lie within any 69.7 year period"
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,73,/ have no cache collisions.
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,74,nt cacheSize = (i == null) ? 512 : i.intValue();
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,76,/ Ensure cache size is even power of 2.
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,77,acheSize--;
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,78,nt shift = 0;
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,79,hile (cacheSize > 0) {
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,80,hift++;
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,81,acheSize >>= 1;
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,72,Integer i;
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,73,try {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,74,"i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");"
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,75,} catch (SecurityException e) {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,76,i = null;
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,79,int cacheSize;
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,80,if (i == null) {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,81,"// With a cache size of 512, dates that lie within any 69.7 year"
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,82,// period have no cache collisions.
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,83,cacheSize = 512; // (1 << 9)
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,84,} else {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,85,cacheSize = i.intValue();
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,86,// Ensure cache size is even power of 2.
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,87,cacheSize--;
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,88,int shift = 0;
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,89,while (cacheSize > 0) {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,90,shift++;
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,91,cacheSize >>= 1;
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,93,cacheSize = 1 << shift;
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,83,acheSize = 1 << shift;
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,130,ublic String getNameKey(long millis) {
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,131,eturn getInfo(millis).getNameKey(millis);
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,141,public String getNameKey(long instant) {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,142,return getInfo(instant).getNameKey(instant);
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,145,public int getOffset(long instant) {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,146,return getInfo(instant).getOffset(instant);
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,134,ublic int getOffset(long millis) {
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,135,eturn getInfo(millis).getOffset(millis);
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,149,public int getStandardOffset(long instant) {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,150,return getInfo(instant).getStandardOffset(instant);
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,138,ublic int getStandardOffset(long millis) {
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,139,eturn getInfo(millis).getStandardOffset(millis);
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,153,public boolean isFixed() {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,154,return iZone.isFixed();
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,142,ublic long nextTransition(long millis) {
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,143,eturn iZone.nextTransition(millis);
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,157,public long nextTransition(long instant) {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,158,return iZone.nextTransition(instant);
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,146,ublic long previousTransition(long millis) {
False,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,147,eturn iZone.previousTransition(millis);
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,161,public long previousTransition(long instant) {
True,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/CachedDateTimeZone.java,162,return iZone.previousTransition(instant);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,79,* <p>
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,80,"* DateTimeZoneBuilder itself is mutable and not thread-safe, but the"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,81,* DateTimeZone objects that it builds are thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,541,"ublic long next(long millis, int standardOffset, int saveMillis) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,544,"public long next(long instant, int standardOffset, int saveMillis) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,552,illis += offset;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,555,instant += offset;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,555,"ong next = chrono.monthOfYear().set(millis, iMonthOfYear);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,556,"ext = chrono.millisOfDay().set(next, iMillisOfDay);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,558,"long next = chrono.monthOfYear().set(instant, iMonthOfYear);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,559,// Be lenient with millisOfDay.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,560,"next = chrono.millisOfDay().set(next, 0);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,561,"next = chrono.millisOfDay().add(next, iMillisOfDay);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,560,f (next <= millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,565,if (next <= instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,566,f (next <= millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,571,if (next <= instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,581,"ublic long previous(long millis, int standardOffset, int saveMillis) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,586,"public long previous(long instant, int standardOffset, int saveMillis) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,592,illis += offset;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,597,instant += offset;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,595,"ong prev = chrono.monthOfYear().set(millis, iMonthOfYear);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,596,"rev = chrono.millisOfDay().set(prev, iMillisOfDay);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,600,"long prev = chrono.monthOfYear().set(instant, iMonthOfYear);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,601,// Be lenient with millisOfDay.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,602,"prev = chrono.millisOfDay().set(prev, 0);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,603,"prev = chrono.millisOfDay().add(prev, iMillisOfDay);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,600,f (prev >= millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,607,if (prev >= instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,606,f (prev >= millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,613,if (prev >= instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,695,"rivate long setDayOfMonth(Chronology chrono, long millis) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,702,"private long setDayOfMonth(Chronology chrono, long instant) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,697,"illis = chrono.dayOfMonth().set(millis, iDayOfMonth);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,704,"instant = chrono.dayOfMonth().set(instant, iDayOfMonth);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,699,"illis = chrono.dayOfMonth().set(millis, 1);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,700,"illis = chrono.monthOfYear().add(millis, 1);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,701,"illis = chrono.dayOfMonth().add(millis, iDayOfMonth);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,706,"instant = chrono.dayOfMonth().set(instant, 1);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,707,"instant = chrono.monthOfYear().add(instant, 1);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,708,"instant = chrono.dayOfMonth().add(instant, iDayOfMonth);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,703,eturn millis;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,710,return instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,706,"rivate long setDayOfWeek(Chronology chrono, long millis) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,707,nt dayOfWeek = chrono.dayOfWeek().get(millis);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,713,"private long setDayOfWeek(Chronology chrono, long instant) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,714,int dayOfWeek = chrono.dayOfWeek().get(instant);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,719,"illis = chrono.dayOfWeek().add(millis, daysToAdd);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,726,"instant = chrono.dayOfWeek().add(instant, daysToAdd);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,721,eturn millis;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,728,return instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,750,"ublic long next(long millis, int standardOffset, int saveMillis) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,751,"eturn iOfYear.next(millis, standardOffset, saveMillis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,757,"public long next(long instant, int standardOffset, int saveMillis) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,758,"return iOfYear.next(instant, standardOffset, saveMillis);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,757,"ublic long previous(long millis, int standardOffset, int saveMillis) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,758,"eturn iOfYear.previous(millis, standardOffset, saveMillis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,764,"public long previous(long instant, int standardOffset, int saveMillis) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,765,"return iOfYear.previous(instant, standardOffset, saveMillis);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,824,"ublic long next(final long millis, int standardOffset, int saveMillis) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,831,"public long next(final long instant, int standardOffset, int saveMillis) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,828,ong testMillis = millis;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,835,long testInstant = instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,831,f (millis == Long.MIN_VALUE) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,838,if (instant == Long.MIN_VALUE) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,834,ear = chrono.year().get(millis + wallOffset);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,841,year = chrono.year().get(instant + wallOffset);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,838,/ First advance millis to start of from year.
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,839,"estMillis = chrono.year().set(0, iFromYear) - wallOffset;"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,845,// First advance instant to start of from year.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,846,"testInstant = chrono.year().set(0, iFromYear) - wallOffset;"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,842,estMillis -= 1;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,849,testInstant -= 1;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,845,"ong next = iRecurrence.next(testMillis, standardOffset, saveMillis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,852,"long next = iRecurrence.next(testInstant, standardOffset, saveMillis);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,847,f (next > millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,854,if (next > instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,851,ext = millis;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,858,next = instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1065,"ublic Transition nextTransition(final long millis, final int saveMillis) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1072,"public Transition nextTransition(final long instant, final int saveMillis) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1075,"ong next = rule.next(millis, iStandardOffset, saveMillis);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1076,f (next <= millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1082,"long next = rule.next(instant, iStandardOffset, saveMillis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1083,if (next <= instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1164,ublic String getNameKey(long millis) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1165,eturn findMatchingRecurrence(millis).getNameKey();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1171,public String getNameKey(long instant) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1172,return findMatchingRecurrence(instant).getNameKey();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1168,ublic int getOffset(long millis) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1169,eturn iStandardOffset + findMatchingRecurrence(millis).getSaveMillis();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1175,public int getOffset(long instant) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1176,return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1172,ublic int getStandardOffset(long millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1179,public int getStandardOffset(long instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1176,ublic long nextTransition(long millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1183,public boolean isFixed() {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1184,return false;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1187,public long nextTransition(long instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1181,ong start = startRecurrence.next
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1182,"millis, standardOffset, endRecurrence.getSaveMillis());"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1183,ong end = endRecurrence.next
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1184,"millis, standardOffset, startRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1192,"long start, end;"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1194,try {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1195,start = startRecurrence.next
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1196,"(instant, standardOffset, endRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1197,} catch (IllegalArgumentException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1198,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1199,start = instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1202,try {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1203,end = endRecurrence.next
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1204,"(instant, standardOffset, startRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1205,} catch (IllegalArgumentException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1206,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1207,end = instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1189,ublic long previousTransition(long millis) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1190,/ Increment in order to handle the case where millis is exactly at
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1213,public long previousTransition(long instant) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1214,// Increment in order to handle the case where instant is exactly at
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1192,illis++;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1216,instant++;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1198,ong start = startRecurrence.previous
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1199,"millis, standardOffset, endRecurrence.getSaveMillis());"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1200,ong end = endRecurrence.previous
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1201,"millis, standardOffset, startRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1222,"long start, end;"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1224,try {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1225,start = startRecurrence.previous
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1226,"(instant, standardOffset, endRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1227,} catch (IllegalArgumentException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1228,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1229,start = instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1232,try {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1233,end = endRecurrence.previous
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1234,"(instant, standardOffset, startRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1235,} catch (IllegalArgumentException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1236,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1237,end = instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1227,rivate Recurrence findMatchingRecurrence(long millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1264,private Recurrence findMatchingRecurrence(long instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1232,ong start = startRecurrence.next
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1233,"millis, standardOffset, endRecurrence.getSaveMillis());"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1234,ong end = endRecurrence.next
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1235,"millis, standardOffset, startRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1269,"long start, end;"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1271,try {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1272,start = startRecurrence.next
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1273,"(instant, standardOffset, endRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1274,} catch (IllegalArgumentException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1275,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1276,start = instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1279,try {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1280,end = endRecurrence.next
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1281,"(instant, standardOffset, startRecurrence.getSaveMillis());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1282,} catch (IllegalArgumentException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1283,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1284,end = instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1339,ublic String getNameKey(long millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1389,public String getNameKey(long instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1341,"nt i = Arrays.binarySearch(transitions, millis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1391,"int i = Arrays.binarySearch(transitions, instant);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1355,eturn iTailZone.getNameKey(millis);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1405,return iTailZone.getNameKey(instant);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1358,ublic int getOffset(long millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1408,public int getOffset(long instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1360,"nt i = Arrays.binarySearch(transitions, millis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1410,"int i = Arrays.binarySearch(transitions, instant);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1374,eturn iTailZone.getOffset(millis);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1424,return iTailZone.getOffset(instant);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1377,ublic int getStandardOffset(long millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1427,public int getStandardOffset(long instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1379,"nt i = Arrays.binarySearch(transitions, millis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1429,"int i = Arrays.binarySearch(transitions, instant);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1393,eturn iTailZone.getStandardOffset(millis);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1443,return iTailZone.getStandardOffset(instant);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1446,public boolean isFixed() {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1447,return false;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1396,ublic long nextTransition(long millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1450,public long nextTransition(long instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1398,"nt i = Arrays.binarySearch(transitions, millis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1452,"int i = Arrays.binarySearch(transitions, instant);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1404,eturn millis;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1458,return instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1407,f (millis < end) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1408,illis = end;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1461,if (instant < end) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1462,instant = end;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1410,eturn iTailZone.nextTransition(millis);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1464,return iTailZone.nextTransition(instant);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1413,ublic long previousTransition(long millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1467,public long previousTransition(long instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1415,"nt i = Arrays.binarySearch(transitions, millis);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1469,"int i = Arrays.binarySearch(transitions, instant);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1417,f (millis > Long.MIN_VALUE) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1418,eturn millis - 1;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1471,if (instant > Long.MIN_VALUE) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1472,return instant - 1;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1420,eturn millis;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1474,return instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1430,eturn millis;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1484,return instant;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1433,ong prev = iTailZone.previousTransition(millis);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1434,f (prev < millis) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1487,long prev = iTailZone.previousTransition(instant);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1488,if (prev < instant) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1442,eturn millis;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1496,return instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,10,* are met:
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,55,package org.joda.time.tz;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,58,* DateTimeZonePermission allows global settings of DateTimeZone to be changed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,59,* The following permission target names are supported:
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,60,* <pre>
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,61,* setDefault        Allows a default DateTimeZone to be set
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,62,* setProvider       Allows a provider of DateTimeZone instances to be set
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,63,* setNameProvider   Allows a provider of DateTimeZone names to be set
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,64,* </pre>
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,65,* <p>
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,66,* DateTimeZonePermission is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,68,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,70,public class DateTimeZonePermission extends java.security.BasicPermission {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,71,public DateTimeZonePermission(String name) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,72,super(name);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,75,"public DateTimeZonePermission(String name, String actions) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,JodaTime/src/java/org/joda/time/tz/DateTimeZonePermission.java,76,"super(name, actions);"
True,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,64,* <p>
True,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,65,* DefaultNameProvider is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,61,* <p>
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,62,* FixedDateTimeZone is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,77,ublic String getNameKey(long millis) {
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,79,public String getNameKey(long instant) {
False,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,81,ublic int getOffset(long millis) {
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,83,public int getOffset(long instant) {
False,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,85,ublic int getStandardOffset(long millis) {
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,87,public int getStandardOffset(long instant) {
False,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,89,ublic int getOffsetFromLocal(long millisLocal) {
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,91,public int getOffsetFromLocal(long instantLocal) {
False,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,93,ublic long nextTransition(long millis) {
False,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,94,eturn millis;
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,95,public boolean isFixed() {
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,96,return true;
False,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,97,ublic long previousTransition(long millis) {
False,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,98,eturn millis;
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,99,public long nextTransition(long instant) {
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,100,return instant;
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,103,public long previousTransition(long instant) {
True,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java,104,return instant;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,58,import java.io.DataInputStream;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,59,import java.io.DataOutputStream;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,64,mport java.io.ObjectOutputStream;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,83,import org.joda.time.chrono.LenientChronology;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,90," <p>Although this tool is similar to zic, the binary formats are not"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,91,* <p>
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,92,"* Although this tool is similar to zic, the binary formats are not"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,95,* <p>
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,96,"* ZoneInfoCompiler is mutable and not thread-safe, although the main method"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,97,* may be safely invoked by multiple threads.
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,137,* @param zimap maps string ids to DateTimeZone objects.
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,139,"static void writeZoneInfoMap(DataOutputStream dout, Map zimap) throws IOException {"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,140,// Build the string pool.
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,141,Map idToIndex = new HashMap(zimap.size());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,142,TreeMap indexToId = new TreeMap();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,144,Iterator it = zimap.entrySet().iterator();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,145,short count = 0;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,146,while (it.hasNext()) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,147,Map.Entry entry = (Map.Entry)it.next();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,148,String id = (String)entry.getKey();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,149,if (!idToIndex.containsKey(id)) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,150,Short index = new Short(count);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,151,"idToIndex.put(id, index);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,152,"indexToId.put(index, id);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,153,if (++count == 0) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,154,"throw new InternalError(""Too many time zone ids"");"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,157,id = ((DateTimeZone)entry.getValue()).getID();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,158,if (!idToIndex.containsKey(id)) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,159,Short index = new Short(count);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,160,"idToIndex.put(id, index);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,161,"indexToId.put(index, id);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,162,if (++count == 0) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,163,"throw new InternalError(""Too many time zone ids"");"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,168,"// Write the string pool, ordered by index."
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,169,dout.writeShort(indexToId.size());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,170,it = indexToId.values().iterator();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,171,while (it.hasNext()) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,172,dout.writeUTF((String)it.next());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,175,// Write the mappings.
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,176,dout.writeShort(zimap.size());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,177,it = zimap.entrySet().iterator();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,178,while (it.hasNext()) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,179,Map.Entry entry = (Map.Entry)it.next();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,180,String id = (String)entry.getKey();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,181,dout.writeShort(((Short)idToIndex.get(id)).shortValue());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,182,id = ((DateTimeZone)entry.getValue()).getID();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,183,dout.writeShort(((Short)idToIndex.get(id)).shortValue());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,188,* @param zimap gets filled with string id to string id mappings
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,190,"static void readZoneInfoMap(DataInputStream din, Map zimap) throws IOException {"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,191,// Read the string pool.
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,192,int size = din.readUnsignedShort();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,193,String[] pool = new String[size];
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,194,for (int i=0; i<size; i++) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,195,pool[i] = din.readUTF().intern();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,198,// Read the mappings.
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,199,size = din.readUnsignedShort();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,200,for (int i=0; i<size; i++) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,201,try {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,202,"zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,203,} catch (ArrayIndexOutOfBoundsException e) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,204,"throw new IOException(""Corrupt zone info map"");"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,158,hronology chrono = ISOChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,236,Chronology chrono = new LenientChronology(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,364,ap zimap = new TreeMap();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,365,terator it = map.entrySet().iterator();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,366,hile (it.hasNext()) {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,367,ap.Entry entry = (Map.Entry)it.next();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,368,tring id = (String)entry.getKey();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,369,ateTimeZone tz = (DateTimeZone)entry.getValue();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,370,"imap.put(id, tz.getID());"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,379,bjectOutputStream oout = new ObjectOutputStream(out);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,380,out.writeObject(zimap);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,381,out.close();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,449,DataOutputStream dout = new DataOutputStream(out);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,450,// Sort and filter out any duplicates that match case.
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,451,Map zimap = new TreeMap(String.CASE_INSENSITIVE_ORDER);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,452,zimap.putAll(map);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,453,"writeZoneInfoMap(dout, zimap);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,454,dout.close();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,57,import java.io.DataInputStream;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,61,mport java.io.ObjectInputStream;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,66,import java.util.TreeMap;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,73,* <p>
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,74,* ZoneInfoProvider is thread-safe and publicly immutable.
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,77,bjectInputStream oin = new ObjectInputStream(in);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,78,ap map;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,80,Map map = new TreeMap(String.CASE_INSENSITIVE_ORDER);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,81,DataInputStream din = new DataInputStream(in);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,80,ap = (Map)oin.readObject();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,81, catch (ClassNotFoundException e) {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,82,hrow new IOException(e.toString());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,83,"ZoneInfoCompiler.readZoneInfoMap(din, map);"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,85,in.close();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,86,din.close();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,95,rivate ClassLoader iLoader;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,96,private final ClassLoader iLoader;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,119,iLoader = null;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,130,"his(resourcePath, null);"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,131,Loader = getClass().getClassLoader();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,132,"this(resourcePath, null, false);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,146,"this(resourcePath, loader, true);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,150,"* @param favorSystemLoader when true, use the system class loader if"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,151,"* loader null. When false, use the current class loader if loader is null."
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,153,"private ZoneInfoProvider(String resourcePath,"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,154,"ClassLoader loader, boolean favorSystemLoader)"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,155,throws IOException
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,167,if (loader == null && !favorSystemLoader) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,168,loader = getClass().getClassLoader();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,217,"hrow new IOException(""Resource not found: "" + path);"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,234,StringBuffer buf = new StringBuffer(40);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,235,"buf.append(""Resource not found: \"""");"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,236,buf.append(path);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,237,"buf.append(""\"" ClassLoader: "");"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,238,"buf.append(iLoader != null ? iLoader.toString() : ""system"");"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,239,throw new IOException(buf.toString());
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,56,mport java.lang.reflect.Constructor;
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,57,mport java.lang.reflect.InvocationTargetException;
False,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeCommon.java,60,mport java.util.GregorianCalendar;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,56,mport junit.framework.Test;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,57,mport junit.framework.TestCase;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,58,mport junit.framework.TestSuite;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,63,mport java.util.Arrays;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,65,mport java.util.List;
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,61,import java.util.Arrays;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,68,mport java.text.ParseException;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,69,mport org.joda.time.* ;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,70,mport org.joda.time.chrono.iso.* ;
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,64,import java.util.List;
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,66,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,67,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,69,import org.joda.time.MutableDateTime;
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,70,import org.joda.time.chrono.iso.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,504,atch(ParseException pe)
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,504,catch(IllegalArgumentException pe)
False,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,506,"ystem.err.println(""ParseException Detected"");"
True,JodaTime/src/test/org/joda/test/time/BulkTest.java,JodaTime/src/test/org/joda/test/time/BulkTest.java,506,"System.err.println(""IllegalArgumentException Detected"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,10,* are met:
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,18,*    distribution.
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,54,package org.joda.test.time;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,56,import org.joda.time.AbstractDateTime;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,57,import org.joda.time.AbstractInstant;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,58,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,59,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,60,import org.joda.time.ReadableDateTime;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,63,* This class is a Junit unit test base class for
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,64,* Instant implementations.
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,66,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,68,public class ClassLoadTest {
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,70,// run using JVM -verbose:class
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,71,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,72,"System.out.println(""-----------------------------------------------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,73,"System.out.println(""-----------AbstractInstant---------------------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,74,Class cls = AbstractInstant.class;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,75,"System.out.println(""-----------ReadableDateTime--------------------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,76,cls = ReadableDateTime.class;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,77,"System.out.println(""-----------AbstractDateTime--------------------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,78,cls = AbstractDateTime.class;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,79,"System.out.println(""-----------DateTime----------------------------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,80,cls = DateTime.class;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,81,"System.out.println(""-----------DateTimeZone------------------------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,82,cls = DateTimeZone.class;
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,83,"System.out.println(""-----------new DateTime()----------------------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,84,DateTime dt = new DateTime();
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,85,"System.out.println(""-----------new DateTime(ReadableInstant)-------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,86,dt = new DateTime(dt);
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,87,"System.out.println(""-----------new DateTime(Long)------------------"");"
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,88,dt = new DateTime(new Long(0));
True,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,JodaTime/src/test/org/joda/test/time/ClassLoadTest.java,89,"System.out.println(""-----------------------------------------------"");"
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,56,mport java.text.ParseException;
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,62,/import org.joda.time.DateOnly;
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,63,/import org.joda.time.TimeOnly;
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,65,mport org.joda.time.DateTimeFieldProperty;
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,69," constructors of various ISODateTime, ISODateOnly, and"
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,70, ISOTimeOnly objects.
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,65,"* constructors of various DateTime, DateOnly, and"
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,66,* TimeOnly objects.
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,106, Test the <code>ISODateOnly</code> constructors.
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,107, @see org.joda.time.iso.ISODateOnly
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,102,* Test the <code>DateOnly</code> constructors.
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,103,* @see org.joda.time.DateOnly
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,165, Test the <code>ISOTimeOnly</code> constructors.
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,166, @see org.joda.time.iso.ISOTimeOnly
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,161,* Test the <code>TimeOnly</code> constructors.
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,162,* @see org.joda.time.TimeOnly
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,241, Test the <code>ISODateTime</code> constructors.
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,242, @see org.joda.time.iso.ISODateTime
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,237,* Test the <code>DateTime</code> constructors.
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,238,* @see org.joda.time.DateTime
False,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,694,atch(ParseException pe)
True,JodaTime/src/test/org/joda/test/time/TestConstructors.java,JodaTime/src/test/org/joda/test/time/TestConstructors.java,690,catch(IllegalArgumentException pe)
False,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,56,mport java.util.*;
False,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,57,mport java.text.* ;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,56,import java.util.ArrayList;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,57,import java.util.Calendar;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,58,import java.util.Collections;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,59,import java.util.Comparator;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,60,import java.util.Date;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,61,import java.util.List;
False,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,59,mport org.joda.time.*;
False,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,60,mport org.joda.time.chrono.iso.*;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,65,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,66,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,67,import org.joda.time.DateTimeComparator;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,68,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,69,import org.joda.time.ReadableInstant;
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,70,import org.joda.time.chrono.iso.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,835,atch(ParseException pe)
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,845,catch(IllegalArgumentException pe)
False,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,852,atch(ParseException pe)
True,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,JodaTime/src/test/org/joda/test/time/TestDateTimeComparator.java,862,catch(IllegalArgumentException pe)
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,72, This is the main class for this test suite.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,73, @param args command line arguments.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,75,ublic static void main(String[] args) {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,76,unit.textui.TestRunner.run(suite());
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,79, TestSuite is a junit required method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,81,ublic static TestSuite suite() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,82,eturn BulkTest.makeSuite(TestDateTimeFormat.class);
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,85, TestDateTimeField constructor.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,86, @param name
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,88,ublic TestDateTimeFormat(String name) {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,89,uper(name);
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,91,/ Class Name: org.joda.time.format.DateTimeFormat
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,93, Junit <code>setUp()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,95,ublic void setUp() /* throws Exception */ {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,96,/ super.setUp();
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,99, Junit <code>tearDown()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,101,rotected void tearDown() /* throws Exception */ {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,102,/ super.tearDown();
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,105, Test the <code>getInstance()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,106, @see org.joda.time.format.DateTimeFormat#getInstance()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,108,rotected void testGetInstance() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,109,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,112, Test the <code>getInstance(java.lang.String)</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,113, @see org.joda.time.format.DateTimeFormat#getInstance(java.lang.String)
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,115,ublic void testGetInstanceString() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,116,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,119," Test the <code>getInstance(java.lang.String, java.util.TimeZone)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,120," @see org.joda.time.format.DateTimeFormat#getInstance(java.lang.String, java.util.TimeZone)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,122,ublic void testGetInstanceSTZ() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,123,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,126," Test the <code>getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,127," @see org.joda.time.format.DateTimeFormat#getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,129,ublic void testGetInstanceSTZL() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,130,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,133," Test the <code>getInstance(java.lang.String, org.joda.time.Chronology)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,134," @see org.joda.time.format.DateTimeFormat#getInstance(java.lang.String, org.joda.time.Chronology)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,136,ublic void testGetInstanceSC() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,137,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,140," Test the <code>getInstance(java.lang.String, org.joda.time.Chronology, java.util.TimeZone)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,141," @see org.joda.time.format.DateTimeFormat#getInstance(java.lang.String, org.joda.time.Chronology, java.util.TimeZone)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,143,ublic void testGetInstanceSCT() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,144,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,147," Test the <code>getInstance(java.lang.String, org.joda.time.Chronology, java.util.TimeZone, java.util.Locale)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,148," @see org.joda.time.format.DateTimeFormat#getInstance(java.lang.String, org.joda.time.Chronology, java.util.TimeZone, java.util.Locale)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,150,ublic void testGetInstanceSCTL() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,151,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,154," Test the <code>getDateInstance(java.lang.Object, org.joda.time.Chronology, java.util.TimeZone, java.util.Locale)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,155," @see org.joda.time.format.DateTimeFormat#getDateInstance(java.lang.Object, org.joda.time.Chronology, java.util.TimeZone, java.util.Locale)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,157,ublic void testGetDateInstance() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,158,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,161," Test the <code>getTimeInstance(java.lang.Object, org.joda.time.Chronology, java.util.TimeZone, java.util.Locale)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,162," @see org.joda.time.format.DateTimeFormat#getTimeInstance(java.lang.Object, org.joda.time.Chronology, java.util.TimeZone, java.util.Locale)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,164,ublic void testGetTimeInstance() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,165,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,168," Test the <code>getDateTimeInstance(java.lang.Object, java.lang.Object, org.joda.time.Chronology, java.util.TimeZone, java.util.Locale)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,169," @see org.joda.time.format.DateTimeFormat#getDateTimeInstance(java.lang.Object, java.lang.Object, org.joda.time.Chronology, java.util.TimeZone, java.util.Locale)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,171,ublic void testGetDateTimeInstance() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,172,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,175, Test the <code>getPattern()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,176, @see org.joda.time.format.DateTimeFormat#getPattern()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,178,ublic void testGetPattern() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,179,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,182, Test the <code>getChronology()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,183, @see org.joda.time.format.DateTimeFormat#getChronology()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,185,ublic void testGetChronology() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,186,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,189, Test the <code>getTimeZone()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,190, @see org.joda.time.format.DateTimeFormat#getTimeZone()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,192,ublic void testGetTimeZone() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,193,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,196, Test the <code>getLocale()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,197, @see org.joda.time.format.DateTimeFormat#getLocale()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,199,ublic void testGetLocale() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,200,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,203, Test the <code>getPrinter()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,204, @see org.joda.time.format.DateTimeFormat#getPrinter()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,206,ublic void testGetPrinter() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,207,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,210, Test the <code>getParser()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,211, @see org.joda.time.format.DateTimeFormat#getParser()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,213,ublic void testGetParser() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,214,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,217, Test the <code>estimatePrintedLength()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,218, @see org.joda.time.format.DateTimeFormat#estimatePrintedLength()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,220,ublic void testEstimatePrintedLength() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,221,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,224," Test the <code>printTo(java.lang.StringBuffer, long, long)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,225," @see org.joda.time.format.DateTimeFormat#printTo(java.lang.StringBuffer, long, long)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,227,ublic void testPrintToSLL() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,228,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,231," Test the <code>printTo(java.io.Writer, long, long)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,232," @see org.joda.time.format.DateTimeFormat#printTo(java.io.Writer, long, long)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,234,ublic void testPrintToWLL() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,235,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,238," Test the <code>printTo(java.lang.StringBuffer, org.joda.time.ReadableInstant)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,239," @see org.joda.time.format.DateTimeFormat#printTo(java.lang.StringBuffer, org.joda.time.ReadableInstant)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,241,ublic void testPrintToSBRI() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,242,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,245," Test the <code>printTo(java.lang.StringBuffer, long)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,246," @see org.joda.time.format.DateTimeFormat#printTo(java.lang.StringBuffer, long)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,248,ublic void testPrintToSBL() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,249,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,252," Test the <code>printTo(java.io.Writer, org.joda.time.ReadableInstant)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,253," @see org.joda.time.format.DateTimeFormat#printTo(java.io.Writer, org.joda.time.ReadableInstant)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,255,ublic void testPrintToWRI() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,256,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,259," Test the <code>printTo(java.io.Writer, long)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,260," @see org.joda.time.format.DateTimeFormat#printTo(java.io.Writer, long)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,262,ublic void testPrintToWL() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,263,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,266, Test the <code>print(org.joda.time.ReadableInstant)</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,267, @see org.joda.time.format.DateTimeFormat#print(org.joda.time.ReadableInstant)
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,269,ublic void testPrintRI() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,270,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,273, Test the <code>print(long)</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,274, @see org.joda.time.format.DateTimeFormat#print(long)
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,276,ublic void testPrintL() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,277,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,280, Test the <code>estimateParsedLength()</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,281, @see org.joda.time.format.DateTimeFormat#estimateParsedLength()
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,283,ublic void testEstimateParsedLength() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,284,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,287," Test the <code>parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,288," @see org.joda.time.format.DateTimeFormat#parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,290,ublic void testParseIntoPBSI() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,291,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,294," Test the <code>parseInto(org.joda.time.ReadWritableInstant, java.lang.String)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,295," @see org.joda.time.format.DateTimeFormat#parseInto(org.joda.time.ReadWritableInstant, java.lang.String)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,297,ublic void testParseIntoRWIS() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,298,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,301," Test the <code>parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,302," @see org.joda.time.format.DateTimeFormat#parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,304,ublic void testParseIntoRWISI() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,305,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,308, Test the <code>parse(java.lang.String)</code> method.
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,309, @see org.joda.time.format.DateTimeFormat#parse(java.lang.String)
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,311,ublic void testParseS() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,312,"ail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,315," Test the <code>parse(java.lang.String, int, long)</code> method."
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,316," @see org.joda.time.format.DateTimeFormat#parse(java.lang.String, int, long)"
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,318,ublic void testParseSL() {
False,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,319,"ail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,72,* This is the main class for this test suite.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,73,* @param args command line arguments.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,75,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,76,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,79,* TestSuite is a junit required method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,81,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,82,return BulkTest.makeSuite(TestDateTimeFormat.class);
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,85,* TestDateTimeField constructor.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,86,* @param name
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,88,public TestDateTimeFormat(String name) {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,89,super(name);
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,91,// Class Name: org.joda.time.format.DateTimeFormat
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,93,* Junit <code>setUp()</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,95,public void setUp() /* throws Exception */ {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,96,// super.setUp();
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,99,* Junit <code>tearDown()</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,101,protected void tearDown() /* throws Exception */ {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,102,// super.tearDown();
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,105,* Test the <code>getInstanceUTC()</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,106,* @see org.joda.time.format.DateTimeFormat#getInstanceUTC()
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,108,protected void testGetInstanceUTC() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,109,"fail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,112,* Test the <code>getInstance()</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,113,* @see org.joda.time.format.DateTimeFormat#getInstance()
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,115,protected void testGetInstance() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,116,"fail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,119,* Test the <code>getInstance(org.joda.time.DateTimeZone)</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,120,* @see org.joda.time.format.DateTimeFormat#getInstance(org.joda.time.DateTimeZone)
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,122,public void testGetInstanceTZ() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,123,"fail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,126,"* Test the <code>getInstance(org.joda.time.DateTimeZone, java.util.Locale)</code> method."
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,127,"* @see org.joda.time.format.DateTimeFormat#getInstance(org.joda.time.DateTimeZone, java.util.Locale)"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,129,public void testGetInstanceTZL() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,130,"fail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,133,* Test the <code>getInstance(org.joda.time.Chronology)</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,134,* @see org.joda.time.format.DateTimeFormat#getInstance(org.joda.time.Chronology)
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,136,public void testGetInstanceC() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,137,"fail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,140,"* Test the <code>getInstance(org.joda.time.Chronology, java.util.Locale)</code> method."
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,141,"* @see org.joda.time.format.DateTimeFormat#getInstance(org.joda.time.Chronology, java.util.Locale)"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,143,public void testGetInstanceCL() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,144,"fail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,147,* Test the <code>forPattern(String)</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,148,* @see org.joda.time.format.DateTimeFormat#forPattern(String)
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,150,public void testForPattern() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,151,"fail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,154,* Test the <code>forStyle(String)</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,155,* @see org.joda.time.format.DateTimeFormat#forStyle(String)
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,157,public void testForStyle() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,158,"fail(""TBD"");"
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,161,* Test the <code>getPatternForStyle()</code> method.
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,162,* @see org.joda.time.format.DateTimeFormat#getPatternForStyle(String)
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,164,public void testGetPatternForStyle() {
True,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,JodaTime/src/test/org/joda/test/time/TestDateTimeFormat.java,165,"fail(""TBD"");"
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,56,mport java.util.*;
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,57,mport java.text.* ;
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,58,mport java.io.*;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,56,import java.io.PrintStream;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,57,import java.util.Calendar;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,58,import java.util.Date;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,59,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,60,import java.util.SimpleTimeZone;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,61,import java.util.TimeZone;
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,62,mport org.joda.time.*;
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,63,mport org.joda.time.chrono.iso.* ;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,65,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,66,import org.joda.time.Instant;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,67,import org.joda.time.MutableDateTime;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,68,import org.joda.time.ReadableInstant;
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,69,import org.joda.time.chrono.iso.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,191, @see org.joda.time.MutableDateTime#addMillis(long)
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,197,* @see org.joda.time.MutableDateTime#add(long)
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,238,atch(ParseException pe)
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,244,catch(IllegalArgumentException pe)
False,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,240,"wtr.println(""ParseException Detected: "" + isoString);"
True,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,JodaTime/src/test/org/joda/test/time/TestMDTAdd.java,246,"ewtr.println(""IllegalArgumentException Detected: "" + isoString);"
False,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,56,mport java.util.*;
False,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,57,mport java.text.* ;
False,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,58,mport java.io.*;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,56,import java.io.PrintStream;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,57,import java.util.Calendar;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,58,import java.util.Date;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,59,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,60,import java.util.SimpleTimeZone;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,61,import java.util.TimeZone;
False,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,62,mport org.joda.time.*;
False,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,63,mport org.joda.time.chrono.iso.* ;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,65,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,66,import org.joda.time.Instant;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,67,import org.joda.time.MutableDateTime;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,68,import org.joda.time.ReadableInstant;
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,69,import org.joda.time.chrono.iso.ISOChronology;
False,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,236,atch(ParseException pe)
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,242,catch(IllegalArgumentException pe)
False,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,238,"wtr.println(""ParseException Detected: "" + isoString);"
True,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,JodaTime/src/test/org/joda/test/time/TestMDTAddWrapped.java,244,"ewtr.println(""IllegalArgumentException Detected: "" + isoString);"
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,56,mport java.util.*;
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,57,mport java.text.* ;
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,58,mport java.io.*;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,56,import java.io.PrintStream;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,57,import java.util.Calendar;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,58,import java.util.Date;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,59,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,60,import java.util.SimpleTimeZone;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,61,import java.util.TimeZone;
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,62,mport org.joda.time.*;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,65,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,66,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,67,import org.joda.time.MutableDateTime;
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,354, @see org.joda.time.MutableDateTime#getWeekOfYearWeek()
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,359,* @see org.joda.time.MutableDateTime#getWeekOfWeekyear()
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,364, @see org.joda.time.MutableDateTime#getWeekOfYearYear()
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,369,* @see org.joda.time.MutableDateTime#getWeekOfWeekyear()
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,550, @see org.joda.time.MutableDateTime#weekOfYearWeek()
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,555,* @see org.joda.time.MutableDateTime#weekOfWeekyear()
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,567, @see org.joda.time.MutableDateTime#weekOfYearYear()
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,572,* @see org.joda.time.MutableDateTime#weekyear()
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,569,ublic void testYearOfWeekyear() {
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,574,public void testWeekyear() {
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,844,atch(ParseException pe)
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,849,catch(IllegalArgumentException pe)
False,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,846,"wtr.println(""ParseException Detected: "" + isoString);"
True,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,JodaTime/src/test/org/joda/test/time/TestMDTGet.java,851,"ewtr.println(""IllegalArgumentException Detected: "" + isoString);"
False,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,56,mport java.util.*;
False,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,57,mport java.text.* ;
False,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,58,mport java.io.*;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,56,import java.io.PrintStream;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,57,import java.util.ArrayList;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,58,import java.util.Calendar;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,59,import java.util.Date;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,60,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,61,import java.util.SimpleTimeZone;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,62,import java.util.TimeZone;
False,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,62,mport org.joda.time.*;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,66,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,67,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,68,import org.joda.time.Instant;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,69,import org.joda.time.MutableDateTime;
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,70,import org.joda.time.ReadableInstant;
False,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,1067," @see org.joda.time.MutableDateTime#setWeekOfYear(int, int)"
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,1075,* @see org.joda.time.MutableDateTime#setWeekOfWeekyear(int)
False,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,1155,atch(ParseException pe)
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,1163,catch(IllegalArgumentException pe)
False,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,1157,"wtr.println(""ParseException Detected: "" + isoString);"
True,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,JodaTime/src/test/org/joda/test/time/TestMDTSet.java,1165,"ewtr.println(""IllegalArgumentException Detected: "" + isoString);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,230,"boolean m, n;"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,308,// isLeap test
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,309,m = fieldA.isLeap(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,310,n = fieldB.isLeap(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,311,"testBoolean(fieldA, fieldB, ""isLeap"", millis, m, n);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,313,// getLeapAmount test
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,314,a = fieldA.getLeapAmount(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,315,b = fieldB.getLeapAmount(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,316,"testValue(fieldA, fieldB, ""getLeapAmount"", millis, a, b);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,361,"private void testBoolean(DateTimeField fieldA, DateTimeField fieldB,"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,362,"String method, long millis, boolean boolA, boolean boolB) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,363,if (boolA != boolB) {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,364,"failBoolean(fieldA, fieldB, method, millis, boolA, boolB);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,430,"private void failBoolean(DateTimeField fieldA, DateTimeField fieldB,"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,431,"String method, long millis, boolean boolA, boolean boolB) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,432,"System.out.println(""Failure on "" + makeName(fieldA, fieldB) + ""."" + method);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,433,"System.out.println(fieldA.getClass().getName() + ""\n\tvs. """
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,434,+ fieldB.getClass().getName());
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,435,"System.out.println(""Datetime: "" + makeDatetime(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,436,"System.out.println(""Millis from 1970: "" + millis);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,437,"System.out.println(boolA + "" != "" + boolB);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,JodaTime/src/test/org/joda/test/time/chrono/gj/Test.java,438,throw new RuntimeException();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,60,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,155,public DurationField days() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,156,return dayOfWeek().getDurationField();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,171,public DurationField weeks() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,172,return weekOfWeekyear().getDurationField();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,179,public DurationField weekyears() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,180,return weekyear().getDurationField();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,187,public DurationField months() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,188,return monthOfYear().getDurationField();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,195,public DurationField years() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,196,return year().getDurationField();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,203,abstract long millisPerYear();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJChronology.java,205,abstract long millisPerMonth();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,57,mport org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,57,import org.joda.time.chrono.ImpreciseDateTimeField;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,58,import org.joda.time.chrono.Utils;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,63,bstract class TestGJDateTimeField extends DateTimeField {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,64,abstract class TestGJDateTimeField extends ImpreciseDateTimeField {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,66,"ublic TestGJDateTimeField(String name, TestGJChronology chrono) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,67,uper(name);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,67,"public TestGJDateTimeField(String name, String duratioName,"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,68,"long unitMillis, TestGJChronology chrono) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,69,"super(name, duratioName, unitMillis);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,71,/ Redeclare to work around compiler bug.
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,72,"ublic abstract long add(long millis, int value);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,73,public boolean isLenient() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,74,return false;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,74,"ublic long add(long millis, long value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,75,"eturn addLong(millis, value);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,77,"public long add(long instant, int value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,78,"return add(instant, (long)value);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDateTimeField.java,81,"public abstract long add(long instant, long value);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,63,"uper(""dayOfMonth"", chrono);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,65,"super(""dayOfMonth"", ""days"", chrono.MILLIS_PER_DAY, chrono);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,70,"ublic long add(long millis, int value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,71,eturn millis + value * iChronology.MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,80,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,81,eturn iChronology.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,78,"public long add(long millis, long value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,79,return millis + value * iChronology.MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,84,ublic long getRangeMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,85,eturn (long)(365.2425 * iChronology.MILLIS_PER_DAY / 12);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,82,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfMonthField.java,83,return iChronology.months();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,63,"uper(""dayOfWeek"", chrono);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,65,"super(""dayOfWeek"", ""days"", chrono.MILLIS_PER_DAY, chrono);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,67,"nt dayOfWeek = (int)iChronology.mod(iChronology.fixedFromMillis(millis), 7);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,68,f (dayOfWeek == 0) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,69,ayOfWeek = 7;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,71,eturn dayOfWeek;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,74,"ublic long add(long millis, int value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,75,eturn millis + value * iChronology.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,69,"int dayOfWeek = (int)iChronology.mod(iChronology.fixedFromMillis(millis), 7);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,70,if (dayOfWeek == 0) {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,71,dayOfWeek = 7;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,73,return dayOfWeek;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,79,"eturn add(millis, value - get(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,77,"return add(millis, (long) value - get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,82,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,83,eturn iChronology.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,80,"public long add(long millis, long value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,81,return millis + value * iChronology.MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,86,ublic long getRangeMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,87,eturn iChronology.MILLIS_PER_DAY * 7;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,84,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,85,return iChronology.weeks();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,99,eturn iChronology.getDateOnlyMillis(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfWeekField.java,97,return iChronology.getDateOnlyMillis(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,63,"uper(""dayOfYear"", chrono);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,65,"super(""dayOfYear"", ""days"", chrono.MILLIS_PER_DAY, chrono);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,72,"ublic long add(long millis, int value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,73,eturn millis + value * iChronology.MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,77,"eturn add(millis, value - get(millis));"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,75,"return add(millis, (long) value - get(millis));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,80,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,81,eturn iChronology.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,78,"public long add(long millis, long value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,79,return millis + value * iChronology.MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,84,ublic long getRangeMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,85,eturn (long)(365.2425 * iChronology.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,82,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJDayOfYearField.java,83,return iChronology.years();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,63,"uper(""monthOfYear"", chrono);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,65,"super(""monthOfYear"", ""months"", chrono.millisPerMonth(), chrono);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,70,"ublic long add(long millis, int value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,72,"public long set(long millis, int value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,73,long timeOnlyMillis = iChronology.getTimeOnlyMillis(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,74,int[] ymd = iChronology.gjFromMillis(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,75,// First set to start of month...
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,76,"millis = iChronology.millisFromGJ(ymd[0], value, 1);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,77,// ...and use dayOfMonth field to check range.
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,78,int maxDay = iChronology.dayOfMonth().getMaximumValue(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,79,if (ymd[2] > maxDay) {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,80,ymd[2] = maxDay;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,82,"return timeOnlyMillis + iChronology.millisFromGJ(ymd[0], value, ymd[2]);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,85,"public long add(long millis, long value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,87,"ublic long set(long millis, int value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,88,ong timeOnlyMillis = iChronology.getTimeOnlyMillis(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,102,public boolean isLeap(long millis) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,90,/ First set to start of month...
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,91,"illis = iChronology.millisFromGJ(ymd[0], value, 1);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,92,/ ...and use dayOfMonth field to check range.
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,93,nt maxDay = iChronology.dayOfMonth().getMaximumValue(millis);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,94,f (ymd[2] > maxDay) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,95,md[2] = maxDay;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,97,"eturn timeOnlyMillis + iChronology.millisFromGJ(ymd[0], value, ymd[2]);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,104,return ymd[1] == 2 && iChronology.isLeapYear(ymd[0]);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,107,public int getLeapAmount(long millis) {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,108,return isLeap(millis) ? 1 : 0;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,100,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,101,eturn (long)(365.2425 * iChronology.MILLIS_PER_DAY / 12);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,111,public DurationField getLeapDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,112,return iChronology.days();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,104,ublic long getRangeMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,105,eturn (long)(365.2425 * iChronology.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,115,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJMonthOfYearField.java,116,return iChronology.years();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,63,"uper(""weekOfWeekyear"", chrono);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,65,"super(""weekOfWeekyear"", ""weeks"","
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,66,"(long)(chrono.MILLIS_PER_DAY * 7), chrono);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,70,"ublic long add(long millis, int value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,71,"eturn iChronology.dayOfYear().add(millis, value * 7);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,80,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,81,eturn (long)(iChronology.MILLIS_PER_DAY * 7);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,79,"public long add(long millis, long value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,80,"return iChronology.dayOfYear().add(millis, value * 7);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,84,ublic long getRangeMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,85,eturn (long)(365.2425 * iChronology.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,83,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekOfWeekyearField.java,84,return iChronology.weeks();
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,63,"uper(""weekyear"", chrono);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,65,"super(""weekyear"", ""weekyears"", chrono.millisPerYear(), chrono);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,70,"ublic long add(long millis, int value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,71,"eturn set(millis, get(millis) + value);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,88,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,89,eturn (long)(365.2425 * iChronology.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,86,"public long add(long millis, long value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,87,"return set(millis, (int)(get(millis) + value));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,92,ublic long getRangeMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,93,eturn Long.MAX_VALUE;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,90,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJWeekyearField.java,91,return null;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,57,import org.joda.time.DurationField;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,63,"uper(""year"", chrono);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,65,"super(""year"", ""years"", chrono.millisPerYear(), chrono);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,70,"ublic long add(long millis, int value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,71,"eturn set(millis, get(millis) + value);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,82,"public long add(long millis, long value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,83,"return set(millis, (int)(get(millis) + value));"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,92,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,93,eturn (long)(365.2425 * iChronology.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,94,public DurationField getLeapDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,95,return iChronology.days();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,96,ublic long getRangeMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,97,eturn Long.MAX_VALUE;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,98,public DurationField getRangeDurationField() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGJYearField.java,99,return null;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,81,public String toString() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,82,"return ""TestGregorianChronology"";"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,85,long millisPerYear() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,86,return (long)(365.2425 * MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,89,long millisPerMonth() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestGregorianChronology.java,90,return (long)(365.2425 * MILLIS_PER_DAY / 12);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,105,public String toString() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,106,"return ""TestJulianChronology"";"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,109,long millisPerYear() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,110,return (long)(365.25 * MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,113,long millisPerMonth() {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianChronology.java,114,return (long)(365.25 * MILLIS_PER_DAY / 12);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianDayOfMonthField.java,67,eturn (long)(365.25 * iChronology.MILLIS_PER_DAY / 12);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianDayOfMonthField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianDayOfMonthField.java,67,return iChronology.millisPerMonth();
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,70,"ublic long add(long millis, int value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,71,nt year = iChronology.year().get(millis);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,70,"public long add(long millis, long value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,71,int year = iChronology.year().get(millis);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,84,f (newYear == -1) {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,85,ewYear = 1;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,86, else {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,87,ewYear++;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,84,if (newYear == -1) {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,85,newYear = 1;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,86,} else {
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,87,newYear++;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,100,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,101,eturn (long)(365.25 * iChronology.MILLIS_PER_DAY / 12);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,104,ublic long getRangeMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianMonthOfYearField.java,105,eturn (long)(365.25 * iChronology.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,57,import org.joda.time.chrono.Utils;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,68,nt wrapped = getWrappedValue
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,70,int wrapped = Utils.getWrappedValue
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,70,"eturn add(millis, wrapped - weekyear);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,72,"return add(millis, (long) wrapped - weekyear);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,73,"ublic long add(long millis, int value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,75,"public long add(long millis, long value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,75,nt newWeekyear = weekyear + value;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,77,int newWeekyear = weekyear + Utils.safeToInt(value);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,88,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianWeekyearField.java,89,eturn (long)(365.25 * iChronology.MILLIS_PER_DAY);
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,57,import org.joda.time.chrono.Utils;
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,68,nt wrapped = getWrappedValue
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,70,int wrapped = Utils.getWrappedValue
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,70,"eturn add(millis, wrapped - year);"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,72,"return add(millis, (long) wrapped - year);"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,73,"ublic long add(long millis, int value) {"
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,75,"public long add(long millis, long value) {"
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,75,nt newYear = year + value;
True,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,77,int newYear = year + Utils.safeToInt(value);
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,88,ublic long getUnitMillis() {
False,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,JodaTime/src/test/org/joda/test/time/chrono/gj/TestJulianYearField.java,89,eturn (long)(365.25 * iChronology.MILLIS_PER_DAY);
False,JodaTime/src/test/org/joda/test/time/gj/TestGJYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearDateTimeField.java,101,eturn 292272992;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJYearDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearDateTimeField.java,101,return 292278993;
False,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfEraDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfEraDateTimeField.java,99,eturn 292272992;
True,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfEraDateTimeField.java,JodaTime/src/test/org/joda/test/time/gj/TestGJYearOfEraDateTimeField.java,99,return 292278993;

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,142,"* Creates a period from two partially specified times, calculating"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,143,* by field difference.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,144,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,145,"* The two partials must contain the same fields, thus you can"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,146,"* specify two YearMonthDay objects, or two TimeOfDay objects,"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,147,"* but not one of each. Also, the partial may not contain overlapping"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,148,"* fields, such as dayOfWeek and dayOfMonth."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,149,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,150,* Calculation by field difference works by extracting the difference
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,151,* one field at a time and not wrapping into other fields.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,152,* Thus 2005-06-09/2007-04-12 will yield P1Y-2M3D.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,153,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,154,"* For example, you have an event that always runs from the 27th of"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,155,* each month to the 2nd of the next month. If you calculate this
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,156,"* period using a standard constructor, then you will get between"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,157,"* P3D and P6D depending on the month. If you use this method, then"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,158,* you will get P1M-25D. This field-difference based period can
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,159,* be successfully applied to each month of the year to obtain the
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,160,* correct end date for a given start date.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,162,"* @param start  the start of the period, must not be null"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,163,"* @param end  the end of the period, must not be null"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,164,"* @param type  which set of fields this period supports, null means standard"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,165,* @throws IllegalArgumentException if the partials are null or invalid
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,166,* @since 1.1
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,168,"public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,169,if (start == null || end == null) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,170,"throw new IllegalArgumentException(""ReadablePartial objects must not be null"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,172,if (start.size() != end.size()) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,173,"throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,175,DurationFieldType[] types = new DurationFieldType[start.size()];
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,176,int[] values = new int[start.size()];
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,177,"for (int i = 0, isize = start.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,178,if (start.getFieldType(i) != end.getFieldType(i)) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,179,"throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,181,types[i] = start.getFieldType(i).getDurationType();
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,182,if (i > 0 && types[i - 1] == types[i]) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,183,"throw new IllegalArgumentException(""ReadablePartial objects must not have overlapping fields"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,185,values[i] = end.getValue(i) - start.getValue(i);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,187,"return new Period(values, PeriodType.forFields(types));"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,395, Creates a period from the given duration and end point.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,445,* Creates a period from two partially specified times.
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1109,public void testFactoryYears() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1110,Period test = Period.years(6);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1111,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1112,"assertEquals(6, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1113,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1114,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1115,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1116,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1117,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1118,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1119,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1122,public void testFactoryMonths() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1123,Period test = Period.months(6);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1124,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1125,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1126,"assertEquals(6, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1127,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1128,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1129,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1130,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1131,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1132,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1135,public void testFactoryWeeks() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1136,Period test = Period.weeks(6);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1137,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1138,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1139,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1140,"assertEquals(6, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1141,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1142,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1143,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1144,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1145,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1148,public void testFactoryDays() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1149,Period test = Period.days(6);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1150,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1151,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1152,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1153,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1154,"assertEquals(6, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1155,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1156,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1157,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1158,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1161,public void testFactoryHours() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1162,Period test = Period.hours(6);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1163,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1164,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1165,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1166,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1167,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1168,"assertEquals(6, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1169,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1170,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1171,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1174,public void testFactoryMinutes() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1175,Period test = Period.minutes(6);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1176,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1177,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1178,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1179,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1180,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1181,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1182,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1183,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1184,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1187,public void testFactorySeconds() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1188,Period test = Period.seconds(6);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1189,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1190,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1191,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1192,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1193,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1194,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1195,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1196,"assertEquals(6, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1197,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1200,public void testFactoryMillis() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1201,Period test = Period.millis(6);
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1202,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1203,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1204,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1205,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1206,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1207,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1208,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1209,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1210,"assertEquals(6, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1214,public void testFactoryFieldDifference1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1215,"YearMonthDay start = new YearMonthDay(2005, 4, 9);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1216,"YearMonthDay end = new YearMonthDay(2004, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1217,"Period test = Period.fieldDifference(start, end);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1218,"assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1219,"assertEquals(-1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1220,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1221,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1222,"assertEquals(-2, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1223,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1224,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1225,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1226,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1229,public void testFactoryFieldDifference2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1230,"YearMonthDay ymd = new YearMonthDay(2005, 4, 9);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1231,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1232,"Period.fieldDifference(ymd, (ReadablePartial) null);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1233,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1234,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1235,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1236,"Period.fieldDifference((ReadablePartial) null, ymd);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1237,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1238,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1241,public void testFactoryFieldDifference3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1242,"YearMonthDay start = new YearMonthDay(2005, 4, 9);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1243,"TimeOfDay endTime = new TimeOfDay(12, 30, 40, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1244,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1245,"Period.fieldDifference(start, endTime);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1246,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1247,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1250,public void testFactoryFieldDifference4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1251,"YearMonthDay start = new YearMonthDay(2005, 4, 9);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1252,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1253,"DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1254,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1255,"DateTimeFieldType.dayOfWeek(),"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1257,"Partial end = new Partial(types, new int[] {1, 2, 3});"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1258,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1259,"Period.fieldDifference(start, end);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1260,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1261,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1264,public void testFactoryFieldDifference5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1265,"YearMonthDay start = new YearMonthDay(2005, 4, 9);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1266,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1267,"DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1268,"DateTimeFieldType.dayOfMonth(),"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1269,"DateTimeFieldType.dayOfWeek(),"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1271,"Partial end = new Partial(types, new int[] {1, 2, 3});"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1272,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1273,"Period.fieldDifference(start, end);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1274,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,1275,} catch (IllegalArgumentException ex) {}

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,159, Converts this duration to a TimePeriod instance using the PreciseAll type.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,159,* Converts this duration to a TimePeriod instance using the All type.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,161," The PreciseAll type fixes days at 24 hours, months ay 30 days and years at 365 days"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,162, thus the time period will be precise. As a result there is no loss of precision
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,163, with regards the length of the duration and the following code will work:
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,164, <pre>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,165, Duration dur = new Duration(123456789L);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,166, TimePeriod period = d.toTimePeriod();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,167, Duration dur2 = period.toDuration();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,168, // dur.getMillis() == dur2.getMillis()
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,169, </pre>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,161,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,162,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,163,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,164,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,165,* for larger durations.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,166,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,167,"* If the duration is larger then the years and months fields will remain as zero,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,168,* with the duration allocated to the weeks and days fields.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,169,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,170,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,171,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,172,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,173,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,174,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,175,* to an interval by referencing a fixed instant and then obtain the period.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,174,"eturn new TimePeriod(this, DurationType.getPreciseAllType());"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,180,"return new TimePeriod(this, DurationType.getAllType());"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,181," If a non-precise duration type is used, the resulting time period will only"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,182, represent an approximation of the duration. As a result it will not be
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,183, possible to call {@link TimePeriod#toDuration()} to get the duration back.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,187,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,188,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,189,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,190,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,191,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,192,* for larger durations.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,193,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,194,* If the duration type is PreciseAll then all fields can be set.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,195,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,196,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,197,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,198,"* If the duration type is All then the years and months fields will remain as zero,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,199,* with the duration allocated to the weeks and days fields.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,200,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,201,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,202,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,203,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,204,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,205,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,206,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,207,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,208,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1004,* Adds to each field of this period.
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1006,"* @param years  amount of years to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1007,"* @param months  amount of months to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1008,"* @param weeks  amount of weeks to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1009,"* @param days  amount of days to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1010,"* @param hours  amount of hours to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1011,"* @param minutes  amount of minutes to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1012,"* @param seconds  amount of seconds to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1013,"* @param millis  amount of milliseconds to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1014,* @throws IllegalArgumentException if the period being added contains a field
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1015,* not supported by this period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1016,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1018,"protected void add(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1019,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1020,setTimePeriod(
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1021,"FieldUtils.safeAdd(getYears(), years),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1022,"FieldUtils.safeAdd(getMonths(), months),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1023,"FieldUtils.safeAdd(getWeeks(), weeks),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1024,"FieldUtils.safeAdd(getDays(), days),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1025,"FieldUtils.safeAdd(getHours(), hours),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1026,"FieldUtils.safeAdd(getMinutes(), minutes),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1027,"FieldUtils.safeAdd(getSeconds(), seconds),"
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1028,"FieldUtils.safeAdd(getMillis(), millis)"
False,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1025,dd(new TimePeriod(duration.getMillis()));
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1054,"add(new TimePeriod(duration.getMillis(), getDurationType()));"
False,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1037,dd(new TimePeriod(duration));
True,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,JodaTime/src/java/org/joda/time/AbstractTimePeriod.java,1066,"add(new TimePeriod(duration, getDurationType()));"
False,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,95, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,96, the duration type. This ensures that there are no odd effects caused by
False,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,97, time zones. The add methods will still use the time zone specific version
False,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,98, of the duration type.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,95,* The exact impact of this constructor is determined by the duration type.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,96,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,97,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,98,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,99,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,100,* for larger durations.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,101,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,102,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,103,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,104,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,105,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,106,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,107,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,108,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,109,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,110,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,111,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,112,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,113,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,114,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,115,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,116,* to an interval by referencing a fixed instant and then obtain the period.
False,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,109, The millisecond duration will be split to fields using a UTC version of
False,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,110, the duration type. This ensures that there are no odd effects caused by
False,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,111, time zones. The add methods will still use the time zone specific version
False,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,112, of the duration type.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,127,* The exact impact of this constructor is determined by the duration type.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,128,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,129,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,130,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,131,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,132,* for larger durations.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,133,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,134,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,135,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,136,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,137,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,138,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,139,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,140,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,141,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,142,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,143,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,144,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,145,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,146,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,147,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,148,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,347,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,348,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,349,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,350,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,351,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,352,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,353,* for larger durations.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,354,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,355,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,356,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,357,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,358,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,359,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,360,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,361,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,362,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,363,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,364,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,365,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,366,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,367,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,368,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,369,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,380,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,381,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,382,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,383,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,384,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,385,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,386,* for larger durations.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,387,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,388,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,389,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,390,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,391,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,392,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,393,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,394,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,395,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,396,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,397,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,398,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,399,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,400,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,401,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,402,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,424,* Adds to each field of this period.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,426,"* @param years  amount of years to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,427,"* @param months  amount of months to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,428,"* @param weeks  amount of weeks to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,429,"* @param days  amount of days to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,430,"* @param hours  amount of hours to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,431,"* @param minutes  amount of minutes to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,432,"* @param seconds  amount of seconds to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,433,"* @param millis  amount of milliseconds to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,434,* @throws IllegalArgumentException if the period being added contains a field
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,435,* not supported by this period
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,436,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,438,"public void add(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,439,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,440,"super.add(years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,457,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,458,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,459,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,460,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,461,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,462,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,463,* for larger durations.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,464,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,465,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,466,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,467,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,468,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,469,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,470,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,471,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,472,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,473,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,474,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,475,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,476,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,477,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,478,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,479,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,491,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,492,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,493,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,494,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,495,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,496,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,497,* for larger durations.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,498,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,499,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,500,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,501,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,502,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,503,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,504,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,505,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,506,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,507,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,508,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,509,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,510,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,511,* <p>
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,512,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,JodaTime/src/java/org/joda/time/MutableTimePeriod.java,513,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,113,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,114,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,115,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,116,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,117,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,118,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,119,* for larger durations.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,120,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,121,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,122,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,123,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,124,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,125,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,126,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,127,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,128,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,129,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,130,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,131,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,132,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,133,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,134,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,135,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,144,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,145,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,146,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,147,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,148,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,149,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,150,* for larger durations.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,151,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,152,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,153,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,154,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,155,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,156,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,157,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,158,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,159,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,160,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,161,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,162,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,163,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,164,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,165,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,166,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,184,* Adds to each field of this period.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,186,"* @param years  amount of years to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,187,"* @param months  amount of months to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,188,"* @param weeks  amount of weeks to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,189,"* @param days  amount of days to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,190,"* @param hours  amount of hours to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,191,"* @param minutes  amount of minutes to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,192,"* @param seconds  amount of seconds to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,193,"* @param millis  amount of milliseconds to add to this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,194,* @throws IllegalArgumentException if the period being added contains a field
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,195,* not supported by this period
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,196,* @throws ArithmeticException if the addition exceeds the capacity of the period
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,198,"void add(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,199,"int hours, int minutes, int seconds, int millis);"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,213,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,214,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,215,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,216,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,217,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,218,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,219,* for larger durations.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,220,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,221,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,222,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,223,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,224,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,225,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,226,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,227,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,228,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,229,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,230,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,231,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,232,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,233,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,234,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,235,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,245,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,246,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,247,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,248,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,249,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,250,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,251,* for larger durations.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,252,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,253,* If this period uses the PreciseAll duration type then all fields can be set.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,254,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,255,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,256,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,257,* If the period uses the All duration type then the years and months fields
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,258,"* will remain as zero, with the duration allocated to the weeks field."
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,259,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,260,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,261,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,262,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,263,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,264,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,265,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,266,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,JodaTime/src/java/org/joda/time/ReadWritableTimePeriod.java,267,* to an interval by referencing a fixed instant and then obtain the period.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,89, Converts this duration to a TimePeriod instance using the PreciseAll type.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,89,* Converts this duration to a TimePeriod instance using the All type.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,91," The PreciseAll type fixes days at 24 hours, months ay 30 days and years at 365 days"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92, thus the time period will be precise. As a result there is no loss of precision
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,93, with regards the length of the duration and the following code will work:
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94, <pre>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,95, Duration dur = new Duration(123456789L);
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,96, TimePeriod period = d.toTimePeriod();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,97, Duration dur2 = period.toDuration();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,98, // dur.getMillis() == dur2.getMillis()
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,99, </pre>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,91,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,93,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,95,* for larger durations.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,96,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,97,"* If the duration is larger then the years and months fields will remain as zero,"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,98,* with the duration allocated to the weeks field.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,99,"* Normally, the weeks and days fields are imprecise, but this method"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,100,* calculates using the UTC time zone making weeks and days precise.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,101,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,102,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,103,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,104,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,105,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,106,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,107,* to an interval by referencing a fixed instant and then obtain the period.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,109," If a non-precise duration type is used, the resulting time period will only"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,110, represent an approximation of the duration. As a result it will not be
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,111, possible to call {@link TimePeriod#toDuration()} to get the duration back.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,117,* The exact impact of this method is determined by the duration type.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,118,* Only precise fields in the duration type will be used and the calculation will use UTC.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,119,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,120,"* If the duration is small, less than one day, then this method will perform"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,121,* as you might expect and split the fields evenly. The situation is more complex
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,122,* for larger durations.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,123,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,124,* If the duration type is PreciseAll then all fields can be set.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,125,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,126,"* 1 year, 2 months and 5 days using the PreciseAll type."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,127,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,128,"* If the duration type is All then the years and months fields will remain as zero,"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,129,* with the duration allocated to the weeks and days fields.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,130,* The effect is that a large duration of several years or months will be converted
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,131,* to a period including a large number of weeks and zero years and months.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,132,"* For example, a duration equal to (365 + 60 + 5) days will be converted to"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,133,* 61 weeks and 3 days.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,134,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,135,"* For more control over the conversion process, you should convert the duration"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,136,* to an interval by referencing a fixed instant and then obtain the period.
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,204,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,205,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,206,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,207,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,208,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,211,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,212,long length =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,213,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,214,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,215,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,216,MutableTimePeriod test = new MutableTimePeriod(length);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,217,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,218,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,219,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,220,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,221,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,222,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,223,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,224,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,225,"assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,224,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,225,"ssertEquals(length, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,246,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,247,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,248,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,249,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,250,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,262,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,263,"ssertEquals(length, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,287,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,288,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,289,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,290,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,291,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,267,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,295,long length =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,276,"ssertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,304,"assertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,388,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,389,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,416,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,417,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,418,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,419,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,420,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,405,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,406,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,436,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,437,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,438,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,439,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,440,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,423,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,424,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,457,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,458,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,459,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,460,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,461,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,440,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,441,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,477,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,478,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,479,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,480,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,481,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,446,"ateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,486,"DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,449,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,450,"ssertEquals(1, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,451,"ssertEquals(1, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,452,"ssertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,489,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,490,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,491,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,492,"assertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,475,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,476,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,515,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,516,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,517,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,518,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,519,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,492,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,493,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,535,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,536,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,537,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,538,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,539,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,509,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,510,"ssertEquals(dt2.getMillis() - TEST_TIME_NOW, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,555,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,556,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,557,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,558,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,559,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,563,"DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,564,DateTime dt2 = null;  // 2002-06-09T01:00+01:00
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,565,"MutableTimePeriod test = new MutableTimePeriod(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,566,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,567,"assertEquals(-3, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,568,"assertEquals(-1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,569,"assertEquals(-1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,570,"assertEquals(-1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,571,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,572,"assertEquals(-1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,573,"assertEquals(-1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,574,"assertEquals(-1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,575,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,576,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,577,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,578,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,579,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,582,public void testConstructor_RI_RI5() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,544,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,545,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,613,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,614,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,615,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,616,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,617,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,561,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,562,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,633,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,634,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,635,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,636,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,637,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,567,"ateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,642,"DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,570,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,571,"ssertEquals(1, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,572,"ssertEquals(1, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,573,"ssertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,645,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,646,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,647,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,648,"assertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,595,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,596,"ssertEquals(dt2.getMillis() - TEST_TIME_NOW, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,670,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,671,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,672,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,673,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,674,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,670,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,671,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,672,"imePeriod base = new TimePeriod(dt1, dt2);  // AllType and precise"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,748,"TimePeriod base = new TimePeriod(1, 1, 0, 1, 1, 1, 1, 1, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,683,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,684,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,759,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,760,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,761,test.toDurationMillis();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,762,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,763,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,689, Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,768,"* Test constructor (Object,DurationType)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,695,MutableTimePeriod test = new MutableTimePeriod();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,696,test.setTimePeriod(
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,697,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,698,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,699,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,700,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,701,System.err.println(test);  // TODO
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,702,"assertEquals(1, test.getYears());  // 365"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,703,"assertEquals(2, test.getMonths()); // 31 + 30 (Jan + Feb)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,704,"assertEquals(3, test.getWeeks());  // 3 * 7"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,705,"assertEquals(3, test.getDays());   // 3 left (one given to months)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,706,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,707,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,708,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,709,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,712,public void testSetTimePeriod_long3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,711,ublic void testSetTimePeriod_long3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,729,public void testSetTimePeriod_long4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,899,public void testAdd_8ints1() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,900,MutableTimePeriod test = new MutableTimePeriod(100L);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,901,"test.add(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,902,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,903,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,904,"assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,905,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,906,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,907,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,908,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,909,"assertEquals(108, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,912,public void testAdd_8ints2() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,913,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,914,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,915,"test.add(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,916,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,917,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,918,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,919,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,920,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,921,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,922,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,923,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,924,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,925,"assertEquals(100, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,905,"ssertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,953,"assertEquals(0, test.getWeeks());  // checks that YearMonth type is used in conversion"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,931,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,932,est.add(100L);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,933,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,934, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,979,test.add(2100L);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,980,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,981,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,982,"assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,983,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,984,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,985,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,986,"assertEquals(9, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,987,"assertEquals(108, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,938,ublic void testAdd_RP1() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,991,public void testAdd_RD1() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,940,est.add(new TimePeriod(100L));
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,993,test.add(new Duration(100L));
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,952,ublic void testAdd_RP2() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1005,public void testAdd_RD2() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,954,"est.add(new TimePeriod(1, 0, 12, 1, 5, 6, 7, 8, DurationType.getPreciseYearWeekType()));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1007,long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1008,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1009,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1010,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1011,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1012,test.add(new Duration(ms));
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,957,"ssertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1015,"assertEquals(0, test.getWeeks());  // checks that YearMonth type is used in conversion"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1021,"assertEquals(ms + 100L, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1024,public void testAdd_RD3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1025,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1026,long ms =0L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1027,test.add(new Duration(ms));
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1028,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1029,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1030,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1031,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1032,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1033,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1034,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1035,"assertEquals(100, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1036,"assertEquals(100L, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1039,public void testAdd_RD4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1040,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1041,test.add(new Duration(2100L));
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1042,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1043,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1044,"assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1045,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1046,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1047,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1048,"assertEquals(9, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1049,"assertEquals(108, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1052,public void testAdd_RD5() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1053,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1054,test.add((ReadableDuration) null);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1055,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1056,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1057,"assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1058,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1059,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1060,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1061,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1062,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1066,public void testAdd_RP1() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1067,MutableTimePeriod test = new MutableTimePeriod(100L);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1068,test.add(new TimePeriod(100L));
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1069,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1070,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1071,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1072,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1073,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1074,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1075,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1076,"assertEquals(200, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1077,"assertEquals(200L, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1080,public void testAdd_RP2() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1081,MutableTimePeriod test = new MutableTimePeriod(100L);  // All type
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1082,"test.add(new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getPreciseAllType()));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1083,"assertEquals(1, test.getYears());  // add field value, ignore different types"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1084,"assertEquals(2, test.getMonths());  // add field value, ignore different types"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1085,"assertEquals(3, test.getWeeks());  // add field value, ignore different types"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1086,"assertEquals(4, test.getDays());  // add field value, ignore different types"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1087,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1088,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1089,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1090,"assertEquals(108, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,980,"utableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1108,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 0, 4, 5, 6, 7, 8, DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,982,est.add(new TimePeriod(100L));
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1110,"test.add(new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8));  // cannot set weeks"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,984, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1112,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1113,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1114,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1115,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1116,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1117,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1118,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1119,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1120,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1124,"MutableTimePeriod test = new MutableTimePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1125,test.add((ReadableTimePeriod) null);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1126,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1127,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1128,"assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1129,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1130,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1131,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1132,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1133,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1137,public void testAdd_RInterval1() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,989,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,990,"est.add(new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,991,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,992, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1139,"test.add(new Interval(100L, 200L));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1140,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1141,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1142,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1143,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1144,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1145,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1146,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1147,"assertEquals(200, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1148,"assertEquals(200L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,995,ublic void testAdd_RP6() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1151,public void testAdd_RInterval2() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1152,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1153,"DateTime dt2 = new DateTime(2005, 12, 18, 0, 0, 0, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1154,MutableTimePeriod test = new MutableTimePeriod(100L);  // All type
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1155,"test.add(new Interval(dt1, dt2));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1156,"assertEquals(1, test.getYears());  // add field value from interval"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1157,"assertEquals(6, test.getMonths());  // add field value from interval"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1158,"assertEquals(1, test.getWeeks());  // add field value from interval"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1159,"assertEquals(2, test.getDays());  // add field value from interval"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1160,"assertEquals(0, test.getHours());  // time zone OK"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1161,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1162,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1163,"assertEquals(108, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1166,public void testAdd_RInterval3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1167,"DateTime dt1 = new DateTime(2005, 12, 18, 0, 0, 0, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1168,"DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1169,MutableTimePeriod test = new MutableTimePeriod(100L);  // All type
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1170,"test.add(new Interval(dt1, dt2));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1171,"assertEquals(-1, test.getYears());  // add field value from interval"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1172,"assertEquals(-6, test.getMonths());  // add field value from interval"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1173,"assertEquals(-1, test.getWeeks());  // add field value from interval"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1174,"assertEquals(-2, test.getDays());  // add field value from interval"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1175,"assertEquals(0, test.getHours());  // time zone OK"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1176,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1177,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1178,"assertEquals(92, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1181,public void testAdd_RInterval4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1182,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1183,"test.add(new Interval(0L, 0L));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1184,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1185,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1186,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1187,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1188,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1189,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1190,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1191,"assertEquals(100, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1194,public void testAdd_RInterval5() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1195,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1196,"DateTime dt2 = new DateTime(2005, 7, 17, 0, 0, 0, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1197,"MutableTimePeriod test = new MutableTimePeriod(100L, DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1198,"test.add(new Interval(dt1, dt2));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1199,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1200,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1201,"assertEquals(0, test.getWeeks());  // no weeks"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1202,"assertEquals(8, test.getDays());  // week added to days"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1203,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1204,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1205,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1206,"assertEquals(108, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1209,public void testAdd_RInterval6() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,997,est.add((ReadableTimePeriod) null);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1211,test.add((ReadableInterval) null);

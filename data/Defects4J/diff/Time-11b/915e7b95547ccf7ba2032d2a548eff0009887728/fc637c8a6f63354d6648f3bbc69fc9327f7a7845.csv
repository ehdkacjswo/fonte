is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,629," @param zone  the time zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,629,"* @param newZone  the time zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,632,rotected void setZoneRetainFields(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,633,f (zone == null) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,634,one = DateTimeZone.getDefault();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,636,ateTimeZone currentZone = iChronology.getZone();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,637,f (currentZone != zone) {
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,638,ong millis = iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,639,illis += currentZone.getOffset(millis);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,640,illis -= zone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,641,"/ Don't set iChronology and iMillis directly, as it may provide a"
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,642,/ backdoor to immutable subclasses.
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,643,etChronology(iChronology.withZone(zone));
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,644,etMillis(millis);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,632,protected void setZoneRetainFields(DateTimeZone newZone) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,633,newZone = (newZone == null ? DateTimeZone.getDefault() : newZone);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,634,DateTimeZone originalZone = getZone();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,635,originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,636,if (newZone == originalZone) {
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,637,return;
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,640,long millis = getMillis();
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,641,millis += originalZone.getOffset(millis);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,642,millis -= newZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,644,setChronology(iChronology.withZone(newZone));
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,645,setMillis(millis);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,376," @param newDateTimeZone  the new time zone, null means default"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,376,"* @param newZone  the new time zone, null means default"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,380,ublic final DateTime withZoneRetainFields(DateTimeZone newDateTimeZone) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,381,ewDateTimeZone = (newDateTimeZone == null ? DateTimeZone.getDefault() : newDateTimeZone);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,380,public final DateTime withZoneRetainFields(DateTimeZone newZone) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,381,newZone = (newZone == null ? DateTimeZone.getDefault() : newZone);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,384,f (newDateTimeZone == originalZone) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,384,if (newZone == originalZone) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,388,ong originalMillis = getMillis();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,389,ong newMillis = originalMillis + originalZone.getOffset(originalMillis);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,390,ewMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,388,long millis = getMillis();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,389,millis += originalZone.getOffset(millis);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,390,millis -= newZone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,392,"eturn new DateTime(newMillis, getChronology().withZone(newDateTimeZone));"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,392,"return new DateTime(millis, getChronology().withZone(newZone));"

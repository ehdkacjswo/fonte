is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1388,"tatic PrecalculatedZone create(String id, boolean outputID, ArrayList transitions, DSTZone tailZone) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1388,"static PrecalculatedZone create(String id, boolean outputID, ArrayList transitions,"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1389,DSTZone tailZone) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1427,Chronology chrono = ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1432,"eriod p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1436,"Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1441,"ystem.out.println(""     - "" + new DateTime(trans[i]) + "" - "" + new DateTime(trans[i + 1]));"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1445,"System.out.println(""     - "" + new DateTime(trans[i], chrono) +"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1446,""" - "" + new DateTime(trans[i + 1], chrono));"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1451,f (tailZone.iStartRecurrence.getNameKey().equals(tailZone.iEndRecurrence.getNameKey())) {
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1452,"ystem.out.println(""Fixing duplicate recurrent name key - "" + tailZone.iStartRecurrence.getNameKey());"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1457,if (tailZone.iStartRecurrence.getNameKey()
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1458,.equals(tailZone.iEndRecurrence.getNameKey())) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1459,"System.out.println(""Fixing duplicate recurrent name key - "" +"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1460,tailZone.iStartRecurrence.getNameKey());
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1469,"eturn new PrecalculatedZone((outputID ? id : """"), trans, wallOffsets, standardOffsets, nameKeys, tailZone);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1477,return new PrecalculatedZone
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1478,"((outputID ? id : """"), trans, wallOffsets, standardOffsets, nameKeys, tailZone);"

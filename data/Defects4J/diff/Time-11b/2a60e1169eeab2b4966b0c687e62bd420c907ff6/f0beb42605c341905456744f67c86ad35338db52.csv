is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,56,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,57,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,59,import org.joda.time.base.AbstractPartial;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,60,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,63,* This class is a Junit unit test for YearMonthDay.
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,67,public class TestAbstractPartial extends TestCase {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,69,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,71,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,72,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,74,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,75,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,76,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,77,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,79,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,80,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,81,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,82,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,84,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,86,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,87,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,90,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,91,return new TestSuite(TestAbstractPartial.class);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,94,public TestAbstractPartial(String name) {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,95,super(name);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,98,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,99,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,100,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,101,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,104,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,105,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,106,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,107,zone = null;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,111,public void testGetValue() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,112,MockPartial mock = new MockPartial();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,113,"assertEquals(1970, mock.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,114,"assertEquals(1, mock.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,116,try {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,117,mock.getValue(-1);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,118,fail();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,119,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,120,try {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,121,mock.getValue(2);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,122,fail();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,123,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,126,public void testGetValues() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,127,MockPartial mock = new MockPartial();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,128,int[] vals = mock.getValues();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,129,"assertEquals(2, vals.length);"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,130,"assertEquals(1970, vals[0]);"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,131,"assertEquals(1, vals[1]);"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,134,public void testGetField() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,135,MockPartial mock = new MockPartial();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,136,"assertEquals(BuddhistChronology.getInstance().year(), mock.getField(0));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,137,"assertEquals(BuddhistChronology.getInstance().monthOfYear(), mock.getField(1));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,139,try {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,140,mock.getField(-1);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,141,fail();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,142,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,143,try {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,144,mock.getField(2);
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,145,fail();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,146,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,150,static class MockPartial extends AbstractPartial {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,152,"int[] val = new int[] {1970, 1};"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,154,MockPartial() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,155,super();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,158,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,159,switch (index) {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,160,case 0:
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,161,return chrono.year();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,162,case 1:
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,163,return chrono.monthOfYear();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,164,default:
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,165,throw new IndexOutOfBoundsException();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,169,public int getFieldSize() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,170,return 2;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,173,public int getValue(int index) {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,174,return val[index];
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,177,"public void setValue(int index, int value) {"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,178,val[index] = value;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,181,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,182,return BuddhistChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,111,suite.addTest(TestAbstractPartial.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,112,suite.addTest(TestBasePartial.suite());
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,56,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,57,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,59,import org.joda.time.base.BasePartial;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,62,* This class is a Junit unit test for YearMonthDay.
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,64,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,66,public class TestBasePartial extends TestCase {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,68,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,70,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,71,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,73,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,74,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,75,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,76,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,78,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,79,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,80,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,81,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,83,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,85,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,86,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,89,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,90,return new TestSuite(TestBasePartial.class);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,93,public TestBasePartial(String name) {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,94,super(name);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,97,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,98,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,99,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,100,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,103,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,104,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,105,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,106,zone = null;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,110,public void testSetMethods() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,111,MockPartial mock = new MockPartial();
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,112,"assertEquals(1970, mock.getYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,113,"assertEquals(1, mock.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,115,mock.setYear(2004);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,116,"assertEquals(2004, mock.getYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,117,"assertEquals(1, mock.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,119,mock.setMonthOfYear(6);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,120,"assertEquals(2004, mock.getYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,121,"assertEquals(6, mock.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,123,"mock.set(2005, 5);"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,124,"assertEquals(2005, mock.getYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,125,"assertEquals(5, mock.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,127,try {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,128,mock.setMonthOfYear(0);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,129,fail();
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,130,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,131,"assertEquals(2005, mock.getYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,132,"assertEquals(5, mock.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,134,try {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,135,mock.setMonthOfYear(13);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,136,fail();
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,137,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,138,"assertEquals(2005, mock.getYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,139,"assertEquals(5, mock.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,142,static class MockPartial extends BasePartial {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,144,MockPartial() {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,145,"super(new int[] {1970, 1}, null);"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,148,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,149,switch (index) {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,150,case 0:
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,151,return chrono.year();
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,152,case 1:
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,153,return chrono.monthOfYear();
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,154,default:
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,155,throw new IndexOutOfBoundsException();
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,159,public int getFieldSize() {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,160,return 2;
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,163,public int getYear() {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,164,return getValue(0);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,167,public void setYear(int year) {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,168,"setValue(0, year);"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,171,public int getMonthOfYear() {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,172,return getValue(1);
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,175,public void setMonthOfYear(int month) {
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,176,"setValue(1, month);"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,179,"public void set(int year, int month) {"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,180,"setValues(new int[] {year, month});"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,149,"assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), DateTimeZone.getDefault()));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,150,"assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), DateTimeZone.getDefault()));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,68,mport org.joda.time.PeriodType;
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,69,mport org.joda.time.MutablePeriod;
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,69,import org.joda.time.MutablePeriod;
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,70,import org.joda.time.PeriodType;
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,317,ublic void testGetDurationMillis_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,317,public void testGetDurationMillis_Object1() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,323,public void testGetDurationMillis_Object2() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,324,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,325,"StringConverter.INSTANCE.getDurationMillis(""P2Y6M9DXYZ"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,326,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,327,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,386,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,387,"StringConverter.INSTANCE.setInto(m, ""PT0SXY"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,388,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,389,} catch (IllegalArgumentException ex) {}

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,18,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,19,import java.util.Calendar;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,20,import java.util.Date;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,21,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,23,import org.joda.time.base.BasePartial;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,24,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,25,import org.joda.time.field.AbstractPartialFieldProperty;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,26,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,27,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,28,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,31,* YearMonth is an immutable partial supporting the year and monthOfYear fields.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,32,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,33,* NOTE: This class only supports the two fields listed above.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,34,"* It is impossible to query any other fields, such as dayOfWeek or centuryOfEra."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,35,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,36,* Calculations on YearMonth are performed using a {@link Chronology}.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,37,* This chronology is set to be in the UTC time zone for all calculations.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,38,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,39,* Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,40,* <ul>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,41,* <li><code>getMonthOfYear()</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,42,* <li><code>monthOfYear().get()</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,43,* </ul>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,44,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,45,* field:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,46,* <ul>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,47,* <li>numeric value - <code>monthOfYear().get()</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,48,* <li>text value - <code>monthOfYear().getAsText()</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,49,* <li>short text value - <code>monthOfYear().getAsShortText()</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,50,* <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,51,* <li>add/subtract - <code>monthOfYear().addToCopy()</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,52,* <li>set - <code>monthOfYear().setCopy()</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,53,* </ul>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,54,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,55,"* YearMonth is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,56,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,58,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,59,* @since 2.0
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,61,public final class YearMonth
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,62,extends BasePartial
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,63,"implements ReadablePartial, Serializable {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,65,/** Serialization version */
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,66,private static final long serialVersionUID = 797544782896179L;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,67,/** The singleton set of field types */
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,68,private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,69,"DateTimeFieldType.year(),"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,70,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,73,/** The index of the year field in the field array */
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,74,public static final int YEAR = 0;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,75,/** The index of the monthOfYear field in the field array */
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,76,public static final int MONTH_OF_YEAR = 1;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,80,* Constructs a YearMonth from a <code>java.util.Calendar</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,81,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,82,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,83,* Each field is queried from the Calendar and assigned to the YearMonth.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,84,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,85,* This factory method ignores the type of the calendar and always
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,86,* creates a YearMonth with ISO chronology. It is expected that you
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,87,* will only pass in instances of <code>GregorianCalendar</code> however
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,88,* this is not validated.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,90,* @param calendar  the Calendar to extract fields from
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,91,"* @return the created YearMonth, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,92,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,93,* @throws IllegalArgumentException if the year or month is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,95,public static YearMonth fromCalendarFields(Calendar calendar) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,96,if (calendar == null) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,97,"throw new IllegalArgumentException(""The calendar must not be null"");"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,99,"return new YearMonth(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,103,* Constructs a YearMonth from a <code>java.util.Date</code>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,104,* using exactly the same field values avoiding any time zone effects.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,105,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,106,* Each field is queried from the Date and assigned to the YearMonth.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,107,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,108,* This factory method always creates a YearMonth with ISO chronology.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,110,* @param date  the Date to extract fields from
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,111,"* @return the created YearMonth, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,112,* @throws IllegalArgumentException if the calendar is null
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,113,* @throws IllegalArgumentException if the year or month is invalid for the ISO chronology
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,115,public static YearMonth fromDateFields(Date date) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,116,if (date == null) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,117,"throw new IllegalArgumentException(""The date must not be null"");"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,119,"return new YearMonth(date.getYear() + 1900, date.getMonth() + 1);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,124,"* Constructs a YearMonth with the current year-month, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,125,* the default zone to extract the fields.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,126,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,127,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,128,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,129,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,131,public YearMonth() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,132,super();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,136,"* Constructs a YearMonth with the current year-month, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,137,* the specified zone to extract the fields.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,138,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,139,* The constructor uses the specified time zone to obtain the current year-month.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,140,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,141,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,143,"* @param zone  the zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,145,public YearMonth(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,146,super(ISOChronology.getInstance(zone));
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,150,"* Constructs a YearMonth with the current year-month, using the specified chronology"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,151,* and zone to extract the fields.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,152,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,153,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,154,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,155,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,157,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,159,public YearMonth(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,160,super(chronology);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,164,* Constructs a YearMonth extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,165,* milliseconds using the ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,166,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,167,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,168,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,169,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,171,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,173,public YearMonth(long instant) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,174,super(instant);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,178,* Constructs a YearMonth extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,179,* milliseconds using the chronology provided.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,180,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,181,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,182,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,183,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,185,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,186,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,188,"public YearMonth(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,189,"super(instant, chronology);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,193,* Constructs a YearMonth from an Object that represents some form of time.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,194,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,195,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,196,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,197,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,198,* The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,199,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,200,"* The chronology used will be derived from the object, defaulting to ISO."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,202,"* @param instant  the date-time object, null means now"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,203,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,205,public YearMonth(Object instant) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,206,"super(instant, null, ISODateTimeFormat.dateOptionalTimeParser());"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,210,"* Constructs a YearMonth from an Object that represents some form of time,"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,211,* using the specified chronology.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,212,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,213,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,214,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,215,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,216,* The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,217,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,218,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,219,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,220,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,221,* The specified chronology overrides that of the object.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,223,"* @param instant  the date-time object, null means now"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,224,"* @param chronology  the chronology, null means ISO default"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,225,* @throws IllegalArgumentException if the instant is invalid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,227,"public YearMonth(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,228,"super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.dateOptionalTimeParser());"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,232,* Constructs a YearMonth with specified year and month
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,233,* using <code>ISOChronology</code>.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,234,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,235,* The constructor uses the no time zone initialising the fields as provided.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,236,"* Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,237,* are performed without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,239,* @param year  the year
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,240,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,241,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,243,"public YearMonth(int year, int monthOfYear) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,244,"this(year, monthOfYear, null);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,248,* Constructs an instance set to the specified year and month
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,249,"* using the specified chronology, whose zone is ignored."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,250,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,251,"* If the chronology is null, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,252,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,253,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,254,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,255,* without reference to a time-zone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,257,* @param year  the year
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,258,* @param monthOfYear  the month of the year
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,259,* @param dayOfMonth  the day of the month
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,260,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,262,"public YearMonth(int year, int monthOfYear, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,263,"super(new int[] {year, monthOfYear}, chronology);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,267,* Constructs a YearMonth with chronology from this instance and new values.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,269,* @param partial  the partial to base this new instance on
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,270,* @param values  the new set of values
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,272,"YearMonth(YearMonth partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,273,"super(partial, values);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,277,* Constructs a YearMonth with values from this instance and a new chronology.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,279,* @param partial  the partial to base this new instance on
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,280,* @param chrono  the new chronology
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,282,"YearMonth(YearMonth partial, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,283,"super(partial, chrono);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,288,"* Gets the number of fields in this partial, which is two."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,289,* The supported fields are Year and MonthOfYear.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,290,* Note that only these fields may be queried.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,292,"* @return the field count, two"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,294,public int size() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,295,return 2;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,299,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,300,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,301,* This method must not use any instance variables.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,303,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,304,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,305,"* @return the field, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,307,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,308,switch (index) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,309,case YEAR:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,310,return chrono.year();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,311,case MONTH_OF_YEAR:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,312,return chrono.monthOfYear();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,313,default:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,314,"throw new IndexOutOfBoundsException(""Invalid index: "" + index);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,319,* Gets the field type at the specified index.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,321,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,322,"* @return the field at the specified index, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,323,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,325,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,326,return FIELD_TYPES[index];
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,330,* Gets an array of the field type of each of the fields that this partial supports.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,331,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,332,"* The fields are returned largest to smallest, Year, Month"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,334,"* @return the array of field types (cloned), largest to smallest, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,336,public DateTimeFieldType[] getFieldTypes() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,337,return (DateTimeFieldType[]) FIELD_TYPES.clone();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,342,* Returns a copy of this year-month with the specified chronology.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,343,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,344,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,345,"* This method retains the values of the fields, thus the result will"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,346,* typically refer to a different instant.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,347,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,348,"* The time zone of the specified chronology is ignored, as YearMonth"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,349,* operates without a time zone.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,351,"* @param newChronology  the new chronology, null means ISO"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,352,"* @return a copy of this year-month with a different chronology, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,353,* @throws IllegalArgumentException if the values are invalid for the new chronology
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,355,public YearMonth withChronologyRetainFields(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,356,newChronology = DateTimeUtils.getChronology(newChronology);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,357,newChronology = newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,358,if (newChronology == getChronology()) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,359,return this;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,360,} else {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,361,"YearMonth newYearMonth = new YearMonth(this, newChronology);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,362,"newChronology.validate(newYearMonth, getValues());"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,363,return newYearMonth;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,368,* Returns a copy of this year-month with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,369,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,370,"* For example, if the field type is <code>dayOfMonth</code> then the day"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,371,* would be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,372,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,373,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,374,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,375,"* YearMonth updated = ym.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,376,* YearMonth updated = ym.dayOfMonth().setCopy(6);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,377,* YearMonth updated = ym.property(DateTimeFieldType.dayOfMonth()).setCopy(6);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,378,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,380,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,381,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,382,"* @return a copy of this instance with the field set, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,383,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,385,"public YearMonth withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,386,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,387,if (value == getValue(index)) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,388,return this;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,390,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,391,"newValues = getField(index).set(this, index, newValues, value);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,392,"return new YearMonth(this, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,396,* Returns a copy of this year-month with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,397,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,398,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,399,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,400,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,401,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,402,"* YearMonth added = ym.withFieldAdded(DurationFieldType.days(), 6);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,403,* YearMonth added = ym.plusDays(6);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,404,* YearMonth added = ym.dayOfMonth().addToCopy(6);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,405,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,407,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,408,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,409,"* @return a copy of this instance with the field updated, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,410,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,411,* @throws ArithmeticException if the new date-time exceeds the capacity
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,413,"public YearMonth withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,414,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,415,if (amount == 0) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,416,return this;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,418,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,419,"newValues = getField(index).add(this, index, newValues, amount);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,420,"return new YearMonth(this, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,424,* Returns a copy of this year-month with the specified period added.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,425,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,426,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,427,* Fields in the period that aren't present in the partial are ignored.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,428,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,429,* This method is typically used to add multiple copies of complex
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,430,* period instances. Adding one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,431,"* like {@link #withFieldAdded(DurationFieldType, int)}"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,432,* or {@link #plusYears(int)}.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,434,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,435,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,436,"* @return a copy of this instance with the period added, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,437,* @throws ArithmeticException if the new date-time exceeds the capacity
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,439,"public YearMonth withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,440,if (period == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,441,return this;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,443,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,444,for (int i = 0; i < period.size(); i++) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,445,DurationFieldType fieldType = period.getFieldType(i);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,446,int index = indexOf(fieldType);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,447,if (index >= 0) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,448,"newValues = getField(index).add(this, index, newValues,"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,449,"FieldUtils.safeMultiply(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,452,"return new YearMonth(this, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,457,* Returns a copy of this year-month with the specified period added.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,458,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,459,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,460,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,461,* This method is typically used to add complex period instances.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,462,* Adding one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,463,* like {@link #plusYears(int)}.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,465,"* @param period  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,466,"* @return a copy of this instance with the period added, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,467,* @throws ArithmeticException if the new year-month exceeds the capacity
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,469,public YearMonth plus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,470,"return withPeriodAdded(period, 1);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,475,* Returns a copy of this year-month plus the specified number of years.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,476,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,477,* This year-month instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,478,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,479,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,480,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,481,* YearMonth added = ym.plusYears(6);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,482,* YearMonth added = ym.plus(Period.years(6));
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,483,"* YearMonth added = ym.withFieldAdded(DurationFieldType.years(), 6);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,484,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,486,"* @param years  the amount of years to add, may be negative"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,487,"* @return the new year-month plus the increased years, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,489,public YearMonth plusYears(int years) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,490,"return withFieldAdded(DurationFieldType.years(), years);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,494,* Returns a copy of this year-month plus the specified number of months.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,495,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,496,* This year-month instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,497,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,498,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,499,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,500,* YearMonth added = ym.plusMonths(6);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,501,* YearMonth added = ym.plus(Period.months(6));
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,502,"* YearMonth added = ym.withFieldAdded(DurationFieldType.months(), 6);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,503,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,505,"* @param months  the amount of months to add, may be negative"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,506,"* @return the new year-month plus the increased months, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,508,public YearMonth plusMonths(int months) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,509,"return withFieldAdded(DurationFieldType.months(), months);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,514,* Returns a copy of this year-month with the specified period taken away.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,515,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,516,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,517,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,518,* This method is typically used to subtract complex period instances.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,519,* Subtracting one field is best achieved using methods
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,520,* like {@link #minusYears(int)}.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,522,* @param period  the period to reduce this instant by
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,523,"* @return a copy of this instance with the period taken away, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,524,* @throws ArithmeticException if the new year-month exceeds the capacity
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,526,public YearMonth minus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,527,"return withPeriodAdded(period, -1);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,532,* Returns a copy of this year-month minus the specified number of years.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,533,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,534,* This year-month instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,535,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,536,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,537,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,538,* YearMonth subtracted = ym.minusYears(6);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,539,* YearMonth subtracted = ym.minus(Period.years(6));
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,540,"* YearMonth subtracted = ym.withFieldAdded(DurationFieldType.years(), -6);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,541,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,543,"* @param years  the amount of years to subtract, may be negative"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,544,"* @return the new year-month minus the increased years, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,546,public YearMonth minusYears(int years) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,547,"return withFieldAdded(DurationFieldType.years(), FieldUtils.safeNegate(years));"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,551,* Returns a copy of this year-month minus the specified number of months.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,552,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,553,* This year-month instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,554,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,555,* The following three lines are identical in effect:
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,556,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,557,* YearMonth subtracted = ym.minusMonths(6);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,558,* YearMonth subtracted = ym.minus(Period.months(6));
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,559,"* YearMonth subtracted = ym.withFieldAdded(DurationFieldType.months(), -6);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,560,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,562,"* @param months  the amount of months to subtract, may be negative"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,563,"* @return the new year-month minus the increased months, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,565,public YearMonth minusMonths(int months) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,566,"return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,571,* Converts this object to a LocalDate with the same year-month and chronology.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,573,"* @param dayOfMonth the day of month to use, valid for chronology, such as 1-31 for ISO"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,574,"* @return a LocalDate with the same year-month and chronology, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,576,public LocalDate toLocalDate(int dayOfMonth) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,577,"return new LocalDate(getYear(), getMonthOfYear(), dayOfMonth, getChronology());"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,582,* Converts this object to an Interval representing the whole month.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,583,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,584,* The interval will use the chronology of the year-month in the default zone.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,585,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,586,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,588,"* @return an interval over the month, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,590,public Interval toInterval() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,591,return toInterval(null);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,595,* Converts this object to an Interval representing the whole month.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,596,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,597,* The interval will use the chronology of the year-month in the specified zone.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,598,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,599,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,601,"* @param zone  the zone to get the Interval in, null means default"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,602,"* @return an interval over the month, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,604,public Interval toInterval(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,605,zone = DateTimeUtils.getZone(zone);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,606,DateTime start = toLocalDate(1).toDateTimeAtStartOfDay(zone);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,607,DateTime end = plusMonths(1).toLocalDate(1).toDateTimeAtStartOfDay(zone);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,608,"return new Interval(start, end);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,613,* Get the year field value.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,615,* @return the year
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,617,public int getYear() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,618,return getValue(YEAR);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,622,* Get the month of year field value.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,624,* @return the month of year
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,626,public int getMonthOfYear() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,627,return getValue(MONTH_OF_YEAR);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,632,* Returns a copy of this year-month with the year field updated.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,633,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,634,"* YearMonth is immutable, so there are no set methods."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,635,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,636,* year changed.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,638,* @param year  the year to set
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,639,"* @return a copy of this object with the field set, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,640,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,642,public YearMonth withYear(int year) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,643,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,644,"newValues = getChronology().year().set(this, YEAR, newValues, year);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,645,"return new YearMonth(this, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,649,* Returns a copy of this year-month with the month of year field updated.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,650,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,651,"* YearMonth is immutable, so there are no set methods."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,652,"* Instead, this method returns a new instance with the value of"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,653,* month of year changed.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,655,* @param monthOfYear  the month of year to set
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,656,"* @return a copy of this object with the field set, never null"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,657,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,659,public YearMonth withMonthOfYear(int monthOfYear) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,660,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,661,"newValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,662,"return new YearMonth(this, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,667,"* Gets the property object for the specified type, which contains"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,668,* many useful methods.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,670,* @param type  the field type to get the property for
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,671,* @return the property object
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,672,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,674,public Property property(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,675,"return new Property(this, indexOfSupported(type));"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,680,* Get the year field property which provides access to advanced functionality.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,682,* @return the year property
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,684,public Property year() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,685,"return new Property(this, YEAR);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,689,* Get the month of year field property which provides access to advanced functionality.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,691,* @return the month of year property
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,693,public Property monthOfYear() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,694,"return new Property(this, MONTH_OF_YEAR);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,699,* Output the year-month in ISO8601 format (yyyy-MM-dd).
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,701,* @return ISO8601 time formatted string.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,703,public String toString() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,704,return ISODateTimeFormat.yearMonth().print(this);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,708,* Output the year-month using the specified format pattern.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,710,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,711,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,713,public String toString(String pattern) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,714,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,715,return toString();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,717,return DateTimeFormat.forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,721,* Output the year-month using the specified format pattern.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,723,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,724,"* @param locale  Locale to use, null means default"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,725,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,727,"public String toString(String pattern, Locale locale) throws IllegalArgumentException {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,728,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,729,return toString();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,731,return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,736,* The property class for <code>YearMonth</code>.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,737,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,738,* This class binds a <code>YearMonth</code> to a <code>DateTimeField</code>.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,740,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,741,* @since 2.0
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,743,public static class Property extends AbstractPartialFieldProperty implements Serializable {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,745,/** Serialization version */
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,746,private static final long serialVersionUID = 5727734012190224363L;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,748,/** The partial */
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,749,private final YearMonth iYearMonth;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,750,/** The field index */
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,751,private final int iFieldIndex;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,754,* Constructs a property.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,756,* @param partial  the partial instance
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,757,* @param fieldIndex  the index in the partial
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,759,"Property(YearMonth partial, int fieldIndex) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,760,super();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,761,iYearMonth = partial;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,762,iFieldIndex = fieldIndex;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,766,* Gets the field that this property uses.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,768,* @return the field
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,770,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,771,return iYearMonth.getField(iFieldIndex);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,775,* Gets the partial that this property belongs to.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,777,* @return the partial
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,779,protected ReadablePartial getReadablePartial() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,780,return iYearMonth;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,784,* Gets the partial that this property belongs to.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,786,* @return the partial
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,788,public YearMonth getYearMonth() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,789,return iYearMonth;
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,793,* Gets the value of this field.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,795,* @return the field value
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,797,public int get() {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,798,return iYearMonth.getValue(iFieldIndex);
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,803,* Adds to the value of this field in a copy of this YearMonth.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,804,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,805,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,806,* added solely to this field then it will affect larger fields.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,807,* Smaller fields are unaffected.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,808,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,809,"* If the result would be too large, beyond the maximum year, then an"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,810,* IllegalArgumentException is thrown.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,811,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,812,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,813,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,815,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,816,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,817,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,819,public YearMonth addToCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,820,int[] newValues = iYearMonth.getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,821,"newValues = getField().add(iYearMonth, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,822,"return new YearMonth(iYearMonth, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,826,* Adds to the value of this field in a copy of this YearMonth wrapping
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,827,* within this field if the maximum value is reached.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,828,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,829,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,830,* added solely to this field then it wraps within this field.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,831,* Other fields are unaffected.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,832,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,833,"* For example,"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,834,* <code>2004-12</code> addWrapField one month returns <code>2004-01</code>.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,835,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,836,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,837,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,839,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,840,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,841,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,843,public YearMonth addWrapFieldToCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,844,int[] newValues = iYearMonth.getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,845,"newValues = getField().addWrapField(iYearMonth, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,846,"return new YearMonth(iYearMonth, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,851,* Sets this field in a copy of the YearMonth.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,852,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,853,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,854,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,856,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,857,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,858,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,860,public YearMonth setCopy(int value) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,861,int[] newValues = iYearMonth.getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,862,"newValues = getField().set(iYearMonth, iFieldIndex, newValues, value);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,863,"return new YearMonth(iYearMonth, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,867,* Sets this field in a copy of the YearMonth to a parsed text value.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,868,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,869,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,870,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,872,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,873,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,874,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,875,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,877,"public YearMonth setCopy(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,878,int[] newValues = iYearMonth.getValues();
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,879,"newValues = getField().set(iYearMonth, iFieldIndex, newValues, text, locale);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,880,"return new YearMonth(iYearMonth, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,884,* Sets this field in a copy of the YearMonth to a parsed text value.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,885,* <p>
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,886,* The YearMonth attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,887,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,889,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,890,* @return a copy of the YearMonth with the field value changed
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,891,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,893,public YearMonth setCopy(String text) {
True,JodaTime/src/java/org/joda/time/YearMonth.java,JodaTime/src/java/org/joda/time/YearMonth.java,894,"return setCopy(text, null);"
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,104,suite.addTest(TestYearMonth_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,105,suite.addTest(TestYearMonth_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,106,suite.addTest(TestYearMonth_Properties.suite());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,22,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,23,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,25,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,26,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,28,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,29,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,30,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,31,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,32,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,33,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,36,* This class is a Junit unit test for YearMonth.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,38,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,40,public class TestYearMonth_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,42,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,43,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,44,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,45,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,46,private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,47,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,48,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,49,//    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,50,//    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,51,//    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,52,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,53,//    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,54,//    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,55,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,56,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,58,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,59,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,61,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,63,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,64,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,67,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,68,return new TestSuite(TestYearMonth_Basics.class);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,71,public TestYearMonth_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,72,super(name);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,75,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,76,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,77,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,78,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,81,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,82,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,83,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,84,zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,88,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,89,YearMonth test = new YearMonth();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,90,"assertEquals(1970, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,91,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,92,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,93,test.get(null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,94,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,95,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,96,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,97,test.get(DateTimeFieldType.dayOfMonth());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,98,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,99,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,102,public void testSize() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,103,YearMonth test = new YearMonth();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,104,"assertEquals(2, test.size());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,107,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,108,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,109,"assertSame(DateTimeFieldType.year(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,110,"assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,111,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,112,test.getFieldType(-1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,113,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,114,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,115,test.getFieldType(2);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,116,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,119,public void testGetFieldTypes() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,120,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,121,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,122,"assertEquals(2, fields.length);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,123,"assertSame(DateTimeFieldType.year(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,124,"assertSame(DateTimeFieldType.monthOfYear(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,125,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,128,public void testGetField() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,129,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,130,"assertSame(COPTIC_UTC.year(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,131,"assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,132,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,133,test.getField(-1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,134,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,135,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,136,test.getField(2);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,137,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,140,public void testGetFields() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,141,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,142,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,143,"assertEquals(2, fields.length);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,144,"assertSame(COPTIC_UTC.year(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,145,"assertSame(COPTIC_UTC.monthOfYear(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,146,"assertNotSame(test.getFields(), test.getFields());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,149,public void testGetValue() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,150,YearMonth test = new YearMonth();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,151,"assertEquals(1970, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,152,"assertEquals(6, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,153,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,154,test.getValue(-1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,155,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,156,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,157,test.getValue(2);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,158,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,161,public void testGetValues() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,162,YearMonth test = new YearMonth();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,163,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,164,"assertEquals(2, values.length);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,165,"assertEquals(1970, values[0]);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,166,"assertEquals(6, values[1]);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,167,"assertNotSame(test.getValues(), test.getValues());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,170,public void testIsSupported() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,171,YearMonth test = new YearMonth(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,172,"assertEquals(true, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,173,"assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,174,"assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,175,"assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,178,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,179,"YearMonth test1 = new YearMonth(1970, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,180,"YearMonth test2 = new YearMonth(1970, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,181,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,182,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,183,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,184,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,185,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,186,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,187,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,189,"YearMonth test3 = new YearMonth(1971, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,190,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,191,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,192,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,193,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,194,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,195,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,197,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,198,"assertEquals(true, test1.equals(new MockYM()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,199,"assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,202,class MockYM extends MockPartial {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,203,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,204,return COPTIC_UTC;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,206,public DateTimeField[] getFields() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,207,return new DateTimeField[] {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,208,"COPTIC_UTC.year(),"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,209,"COPTIC_UTC.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,212,public int[] getValues() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,213,"return new int[] {1970, 6};"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,218,public void testCompareTo() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,219,"YearMonth test1 = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,220,"YearMonth test1a = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,221,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,222,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,223,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,224,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,226,"YearMonth test2 = new YearMonth(2005, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,227,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,228,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,230,"YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,231,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,232,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,233,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,235,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,236,"DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,237,"DateTimeFieldType.monthOfYear(),"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,239,"int[] values = new int[] {2005, 6};"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,240,"Partial p = new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,241,"assertEquals(0, test1.compareTo(p));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,242,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,243,test1.compareTo(null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,244,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,245,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,246,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,247,test1.compareTo(new LocalTime());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,248,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,249,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,250,Partial partial = new Partial()
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,251,".with(DateTimeFieldType.centuryOfEra(), 1)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,252,".with(DateTimeFieldType.halfdayOfDay(), 0)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,253,".with(DateTimeFieldType.dayOfMonth(), 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,254,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,255,"new YearMonth(1970, 6).compareTo(partial);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,256,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,257,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,261,public void testIsEqual_YM() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,262,"YearMonth test1 = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,263,"YearMonth test1a = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,264,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,265,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,266,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,267,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,269,"YearMonth test2 = new YearMonth(2005, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,270,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,271,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,273,"YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,274,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,275,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,276,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,278,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,279,"new YearMonth(2005, 7).isEqual(null);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,280,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,281,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,285,public void testIsBefore_YM() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,286,"YearMonth test1 = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,287,"YearMonth test1a = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,288,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,289,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,290,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,291,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,293,"YearMonth test2 = new YearMonth(2005, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,294,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,295,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,297,"YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,298,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,299,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,300,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,302,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,303,"new YearMonth(2005, 7).isBefore(null);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,304,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,305,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,309,public void testIsAfter_YM() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,310,"YearMonth test1 = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,311,"YearMonth test1a = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,312,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,313,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,314,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,315,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,317,"YearMonth test2 = new YearMonth(2005, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,318,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,319,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,321,"YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,322,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,323,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,324,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,326,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,327,"new YearMonth(2005, 7).isAfter(null);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,328,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,329,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,333,public void testWithChronologyRetainFields_Chrono() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,334,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,335,YearMonth test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,336,"check(base, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,337,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,338,"check(test, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,339,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,342,public void testWithChronologyRetainFields_sameChrono() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,343,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,344,YearMonth test = base.withChronologyRetainFields(COPTIC_TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,345,"assertSame(base, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,348,public void testWithChronologyRetainFields_nullChrono() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,349,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,350,YearMonth test = base.withChronologyRetainFields(null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,351,"check(base, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,352,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,353,"check(test, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,354,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,357,public void testWithChronologyRetainFields_invalidInNewChrono() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,358,"YearMonth base = new YearMonth(2005, 13, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,359,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,360,base.withChronologyRetainFields(ISO_UTC);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,361,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,362,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,363,// expected
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,368,public void testWithField() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,369,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,370,"YearMonth result = test.withField(DateTimeFieldType.year(), 2006);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,372,"assertEquals(new YearMonth(2004, 6), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,373,"assertEquals(new YearMonth(2006, 6), result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,376,public void testWithField_nullField() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,377,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,378,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,379,"test.withField(null, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,380,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,381,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,384,public void testWithField_unknownField() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,385,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,386,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,387,"test.withField(DateTimeFieldType.hourOfDay(), 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,388,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,389,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,392,public void testWithField_same() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,393,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,394,"YearMonth result = test.withField(DateTimeFieldType.year(), 2004);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,395,"assertEquals(new YearMonth(2004, 6), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,396,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,400,public void testWithFieldAdded() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,401,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,402,"YearMonth result = test.withFieldAdded(DurationFieldType.years(), 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,404,"assertEquals(new YearMonth(2004, 6), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,405,"assertEquals(new YearMonth(2010, 6), result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,408,public void testWithFieldAdded_nullField_zero() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,409,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,410,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,411,"test.withFieldAdded(null, 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,412,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,413,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,416,public void testWithFieldAdded_nullField_nonZero() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,417,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,418,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,419,"test.withFieldAdded(null, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,420,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,421,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,424,public void testWithFieldAdded_zero() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,425,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,426,"YearMonth result = test.withFieldAdded(DurationFieldType.years(), 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,427,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,430,public void testWithFieldAdded_unknownField() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,431,"YearMonth test = new YearMonth(2004, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,432,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,433,"test.withFieldAdded(DurationFieldType.hours(), 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,434,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,435,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,439,public void testPlus_RP() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,440,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,441,"YearMonth result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,442,"YearMonth expected = new YearMonth(2003, 7, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,443,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,445,result = test.plus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,446,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,449,public void testPlusYears_int() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,450,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,451,YearMonth result = test.plusYears(1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,452,"YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,453,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,455,result = test.plusYears(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,456,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,459,public void testPlusMonths_int() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,460,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,461,YearMonth result = test.plusMonths(1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,462,"YearMonth expected = new YearMonth(2002, 6, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,463,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,465,result = test.plusMonths(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,466,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,470,public void testMinus_RP() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,471,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,472,"YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,473,"YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,474,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,476,result = test.minus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,477,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,480,public void testMinusYears_int() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,481,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,482,YearMonth result = test.minusYears(1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,483,"YearMonth expected = new YearMonth(2001, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,484,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,486,result = test.minusYears(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,487,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,490,public void testMinusMonths_int() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,491,"YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,492,YearMonth result = test.minusMonths(1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,493,"YearMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,494,"assertEquals(expected, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,496,result = test.minusMonths(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,497,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,501,public void testToLocalDate() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,502,"YearMonth base = new YearMonth(2005, 6, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,503,LocalDate test = base.toLocalDate(9);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,504,"assertEquals(new LocalDate(2005, 6, 9, COPTIC_UTC), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,505,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,506,base.toLocalDate(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,507,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,508,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,512,public void testToDateTime_RI() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,513,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,514,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,516,DateTime test = base.toDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,517,"check(base, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,518,DateTime expected = dt;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,519,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,520,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,521,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,524,public void testToDateTime_nullRI() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,525,"YearMonth base = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,526,"DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,527,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,529,DateTime test = base.toDateTime((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,530,"check(base, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,531,DateTime expected = dt;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,532,expected = expected.year().setCopy(2005);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,533,expected = expected.monthOfYear().setCopy(6);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,534,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,538,public void testToInterval() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,539,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,540,Interval test = base.toInterval();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,541,"check(base, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,542,"DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,543,"DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,544,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,545,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,549,public void testToInterval_Zone() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,550,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,551,Interval test = base.toInterval(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,552,"check(base, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,553,"DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,554,"DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_TOKYO);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,555,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,556,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,559,public void testToInterval_nullZone() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,560,"YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,561,Interval test = base.toInterval(null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,562,"check(base, 2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,563,"DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,564,"DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,565,"Interval expected = new Interval(start, end);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,566,"assertEquals(expected, test);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,570,public void testWithers() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,571,"YearMonth test = new YearMonth(1970, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,572,"check(test.withYear(2000), 2000, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,573,"check(test.withMonthOfYear(2), 1970, 2);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,574,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,575,test.withMonthOfYear(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,576,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,577,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,578,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,579,test.withMonthOfYear(13);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,580,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,581,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,585,public void testProperty() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,586,"YearMonth test = new YearMonth(2005, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,587,"assertEquals(test.year(), test.property(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,588,"assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,589,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,590,test.property(DateTimeFieldType.millisOfDay());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,591,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,592,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,593,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,594,test.property(null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,595,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,596,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,600,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,601,"YearMonth test = new YearMonth(1972, 6, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,603,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,604,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,605,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,606,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,607,oos.close();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,609,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,610,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,611,YearMonth result = (YearMonth) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,612,ois.close();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,614,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,615,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,616,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,617,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,621,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,622,"YearMonth test = new YearMonth(2002, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,623,"assertEquals(""2002-06"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,627,public void testToString_String() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,628,"YearMonth test = new YearMonth(2002, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,629,"assertEquals(""2002 \ufffd\ufffd"", test.toString(""yyyy HH""));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,630,"assertEquals(""2002-06"", test.toString((String) null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,634,public void testToString_String_Locale() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,635,"YearMonth test = new YearMonth(2002, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,636,"assertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,637,"assertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,638,"assertEquals(""2002-06"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,639,"assertEquals(""\ufffd \ufffd/6"", test.toString(""EEE d/M"", null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,640,"assertEquals(""2002-06"", test.toString(null, null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,644,public void testToString_DTFormatter() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,645,"YearMonth test = new YearMonth(2002, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,646,"assertEquals(""2002 \ufffd\ufffd"", test.toString(DateTimeFormat.forPattern(""yyyy HH"")));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,647,"assertEquals(""2002-06"", test.toString((DateTimeFormatter) null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,651,"private void check(YearMonth test, int year, int month) {"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,652,"assertEquals(year, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonth_Basics.java,653,"assertEquals(month, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,18,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,19,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,20,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,22,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,23,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,25,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,26,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,29,* This class is a Junit unit test for YearMonth.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,31,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,33,public class TestYearMonth_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,35,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,36,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,37,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,38,private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,39,private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,41,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,42,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,44,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,45,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,46,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,47,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,49,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,50,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,51,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,52,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,54,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,56,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,57,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,60,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,61,return new TestSuite(TestYearMonth_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,64,public TestYearMonth_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,65,super(name);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,68,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,69,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,70,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,71,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,74,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,75,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,76,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,77,zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,81,public void testFactory_FromCalendarFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,82,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,83,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,84,"YearMonth expected = new YearMonth(1970, 2);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,85,"assertEquals(expected, YearMonth.fromCalendarFields(cal));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,86,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,87,YearMonth.fromCalendarFields(null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,88,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,89,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,93,public void testFactory_FromDateFields() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,94,"GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,95,"cal.set(Calendar.MILLISECOND, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,96,"YearMonth expected = new YearMonth(1970, 2);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,97,"assertEquals(expected, YearMonth.fromDateFields(cal.getTime()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,98,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,99,YearMonth.fromDateFields(null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,100,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,101,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,106,* Test constructor ()
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,108,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,109,YearMonth test = new YearMonth();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,110,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,111,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,112,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,116,* Test constructor (DateTimeZone)
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,118,public void testConstructor_DateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,119,"DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,120,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,121,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,123,YearMonth test = new YearMonth(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,124,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,125,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,126,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,128,test = new YearMonth(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,129,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,130,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,131,"assertEquals(7, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,135,* Test constructor (DateTimeZone=null)
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,137,public void testConstructor_nullDateTimeZone() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,138,"DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,139,DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,140,// 23:59 in London is 00:59 the following day in Paris
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,142,YearMonth test = new YearMonth((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,143,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,144,"assertEquals(2005, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,145,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,149,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,151,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,152,YearMonth test = new YearMonth(GREGORIAN_PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,153,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,154,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,155,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,159,* Test constructor (Chronology=null)
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,161,public void testConstructor_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,162,YearMonth test = new YearMonth((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,163,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,164,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,165,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,170,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,172,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,173,YearMonth test = new YearMonth(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,174,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,175,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,176,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,180,* Test constructor (long)
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,182,public void testConstructor_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,183,YearMonth test = new YearMonth(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,184,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,185,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,186,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,190,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,192,public void testConstructor_long1_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,193,"YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,194,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,195,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,196,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,200,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,202,public void testConstructor_long2_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,203,"YearMonth test = new YearMonth(TEST_TIME2, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,204,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,205,"assertEquals(1971, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,206,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,210,"* Test constructor (long, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,212,public void testConstructor_long_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,213,"YearMonth test = new YearMonth(TEST_TIME1, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,214,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,215,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,216,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,220,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,221,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,222,YearMonth test = new YearMonth(date);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,223,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,224,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,225,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,228,public void testConstructor_nullObject() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,229,YearMonth test = new YearMonth((Object) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,230,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,231,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,232,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,235,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,236,"YearMonth test = new YearMonth(""1972-12"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,237,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,238,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,239,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,242,public void testConstructor_ObjectString2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,243,"YearMonth test = new YearMonth(""1972-12-01T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,244,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,245,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,246,"assertEquals(11, test.getMonthOfYear());  // timezone"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,249,public void testConstructor_ObjectString3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,250,"YearMonth test = new YearMonth(""1972-12-03T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,251,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,252,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,253,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,256,public void testConstructor_ObjectString4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,257,"YearMonth test = new YearMonth(""1972-12-01T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,258,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,259,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,260,"assertEquals(11, test.getMonthOfYear());  // timezone"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,263,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,264,"YearMonth test = new YearMonth(""10"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,265,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,266,"assertEquals(10, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,267,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,270,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,271,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,272,"new YearMonth(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,273,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,274,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,275,// expected
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,279,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,280,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,281,"new YearMonth(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,282,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,283,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,284,// expected
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,288,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,289,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,290,"new YearMonth(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,291,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,292,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,293,// expected
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,297,public void testConstructor_ObjectStringEx4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,298,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,299,"new YearMonth(""10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,300,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,301,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,302,// expected
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,308,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,310,public void testConstructor_Object_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,311,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,312,"YearMonth test = new YearMonth(date, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,313,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,314,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,315,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,319,"* Test constructor (Object=null, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,321,public void testConstructor_nullObject_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,322,"YearMonth test = new YearMonth((Object) null, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,323,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,324,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,325,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,329,"* Test constructor (Object, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,331,public void testConstructor_Object_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,332,Date date = new Date(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,333,"YearMonth test = new YearMonth(date, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,334,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,335,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,336,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,340,"* Test constructor (Object=null, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,342,public void testConstructor_nullObject_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,343,"YearMonth test = new YearMonth((Object) null, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,344,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,345,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,346,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,351,"* Test constructor (int, int)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,353,public void testConstructor_int_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,354,"YearMonth test = new YearMonth(1970, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,355,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,356,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,357,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,358,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,359,"new YearMonth(Integer.MIN_VALUE, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,360,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,361,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,362,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,363,"new YearMonth(Integer.MAX_VALUE, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,364,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,365,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,366,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,367,"new YearMonth(1970, 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,368,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,369,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,370,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,371,"new YearMonth(1970, 13);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,372,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,373,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,377,"* Test constructor (int, int, Chronology)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,379,public void testConstructor_int_int_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,380,"YearMonth test = new YearMonth(1970, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,381,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,382,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,383,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,384,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,385,"new YearMonth(Integer.MIN_VALUE, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,386,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,387,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,388,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,389,"new YearMonth(Integer.MAX_VALUE, 6, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,390,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,391,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,392,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,393,"new YearMonth(1970, 0, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,394,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,395,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,396,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,397,"new YearMonth(1970, 13, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,398,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,399,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,403,"* Test constructor (int, int, Chronology=null)"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,405,public void testConstructor_int_int_nullChronology() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,406,"YearMonth test = new YearMonth(1970, 6, null);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,407,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,408,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonth_Constructors.java,409,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,18,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,23,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,24,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,25,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,28,* This class is a Junit unit test for YearMonth.
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,30,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,32,public class TestYearMonth_Properties extends TestCase {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,35,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,37,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,38,(31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,40,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,41,(31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,42,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,43,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,45,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,46,(365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,47,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,48,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,50,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,52,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,53,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,56,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,57,return new TestSuite(TestYearMonth_Properties.class);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,60,public TestYearMonth_Properties(String name) {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,61,super(name);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,64,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,65,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,66,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,67,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,70,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,71,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,72,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,73,zone = null;
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,77,public void testPropertyGetYear() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,78,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,79,"assertSame(test.getChronology().year(), test.year().getField());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,80,"assertEquals(""year"", test.year().getName());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,81,"assertEquals(""Property[year]"", test.year().toString());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,82,"assertSame(test, test.year().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,83,"assertSame(test, test.year().getYearMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,84,"assertEquals(1972, test.year().get());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,85,"assertEquals(""1972"", test.year().getAsString());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,86,"assertEquals(""1972"", test.year().getAsText());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,87,"assertEquals(""1972"", test.year().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,88,"assertEquals(""1972"", test.year().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,89,"assertEquals(""1972"", test.year().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,90,"assertEquals(test.getChronology().years(), test.year().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,91,"assertEquals(null, test.year().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,92,"assertEquals(9, test.year().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,93,"assertEquals(9, test.year().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,96,public void testPropertyGetMaxMinValuesYear() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,97,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,98,"assertEquals(-292275054, test.year().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,99,"assertEquals(-292275054, test.year().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,100,"assertEquals(292278993, test.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,101,"assertEquals(292278993, test.year().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,104,public void testPropertyAddYear() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,105,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,106,YearMonth copy = test.year().addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,107,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,108,"check(copy, 1981, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,110,copy = test.year().addToCopy(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,111,"check(copy, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,113,copy = test.year().addToCopy(292277023 - 1972);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,114,"check(copy, 292277023, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,116,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,117,test.year().addToCopy(292278993 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,118,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,119,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,120,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,122,copy = test.year().addToCopy(-1972);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,123,"check(copy, 0, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,125,copy = test.year().addToCopy(-1973);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,126,"check(copy, -1, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,128,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,129,test.year().addToCopy(-292275054 - 1972 - 1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,130,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,131,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,132,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,135,public void testPropertyAddWrapFieldYear() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,136,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,137,YearMonth copy = test.year().addWrapFieldToCopy(9);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,138,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,139,"check(copy, 1981, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,141,copy = test.year().addWrapFieldToCopy(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,142,"check(copy, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,144,copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,145,"check(copy, -292275054, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,147,copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,148,"check(copy, 292278993, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,151,public void testPropertySetYear() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,152,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,153,YearMonth copy = test.year().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,154,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,155,"check(copy, 12, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,158,public void testPropertySetTextYear() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,159,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,160,"YearMonth copy = test.year().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,161,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,162,"check(copy, 12, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,165,public void testPropertyCompareToYear() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,166,YearMonth test1 = new YearMonth(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,167,YearMonth test2 = new YearMonth(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,168,"assertEquals(true, test1.year().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,169,"assertEquals(true, test2.year().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,170,"assertEquals(true, test1.year().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,171,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,172,test1.year().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,173,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,174,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,176,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,177,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,178,"assertEquals(true, test1.year().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,179,"assertEquals(true, test2.year().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,180,"assertEquals(true, test1.year().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,181,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,182,test1.year().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,183,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,184,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,188,public void testPropertyGetMonth() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,189,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,190,"assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,191,"assertEquals(""monthOfYear"", test.monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,192,"assertEquals(""Property[monthOfYear]"", test.monthOfYear().toString());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,193,"assertSame(test, test.monthOfYear().getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,194,"assertSame(test, test.monthOfYear().getYearMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,195,"assertEquals(6, test.monthOfYear().get());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,196,"assertEquals(""6"", test.monthOfYear().getAsString());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,197,"assertEquals(""June"", test.monthOfYear().getAsText());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,198,"assertEquals(""juin"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,199,"assertEquals(""Jun"", test.monthOfYear().getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,200,"assertEquals(""juin"", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,201,"assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,202,"assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,203,"assertEquals(9, test.monthOfYear().getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,204,"assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,205,"test = new YearMonth(1972, 7);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,206,"assertEquals(""juillet"", test.monthOfYear().getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,207,"assertEquals(""juil."", test.monthOfYear().getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,210,public void testPropertyGetMaxMinValuesMonth() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,211,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,212,"assertEquals(1, test.monthOfYear().getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,213,"assertEquals(1, test.monthOfYear().getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,214,"assertEquals(12, test.monthOfYear().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,215,"assertEquals(12, test.monthOfYear().getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,218,public void testPropertyAddMonth() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,219,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,220,YearMonth copy = test.monthOfYear().addToCopy(6);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,221,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,222,"check(copy, 1972, 12);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,224,copy = test.monthOfYear().addToCopy(7);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,225,"check(copy, 1973, 1);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,227,copy = test.monthOfYear().addToCopy(-5);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,228,"check(copy, 1972, 1);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,230,copy = test.monthOfYear().addToCopy(-6);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,231,"check(copy, 1971, 12);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,234,public void testPropertyAddWrapFieldMonth() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,235,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,236,YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,237,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,238,"check(copy, 1972, 10);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,240,copy = test.monthOfYear().addWrapFieldToCopy(8);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,241,"check(copy, 1972, 2);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,243,copy = test.monthOfYear().addWrapFieldToCopy(-8);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,244,"check(copy, 1972, 10);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,247,public void testPropertySetMonth() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,248,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,249,YearMonth copy = test.monthOfYear().setCopy(12);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,250,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,251,"check(copy, 1972, 12);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,253,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,254,test.monthOfYear().setCopy(13);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,255,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,256,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,257,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,258,test.monthOfYear().setCopy(0);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,259,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,260,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,263,public void testPropertySetTextMonth() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,264,"YearMonth test = new YearMonth(1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,265,"YearMonth copy = test.monthOfYear().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,266,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,267,"check(copy, 1972, 12);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,269,"copy = test.monthOfYear().setCopy(""December"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,270,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,271,"check(copy, 1972, 12);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,273,"copy = test.monthOfYear().setCopy(""Dec"");"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,274,"check(test, 1972, 6);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,275,"check(copy, 1972, 12);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,278,public void testPropertyCompareToMonth() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,279,YearMonth test1 = new YearMonth(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,280,YearMonth test2 = new YearMonth(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,281,"assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,282,"assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,283,"assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,284,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,285,test1.monthOfYear().compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,286,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,287,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,289,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,290,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,291,"assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,292,"assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,293,"assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,294,try {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,295,test1.monthOfYear().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,296,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,297,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,301,public void testPropertyEquals() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,302,"YearMonth test1 = new YearMonth(11, 11);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,303,"YearMonth test2 = new YearMonth(11, 12);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,304,"YearMonth test3 = new YearMonth(11, 11, CopticChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,305,"assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,306,"assertEquals(false, test1.monthOfYear().equals(test1.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,307,"assertEquals(false, test1.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,308,"assertEquals(false, test1.monthOfYear().equals(test2.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,310,"assertEquals(false, test1.year().equals(test1.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,311,"assertEquals(true, test1.year().equals(test1.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,312,"assertEquals(false, test1.year().equals(test2.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,313,"assertEquals(true, test1.year().equals(test2.year()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,315,"assertEquals(false, test1.monthOfYear().equals(null));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,316,"assertEquals(false, test1.monthOfYear().equals(""any""));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,318,// chrono
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,319,"assertEquals(false, test1.monthOfYear().equals(test3.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,322,public void testPropertyHashCode() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,323,"YearMonth test1 = new YearMonth(2005, 11);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,324,"YearMonth test2 = new YearMonth(2005, 12);"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,325,"assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,326,"assertEquals(false, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,327,"assertEquals(true, test1.year().hashCode() == test1.year().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,328,"assertEquals(true, test1.year().hashCode() == test2.year().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,331,public void testPropertyEqualsHashCodeLenient() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,332,"YearMonth test1 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,333,"YearMonth test2 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,334,"assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,335,"assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,336,"assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,337,"assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,338,"assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,339,"assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,340,"assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,343,public void testPropertyEqualsHashCodeStrict() {
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,344,"YearMonth test1 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,345,"YearMonth test2 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,346,"assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,347,"assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,348,"assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,349,"assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,350,"assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,351,"assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,352,"assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,356,"private void check(YearMonth test, int year, int month) {"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,357,"assertEquals(year, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonth_Properties.java,358,"assertEquals(month, test.getMonthOfYear());"

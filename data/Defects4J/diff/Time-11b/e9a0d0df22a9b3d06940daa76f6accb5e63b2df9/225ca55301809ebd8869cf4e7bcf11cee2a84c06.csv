is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,19,* Exception thrown when attempting to set a field outisde its supported range.
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,21,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,22,* @since 1.1
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,24,public class IllegalFieldValueException extends IllegalArgumentException {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,25,"private static String createMessage(String fieldName, Number value,"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,26,"Number lowerBound, Number upperBound) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,27,StringBuffer buf = new StringBuffer()
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,28,".append(""Value "").append(value).append("" for "").append(fieldName).append(' ');"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,30,if (lowerBound == null) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,31,if (upperBound == null) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,32,"buf.append(""is not supported"");"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,33,} else {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,34,"buf.append(""must not be larger than "").append(upperBound);"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,36,} else if (upperBound == null) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,37,"buf.append(""must not be smaller than "").append(lowerBound);"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,38,} else {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,39,"buf.append(""must be in the range ["")"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,40,.append(lowerBound)
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,41,".append(',')"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,42,.append(upperBound)
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,43,.append(']');
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,46,return buf.toString();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,49,"private static String createMessage(String fieldName, String value) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,50,"StringBuffer buf = new StringBuffer().append(""Value "");"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,52,if (value == null) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,53,"buf.append(""null"");"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,54,} else {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,55,"buf.append('""');"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,56,buf.append(value);
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,57,"buf.append('""');"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,60,"buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,62,return buf.toString();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,65,private final DateTimeFieldType iDateTimeFieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,66,private final DurationFieldType iDurationFieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,67,private final String iFieldName;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,68,private final Number iNumberValue;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,69,private final String iStringValue;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,70,private final Number iLowerBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,71,private final Number iUpperBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,74,* @param fieldType type of field being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,75,* @param value illegal value being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,76,"* @param lowerBound lower legal field value, or null if not applicable"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,77,"* @param upperBound upper legal field value, or null if not applicable"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,79,"public IllegalFieldValueException(DateTimeFieldType fieldType,"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,80,"Number value, Number lowerBound, Number upperBound) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,81,"super(createMessage(fieldType.getName(), value, lowerBound, upperBound));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,82,iDateTimeFieldType = fieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,83,iDurationFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,84,iFieldName = fieldType.getName();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,85,iNumberValue = value;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,86,iStringValue = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,87,iLowerBound = lowerBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,88,iUpperBound = upperBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,92,* @param fieldType type of field being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,93,* @param value illegal value being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,94,"* @param lowerBound lower legal field value, or null if not applicable"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,95,"* @param upperBound upper legal field value, or null if not applicable"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,97,"public IllegalFieldValueException(DurationFieldType fieldType,"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,98,"Number value, Number lowerBound, Number upperBound) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,99,"super(createMessage(fieldType.getName(), value, lowerBound, upperBound));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,100,iDateTimeFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,101,iDurationFieldType = fieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,102,iFieldName = fieldType.getName();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,103,iNumberValue = value;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,104,iStringValue = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,105,iLowerBound = lowerBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,106,iUpperBound = upperBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,110,* @param fieldName name of field being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,111,* @param value illegal value being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,112,"* @param lowerBound lower legal field value, or null if not applicable"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,113,"* @param upperBound upper legal field value, or null if not applicable"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,115,"public IllegalFieldValueException(String fieldName,"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,116,"Number value, Number lowerBound, Number upperBound) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,117,"super(createMessage(fieldName, value, lowerBound, upperBound));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,118,iDateTimeFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,119,iDurationFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,120,iFieldName = fieldName;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,121,iNumberValue = value;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,122,iStringValue = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,123,iLowerBound = lowerBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,124,iUpperBound = upperBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,128,* @param fieldType type of field being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,129,* @param value illegal value being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,131,"public IllegalFieldValueException(DateTimeFieldType fieldType, String value) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,132,"super(createMessage(fieldType.getName(), value));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,133,iDateTimeFieldType = fieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,134,iDurationFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,135,iFieldName = fieldType.getName();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,136,iStringValue = value;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,137,iNumberValue = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,138,iLowerBound = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,139,iUpperBound = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,143,* @param fieldType type of field being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,144,* @param value illegal value being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,146,"public IllegalFieldValueException(DurationFieldType fieldType, String value) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,147,"super(createMessage(fieldType.getName(), value));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,148,iDateTimeFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,149,iDurationFieldType = fieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,150,iFieldName = fieldType.getName();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,151,iStringValue = value;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,152,iNumberValue = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,153,iLowerBound = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,154,iUpperBound = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,158,* @param fieldName name of field being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,159,* @param value illegal value being set
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,161,"public IllegalFieldValueException(String fieldName, String value) {"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,162,"super(createMessage(fieldName, value));"
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,163,iDateTimeFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,164,iDurationFieldType = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,165,iFieldName = fieldName;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,166,iStringValue = value;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,167,iNumberValue = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,168,iLowerBound = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,169,iUpperBound = null;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,173,"* Returns the DateTimeFieldType whose value was invalid, or null if not applicable."
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,175,public DateTimeFieldType getDateTimeFieldType() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,176,return iDateTimeFieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,180,"* Returns the DurationFieldType whose value was invalid, or null if not applicable."
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,182,public DurationFieldType getDurationFieldType() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,183,return iDurationFieldType;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,187,* Returns the name of the field whose value was invalid.
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,189,public String getFieldName() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,190,return iFieldName;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,194,"* Returns the illegal integer value assigned to the field, or null if not applicable."
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,196,public Number getIllegalNumberValue() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,197,return iNumberValue;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,201,"* Returns the illegal string value assigned to the field, or null if not applicable."
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,203,public String getIllegalStringValue() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,204,return iStringValue;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,208,* Returns the illegal value assigned to the field as a non-null string.
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,210,public String getIllegalValueAsString() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,211,String value = iStringValue;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,212,if (value == null) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,213,value = String.valueOf(iNumberValue);
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,215,return value;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,219,"* Returns the lower bound of the legal value range, or null if not applicable."
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,221,public Number getLowerBound() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,222,return iLowerBound;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,226,"* Returns the upper bound of the legal value range, or null if not applicable."
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,228,public Number getUpperBound() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,229,return iUpperBound;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,26,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,187,"hrow new IllegalArgumentException(""Value "" + value +"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,188," for "" + field.getName() + "" is less than minimum"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,188,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,189,"(field.getType(), new Integer(value),"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,190,"new Integer(field.getMinimumValue()), null);"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,191,"hrow new IllegalArgumentException(""Value "" + value +"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,192," for "" + field.getName() + "" is greater than maximum"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,193,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,194,"(field.getType(), new Integer(value),"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,195,"null, new Integer(field.getMaximumValue()));"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,200,"hrow new IllegalArgumentException(""Value "" + value +"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,201," for "" + field.getName() + "" is less than minimum"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,203,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,204,"(field.getType(), new Integer(value),"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,205,"new Integer(field.getMinimumValue(partial, values)), null);"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,204,"hrow new IllegalArgumentException(""Value "" + value +"
False,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,205," for "" + field.getName() + "" is greater than maximum"");"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,208,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,209,"(field.getType(), new Integer(value),"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,210,"null, new Integer(field.getMaximumValue(partial, values)));"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,214,"ieldUtils.verifyValueBounds(""millisOfDay"", millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,214,FieldUtils.verifyValueBounds
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,215,"(DateTimeFieldType.millisOfDay(), millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,229,"ieldUtils.verifyValueBounds(""hourOfDay"", hourOfDay, 0, 23);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,230,"ieldUtils.verifyValueBounds(""minuteOfHour"", minuteOfHour, 0, 59);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,231,"ieldUtils.verifyValueBounds(""secondOfMinute"", secondOfMinute, 0, 59);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,232,"ieldUtils.verifyValueBounds(""millisOfSecond"", millisOfSecond, 0, 999);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,230,"FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,231,"FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,232,"FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,233,"FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,730,"ieldUtils.verifyValueBounds(""year"", year, getMinYear(), getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,731,"ieldUtils.verifyValueBounds(""monthOfYear"", monthOfYear, 1, 12);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,731,"FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,732,"FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 12);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,735,"ieldUtils.verifyValueBounds(""dayOfMonth"", dayOfMonth, 1,"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,736,"FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1,"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,24,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,206,"ieldUtils.verifyValueBounds(""year"", year, getMinYear(), getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,207,"ieldUtils.verifyValueBounds(""monthOfYear"", monthOfYear, 1, 13);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,207,"FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,208,"FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,210,"ieldUtils.verifyValueBounds(""dayOfMonth"", dayOfMonth, 1, dayLimit);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,211,"FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, dayLimit);"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,24,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,91,"hrow new IllegalArgumentException(""Invalid era text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,92,"throw new IllegalFieldValueException(DateTimeFieldType.era(), text);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,28,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,656,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,657,"""Illegal value for "" + iGregorianField.getName() + "": "" + value);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,657,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,658,"(iGregorianField.getType(), new Integer(value), null, null);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,669,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,670,"""Illegal value for "" + iJulianField.getName() + "": "" + value);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,670,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,671,"(iJulianField.getType(), new Integer(value), null, null);"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,23,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,24,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,134,"hrow new IllegalArgumentException(""Illegal era text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,137,"throw new IllegalFieldValueException(DateTimeFieldType.era(), text);"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,170,"hrow new IllegalArgumentException(""Illegal monthOfYear text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,173,"throw new IllegalFieldValueException(DateTimeFieldType.monthOfYear(), text);"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,210,"hrow new IllegalArgumentException(""Illegal dayOfWeek text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,213,"throw new IllegalFieldValueException(DateTimeFieldType.dayOfWeek(), text);"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,232,"hrow new IllegalArgumentException(""Illegal halfday text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,235,"throw new IllegalFieldValueException(DateTimeFieldType.halfdayOfDay(), text);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,23,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,25,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,72,"hrow new IllegalArgumentException(""Invalid year: "" + year);"
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,74,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,75,"(DateTimeFieldType.year(), new Integer(year), null, null);"
True,JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java,24,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java,92,"hrow new IllegalArgumentException(""Invalid era text: "" + text);"
True,JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java,93,"throw new IllegalFieldValueException(DateTimeFieldType.era(), text);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,26,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,378,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,379,"""Illegal value for "" + iField.getName() + "": "" + value);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,379,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,380,"(iField.getType(), new Integer(value), null, null);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,23,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,669,"hrow new IllegalArgumentException(""Invalid "" + getName() + "" text: "" + text);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,670,"throw new IllegalFieldValueException(getType(), text);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,19,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,20,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,137, @throws IllegalArgumentException if value is not in the specified bounds
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,139,* @throws IllegalFieldValueException if value is not in the specified bounds
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,142,hrow new IllegalArgumentException(
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,143,"Value """
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,144, value
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,145," "" for """
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,146, field.getName()
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,147," "" must be in the range ["""
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,148, lowerBound
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,150, upperBound
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,144,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,145,"(field.getType(), new Integer(value),"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,146,"new Integer(lowerBound), new Integer(upperBound));"
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,161, @throws IllegalArgumentException if value is not in the specified bounds
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,156,* @throws IllegalFieldValueException if value is not in the specified bounds
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,158,"public static void verifyValueBounds(DateTimeFieldType fieldType,"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,159,"int value, int lowerBound, int upperBound) {"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,160,if ((value < lowerBound) || (value > upperBound)) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,161,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,162,"(fieldType, new Integer(value),"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,163,"new Integer(lowerBound), new Integer(upperBound));"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,168,* Verify that input values are within specified bounds.
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,170,* @param value  the value to check
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,171,* @param lowerBound  the lower bound allowed for value
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,172,* @param upperBound  the upper bound allowed for value
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,173,* @throws IllegalFieldValueException if value is not in the specified bounds
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,166,hrow new IllegalArgumentException(
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,167,"Value """
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,168, value
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,169," "" for """
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,170, fieldName
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,171," "" must be in the range ["""
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,172, lowerBound
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,174, upperBound
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,178,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,179,"(fieldName, new Integer(value),"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,180,"new Integer(lowerBound), new Integer(upperBound));"
True,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,20,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,21,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,89,"hrow new IllegalArgumentException(""Invalid year: "" + value);"
True,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,91,throw new IllegalFieldValueException
True,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java,92,"(DateTimeFieldType.year(), new Integer(value), null, null);"
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,93,uite.addTest(TestSerialization.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,93,suite.addTest(TestIllegalFieldValueException.suite());
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,18,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,19,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,21,import org.joda.time.field.FieldUtils;
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,22,import org.joda.time.field.SkipDateTimeField;
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,25,* Tests IllegalFieldValueException by triggering it from other methods.
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,27,* @author Brian S O'Neill
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,29,public class TestIllegalFieldValueException extends TestCase {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,30,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,31,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,34,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,35,return new TestSuite(TestIllegalFieldValueException.class);
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,38,public TestIllegalFieldValueException(String name) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,39,super(name);
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,42,public void testVerifyValueBounds() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,43,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,44,"FieldUtils.verifyValueBounds(Chronology.getISO().monthOfYear(), -5, 1, 31);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,45,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,46,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,47,"assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,48,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,49,"assertEquals(""monthOfYear"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,50,"assertEquals(new Integer(-5), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,51,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,52,"assertEquals(""-5"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,53,"assertEquals(new Integer(1), e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,54,"assertEquals(new Integer(31), e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,57,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,58,"FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,59,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,60,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,61,"assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,62,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,63,"assertEquals(""hourOfDay"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,64,"assertEquals(new Integer(27), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,65,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,66,"assertEquals(""27"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,67,"assertEquals(new Integer(0), e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,68,"assertEquals(new Integer(23), e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,71,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,72,"FieldUtils.verifyValueBounds(""foo"", 1, 2, 3);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,73,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,74,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,75,"assertEquals(null, e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,76,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,77,"assertEquals(""foo"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,78,"assertEquals(new Integer(1), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,79,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,80,"assertEquals(""1"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,81,"assertEquals(new Integer(2), e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,82,"assertEquals(new Integer(3), e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,86,public void testSkipDateTimeField() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,87,DateTimeField field = new SkipDateTimeField
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,88,"(Chronology.getISOUTC(), Chronology.getISOUTC().year(), 1970);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,89,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,90,"field.set(0, 1970);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,91,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,92,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,93,"assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,94,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,95,"assertEquals(""year"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,96,"assertEquals(new Integer(1970), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,97,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,98,"assertEquals(""1970"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,99,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,100,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,104,public void testSetText() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,105,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,106,"Chronology.getISOUTC().year().set(0, null, java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,107,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,108,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,109,"assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,110,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,111,"assertEquals(""year"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,112,"assertEquals(null, e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,113,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,114,"assertEquals(""null"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,115,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,116,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,119,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,120,"Chronology.getISOUTC().year().set(0, ""nineteen seventy"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,121,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,122,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,123,"assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,124,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,125,"assertEquals(""year"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,126,"assertEquals(null, e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,127,"assertEquals(""nineteen seventy"", e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,128,"assertEquals(""nineteen seventy"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,129,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,130,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,133,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,134,"Chronology.getISOUTC().era().set(0, ""long ago"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,135,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,136,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,137,"assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,138,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,139,"assertEquals(""era"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,140,"assertEquals(null, e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,141,"assertEquals(""long ago"", e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,142,"assertEquals(""long ago"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,143,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,144,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,147,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,148,"Chronology.getISOUTC().monthOfYear().set(0, ""spring"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,149,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,150,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,151,"assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,152,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,153,"assertEquals(""monthOfYear"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,154,"assertEquals(null, e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,155,"assertEquals(""spring"", e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,156,"assertEquals(""spring"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,157,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,158,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,161,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,162,"Chronology.getISOUTC().dayOfWeek().set(0, ""yesterday"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,163,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,164,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,165,"assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,166,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,167,"assertEquals(""dayOfWeek"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,168,"assertEquals(null, e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,169,"assertEquals(""yesterday"", e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,170,"assertEquals(""yesterday"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,171,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,172,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,175,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,176,"Chronology.getISOUTC().halfdayOfDay().set(0, ""morning"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,177,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,178,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,179,"assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,180,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,181,"assertEquals(""halfdayOfDay"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,182,"assertEquals(null, e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,183,"assertEquals(""morning"", e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,184,"assertEquals(""morning"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,185,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,186,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,190,public void testZoneTransition() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,191,DateTime dt = new DateTime
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,192,"(2005, 4, 3, 1, 0, 0, 0, DateTimeZone.forID(""America/Los_Angeles""));"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,193,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,194,dt.hourOfDay().setCopy(2);
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,195,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,196,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,197,"assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,198,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,199,"assertEquals(""hourOfDay"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,200,"assertEquals(new Integer(2), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,201,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,202,"assertEquals(""2"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,203,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,204,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,208,public void testJulianYearZero() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,209,DateTime dt = new DateTime(Chronology.getJulianUTC());
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,210,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,211,dt.year().setCopy(0);
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,212,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,213,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,214,"assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,215,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,216,"assertEquals(""year"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,217,"assertEquals(new Integer(0), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,218,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,219,"assertEquals(""0"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,220,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,221,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,225,public void testGJCutover() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,226,"DateTime dt = new DateTime(""1582-10-04"", Chronology.getGJUTC());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,227,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,228,dt.dayOfMonth().setCopy(5);
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,229,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,230,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,231,"assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,232,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,233,"assertEquals(""dayOfMonth"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,234,"assertEquals(new Integer(5), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,235,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,236,"assertEquals(""5"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,237,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,238,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,241,"dt = new DateTime(""1582-10-15"", Chronology.getGJUTC());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,242,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,243,dt.dayOfMonth().setCopy(14);
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,244,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,245,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,246,"assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,247,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,248,"assertEquals(""dayOfMonth"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,249,"assertEquals(new Integer(14), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,250,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,251,"assertEquals(""14"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,252,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,253,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,257,public void testReadablePartialValidate() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,258,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,259,"new YearMonthDay(1970, -5, 1);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,260,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,261,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,262,"assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,263,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,264,"assertEquals(""monthOfYear"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,265,"assertEquals(new Integer(-5), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,266,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,267,"assertEquals(""-5"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,268,"assertEquals(new Integer(1), e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,269,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,272,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,273,"new YearMonthDay(1970, 500, 1);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,274,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,275,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,276,"assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,277,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,278,"assertEquals(""monthOfYear"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,279,"assertEquals(new Integer(500), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,280,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,281,"assertEquals(""500"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,282,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,283,"assertEquals(new Integer(12), e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,286,try {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,287,"new YearMonthDay(1970, 2, 30);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,288,fail();
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,289,} catch (IllegalFieldValueException e) {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,290,"assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,291,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,292,"assertEquals(""dayOfMonth"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,293,"assertEquals(new Integer(30), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,294,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,295,"assertEquals(""30"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,296,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,297,"assertEquals(new Integer(28), e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,301,// Test extra constructors not currently called by anything
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,302,public void testOtherConstructors() {
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,303,IllegalFieldValueException e = new IllegalFieldValueException
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,304,"(DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,305,"assertEquals(null, e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,306,"assertEquals(DurationFieldType.days(), e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,307,"assertEquals(""days"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,308,"assertEquals(new Integer(1), e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,309,"assertEquals(null, e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,310,"assertEquals(""1"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,311,"assertEquals(new Integer(2), e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,312,"assertEquals(new Integer(3), e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,314,"e = new IllegalFieldValueException(DurationFieldType.months(), ""five"");"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,315,"assertEquals(null, e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,316,"assertEquals(DurationFieldType.months(), e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,317,"assertEquals(""months"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,318,"assertEquals(null, e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,319,"assertEquals(""five"", e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,320,"assertEquals(""five"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,321,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,322,"assertEquals(null, e.getUpperBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,324,"e = new IllegalFieldValueException(""months"", ""five"");"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,325,"assertEquals(null, e.getDateTimeFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,326,"assertEquals(null, e.getDurationFieldType());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,327,"assertEquals(""months"", e.getFieldName());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,328,"assertEquals(null, e.getIllegalNumberValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,329,"assertEquals(""five"", e.getIllegalStringValue());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,330,"assertEquals(""five"", e.getIllegalValueAsString());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,331,"assertEquals(null, e.getLowerBound());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,332,"assertEquals(null, e.getUpperBound());"

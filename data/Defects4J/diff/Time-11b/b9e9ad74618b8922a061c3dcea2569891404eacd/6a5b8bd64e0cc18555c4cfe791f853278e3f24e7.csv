is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,544,hrow new IllegalStateException();
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,544,throw new InternalError();
False,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,331,hrow new IllegalStateException();
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,331,throw new InternalError();
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,77,suite.addTest(TestDurationFieldType.suite());
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,74,import org.joda.time.field.UnsupportedDurationField;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,904,"eturn UnsupportedDateTimeField.getInstance(this, null);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,905,"return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,56,mport java.util.Locale;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,57,mport java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,59,import java.io.ObjectOutputStream;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,68,/ Test in 2002/03 as time zones are more well known
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,69,/ (before the late 90's they were all over the place)
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,71,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,72,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,74,ong y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,75,66 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,76,65 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,77,66 + 365;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,78,ong y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,79,66 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,80,65 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,81,66 + 365 + 365;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,83,/ 2002-06-09
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,84,rivate long TEST_TIME_NOW =
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,85,y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,87,/ 2002-04-05
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,88,rivate long TEST_TIME1 =
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,89,y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,90, 12L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,91, 24L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,93,/ 2003-05-06
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,94,rivate long TEST_TIME2 =
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,95,y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,96, 14L * DateTimeConstants.MILLIS_PER_HOUR
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,97, 28L * DateTimeConstants.MILLIS_PER_MINUTE;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,99,rivate DateTimeZone originalDateTimeZone = null;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,100,rivate TimeZone originalTimeZone = null;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,101,rivate Locale originalLocale = null;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,116,ateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,117,riginalDateTimeZone = DateTimeZone.getDefault();
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,118,riginalTimeZone = TimeZone.getDefault();
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,119,riginalLocale = Locale.getDefault();
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,120,ateTimeZone.setDefault(LONDON);
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,121,"imeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,122,ocale.setDefault(Locale.UK);
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,126,ateTimeUtils.setCurrentMillisSystem();
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,127,ateTimeZone.setDefault(originalDateTimeZone);
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,128,imeZone.setDefault(originalTimeZone);
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,129,ocale.setDefault(originalLocale);
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,130,riginalDateTimeZone = null;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,131,riginalTimeZone = null;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,132,riginalLocale = null;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,136,ublic void testTest() {
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,137,"ssertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,138,"ssertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,139,"ssertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,143,ublic void test_era() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,90,public void test_era() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,97,assertSerialization(DateTimeFieldType.era());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,152,ublic void test_centuryOfEra() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,100,public void test_centuryOfEra() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,107,assertSerialization(DateTimeFieldType.centuryOfEra());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,161,ublic void test_yearOfCentury() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,110,public void test_yearOfCentury() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,117,assertSerialization(DateTimeFieldType.yearOfCentury());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,170,ublic void test_yearOfEra() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,120,public void test_yearOfEra() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,127,assertSerialization(DateTimeFieldType.yearOfEra());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,179,ublic void test_year() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,130,public void test_year() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,137,assertSerialization(DateTimeFieldType.year());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,188,ublic void test_monthOfYear() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,140,public void test_monthOfYear() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,147,assertSerialization(DateTimeFieldType.monthOfYear());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,197,ublic void test_weekyearOfCentury() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,150,public void test_weekyearOfCentury() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,157,assertSerialization(DateTimeFieldType.weekyearOfCentury());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,206,ublic void test_weekyear() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,160,public void test_weekyear() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,167,assertSerialization(DateTimeFieldType.weekyear());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,215,ublic void test_weekOfWeekyear() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,170,public void test_weekOfWeekyear() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,177,assertSerialization(DateTimeFieldType.weekOfWeekyear());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,224,ublic void test_dayOfYear() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,180,public void test_dayOfYear() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,187,assertSerialization(DateTimeFieldType.dayOfYear());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,233,ublic void test_dayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,190,public void test_dayOfMonth() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,197,assertSerialization(DateTimeFieldType.dayOfMonth());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,242,ublic void test_dayOfWeek() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,200,public void test_dayOfWeek() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,207,assertSerialization(DateTimeFieldType.dayOfWeek());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,251,ublic void test_halfdayOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,210,public void test_halfdayOfDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,217,assertSerialization(DateTimeFieldType.halfdayOfDay());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,260,ublic void test_clockhourOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,220,public void test_clockhourOfDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,227,assertSerialization(DateTimeFieldType.clockhourOfDay());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,269,ublic void test_clockhourOfHalfday() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,230,public void test_clockhourOfHalfday() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,237,assertSerialization(DateTimeFieldType.clockhourOfHalfday());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,278,ublic void test_hourOfHalfday() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,240,public void test_hourOfHalfday() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,247,assertSerialization(DateTimeFieldType.hourOfHalfday());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,287,ublic void test_hourOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,250,public void test_hourOfDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,257,assertSerialization(DateTimeFieldType.hourOfDay());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,296,ublic void test_minuteOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,260,public void test_minuteOfDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,267,assertSerialization(DateTimeFieldType.minuteOfDay());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,305,ublic void test_minuteOfHour() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,270,public void test_minuteOfHour() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,277,assertSerialization(DateTimeFieldType.minuteOfHour());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,314,ublic void test_secondOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,280,public void test_secondOfDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,287,assertSerialization(DateTimeFieldType.secondOfDay());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,323,ublic void test_secondOfMinute() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,290,public void test_secondOfMinute() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,297,assertSerialization(DateTimeFieldType.secondOfMinute());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,332,ublic void test_millisOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,300,public void test_millisOfDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,307,assertSerialization(DateTimeFieldType.millisOfDay());
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,341,ublic void test_millisOfSecond() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,310,public void test_millisOfSecond() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,317,assertSerialization(DateTimeFieldType.millisOfSecond());
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,321,public void assertSerialization(DateTimeFieldType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,322,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,323,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,324,oos.writeObject(type);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,325,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,326,oos.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,328,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,329,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,330,DateTimeFieldType result = (DateTimeFieldType) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,331,ois.close();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,333,"assertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,75,import org.joda.time.field.UnsupportedDurationField;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,981,"eturn UnsupportedDateTimeField.getInstance(this, null);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,982,"return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,61,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,62,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,65,* This class is a Junit unit test for DurationFieldType.
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,67,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,69,public class TestDurationFieldType extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,71,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,72,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,75,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,76,return new TestSuite(TestDurationFieldType.class);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,79,public TestDurationFieldType(String name) {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,80,super(name);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,83,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,86,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,90,public void test_eras() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,91,"assertEquals(DurationFieldType.eras(), DurationFieldType.eras());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,92,"assertEquals(""eras"", DurationFieldType.eras().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,93,"assertEquals(Chronology.getCopticUTC().eras(), DurationFieldType.eras().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,94,"assertEquals(Chronology.getCopticUTC().eras().isSupported(), DurationFieldType.eras().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,95,assertSerialization(DurationFieldType.eras());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,98,public void test_centuries() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,99,"assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,100,"assertEquals(""centuries"", DurationFieldType.centuries().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,101,"assertEquals(Chronology.getCopticUTC().centuries(), DurationFieldType.centuries().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,102,"assertEquals(Chronology.getCopticUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,103,assertSerialization(DurationFieldType.centuries());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,106,public void test_years() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,107,"assertEquals(DurationFieldType.years(), DurationFieldType.years());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,108,"assertEquals(""years"", DurationFieldType.years().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,109,"assertEquals(Chronology.getCopticUTC().years(), DurationFieldType.years().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,110,"assertEquals(Chronology.getCopticUTC().years().isSupported(), DurationFieldType.years().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,111,assertSerialization(DurationFieldType.years());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,114,public void test_months() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,115,"assertEquals(DurationFieldType.months(), DurationFieldType.months());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,116,"assertEquals(""months"", DurationFieldType.months().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,117,"assertEquals(Chronology.getCopticUTC().months(), DurationFieldType.months().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,118,"assertEquals(Chronology.getCopticUTC().months().isSupported(), DurationFieldType.months().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,119,assertSerialization(DurationFieldType.months());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,122,public void test_weekyears() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,123,"assertEquals(DurationFieldType.weekyears(), DurationFieldType.weekyears());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,124,"assertEquals(""weekyears"", DurationFieldType.weekyears().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,125,"assertEquals(Chronology.getCopticUTC().weekyears(), DurationFieldType.weekyears().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,126,"assertEquals(Chronology.getCopticUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,127,assertSerialization(DurationFieldType.weekyears());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,130,public void test_weeks() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,131,"assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,132,"assertEquals(""weeks"", DurationFieldType.weeks().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,133,"assertEquals(Chronology.getCopticUTC().weeks(), DurationFieldType.weeks().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,134,"assertEquals(Chronology.getCopticUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,135,assertSerialization(DurationFieldType.weeks());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,138,public void test_days() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,139,"assertEquals(DurationFieldType.days(), DurationFieldType.days());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,140,"assertEquals(""days"", DurationFieldType.days().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,141,"assertEquals(Chronology.getCopticUTC().days(), DurationFieldType.days().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,142,"assertEquals(Chronology.getCopticUTC().days().isSupported(), DurationFieldType.days().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,143,assertSerialization(DurationFieldType.days());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,146,public void test_halfdays() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,147,"assertEquals(DurationFieldType.halfdays(), DurationFieldType.halfdays());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,148,"assertEquals(""halfdays"", DurationFieldType.halfdays().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,149,"assertEquals(Chronology.getCopticUTC().halfdays(), DurationFieldType.halfdays().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,150,"assertEquals(Chronology.getCopticUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,151,assertSerialization(DurationFieldType.halfdays());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,154,public void test_hours() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,155,"assertEquals(DurationFieldType.hours(), DurationFieldType.hours());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,156,"assertEquals(""hours"", DurationFieldType.hours().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,157,"assertEquals(Chronology.getCopticUTC().hours(), DurationFieldType.hours().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,158,"assertEquals(Chronology.getCopticUTC().hours().isSupported(), DurationFieldType.hours().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,159,assertSerialization(DurationFieldType.hours());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,162,public void test_minutes() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,163,"assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,164,"assertEquals(""minutes"", DurationFieldType.minutes().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,165,"assertEquals(Chronology.getCopticUTC().minutes(), DurationFieldType.minutes().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,166,"assertEquals(Chronology.getCopticUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,167,assertSerialization(DurationFieldType.minutes());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,170,public void test_seconds() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,171,"assertEquals(DurationFieldType.seconds(), DurationFieldType.seconds());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,172,"assertEquals(""seconds"", DurationFieldType.seconds().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,173,"assertEquals(Chronology.getCopticUTC().seconds(), DurationFieldType.seconds().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,174,"assertEquals(Chronology.getCopticUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,175,assertSerialization(DurationFieldType.seconds());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,178,public void test_millis() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,179,"assertEquals(DurationFieldType.millis(), DurationFieldType.millis());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,180,"assertEquals(""millis"", DurationFieldType.millis().getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,181,"assertEquals(Chronology.getCopticUTC().millis(), DurationFieldType.millis().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,182,"assertEquals(Chronology.getCopticUTC().millis().isSupported(), DurationFieldType.millis().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,183,assertSerialization(DurationFieldType.millis());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,187,public void assertSerialization(DurationFieldType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,188,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,189,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,190,oos.writeObject(type);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,191,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,192,oos.close();
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,194,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,195,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,196,DurationFieldType result = (DurationFieldType) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,197,ois.close();
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,199,"assertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,502,public void testWithChronology3() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,503,"Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,504,Interval test = base.withChronology(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,505,"assertSame(base, test);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,966,public void testConstructor_Object_Chronology1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,967,long length =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,968,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,969,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,970,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,971,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,972,"MutablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,973,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,974,"assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,975,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,976,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,977,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,978,"assertEquals((450 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,979,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,980,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,981,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,984,public void testConstructor_Object_Chronology2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,985,long length =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,986,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,987,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,988,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,989,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,990,"MutablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,991,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,992,"assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,993,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,994,"assertEquals(64, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,995,"assertEquals(2, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,996,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,997,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,998,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,999,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,439,"test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,440,"test.add(DurationFieldType.years(), 0);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,441,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,442,"assertEquals(1, test.getMillis());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,135,ublic void testSetIntoPeriod_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,135,public void testSetIntoPeriod_Object1() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,149,public void testSetIntoPeriod_Object2() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,150,"Interval i = new Interval(100L, 223L);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,151,MutablePeriod m = new MutablePeriod(PeriodType.millis());
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,152,"ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,153,"assertEquals(0, m.getYears());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,154,"assertEquals(0, m.getMonths());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,155,"assertEquals(0, m.getWeeks());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,156,"assertEquals(0, m.getDays());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,157,"assertEquals(0, m.getHours());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,158,"assertEquals(0, m.getMinutes());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,159,"assertEquals(0, m.getSeconds());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,160,"assertEquals(123, m.getMillis());"

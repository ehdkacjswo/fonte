is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/example/org/joda/example/time/TimeZoneTable.java,JodaTime/src/example/org/joda/example/time/TimeZoneTable.java,141,"eturn cOffsetFormatter.print(millis, iZone);"
True,JodaTime/src/example/org/joda/example/time/TimeZoneTable.java,JodaTime/src/example/org/joda/example/time/TimeZoneTable.java,141,return cOffsetFormatter.withZone(iZone).print(millis);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,634,"eturn -(int) offsetFormatter().parseMillis(str, chrono);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,634,return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1126,eturn ISODateTimeFormat.getInstance().dateTime().print(this);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1126,return ISODateTimeFormat.dateTime().print(this);
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,658,eturn ISODateTimeFormat.getInstance().tTime().print(this);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,658,return ISODateTimeFormat.tTime().print(this);
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,637,eturn ISODateTimeFormat.getInstance().yearMonthDay().print(this);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,637,return ISODateTimeFormat.yearMonthDay().print(this);
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,283,eturn DateTimeFormat.getInstance().forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,283,return DateTimeFormat.forPattern(pattern).print(this);
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,297,eturn DateTimeFormat.getInstance(locale).forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,297,return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,420,eturn ISODateTimeFormat.getInstance().dateTime().print(this);
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,420,return ISODateTimeFormat.dateTime().print(this);
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,28,mport org.joda.time.format.DateTimePrinter;
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,28,import org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,406,ateTimePrinter printer = ISODateTimeFormat.getInstance().dateHourMinuteSecondFraction();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,406,DateTimeFormatter printer = ISODateTimeFormat.dateHourMinuteSecondFraction();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,407,printer = printer.withChronology(getChronology());
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,408,"rinter.printTo(buf, getStartMillis(), getChronology());"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,409,"printer.printTo(buf, getStartMillis());"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,410,"rinter.printTo(buf, getEndMillis(), getChronology());"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,411,"printer.printTo(buf, getEndMillis());"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,258,eturn DateTimeFormat.getInstance().forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,258,return DateTimeFormat.forPattern(pattern).print(this);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,272,eturn DateTimeFormat.getInstance(locale).forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,272,return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,32,mport org.joda.time.format.DateTimePrinter;
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,32,import org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,409,ateTimePrinter printer;
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,409,DateTimeFormatter printer;
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,411,rinter = ISODateTimeFormat.getInstance().date();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,411,printer = ISODateTimeFormat.date();
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,413,rinter = ISODateTimeFormat.getInstance().dateTime();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,413,printer = ISODateTimeFormat.dateTime();
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,415,"rinter.printTo(sb, iCutoverMillis, withUTC());"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,415,"printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,30,mport org.joda.time.format.DateTimePrinter;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,30,import org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,320,ateTimePrinter p = ISODateTimeFormat.getInstance().dateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,320,DateTimeFormatter p = ISODateTimeFormat.dateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,321,p = p.withChronology(getBase());
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,324,".printTo(buf, getLowerLimit().getMillis(), getBase());"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,324,"p.printTo(buf, getLowerLimit().getMillis());"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,327,".printTo(buf, getUpperLimit().getMillis(), getBase());"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,327,"p.printTo(buf, getUpperLimit().getMillis());"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,24,mport org.joda.time.format.DateTimeParser;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,24,import org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,64,ateTimeParser p = ISODateTimeFormat.getInstance().dateTimeParser();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,65,"eturn p.parseMillis(str, chrono);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,64,DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,65,return p.withChronology(chrono).parseMillis(str);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,171,ateTimeParser dateTimeParser = ISODateTimeFormat.getInstance().dateTimeParser();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,171,DateTimeFormatter dateTimeParser = ISODateTimeFormat.dateTimeParser();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,172,dateTimeParser = dateTimeParser.withChronology(chrono);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,182,"ateTime start = dateTimeParser.parseDateTime(leftStr, chrono);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,183,DateTime start = dateTimeParser.parseDateTime(leftStr);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,197,"ateTime end = dateTimeParser.parseDateTime(rightStr, chrono);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,198,DateTime end = dateTimeParser.parseDateTime(rightStr);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,2,  Copyright 2001-2005 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,6,  You may obtain a copy of the License at
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,14,  limitations under the License.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,16,ackage org.joda.time.format;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,18,mport java.io.IOException;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,19,mport java.io.Writer;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,21,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,22,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,23,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,24,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,25,mport org.joda.time.MutableDateTime;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,26,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,27,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,28,mport org.joda.time.ReadablePartial;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,29,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,32," Abstract base class for implementing {@link DateTimePrinter}s,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,33," {@link DateTimeParser}s, and {@link DateTimeFormatter}s. This class"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,34, intentionally does not implement any of those interfaces. You can subclass
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,35, and implement only the interfaces that you need to.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,36, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,37, The print methods assume that your subclass has implemented DateTimePrinter or
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,38," DateTimeFormatter. If not, a ClassCastException is thrown when calling those"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,39, methods.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,40, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,41," Likewise, the parse methods assume that your subclass has implemented"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,42," DateTimeParser or DateTimeFormatter. If not, a ClassCastException is thrown"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,43, when calling the parse methods.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,44, <p>
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,45, BaseDateTimeFormatter is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,47, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,48, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,49, @since 1.0
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,51,ublic abstract class BaseDateTimeFormatter {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,53,"/ Since this class does not implement any interfaces, perform manual"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,54,"/ virtual binding on all delegating calls. That is, if printTo calls"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,55,"/ printTo with different arguments, it will bind to this class instead of"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,56,"/ a virtual method on the DateTimePrinter interface. To accomplish this,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,57,/ cast this to proper interface class first.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,59,"ublic void printTo(StringBuffer buf, ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,60,ong millis = DateTimeUtils.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,61,hronology chrono = DateTimeUtils.getInstantChronology(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,62,"(DateTimePrinter) this).printTo(buf, millis, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,65,"ublic void printTo(Writer out, ReadableInstant instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,66,ong millis = DateTimeUtils.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,67,hronology chrono = DateTimeUtils.getInstantChronology(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,68,"(DateTimePrinter) this).printTo(out, millis, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,71,"ublic void printTo(StringBuffer buf, long instant) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,72,"(DateTimePrinter) this).printTo(buf, instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,75,"ublic void printTo(Writer out, long instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,76,"(DateTimePrinter) this).printTo(out, instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,79,"ublic void printTo(StringBuffer buf, long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,80,one = DateTimeUtils.getZone(zone);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,81,"(DateTimePrinter) this).printTo(buf, instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,84,"ublic void printTo(Writer out, long instant, DateTimeZone zone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,85,one = DateTimeUtils.getZone(zone);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,86,"(DateTimePrinter) this).printTo(out, instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,89,"ublic void printTo(StringBuffer buf, long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,90,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,91,/ Shift instant into local time (UTC) to avoid excessive offset
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,92,/ calculations when printing multiple fields in a composite printer.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,93,ateTimeZone zone = chrono.getZone();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,94,nt offset = zone.getOffset(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,95,"(DateTimePrinter) this).printTo(buf, instant + offset, chrono.withUTC(), offset, zone);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,98,"ublic void printTo(Writer out, long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,99,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,100,/ Shift instant into local time (UTC) to avoid excessive offset
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,101,/ calculations when printing multiple fields in a composite printer.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,102,ateTimeZone zone = chrono.getZone();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,103,nt offset = zone.getOffset(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,104,"(DateTimePrinter) this).printTo(out, instant + offset, chrono.withUTC(), offset, zone);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,107,ublic String print(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,108,ong millis = DateTimeUtils.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,109,hronology chrono = DateTimeUtils.getInstantChronology(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,110,"eturn ((DateTimePrinter) this).print(millis, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,113,ublic String print(long instant) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,114,"eturn ((DateTimePrinter) this).print(instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,117,"ublic String print(long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,118,one = DateTimeUtils.getZone(zone);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,119,"eturn ((DateTimePrinter) this).print(instant, ISOChronology.getInstance(zone));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,122,"ublic String print(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,123,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,124,/ Shift instant into local time (UTC) to avoid excessive offset
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,125,/ calculations when printing multiple fields in a composite printer.
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,126,ateTimeZone zone = chrono.getZone();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,127,nt offset = zone.getOffset(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,128,"eturn ((DateTimePrinter) this).print(instant + offset, chrono.withUTC(), offset, zone);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,131,"ublic String print(long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,132,"nt displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,133,ateTimePrinter printer = (DateTimePrinter) this;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,134,tringBuffer buf = new StringBuffer(printer.estimatePrintedLength());
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,135,"rinter.printTo(buf, instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,136,eturn buf.toString();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,139,ublic String print(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,140,ateTimePrinter printer = (DateTimePrinter) this;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,141,tringBuffer buf = new StringBuffer(printer.estimatePrintedLength());
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,142,"rinter.printTo(buf, partial);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,143,eturn buf.toString();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,147,"ublic int parseInto(ReadWritableInstant instant, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,148,f (instant == null) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,149,"hrow new IllegalArgumentException(""Instant must not be null"");"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,152,ong millis = instant.getMillis();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,153,hronology chrono = instant.getChronology();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,154,ong instantLocal = millis + chrono.getZone().getOffset(millis);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,156,"ateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,157,"nt resultPos = ((DateTimeParser) this).parseInto(bucket, text, position);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,158,nstant.setMillis(bucket.computeMillis());
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,159,eturn resultPos;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,162,ublic long parseMillis(String text) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,163,"eturn parseMillis(text, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,166,"ublic long parseMillis(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,167,"ateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,169,"nt newPos = ((DateTimeParser) this).parseInto(bucket, text, 0);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,170,f (newPos >= 0) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,171,f (newPos >= text.length()) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,172,eturn bucket.computeMillis(true);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,174, else {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,175,ewPos = ~newPos;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,178,"hrow new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,181,"ublic long parseMillis(String text, long instant) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,182,"eturn ((DateTimeParser) this).parseMillis(text, instant, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,185,"ublic long parseMillis(String text, long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,186,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,187,ong instantLocal = instant + chrono.getZone().getOffset(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,188,"ateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,190,"nt newPos = ((DateTimeParser) this).parseInto(bucket, text, 0);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,191,f (newPos >= 0) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,192,f (newPos >= text.length()) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,193,eturn bucket.computeMillis();
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,195, else {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,196,ewPos = ~newPos;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,199,"hrow new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,202,ublic DateTime parseDateTime(String text) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,203,"eturn ((DateTimeParser) this).parseDateTime(text, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,206,"ublic DateTime parseDateTime(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,207,"eturn new DateTime(((DateTimeParser) this).parseMillis(text, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,210,"ublic DateTime parseDateTime(String text, ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,211,hronology chrono = DateTimeUtils.getInstantChronology(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,212,ong millis = DateTimeUtils.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,213,"eturn new DateTime(((DateTimeParser) this).parseMillis(text, millis, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,216,ublic MutableDateTime parseMutableDateTime(String text) {
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,217,"eturn ((DateTimeParser) this).parseMutableDateTime(text, ISOChronology.getInstance());"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,220,"ublic MutableDateTime parseMutableDateTime(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,221,"eturn new MutableDateTime(((DateTimeParser) this).parseMillis(text, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,224,"ublic MutableDateTime parseMutableDateTime(String text, ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,225,hronology chrono = DateTimeUtils.getInstantChronology(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,226,ong millis = DateTimeUtils.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,227,eturn new MutableDateTime
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,228,"((DateTimeParser) this).parseMillis(text, millis, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,27,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,32,mport org.joda.time.MutableDateTime;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,33,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,34,mport org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,125,/** Style constant for FULL. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,126,static final int FULL = 0;  // DateFormat.FULL
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,127,/** Style constant for LONG. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,128,static final int LONG = 1;  // DateFormat.LONG
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,129,/** Style constant for MEDIUM. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,130,static final int MEDIUM = 2;  // DateFormat.MEDIUM
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,131,/** Style constant for SHORT. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,132,static final int SHORT = 3;  // DateFormat.SHORT
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,133,/** Style constant for NONE. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,134,static final int NONE = 4;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,136,/** Type constant for DATE only. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,137,static final int DATE = 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,138,/** Type constant for TIME only. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,139,static final int TIME = 1;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,140,/** Type constant for DATETIME. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,141,static final int DATETIME = 2;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,143,"/** Maps patterns to formatters, patterns don't vary by locale. */"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,144,private static final Map cPatternedCache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,145,"/** Maps patterns to formatters, patterns don't vary by locale. */"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,146,private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,150,* Factory to create a formatter from a pattern string.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,151,* The pattern string is encoded as per SimpleDateFormat.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,153,* @param pattern  pattern specification
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,154,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,155,* @throws IllegalArgumentException if the pattern is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,157,public static DateTimeFormatter forPattern(String pattern) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,158,return createFormatterForPattern(pattern);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,130, Cache that maps Chronology instances to maps that map
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,131, Locales to DateTimeFormat instances.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,162,* Factory to create a format from a two character style pattern.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,163,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,164,"* The first character is the date style, and the second character is the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,165,"* time style. Specify a character of 'S' for short style, 'M' for medium,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,166,"* 'L' for long, and 'F' for full."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,167,* A date or time may be ommitted by specifying a style character '-'.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,168,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,169,* The returned formatter will dynamically adjust to the locale that
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,170,* the print/parse takes place in. Thus you just call
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,171,* {@link DateTimeFormatter#withLocale(Locale)} and the Short/Medium/Long/Full
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,172,* style for that locale will be output.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,174,"* @param style  two characters from the set {""S"", ""M"", ""L"", ""F"", ""-""}"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,175,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,176,* @throws IllegalArgumentException if the style is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,133,rivate static Map cInstanceCache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,178,public static DateTimeFormatter forStyle(String style) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,179,return createFormatterForStyle(style);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,137, Gets an instance of the formatter provider that works with the default locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,184,* Creates a format that outputs a short date format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,185,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,186,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,187,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,139, @return a format provider
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,189,* @return the formatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,141,ublic static DateTimeFormat getInstance() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,142,eturn getInstance(Locale.getDefault());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,191,public static DateTimeFormatter shortDate() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,192,"return createFormatterForStyleIndex(SHORT, NONE);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,146, Gets an instance of the formatter provider that works with the given locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,196,* Creates a format that outputs a medium date format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,197,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,198,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,199,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,148," @param locale  the Locale to use, null for default locale"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,149, @return a format provider
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,201,* @return the formatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,151,ublic synchronized static DateTimeFormat getInstance(Locale locale) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,152,f (locale == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,153,ocale = Locale.getDefault();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,155,ateTimeFormat dtf = (DateTimeFormat) cInstanceCache.get(locale);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,156,f (dtf == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,157,tf = new DateTimeFormat(locale);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,158,"InstanceCache.put(locale, dtf);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,160,eturn dtf;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,203,public static DateTimeFormatter mediumDate() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,204,"return createFormatterForStyleIndex(MEDIUM, NONE);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,208,* Creates a format that outputs a long date format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,209,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,210,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,211,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,213,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,215,public static DateTimeFormatter longDate() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,216,"return createFormatterForStyleIndex(LONG, NONE);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,220,* Creates a format that outputs a full date format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,221,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,222,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,223,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,225,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,227,public static DateTimeFormatter fullDate() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,228,"return createFormatterForStyleIndex(FULL, NONE);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,233,* Creates a format that outputs a short time format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,234,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,235,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,236,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,238,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,240,public static DateTimeFormatter shortTime() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,241,"return createFormatterForStyleIndex(NONE, SHORT);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,245,* Creates a format that outputs a medium time format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,246,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,247,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,248,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,250,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,252,public static DateTimeFormatter mediumTime() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,253,"return createFormatterForStyleIndex(NONE, MEDIUM);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,257,* Creates a format that outputs a long time format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,258,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,259,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,260,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,262,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,264,public static DateTimeFormatter longTime() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,265,"return createFormatterForStyleIndex(NONE, LONG);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,269,* Creates a format that outputs a full time format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,270,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,271,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,272,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,274,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,276,public static DateTimeFormatter fullTime() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,277,"return createFormatterForStyleIndex(NONE, FULL);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,282,* Creates a format that outputs a short datetime format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,283,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,284,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,285,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,287,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,289,public static DateTimeFormatter shortDateTime() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,290,"return createFormatterForStyleIndex(SHORT, SHORT);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,294,* Creates a format that outputs a medium datetime format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,295,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,296,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,297,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,299,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,301,public static DateTimeFormatter mediumDateTime() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,302,"return createFormatterForStyleIndex(MEDIUM, MEDIUM);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,306,* Creates a format that outputs a long datetime format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,307,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,308,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,309,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,311,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,313,public static DateTimeFormatter longDateTime() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,314,"return createFormatterForStyleIndex(LONG, LONG);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,318,* Creates a format that outputs a full datetime format.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,319,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,320,* The format will change as you change the locale of the formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,321,* Call {@link DateTimeFormatter#withLocale(Locale)} to switch the locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,323,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,325,public static DateTimeFormatter fullDateTime() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,326,"return createFormatterForStyleIndex(FULL, FULL);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,331,* Parses the given pattern and appends the rules to the given
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,332,* DateTimeFormatterBuilder.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,334,* @param pattern  pattern specification
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,335,* @throws IllegalArgumentException if the pattern is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,337,"static void appendPatternTo(DateTimeFormatterBuilder builder, String pattern) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,338,"parsePatternTo(builder, pattern);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,343,"* Deprecated, methods on DateTimeFormat are now static."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,345,* @deprecated remove this call as the methods are now static
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,347,public static DateTimeFormat getInstance() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,348,return new DateTimeFormat();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,353,* Constructor.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,355,private DateTimeFormat() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,356,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,172,"ublic static void appendPatternTo(DateTimeFormatterBuilder builder, String pattern) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,368,"private static void parsePatternTo(DateTimeFormatterBuilder builder, String pattern) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,328,"rivate static String parseToken(final String pattern, final int[] indexRef) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,525,* Parses an individual token.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,527,* @param pattern  the pattern string
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,528,"* @param indexRef  a single element array, where the input is the start"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,529,*  location and the output is the location after parsing the token
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,530,* @return the parsed token
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,532,"private static String parseToken(String pattern, int[] indexRef) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,380,/ Returns true if token should be parsed as a numeric field.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,381,rivate static boolean isNumericToken(final String token) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,585,* Returns true if token should be parsed as a numeric field.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,587,* @param token  the token to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,588,* @return true if numeric field
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,590,private static boolean isNumericToken(String token) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,416,** The locale to use */
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,417,rivate final Locale iLocale;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,419,** Maps patterns to formatters */
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,420,rivate transient Map iPatternedCache = new HashMap(7);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,422,** Maps styles to formatters */
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,423,rivate transient Map iStyledCache = new HashMap(7);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,426, Constructor.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,428," @param locale  the locale to use, must not be null"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,430,rivate DateTimeFormat(final Locale locale) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,431,uper();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,432,Locale = locale;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,443,ublic synchronized DateTimeFormatter forPattern(final String pattern) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,444,ateTimeFormatter formatter = (DateTimeFormatter) iPatternedCache.get(pattern);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,445,f (formatter != null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,446,eturn formatter;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,632,private static DateTimeFormatter createFormatterForPattern(String pattern) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,636,DateTimeFormatter formatter = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,637,synchronized (cPatternedCache) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,638,formatter = (DateTimeFormatter) cPatternedCache.get(pattern);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,639,if (formatter == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,640,DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,641,"parsePatternTo(builder, pattern);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,642,formatter = builder.toFormatter();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,453,ateTimeFormatterBuilder builder = new DateTimeFormatterBuilder(iLocale);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,454,"ppendPatternTo(builder, pattern);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,456,f (builder.canBuildFormatter()) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,457,ormatter = builder.toFormatter();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,458, else if (builder.canBuildPrinter()) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,459,ormatter = new FPrinter(builder.toPrinter());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,460, else if (builder.canBuildParser()) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,461,/ I don't expect this case to ever occur.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,462,ormatter = new FParser(builder.toParser());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,463, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,464,"hrow new UnsupportedOperationException(""Pattern unsupported: "" + pattern);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,644,"cPatternedCache.put(pattern, formatter);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,467,"PatternedCache.put(pattern, formatter);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,480,ublic synchronized DateTimeFormatter forStyle(final String style) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,481,ateTimeFormatter formatter = (DateTimeFormatter)iStyledCache.get(style);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,482,f (formatter == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,483,ormatter = forPattern(getPatternForStyle(style));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,484,"StyledCache.put(style, formatter);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,486,eturn formatter;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,490, Returns a pattern specification from a two character style. The first
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,491," character is the date style, and the second character is the time"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,492," style. Specify a character of 'S' for short style, 'M' for medium, 'L'"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,493," for long, and 'F' for full. A date or time may be ommitted by specifying"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,494, a style character '-'.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,496," @param style  two characters from the set {""S"", ""M"", ""L"", ""F"", ""-""}"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,497, @throws IllegalArgumentException if the style is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,499,ublic String getPatternForStyle(final String style) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,659,private static DateTimeFormatter createFormatterForStyle(String style) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,504,f (style.charAt(1) == '-') {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,505,/ date only
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,506,eturn getDatePattern(style.charAt(0));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,507, else if (style.charAt(0) == '-') {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,508,/ time only
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,509,eturn getTimePattern(style.charAt(1));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,510, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,511,/ datetime
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,512,"eturn getDateTimePattern(style.charAt(0), style.charAt(1));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,663,int dateStyle = selectStyle(style.charAt(0));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,664,int timeStyle = selectStyle(style.charAt(1));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,665,if (dateStyle == NONE && timeStyle == NONE) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,666,"throw new IllegalArgumentException(""Style '--' is invalid"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,668,"return createFormatterForStyleIndex(dateStyle, timeStyle);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,516,rivate String getDatePattern(final char style) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,517,nt istyle = selectStyle(style);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,518,ry {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,519,"eturn ((SimpleDateFormat)DateFormat.getDateInstance(istyle, iLocale)).toPattern();"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,520, catch (ClassCastException e) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,521,"hrow new IllegalArgumentException(""No date pattern for locale: "" + iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,525,rivate String getTimePattern(final char style) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,526,nt istyle = selectStyle(style);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,527,ry {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,528,"eturn ((SimpleDateFormat)DateFormat.getTimeInstance(istyle, iLocale)).toPattern();"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,529, catch (ClassCastException e) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,530,"hrow new IllegalArgumentException(""No time pattern for locale: "" + iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,534,"rivate String getDateTimePattern(final char dateStyle, final char timeStyle) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,535,nt idateStyle = selectStyle(dateStyle);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,536,nt itimeStyle = selectStyle(timeStyle);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,537,ry {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,538,eturn ((SimpleDateFormat)DateFormat.getDateTimeInstance
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,539,"idateStyle, itimeStyle, iLocale)).toPattern();"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,540, catch (ClassCastException e) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,541,"hrow new IllegalArgumentException(""No datetime pattern for locale: "" + iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,672,* Gets the formatter for the specified style.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,674,* @param dateStyle  the date style
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,675,* @param timeStyle  the time style
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,676,* @return the formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,678,"private static DateTimeFormatter createFormatterForStyleIndex(int dateStyle, int timeStyle) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,679,int index = dateStyle * 5 + timeStyle;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,680,DateTimeFormatter f = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,681,synchronized (cStyleCache) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,682,f = cStyleCache[index];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,683,if (f == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,684,int type = DATETIME;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,685,if (dateStyle == NONE) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,686,type = TIME;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,687,} else if (timeStyle == NONE) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,688,type = DATE;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,690,LengthLocaleFormatter llf = new LengthLocaleFormatter(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,691,"dateStyle, timeStyle, type);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,692,"f = new DateTimeFormatter(llf, llf);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,693,cStyleCache[index] = f;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,696,return f;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,545,rivate int selectStyle(final char c) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,546,witch (c) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,700,* Gets the JDK style code from the Joda code.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,702,* @param ch  the Joda style code
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,703,* @return the JDK style code
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,705,private static int selectStyle(char ch) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,706,switch (ch) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,548,eturn DateFormat.SHORT;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,708,return SHORT;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,550,eturn DateFormat.MEDIUM;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,710,return MEDIUM;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,552,eturn DateFormat.LONG;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,712,return LONG;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,554,eturn DateFormat.FULL;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,714,return FULL;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,715,case '-':
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,716,return NONE;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,556,"hrow new IllegalArgumentException(""Invalid style character: "" + c);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,718,"throw new IllegalArgumentException(""Invalid style character: "" + ch);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,599, A fake formatter that can only print.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,601,tatic class FPrinter implements DateTimeFormatter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,602,rivate final DateTimePrinter iPrinter;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,604,Printer(DateTimePrinter printer) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,605,uper();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,606,Printer = printer;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,609,ublic int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,610,eturn iPrinter.estimatePrintedLength();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,613,"ublic void printTo(StringBuffer buf, ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,614,"Printer.printTo(buf, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,617,"ublic void printTo(Writer out, ReadableInstant instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,618,"Printer.printTo(out, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,621,"ublic void printTo(StringBuffer buf, long instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,622,"Printer.printTo(buf, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,625,"ublic void printTo(Writer out, long instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,626,"Printer.printTo(out, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,629,"ublic void printTo(StringBuffer buf, long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,630,"Printer.printTo(buf, instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,633,"ublic void printTo(Writer out, long instant, DateTimeZone zone)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,634,hrows IOException {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,635,"Printer.printTo(out, instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,638,"ublic void printTo(StringBuffer buf, long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,639,"Printer.printTo(buf, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,642,"ublic void printTo(Writer out, long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,643,"Printer.printTo(out, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,646,"ublic void printTo(StringBuffer buf, long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,647,"nt displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,648,"Printer.printTo(buf, instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,651,"ublic void printTo(Writer out, long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,652,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,653,"Printer.printTo(out, instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,656,"ublic void printTo(StringBuffer buf, ReadablePartial instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,657,"Printer.printTo(buf, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,660,"ublic void printTo(Writer out, ReadablePartial instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,661,"Printer.printTo(out, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,664,ublic String print(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,665,eturn iPrinter.print(instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,668,ublic String print(long instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,669,eturn iPrinter.print(instant);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,672,"ublic String print(long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,673,"eturn iPrinter.print(instant, zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,676,"ublic String print(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,677,"eturn iPrinter.print(instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,680,"ublic String print(long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,681,"nt displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,682,"eturn iPrinter.print(instant, chrono, displayOffset, displayZone);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,685,ublic String print(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,686,eturn iPrinter.print(partial);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,689,ublic int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,690,eturn 0;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,693,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,694,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,697,"ublic int parseInto(ReadWritableInstant instant, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,698,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,701,ublic long parseMillis(String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,702,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,705,"ublic long parseMillis(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,706,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,709,"ublic long parseMillis(String text, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,710,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,713,"ublic long parseMillis(String text, long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,714,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,717,ublic DateTime parseDateTime(String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,718,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,721,"ublic DateTime parseDateTime(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,722,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,725,"ublic DateTime parseDateTime(String text, ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,726,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,729,ublic MutableDateTime parseMutableDateTime(String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,730,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,733,"ublic MutableDateTime parseMutableDateTime(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,734,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,737,"ublic MutableDateTime parseMutableDateTime(String text,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,738,eadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,739,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,742,rivate UnsupportedOperationException unsupported() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,743,"eturn new UnsupportedOperationException(""Parsing not supported"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,749, A fake formatter that can only parse.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,751,tatic class FParser implements DateTimeFormatter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,752,rivate final DateTimeParser iParser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,761,static class LengthLocaleFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,762,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,754,Parser(DateTimeParser parser) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,764,private static final Map cCache = new HashMap();  // manual sync
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,766,private final int iDateStyle;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,767,private final int iTimeStyle;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,768,private final int iType;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,770,"LengthLocaleFormatter(int dateStyle, int timeStyle, int type) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,756,Parser = parser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,772,iDateStyle = dateStyle;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,773,iTimeStyle = timeStyle;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,774,iType = type;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,760,eturn 0;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,763,"ublic void printTo(StringBuffer buf, ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,764,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,767,"ublic void printTo(Writer out, ReadableInstant instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,768,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,771,"ublic void printTo(StringBuffer buf, long instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,772,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,775,"ublic void printTo(Writer out, long instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,776,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,779,"ublic void printTo(StringBuffer buf, long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,780,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,783,"ublic void printTo(Writer out, long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,784,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,787,"ublic void printTo(StringBuffer buf, long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,788,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,791,"ublic void printTo(Writer out, long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,792,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,795,"ublic void printTo(StringBuffer buf, long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,796,"nt displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,797,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,800,"ublic void printTo(Writer out, long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,801,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,802,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,805,"ublic void printTo(StringBuffer buf, ReadablePartial instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,806,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,809,"ublic void printTo(Writer out, ReadablePartial instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,810,hrow unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,778,return 40;  // guess
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,813,ublic String print(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,814,hrow unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,781,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,782,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,783,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,784,DateTimePrinter p = getFormatter(locale).getPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,785,"p.printTo(buf, instant, chrono, displayOffset, displayZone, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,817,ublic String print(long instant) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,818,hrow unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,788,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,789,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,790,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,791,DateTimePrinter p = getFormatter(locale).getPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,792,"p.printTo(out, instant, chrono, displayOffset, displayZone, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,821,"ublic String print(long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,822,hrow unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,795,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,796,DateTimePrinter p = getFormatter(locale).getPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,797,"p.printTo(buf, partial, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,825,"ublic String print(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,826,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,829,"ublic String print(long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,830,"nt displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,831,hrow unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,834,ublic String print(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,835,hrow unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,800,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,801,DateTimePrinter p = getFormatter(locale).getPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,802,"p.printTo(out, partial, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,839,eturn iParser.estimateParsedLength();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,806,return 40;  // guess
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,843,"eturn iParser.parseInto(bucket, text, position);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,846,"ublic int parseInto(ReadWritableInstant instant, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,847,"eturn iParser.parseInto(instant, text, position);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,850,ublic long parseMillis(String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,851,eturn iParser.parseMillis(text);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,854,"ublic long parseMillis(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,855,"eturn iParser.parseMillis(text, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,858,"ublic long parseMillis(String text, long instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,859,"eturn iParser.parseMillis(text, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,862,"ublic long parseMillis(String text, long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,863,"eturn iParser.parseMillis(text, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,866,ublic DateTime parseDateTime(String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,867,eturn iParser.parseDateTime(text);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,870,"ublic DateTime parseDateTime(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,871,"eturn iParser.parseDateTime(text, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,874,"ublic DateTime parseDateTime(String text, ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,875,"eturn iParser.parseDateTime(text, instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,878,ublic MutableDateTime parseMutableDateTime(String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,879,eturn iParser.parseMutableDateTime(text);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,882,"ublic MutableDateTime parseMutableDateTime(String text, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,883,"eturn iParser.parseMutableDateTime(text, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,886,"ublic MutableDateTime parseMutableDateTime(String text, ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,887,"eturn iParser.parseMutableDateTime(text, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,810,DateTimeParser p = getFormatter(bucket.getLocale()).getParser();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,811,"return p.parseInto(bucket, text, position);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,814,private DateTimeFormatter getFormatter(Locale locale) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,815,String key = Integer.toString(iType + iDateStyle << 4 + iTimeStyle << 8) + locale.toString();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,816,DateTimeFormatter f = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,817,synchronized (cCache) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,818,f = (DateTimeFormatter) cCache.get(key);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,819,if (f == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,820,String pattern = getPattern(locale);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,821,f = DateTimeFormat.forPattern(pattern);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,822,"cCache.put(key, f);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,825,return f;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,890,rivate UnsupportedOperationException unsupported() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,891,"eturn new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,828,private String getPattern(Locale locale) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,829,DateFormat f = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,830,switch (iType) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,831,case DATE:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,832,"f = DateFormat.getDateInstance(iDateStyle, locale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,833,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,834,case TIME:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,835,"f = DateFormat.getTimeInstance(iTimeStyle, locale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,836,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,837,case DATETIME:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,838,"f = DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,839,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,841,if (f instanceof SimpleDateFormat == false) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,842,"throw new IllegalArgumentException(""No datetime pattern for locale: "" + locale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,844,return ((SimpleDateFormat) f).toPattern();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,18,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,19,import java.io.Writer;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,20,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,22,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,23,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,24,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,25,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,26,import org.joda.time.MutableDateTime;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,27,import org.joda.time.ReadWritableInstant;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,28,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,29,import org.joda.time.ReadablePartial;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,19, Combined interface for printing and parsing.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,32,* Controls the printing and parsing of a datetime to and from a string.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,21, See each extended interface for details of the methods.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,34,* This class is the main API for printing and parsing used by most applications.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,35,* Instances of this class are created via one of three factory classes:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,36,* <ul>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,37,* <li>{@link DateTimeFormat} - formats by pattern and style</li>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,38,* <li>{@link ISODateTimeFormat} - ISO8601 formats</li>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,39,* <li>{@link DateTimeFormatterBuilder} - complex formats created via method calls</li>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,40,* </ul>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,41,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,42,* An instance of this class holds a reference internally to one printer and
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,43,"* one parser. It is possible that one of these may be null, in which case the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,44,* formatter cannot print/parse. This can be checked via the {@link #isPrinter()}
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,45,* and {@link #isParser()} methods.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,46,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,47,* The underlying printer/parser can be altered to behave exactly as required
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,48,* by using one of the decorator modifiers:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,49,* <ul>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,50,* <li>{@link #withLocale(Locale)} - returns a new formatter that uses the specified locale</li>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,51,* <li>{@link #withZone(DateTimeZone)} - returns a new formatter that uses the specified time zone</li>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,52,* <li>{@link #withChronology(Chronology)} - returns a new formatter that uses the specified chronology</li>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,53,* <li>{@link #withOffsetParsed()} - returns a new formatter that returns the parsed time zone offset</li>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,54,* </ul>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,55,* Each of these returns a new formatter (instances of this class are immutable).
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,56,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,57,* The main methods of the class are the <code>printXxx</code> and
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,58,* <code>parseXxx</code> methods. These are used as follows:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,59,* <pre>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,60,"* // print using the defaults (default locale, chronology/zone of the datetime)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,61,* String dateStr = formatter.print(dt);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,62,* // print using the French locale
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,63,* String dateStr = formatter.withLocale(Locale.FRENCH).print(dt);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,64,* // print using the UTC zone
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,65,* String dateStr = formatter.withZone(DateTimeZone.UTC).print(dt);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,67,* // parse using the Paris zone
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,68,"* DateTime date = formatter.withZone(DateTimeZone.forID(""Europe/Paris"")).parseDateTime(str);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,69,* </pre>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,72,* @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,26,"ublic interface DateTimeFormatter extends DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,28,/ Methods inherited
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,75,public class DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,77,/** The internal printer used to output the datetime. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,78,private final DateTimePrinter iPrinter;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,79,/** The internal parser used to output the datetime. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,80,private final DateTimeParser iParser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,81,/** The locale to use for printing and parsing. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,82,private final Locale iLocale;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,83,/** Whether the offset is parsed. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,84,private final boolean iOffsetParsed;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,85,/** The chronology to use as an override. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,86,private final Chronology iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,87,/** The zone to use as an override. */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,88,private final DateTimeZone iZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,91,"* Creates a new formatter, however you will normally use the factory"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,92,* or the builder.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,94,"* @param printer  the internal printer, null if cannot print"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,95,"* @param parser  the internal parser, null if cannot parse"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,97,public DateTimeFormatter(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,98,"DateTimePrinter printer, DateTimeParser parser) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,99,super();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,100,iPrinter = printer;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,101,iParser = parser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,102,iLocale = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,103,iOffsetParsed = false;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,104,iChrono = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,105,iZone = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,109,* Constructor.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,111,private DateTimeFormatter(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,112,"DateTimePrinter printer, DateTimeParser parser,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,113,"Locale locale, boolean offsetParsed,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,114,"Chronology chrono, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,115,super();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,116,iPrinter = printer;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,117,iParser = parser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,118,iLocale = locale;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,119,iOffsetParsed = offsetParsed;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,120,iChrono = chrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,121,iZone = zone;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,126,* Is this formatter capable of printing.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,128,* @return true if this is a printer
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,130,public boolean isPrinter() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,131,return (iPrinter != null);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,135,* Gets the internal printer object that performs the real printing work.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,137,* @return the internal printer
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,139,public DateTimePrinter getPrinter() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,140,return iPrinter;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,144,* Is this formatter capable of parsing.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,146,* @return true if this is a parser
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,148,public boolean isParser() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,149,return (iParser != null);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,153,* Gets the internal parser object that performs the real parsing work.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,155,* @return the internal parser
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,157,public DateTimeParser getParser() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,158,return iParser;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,163,* Returns a new formatter with a different locale that will be used
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,164,* for printing and parsing.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,165,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,166,"* A DateTimeFormatter is immutable, so a new instance is returned,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,167,* and the original is unaltered and still usable.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,169,* @param locale  the locale to use
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,170,* @return the new formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,172,public DateTimeFormatter withLocale(Locale locale) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,173,locale = (locale == null ? Locale.getDefault() : locale);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,174,if (locale.equals(getLocale())) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,175,return this;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,177,"return new DateTimeFormatter(iPrinter, iParser, locale, iOffsetParsed, iChrono, iZone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,181,* Gets the locale that will be used for printing and parsing.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,183,* @return the locale to use
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,185,public Locale getLocale() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,186,return iLocale;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,191,* Returns a new formatter that will create a datetime with a time zone
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,192,* equal to that of the offset of the parsed string.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,193,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,194,"* After calling this method, a string '2004-06-09T10:20:30-08:00' will"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,195,"* create a datetime with a zone of -08:00 (a fixed zone, with no daylight"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,196,* savings rules). If the parsed string represents a local time (no zone
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,197,* offset) the parsed datetime will be in the default zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,198,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,199,* Calling this method sets the override zone to null.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,200,* Calling the override zone method sets this flag off.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,202,* @param locale  the locale to use
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,203,* @return the new formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,205,public DateTimeFormatter withOffsetParsed() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,206,if (iOffsetParsed == true) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,207,return this;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,209,"return new DateTimeFormatter(iPrinter, iParser, iLocale, true, iChrono, null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,213,* Checks whether the offset from the string is used as the zone of
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,214,* the parsed datetime.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,216,* @return true if the offset from the string is used as the zone
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,218,public boolean isOffsetParsed() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,219,return iOffsetParsed;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,224,* Returns a new formatter that will use the specified chronology in
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,225,"* preference to that of the printed object, or ISO on a parse."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,226,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,227,"* When printing, this chronolgy will be used in preference to the chronology"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,228,* from the datetime that would otherwise be used.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,229,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,230,"* When parsing, this chronology will be set on the parsed datetime."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,231,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,232,* A null zone means of no-override.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,233,"* If both an override chronology and an override zone are set, the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,234,* override zone will take precedence over the zone in the chronology.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,236,* @param zone  the zone to use as an override
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,237,* @return the new formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,239,public DateTimeFormatter withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,240,if (iChrono == chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,241,return this;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,243,"return new DateTimeFormatter(iPrinter, iParser, iLocale, iOffsetParsed, chrono, iZone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,247,* Gets the chronology to use as an override.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,249,* @return the chronology to use as an override
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,251,public Chronology getChronolgy() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,252,return iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,257,* Returns a new formatter that will use the specified zone in preference
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,258,"* to the zone of the printed object, or default zone on a parse."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,259,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,260,"* When printing, this zone will be used in preference to the zone"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,261,* from the datetime that would otherwise be used.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,262,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,263,"* When parsing, this zone will be set on the parsed datetime."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,264,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,265,* A null zone means of no-override.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,266,"* If both an override chronology and an override zone are set, the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,267,* override zone will take precedence over the zone in the chronology.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,269,* @param zone  the zone to use as an override
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,270,* @return the new formatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,272,public DateTimeFormatter withZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,273,if (iZone == zone) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,274,return this;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,276,"return new DateTimeFormatter(iPrinter, iParser, iLocale, false, iChrono, zone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,280,* Gets the zone to use as an override.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,282,* @return the zone to use as an override
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,284,public DateTimeZone getZone() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,285,return iZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,290,"* Prints a ReadableInstant, using the chronology supplied by the instant."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,292,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,293,"* @param instant  instant to format, null means now"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,295,"public void printTo(StringBuffer buf, ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,296,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,298,long millis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,299,Chronology chrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,300,"printTo(buf, millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,304,"* Prints a ReadableInstant, using the chronology supplied by the instant."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,306,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,307,"* @param instant  instant to format, null means now"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,309,"public void printTo(Writer out, ReadableInstant instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,310,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,312,long millis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,313,Chronology chrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,314,"printTo(out, millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,319,"* Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,320,* using ISO chronology in the default DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,322,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,323,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,325,"public void printTo(StringBuffer buf, long instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,326,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,328,"printTo(buf, instant, null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,332,"* Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,333,* using ISO chronology in the default DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,335,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,336,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,338,"public void printTo(Writer out, long instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,339,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,341,"printTo(out, instant, null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,346,* Prints a ReadablePartial.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,347,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,348,* Neither the override chronology nor the override zone are used
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,349,* by this method.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,351,* @param buf  formatted partial is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,352,* @param partial  partial to format
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,354,"public void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,355,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,356,if (partial == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,357,"throw new IllegalArgumentException(""The partial must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,360,"iPrinter.printTo(buf, partial, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,364,* Prints a ReadablePartial.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,365,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,366,* Neither the override chronology nor the override zone are used
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,367,* by this method.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,369,* @param out  formatted partial is written out
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,370,* @param partial  partial to format
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,372,"public void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,373,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,374,if (partial == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,375,"throw new IllegalArgumentException(""The partial must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,378,"iPrinter.printTo(out, partial, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,383,* Prints a ReadableInstant to a String.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,384,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,385,* This method will use the override zone and the override chronololgy if
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,386,* they are set. Otherwise it will use the chronology and zone of the instant.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,388,"* @param instant  instant to format, null means now"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,389,* @return the printed result
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,391,public String print(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,392,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,394,StringBuffer buf = new StringBuffer(iPrinter.estimatePrintedLength());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,395,"printTo(buf, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,396,return buf.toString();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,400,* Prints a millisecond instant to a String.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,401,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,402,* This method will use the override zone and the override chronololgy if
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,403,* they are set. Otherwise it will use the ISO chronology and default zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,405,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,406,* @return the printed result
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,408,public String print(long instant) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,409,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,411,StringBuffer buf = new StringBuffer(iPrinter.estimatePrintedLength());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,412,"printTo(buf, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,413,return buf.toString();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,417,* Prints a ReadablePartial to a new String.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,418,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,419,* Neither the override chronology nor the override zone are used
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,420,* by this method.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,422,* @param partial  partial to format
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,423,* @return the printed result
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,425,public String print(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,426,checkPrinter();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,428,StringBuffer buf = new StringBuffer(iPrinter.estimatePrintedLength());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,429,"printTo(buf, partial);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,430,return buf.toString();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,433,"private void printTo(StringBuffer buf, long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,434,chrono = selectChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,435,// Shift instant into local time (UTC) to avoid excessive offset
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,436,// calculations when printing multiple fields in a composite printer.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,437,DateTimeZone zone = chrono.getZone();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,438,int offset = zone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,439,"iPrinter.printTo(buf, instant + offset, chrono.withUTC(), offset, zone, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,442,"private void printTo(Writer buf, long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,443,chrono = selectChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,444,// Shift instant into local time (UTC) to avoid excessive offset
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,445,// calculations when printing multiple fields in a composite printer.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,446,DateTimeZone zone = chrono.getZone();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,447,int offset = zone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,448,"iPrinter.printTo(buf, instant + offset, chrono.withUTC(), offset, zone, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,452,* Method called when there is nothing to parse.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,454,* @return the exception
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,456,private void checkPrinter() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,457,if (iPrinter == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,458,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,464,"* Parses a datetime from the given text, at the given position, saving the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,465,* result into the fields of the given ReadWritableInstant. If the parse
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,466,"* succeeds, the return value is the new text position. Note that the parse"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,467,* may succeed without fully reading the text and in this case those fields
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,468,* that were read will be set.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,469,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,470,* Only those fields present in the string will be changed in the specified
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,471,* instant. All other fields will remain unaltered. Thus if the string only
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,472,"* contains a year and a month, then the day and time will be retained from"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,473,"* the input instant. If this is not the behaviour you want, then reset the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,474,"* fields before calling this method, or use {@link #parseDateTime(String)}"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,475,* or {@link #parseMutableDateTime(String)}.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,476,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,477,"* If it fails, the return value is negative, but the instant may still be"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,478,"* modified. To determine the position where the parse failed, apply the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,479,* one's complement operator (~) on the return value.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,480,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,481,* The parse will use the chronology of the instant.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,483,"* @param instant  an instant that will be modified, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,484,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,485,* @param position  position to start parsing from
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,486,"* @return new position, negative value means parse failed -"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,487,*  apply complement operator (~) to get position of failure
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,488,* @throws UnsupportedOperationException if parsing is not supported
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,489,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,490,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,492,"public int parseInto(ReadWritableInstant instant, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,493,checkParser();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,494,if (instant == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,495,"throw new IllegalArgumentException(""Instant must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,498,long instantMillis = instant.getMillis();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,499,Chronology chrono = instant.getChronology();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,500,long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,501,chrono = selectChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,503,"DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,504,"int newPos = iParser.parseInto(bucket, text, position);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,505,instant.setMillis(bucket.computeMillis());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,506,if (iOffsetParsed && bucket.getZone() == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,507,int parsedOffset = bucket.getOffset();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,508,DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,509,chrono = chrono.withZone(parsedZone);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,511,instant.setChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,512,return newPos;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,516,"* Parses a datetime from the given text, returning the number of"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,517,"* milliseconds since the epoch, 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,518,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,519,"* The parse will use the ISO chronology, and the default time zone."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,520,* If the text contains a time zone string then that will be taken into account.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,522,* @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,523,* @return parsed value expressed in milliseconds since the epoch
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,524,* @throws UnsupportedOperationException if parsing is not supported
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,525,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,527,public long parseMillis(String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,528,checkParser();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,530,Chronology chrono = selectChronology(iChrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,531,"DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,532,"int newPos = iParser.parseInto(bucket, text, 0);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,533,if (newPos >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,534,if (newPos >= text.length()) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,535,return bucket.computeMillis(true);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,537,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,538,newPos = ~newPos;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,540,"throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,544,"* Parses a datetime from the given text, returning a new DateTime."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,545,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,546,* The parse will use the zone and chronology specified on this formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,547,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,548,* If the text contains a time zone string then that will be taken into
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,549,* account in adjusting the time of day as follows.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,550,"* If the {@link #withOffsetParsed()} has been called, then the resulting"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,551,* DateTime will have a fixed offset based on the parsed time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,552,"* Otherwise the resulting DateTime will have the zone of this formatter,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,553,* but the parsed zone may have caused the time to be adjusted.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,555,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,556,* @return parsed value in a DateTime object
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,557,* @throws UnsupportedOperationException if parsing is not supported
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,558,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,560,public DateTime parseDateTime(String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,561,checkParser();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,563,Chronology chrono = selectChronology(null);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,564,"DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,565,"int newPos = iParser.parseInto(bucket, text, 0);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,566,if (newPos >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,567,if (newPos >= text.length()) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,568,long millis = bucket.computeMillis(true);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,569,if (iOffsetParsed && bucket.getZone() == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,570,int parsedOffset = bucket.getOffset();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,571,DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,572,chrono = chrono.withZone(parsedZone);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,574,"return new DateTime(millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,576,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,577,newPos = ~newPos;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,579,"throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,583,"* Parses a datetime from the given text, returning a new MutableDateTime."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,584,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,585,* The parse will use the zone and chronology specified on this formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,586,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,587,* If the text contains a time zone string then that will be taken into
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,588,* account in adjusting the time of day as follows.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,589,"* If the {@link #withOffsetParsed()} has been called, then the resulting"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,590,* DateTime will have a fixed offset based on the parsed time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,591,"* Otherwise the resulting DateTime will have the zone of this formatter,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,592,* but the parsed zone may have caused the time to be adjusted.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,594,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,595,* @return parsed value in a MutableDateTime object
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,596,* @throws UnsupportedOperationException if parsing is not supported
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,597,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,599,public MutableDateTime parseMutableDateTime(String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,600,checkParser();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,602,Chronology chrono = selectChronology(null);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,603,"DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,604,"int newPos = iParser.parseInto(bucket, text, 0);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,605,if (newPos >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,606,if (newPos >= text.length()) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,607,long millis = bucket.computeMillis(true);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,608,if (iOffsetParsed && bucket.getZone() == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,609,int parsedOffset = bucket.getOffset();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,610,DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,611,chrono = chrono.withZone(parsedZone);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,613,"return new MutableDateTime(millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,615,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,616,newPos = ~newPos;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,618,"throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,622,* Method called when there is nothing to parse.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,624,* @return the exception
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,626,private void checkParser() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,627,if (iParser == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,628,"throw new UnsupportedOperationException(""Parsing not supported"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,634,* Determines the correct chronology to use.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,636,* @param chrono  the proposed chronology
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,637,* @return the actual chronology
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,639,private Chronology selectChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,640,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,641,if (iChrono != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,642,chrono = iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,644,if (iZone != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,645,chrono = chrono.withZone(iZone);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,647,return chrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,66,** The locale the builder uses. */
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,67,rivate final Locale iLocale;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,69,/ Array contents alternate between printers and parsers.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,66,/** Array of printers and parsers (alternating). */
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,68,/** Cache of the last returned formatter. */
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,75, Creates a DateTimeFormatterBuilder for the default locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,73,* Creates a DateTimeFormatterBuilder.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,78,his(Locale.getDefault());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,82, Creates a DateTimeFormatterBuilder for the specified locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,84," @param locale Locale to use, or null for default"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,86,ublic DateTimeFormatterBuilder(Locale locale) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,87,f (locale == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,88,ocale = Locale.getDefault();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,90,Locale = locale;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,76,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,96," Returns the locale being used by the formatter builder, never null."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,98,ublic Locale getLocale() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,99,eturn iLocale;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,104, Converts to a DateTimePrinter that prints using all the appended
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,105, elements. Subsequent changes to this builder do not affect the returned
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,106, printer.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,82,"* Converts to a DateTimePrinter that can only print, using all the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,83,* appended elements.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,84,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,85,* Subsequent changes to this builder do not affect the returned formatter.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,108, @throws UnsupportedOperationException if any formatter element doesn't support
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,109, printing
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,87,* @throws UnsupportedOperationException if printing is not supported
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,111,ublic DateTimePrinter toPrinter() throws UnsupportedOperationException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,89,public DateTimePrinter toPrinter() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,114,eturn (DateTimePrinter)f;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,92,return (DateTimePrinter) f;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,116,"hrow new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,94,"throw new UnsupportedOperationException(""Printing is not supported"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,120, Converts to a DateTimeParser that parses using all the appended
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,121, elements. Subsequent changes to this builder do not affect the returned
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,122, parser.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,98,"* Converts to a DateTimeFormatter that can only parse, using all the"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,99,* appended elements.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,100,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,101,* Subsequent changes to this builder do not affect the returned formatter.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,124, @throws UnsupportedOperationException if any formatter element doesn't support
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,125, parsing
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,103,* @throws UnsupportedOperationException if parsing is not supported
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,127,ublic DateTimeParser toParser() throws UnsupportedOperationException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,105,public DateTimeParser toParser() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,130,eturn (DateTimeParser)f;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,108,return (DateTimeParser) f;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,132,"hrow new UnsupportedOperationException(""Parsing not supported"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,110,"throw new UnsupportedOperationException(""Parsing is not supported"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,136, Converts to a DateTimeFormatter that prints and parses using all the
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,137, appended elements. Subsequent changes to this builder do not affect the
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,138, returned formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,114,* Converts to a DateTimeFormatter that using all the appended elements.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,115,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,116,* Subsequent changes to this builder do not affect the returned formatter.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,117,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,118,* The returned formatter may not support both printing and parsing.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,119,* The methods {@link DateTimeFormatter#isPrinter()} and
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,120,* {@link DateTimeFormatter#isParser()} will help you determine the state
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,121,* of the formatter.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,140, @throws UnsupportedOperationException if any formatter element doesn't support
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,141, both printing and parsing
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,123,* @throws UnsupportedOperationException if neither printing nor parsing is supported
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,143,ublic DateTimeFormatter toFormatter() throws UnsupportedOperationException {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,125,public DateTimeFormatter toFormatter() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,145,f (isFormatter(f)) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,146,eturn (DateTimeFormatter)f;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,127,DateTimePrinter printer = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,128,if (isPrinter(f)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,129,printer = (DateTimePrinter) f;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,131,DateTimeParser parser = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,132,if (isParser(f)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,133,parser = (DateTimeParser) f;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,135,if (printer != null || parser != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,136,"return new DateTimeFormatter(printer, parser);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,146,* @return true if a printer can be built
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,156,* @return true if a parser can be built
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,166,* @return true if a formatter can be built
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,198,eturn append0(formatter);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,194,"return append0(formatter.getPrinter(), formatter.getParser());"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,294,ateTimeFormatter[] parsers = new DateTimeFormatter[] {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,295,"DateTimeFormatter) parser, null"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,290,"DateTimeParser[] parsers = new DateTimeParser[] {parser, null};"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,441,"eturn append0(new TextField(fieldType, iLocale, false));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,435,"return append0(new TextField(fieldType, false));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,456,"eturn append0(new TextField(fieldType, iLocale, true));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,450,"return append0(new TextField(fieldType, true));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,824,"eturn append0(new TimeZonePrinter( iLocale, false), null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,818,"return append0(new TimeZonePrinter(false), null);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,835,"eturn append0(new TimeZonePrinter( iLocale, true), null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,829,"return append0(new TimeZonePrinter(true), null);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,855,eturn append0(new TimeZoneOffsetFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,849,return append0(new TimeZoneOffset
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,923,& ((Composite)f).isParser();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,919,|| ((Composite)f).isParser();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,944,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,945,mplements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,940,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,958,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,959,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,960,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,953,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,954,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,955,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,964,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,965,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,966,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,959,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,960,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,961,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,970,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,965,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,974,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,969,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,978,"ublic String print(long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,979,"nt displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,980,eturn String.valueOf(iValue);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,983,ublic String print(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,984,eturn String.valueOf(iValue);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1017,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1018,mplements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1003,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1031,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1032,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1033,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1016,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1017,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1018,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1037,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1038,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1039,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1022,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1023,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1024,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1043,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1028,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1047,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1032,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1051,"ublic String print(long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1052,"nt displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1053,eturn iValue;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1056,ublic String print(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1057,eturn iValue;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1074,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1075,mplements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1050,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1160,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1161,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1162,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1135,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1136,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1137,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1171,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1172,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1173,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1146,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1147,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1148,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1182,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1157,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1194,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1169,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1223,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1224,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1225,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1198,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1199,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1200,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1234,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1235,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1236,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1209,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1210,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1211,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1245,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1220,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1257,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1232,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1272,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1273,mplements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1247,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1323,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1324,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1325,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1297,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1298,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1299,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1335,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1336,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1337,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1309,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1310,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1311,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1359,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1333,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1369,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1343,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1395,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1396,mplements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1369,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1399,rivate final Locale iLocale;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1402,"extField(DateTimeFieldType fieldType, Locale locale, boolean isShort) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1374,"TextField(DateTimeFieldType fieldType, boolean isShort) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1405,Locale = locale;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1413,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1414,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1415,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1384,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1385,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1386,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1417,"uf.append(print(instant, chrono, displayOffset, displayZone));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1388,"buf.append(print(instant, chrono, locale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1423,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1424,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1425,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1394,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1395,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1396,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1427,"ut.write(print(instant, chrono, displayOffset, displayZone));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1398,"out.write(print(instant, chrono, locale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1433,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1404,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1435,uf.append(print(partial));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1406,"buf.append(print(partial, locale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1441,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1412,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1443,ut.write(print(partial));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1414,"out.write(print(partial, locale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1449,"ublic String print(long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1450,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1420,"private String print(long instant, Chronology chrono, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1453,"eturn field.getAsShortText(instant, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1423,"return field.getAsShortText(instant, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1455,"eturn field.getAsText(instant, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1425,"return field.getAsText(instant, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1459,ublic String print(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1429,"private String print(ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1463,"eturn field.getAsShortText(partial, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1433,"return field.getAsShortText(partial, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1465,"eturn field.getAsText(partial, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1435,"return field.getAsText(partial, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1494,"ucket.saveField(iFieldType, text.substring(position, i), iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1464,Locale locale = bucket.getLocale();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1465,"bucket.saveField(iFieldType, text.substring(position, i), locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1502,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1503,mplements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1473,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1524,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1525,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1526,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1494,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1495,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1496,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1534,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1535,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1536,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1504,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1505,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1506,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1540,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1510,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1553,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1523,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1727,tatic class TimeZoneOffsetFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1728,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1729,mplements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1697,static class TimeZoneOffset
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1698,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1736,"imeZoneOffsetFormatter(String zeroOffsetText,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1705,"TimeZoneOffset(String zeroOffsetText,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1765,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1766,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1767,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1734,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1735,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1736,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1824,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1825,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1826,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1793,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1794,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1795,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1883,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1852,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1887,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1856,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2087,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2090,rivate final Locale iLocale;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2093,"imeZonePrinter(Locale locale, boolean shortFormat) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2060,TimeZonePrinter(boolean shortFormat) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2095,Locale = locale;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2103,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2104,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2105,"nt displayOffset, DateTimeZone displayZone) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2106,"uf.append(print(instant, chrono, displayOffset, displayZone));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2069,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2070,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2071,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2072,"buf.append(print(instant, displayZone, locale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2109,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2110,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2111,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2112,"ut.write(print(instant, chrono, displayOffset, displayZone));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2075,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2076,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2077,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2078,"out.write(print(instant, displayZone, locale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2115,"ublic String print(long instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2116,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2081,"private String print(long instant, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2121,"eturn displayZone.getShortName(instant, this.iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2086,"return displayZone.getShortName(instant, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2123,"eturn displayZone.getName(instant, this.iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2088,"return displayZone.getName(instant, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2127,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2092,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2131,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2096,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2138,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2139,mplements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2103,"implements DateTimePrinter, DateTimeParser {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2186,"rivate Composite(Composite base, DateTimeFormatter[] printers) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2150,"private Composite(Composite base, DateTimePrinter[] printers) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2197,"ublic void printTo(StringBuffer buf,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2198,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2199,"nt displayOffset, DateTimeZone displayZone) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2161,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2162,"StringBuffer buf, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2163,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2207,"lements[i].printTo(buf, instant, chrono, displayOffset, displayZone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2171,"elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2211,"ublic void printTo(Writer out,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2212,"ong instant, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2213,"nt displayOffset, DateTimeZone displayZone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2175,public void printTo(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2176,"Writer out, long instant, Chronology chrono,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2177,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2221,"lements[i].printTo(out, instant, chrono, displayOffset, displayZone);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2185,"elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2225,"ublic void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2189,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2233,"lements[i].printTo(buf, partial);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2197,"elements[i].printTo(buf, partial, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2237,"ublic void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2201,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2245,"lements[i].printTo(out, partial);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2209,"elements[i].printTo(out, partial, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2312,xtends BaseDateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,18,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,19,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,20,mport org.joda.time.MutableDateTime;
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,21,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,22,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,25, Defines an interface for parsing textual representations of datetimes.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,19,* Internal interface for parsing textual representations of datetimes.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,20,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,21,"* Application users will rarely use this class directly. Instead, you"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,22,* will use one of the factory classes to create a {@link DateTimeFormatter}.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,23,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,24,* The factory classes are:<br />
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,25,* - {@link DateTimeFormatterBuilder}<br />
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,26,* - {@link DateTimeFormat}<br />
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,27,* - {@link ISODateTimeFormat}<br />
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,36, Returns the expected maximum number of characters consumed. The actual
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,37, amount should rarely exceed this estimate.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,38,* Returns the expected maximum number of characters consumed.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,39,* The actual amount should rarely exceed this estimate.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,53, @param bucket  field are saved into this
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,54, @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,55,"* @param bucket  field are saved into this, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,56,"* @param text  the text to parse, not null"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,63," Parses a datetime from the given text, at the given position, saving the"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,64, result into the fields of the given ReadWritableInstant. If the parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,65," succeeds, the return value is the new text position. Note that the parse"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,66, may succeed without fully reading the text.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,67, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,68," If it fails, the return value is negative, but the instant may still be"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,69," modified. To determine the position where the parse failed, apply the"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,70, one's complement operator (~) on the return value.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,71, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,72, The parse will use the chronology of the instant.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,74, @param instant  an instant that will be modified
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,75, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,76, @param position  position to start parsing from
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,77," @return new position, negative value means parse failed -"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,78,  apply complement operator (~) to get position of failure
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,79, @throws IllegalArgumentException if the instant is null
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,80, @throws IllegalArgumentException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,82,"nt parseInto(ReadWritableInstant instant, String text, int position);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,86," Parses a datetime from the given text, returning the number of"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,87," milliseconds since the epoch, 1970-01-01T00:00:00Z."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,88, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,89," The parse will use the ISO chronology, and the default time zone."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,90, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,92, @param text  text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,93, @return parsed value expressed in milliseconds since the epoch
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,94, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,96,ong parseMillis(String text);
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,99," Parses a datetime from the given text, returning the number of"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,100," milliseconds since the epoch, 1970-01-01T00:00:00Z."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,101, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,102, The parse will use the given chronology and time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,103, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,105, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,106," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,107, @return parsed value expressed in milliseconds since the epoch
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,108, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,110,"ong parseMillis(String text, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,114," Parses a datetime from the given text, at the given position, returning"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,115," the number of milliseconds since the epoch, 1970-01-01T00:00:00Z."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,116," An initial millisecond value is passed in, which is relative to the epoch,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,117," local time, and which can default field values."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,118, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,119, The parse will use the ISO chronology and default time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,120, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,122, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,123," @param instant  initial value of instant, relative to the epoch, local time"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,124," @return parsed value expressed in milliseconds since the epoch, UTC"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,125, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,127,"ong parseMillis(String text, long instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,130," Parses a datetime from the given text, at the given position, returning"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,131," the number of milliseconds since the epoch, 1970-01-01T00:00:00Z."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,132," An initial millisecond value is passed in, which is relative to the epoch,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,133, which can default field values.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,134, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,135, The parse will use the given chronology and time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,136, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,138, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,139," @param instant  initial value of instant, relative to the epoch"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,140," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,141," @return parsed value expressed in milliseconds since the epoch, UTC"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,142, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,144,"ong parseMillis(String text, long instant, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,148," Parses a datetime from the given text, returning a new DateTime."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,149, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,150, The parse will use the ISO chronology and default time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,151, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,153, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,154, @return parsed value in a DateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,155, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,157,ateTime parseDateTime(String text);
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,160," Parses a datetime from the given text, returning a new DateTime."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,161, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,162, The parse will use the given chronology and time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,163, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,165, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,166," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,167, @return parsed value in a DateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,168, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,170,"ateTime parseDateTime(String text, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,173," Parses a datetime from the given text, returning a new DateTime, using"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,174, the given instant to supply field values that were not parsed.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,175, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,176, The parse will use the instant's chronology and time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,177, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,179, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,180, @param instant  initial value of DateTime
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,181, @return parsed value in a DateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,182, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,184,"ateTime parseDateTime(String text, ReadableInstant instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,188," Parses a datetime from the given text, returning a new MutableDateTime."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,189, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,190, The parse will use the ISO chronology and default time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,191, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,193, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,194, @return parsed value in a MutableDateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,195, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,197,utableDateTime parseMutableDateTime(String text);
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,200," Parses a datetime from the given text, returning a new MutableDateTime."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,201, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,202, The parse will use the given chronology and time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,203, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,205, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,206," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,207, @return parsed value in a MutableDateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,208, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,210,"utableDateTime parseMutableDateTime(String text, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,213," Parses a datetime from the given text, returning a new MutableDateTime,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,214, using the given instant to supply field values that were not parsed.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,215, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,216, The parse will use the instant's chronology and time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,217, If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,219, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,220, @param instant  initial value of DateTime
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,221, @return parsed value in a MutableDateTime object
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,222, @throws IllegalArgumentException if the text to parse is invalid
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,224,"utableDateTime parseMutableDateTime(String text, ReadableInstant instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,53,/** The chronology to use for parsing. */
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,57,ateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,58,nt iOffset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,58,private DateTimeZone iZone;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,59,private int iOffset;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,60,/** The locale to use for parsing. */
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,61,private Locale iLocale;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,74,* @param locale  the locale to use
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,72,"ublic DateTimeParserBucket(long instantLocal, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,76,"public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,81,iLocale = (locale == null ? Locale.getDefault() : locale);
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,95,* Returns the locale to be used during parsing.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,97,* @return the locale to use
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,99,public Locale getLocale() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,100,return iLocale;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,111," Returns the time zone offset used by computeMillis, unless"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,112, getZone doesn't return null.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,126,"* Returns the time zone offset in milliseconds used by computeMillis,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,127,* unless getZone doesn't return null.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,20,import java.util.Locale;
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,23,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,27, Defines an interface for creating textual representations of datetimes.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,27,* Internal interface for creating textual representations of datetimes.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,29, Instances of this interface are provided by the various builder classes.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,29,"* Application users will rarely use this class directly. Instead, you"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,30,* will use one of the factory classes to create a {@link DateTimeFormatter}.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,31,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,32,* The factory classes are:<br />
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,33,* - {@link DateTimeFormatterBuilder}<br />
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,34,* - {@link DateTimeFormat}<br />
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,35,* - {@link ISODateTimeFormat}<br />
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,41, Returns the expected maximum number of characters produced. The actual
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,42, amount should rarely exceed this estimate.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,47,* Returns the expected maximum number of characters produced.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,48,* The actual amount should rarely exceed this estimate.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,49," Prints a ReadableInstant, using the chronology supplied by the instant."
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,51, @param buf  formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,52," @param instant  instant to format, null means now"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,54,"oid printTo(StringBuffer buf, ReadableInstant instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,57," Prints a ReadableInstant, using the chronology supplied by the instant."
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,59, @param out  formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,60," @param instant  instant to format, null means now"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,62,"oid printTo(Writer out, ReadableInstant instant) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,66," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,67, using ISO chronology in the default DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,69, @param buf  formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,70, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,72,"oid printTo(StringBuffer buf, long instant);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,75," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,76, using ISO chronology in the default DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,78, @param out  formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,79, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,81,"oid printTo(Writer out, long instant) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,85," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,86, using ISO chronology in the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,88, @param buf  formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,89, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,90," @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,92,"oid printTo(StringBuffer buf, long instant, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,95," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,96, using ISO chronology in the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,98, @param out  formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,99, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,100," @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,102,"oid printTo(Writer out, long instant, DateTimeZone zone) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,109, @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,59,"* @param buf  formatted instant is appended to this buffer, not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,111," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,113,"oid printTo(StringBuffer buf, long instant, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,116," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,117, using the given Chronology.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,119, @param out  formatted instant is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,120, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,121," @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,123,"oid printTo(Writer out, long instant, Chronology chrono) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,127," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,128, using the given Chronology.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,130, @param buf  formatted instant is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,131, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,132," @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,61,"* @param chrono  the chronology to use, not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,135," @param displayZone  if a time zone is printed, force it to use this one"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,64,"* @param displayZone  the time zone to use, null means local time"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,65,"* @param locale  the locale to use, null means default locale"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,138,"nt displayOffset, DateTimeZone displayZone);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,68,"int displayOffset, DateTimeZone displayZone, Locale locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,146," @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,76,"* @param chrono  the chronology to use, not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,149," @param displayZone  if a time zone is printed, force it to use this one"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,79,"* @param displayZone  the time zone to use, null means local time"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,80,"* @param locale  the locale to use, null means default locale"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,152,"nt displayOffset, DateTimeZone displayZone) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,83,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,158, @param buf  formatted partial is appended to this buffer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,159, @param partial  partial to format
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,89,"* @param buf  formatted partial is appended to this buffer, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,90,"* @param partial  partial to format, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,91,"* @param locale  the locale to use, null means default locale"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,161,"oid printTo(StringBuffer buf, ReadablePartial partial);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,93,"void printTo(StringBuffer buf, ReadablePartial partial, Locale locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,166, @param out  formatted partial is written out
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,167, @param partial  partial to format
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,169,"oid printTo(Writer out, ReadablePartial partial) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,173," Prints a ReadableInstant to a new String, using the chronology of the instant."
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,175," @param instant  instant to format, null means now"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,176, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,178,tring print(ReadableInstant instant);
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,181," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,182, using ISO chronology in the default zone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,184, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,185, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,187,tring print(long instant);
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,190," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,191, using ISO chronology in the given zone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,193, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,194," @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,195, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,197,"tring print(long instant, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,200," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,201, using the given chronology.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,203, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,204, @param chrono  the chronoogy to use
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,205, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,207,"tring print(long instant, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,210," Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,211, using the given chronology.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,213, @param instant  millis since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,214, @param chrono  the chronoogy to use
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,215," @param displayOffset  if a time zone offset is printed, force it to use"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,216, this millisecond value
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,217," @param displayZone  if a time zone is printed, force it to use this one"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,218, @return the printed result
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,220,"tring print(long instant, Chronology chrono, int displayOffset, DateTimeZone displayZone);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,223, Prints a ReadablePartial to a new String.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,225, @param partial  partial to format
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,226, @return the printed result
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,98,"* @param out  formatted partial is written out, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,99,"* @param partial  partial to format, not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,100,"* @param locale  the locale to use, null means default locale"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,228,tring print(ReadablePartial partial);
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,102,"void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,51, Gets an instance of a the format provider.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,51,"* Deprecated, use static methods instead."
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,53, @return a format provider
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,53,"* @deprecated remove method call, as methods are now static"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,60,rivate transient DateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,60,private static DateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,118,wdtx; // basic week date time no millis
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,118,"bwdtx, // basic week date time no millis"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,120,rivate transient DateTimeParser
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,148,ublic DateTimeParser dateParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,147,public static DateTimeFormatter dateParser() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,157,toParser();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,156,.toFormatter();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,172,ublic DateTimeParser dateElementParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,171,public static DateTimeFormatter dateElementParser() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,181,appendOptional(dayOfMonthElement())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,180,.appendOptional(dayOfMonthElement().getParser())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,187,appendOptional(dayOfWeekElement())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,186,.appendOptional(dayOfWeekElement().getParser())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,194,toParser();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,193,.toFormatter();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,211,ublic DateTimeParser timeParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,210,public static DateTimeFormatter timeParser() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,219,appendOptional(offsetElement())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,220,toParser();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,218,.appendOptional(offsetElement().getParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,219,.toFormatter();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,235,ublic DateTimeParser timeElementParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,234,public static DateTimeFormatter timeElementParser() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,283,toParser();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,282,.toFormatter();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,305,ublic DateTimeParser dateTimeParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,304,public static DateTimeFormatter dateTimeParser() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,312,appendOptional(offsetElement())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,311,.appendOptional(offsetElement().getParser())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,330,toParser();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,329,.toFormatter();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,342,ublic DateTimeFormatter date() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,341,public static DateTimeFormatter date() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,354,ublic DateTimeFormatter time() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,353,public static DateTimeFormatter time() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,371,ublic DateTimeFormatter timeNoMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,370,public static DateTimeFormatter timeNoMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,389,ublic DateTimeFormatter tTime() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,388,public static DateTimeFormatter tTime() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,407,ublic DateTimeFormatter tTimeNoMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,406,public static DateTimeFormatter tTimeNoMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,424,ublic DateTimeFormatter dateTime() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,423,public static DateTimeFormatter dateTime() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,441,ublic DateTimeFormatter dateTimeNoMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,440,public static DateTimeFormatter dateTimeNoMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,457,ublic DateTimeFormatter weekDate() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,456,public static DateTimeFormatter weekDate() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,468,ublic DateTimeFormatter weekDateTime() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,467,public static DateTimeFormatter weekDateTime() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,485,ublic DateTimeFormatter weekDateTimeNoMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,484,public static DateTimeFormatter weekDateTimeNoMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,502,ublic DateTimeFormatter basicDate() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,501,public static DateTimeFormatter basicDate() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,521,ublic DateTimeFormatter basicTime() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,520,public static DateTimeFormatter basicTime() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,542,ublic DateTimeFormatter basicTimeNoMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,541,public static DateTimeFormatter basicTimeNoMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,562,ublic DateTimeFormatter basicTTime() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,561,public static DateTimeFormatter basicTTime() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,580,ublic DateTimeFormatter basicTTimeNoMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,579,public static DateTimeFormatter basicTTimeNoMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,597,ublic DateTimeFormatter basicDateTime() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,596,public static DateTimeFormatter basicDateTime() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,614,ublic DateTimeFormatter basicDateTimeNoMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,613,public static DateTimeFormatter basicDateTimeNoMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,630,ublic DateTimeFormatter basicWeekDate() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,629,public static DateTimeFormatter basicWeekDate() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,649,ublic DateTimeFormatter basicWeekDateTime() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,648,public static DateTimeFormatter basicWeekDateTime() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,666,ublic DateTimeFormatter basicWeekDateTimeNoMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,665,public static DateTimeFormatter basicWeekDateTimeNoMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,682,ublic DateTimeFormatter year() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,681,public static DateTimeFormatter year() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,692,ublic DateTimeFormatter yearMonth() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,691,public static DateTimeFormatter yearMonth() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,708,ublic DateTimeFormatter yearMonthDay() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,707,public static DateTimeFormatter yearMonthDay() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,724,ublic DateTimeFormatter weekyear() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,723,public static DateTimeFormatter weekyear() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,734,ublic DateTimeFormatter weekyearWeek() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,733,public static DateTimeFormatter weekyearWeek() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,750,ublic DateTimeFormatter weekyearWeekDay() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,749,public static DateTimeFormatter weekyearWeekDay() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,766,ublic DateTimeFormatter hour() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,765,public static DateTimeFormatter hour() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,776,ublic DateTimeFormatter hourMinute() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,775,public static DateTimeFormatter hourMinute() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,792,ublic DateTimeFormatter hourMinuteSecond() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,791,public static DateTimeFormatter hourMinuteSecond() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,810,ublic DateTimeFormatter hourMinuteSecondMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,809,public static DateTimeFormatter hourMinuteSecondMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,829,ublic DateTimeFormatter hourMinuteSecondFraction() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,828,public static DateTimeFormatter hourMinuteSecondFraction() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,847,ublic DateTimeFormatter dateHour() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,846,public static DateTimeFormatter dateHour() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,864,ublic DateTimeFormatter dateHourMinute() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,863,public static DateTimeFormatter dateHourMinute() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,882,ublic DateTimeFormatter dateHourMinuteSecond() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,881,public static DateTimeFormatter dateHourMinuteSecond() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,900,ublic DateTimeFormatter dateHourMinuteSecondMillis() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,899,public static DateTimeFormatter dateHourMinuteSecondMillis() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,918,ublic DateTimeFormatter dateHourMinuteSecondFraction() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,917,public static DateTimeFormatter dateHourMinuteSecondFraction() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,930,rivate DateTimeFormatter yearElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,929,private static DateTimeFormatter yearElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,939,rivate DateTimeFormatter monthElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,938,private static DateTimeFormatter monthElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,949,rivate DateTimeFormatter dayOfMonthElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,948,private static DateTimeFormatter dayOfMonthElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,959,rivate DateTimeFormatter weekyearElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,958,private static DateTimeFormatter weekyearElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,968,rivate DateTimeFormatter weekElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,967,private static DateTimeFormatter weekElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,978,rivate DateTimeFormatter dayOfWeekElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,977,private static DateTimeFormatter dayOfWeekElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,988,rivate DateTimeFormatter dayOfYearElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,987,private static DateTimeFormatter dayOfYearElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,998,rivate DateTimeFormatter literalTElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,997,private static DateTimeFormatter literalTElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1007,rivate DateTimeFormatter hourElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1006,private static DateTimeFormatter hourElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1016,rivate DateTimeFormatter minuteElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1015,private static DateTimeFormatter minuteElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1026,rivate DateTimeFormatter secondElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1025,private static DateTimeFormatter secondElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1036,rivate DateTimeFormatter millisElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1035,private static DateTimeFormatter millisElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1046,rivate DateTimeFormatter fractionElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1045,private static DateTimeFormatter fractionElement() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1058,rivate DateTimeFormatter offsetElement() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1057,private static DateTimeFormatter offsetElement() {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,42,mport org.joda.time.format.DateTimeParser;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,43,mport org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,44,mport org.joda.time.chrono.LenientChronology;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,43,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,44,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,45,import org.joda.time.format.ISODateTimeFormat;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,241,ateTimeParser p = ISODateTimeFormat.getInstance().hourMinuteSecondFraction();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,241,DateTimeFormatter p = ISODateTimeFormat.hourMinuteSecondFraction();
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,22,mport org.joda.time.format.DateTimeParser;
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,22,import org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,322,rotected void parse(DateTimeParser p) {
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,322,protected void parse(DateTimeFormatter p) {
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,346,arse(ISODateTimeFormat.getInstance().dateTimeParser());
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,346,parse(ISODateTimeFormat.dateTimeParser());
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,366,arse(ISODateTimeFormat.getInstance().dateParser());
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,366,parse(ISODateTimeFormat.dateParser());
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,370,arse(ISODateTimeFormat.getInstance().dateTimeParser());
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,370,parse(ISODateTimeFormat.dateTimeParser());
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,390,arse(ISODateTimeFormat.getInstance().timeParser());
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,390,parse(ISODateTimeFormat.timeParser());
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,395,arse(ISODateTimeFormat.getInstance().timeParser());
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,395,parse(ISODateTimeFormat.timeParser());
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,399,arse(ISODateTimeFormat.getInstance().dateTimeParser());
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,399,parse(ISODateTimeFormat.dateTimeParser());
True,JodaTime/src/test/org/joda/time/format/TestAll.java,JodaTime/src/test/org/joda/time/format/TestAll.java,38,suite.addTest(TestDateTimeFormatter.suite());
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,89,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""G"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,89,"DateTimeFormatter f = DateTimeFormat.forPattern(""G"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,102,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""C"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,102,"DateTimeFormatter f = DateTimeFormat.forPattern(""C"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,115,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""Y"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,115,"DateTimeFormatter f = DateTimeFormat.forPattern(""Y"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,128,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""y"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,128,"DateTimeFormatter f = DateTimeFormat.forPattern(""y"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,141,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""x"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,141,"DateTimeFormatter f = DateTimeFormat.forPattern(""x"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,154,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""w"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,154,"DateTimeFormatter f = DateTimeFormat.forPattern(""w"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,167,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""e"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,167,"DateTimeFormatter f = DateTimeFormat.forPattern(""e"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,180,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""E"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,180,"DateTimeFormatter f = DateTimeFormat.forPattern(""E"").withLocale(Locale.UK);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,189,f = f.withLocale(Locale.FRENCH);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,190,"assertEquals(dt.toString(), ""mer."", f.print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,193,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""EEEE"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,196,"DateTimeFormatter f = DateTimeFormat.forPattern(""EEEE"").withLocale(Locale.UK);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,205,f = f.withLocale(Locale.FRENCH);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,206,"assertEquals(dt.toString(), ""mercredi"", f.print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,206,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""D"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,212,"DateTimeFormatter f = DateTimeFormat.forPattern(""D"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,219,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""M"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,225,"DateTimeFormatter f = DateTimeFormat.forPattern(""M"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,232,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""MMM"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,238,"DateTimeFormatter f = DateTimeFormat.forPattern(""MMM"").withLocale(Locale.UK);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,247,f = f.withLocale(Locale.FRENCH);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,248,"assertEquals(dt.toString(), ""juin"", f.print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,245,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""MMMM"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,254,"DateTimeFormatter f = DateTimeFormat.forPattern(""MMMM"").withLocale(Locale.UK);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,263,f = f.withLocale(Locale.FRENCH);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,264,"assertEquals(dt.toString(), ""juin"", f.print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,258,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""d"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,270,"DateTimeFormatter f = DateTimeFormat.forPattern(""d"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,271,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""a"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,283,"DateTimeFormatter f = DateTimeFormat.forPattern(""a"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,284,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""K"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,296,"DateTimeFormatter f = DateTimeFormat.forPattern(""K"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,297,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""h"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,309,"DateTimeFormatter f = DateTimeFormat.forPattern(""h"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,310,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""H"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,322,"DateTimeFormatter f = DateTimeFormat.forPattern(""H"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,323,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""k"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,335,"DateTimeFormatter f = DateTimeFormat.forPattern(""k"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,336,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""m"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,348,"DateTimeFormatter f = DateTimeFormat.forPattern(""m"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,349,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""s"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,361,"DateTimeFormatter f = DateTimeFormat.forPattern(""s"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,362,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""SSS"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,374,"DateTimeFormatter f = DateTimeFormat.forPattern(""SSS"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,375,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""z"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,387,"DateTimeFormatter f = DateTimeFormat.forPattern(""z"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,388,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""Z"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,400,"DateTimeFormatter f = DateTimeFormat.forPattern(""Z"").withLocale(Locale.UK);"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,401,"ateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(""'Hello' ''"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,413,"DateTimeFormatter f = DateTimeFormat.forPattern(""'Hello' ''"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,16,package org.joda.time.format;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,18,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,19,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,21,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,22,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,24,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,25,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,26,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,27,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,28,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,29,import org.joda.time.MutableDateTime;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,32,* This class is a Junit unit test for DateTime Formating.
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,34,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,36,public class TestDateTimeFormatter extends TestCase {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,38,private static final DateTimeZone UTC = DateTimeZone.UTC;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,39,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,40,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,41,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,42,"private static final DateTimeZone NEWYORK = DateTimeZone.forID(""America/New_York"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,43,private static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,44,private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,45,private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,47,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,48,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,49,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,50,366 + 365;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,51,// 2002-06-09
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,52,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,53,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,55,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,56,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,57,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,58,private DateTimeFormatter f = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,59,private DateTimeFormatter g = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,61,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,62,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,65,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,66,return new TestSuite(TestDateTimeFormatter.class);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,69,public TestDateTimeFormatter(String name) {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,70,super(name);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,73,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,74,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,75,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,76,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,77,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,78,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,79,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,80,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,81,f = new DateTimeFormatterBuilder()
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,82,.appendDayOfWeekShortText()
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,83,.appendLiteral(' ')
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,84,.append(ISODateTimeFormat.dateTimeNoMillis())
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,85,.toFormatter();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,86,g = ISODateTimeFormat.dateTimeNoMillis();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,89,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,90,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,91,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,92,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,93,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,94,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,95,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,96,originalLocale = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,97,f = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,98,g = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,102,public void testPrint_simple() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,103,"DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,104,"assertEquals(""Wed 2004-06-09T10:20:30Z"", f.print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,106,dt = dt.withZone(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,107,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"", f.print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,109,dt = dt.withZone(NEWYORK);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,110,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"", f.print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,112,dt = dt.withChronology(BUDDHIST_PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,113,"assertEquals(""Wed 2547-06-09T12:20:30+02:00"", f.print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,117,public void testPrint_locale() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,118,"DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,119,"assertEquals(""mer. 2004-06-09T10:20:30Z"", f.withLocale(Locale.FRENCH).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,120,"assertEquals(""Wed 2004-06-09T10:20:30Z"", f.withLocale(null).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,124,public void testPrint_zone() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,125,"DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,126,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"", f.withZone(NEWYORK).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,127,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"", f.withZone(PARIS).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,128,"assertEquals(""Wed 2004-06-09T10:20:30Z"", f.withZone(null).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,130,dt = dt.withZone(NEWYORK);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,131,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"", f.withZone(NEWYORK).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,132,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"", f.withZone(PARIS).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,133,"assertEquals(""Wed 2004-06-09T10:20:30Z"", f.withZone(UTC).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,134,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"", f.withZone(null).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,138,public void testPrint_chrono() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,139,"DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,140,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"", f.withChronology(ISO_PARIS).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,141,"assertEquals(""Wed 2547-06-09T12:20:30+02:00"", f.withChronology(BUDDHIST_PARIS).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,142,"assertEquals(""Wed 2004-06-09T10:20:30Z"", f.withChronology(null).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,144,dt = dt.withChronology(BUDDHIST_PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,145,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"", f.withChronology(ISO_PARIS).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,146,"assertEquals(""Wed 2547-06-09T12:20:30+02:00"", f.withChronology(BUDDHIST_PARIS).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,147,"assertEquals(""Wed 2004-06-09T10:20:30Z"", f.withChronology(ISO_UTC).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,148,"assertEquals(""Wed 2547-06-09T12:20:30+02:00"", f.withChronology(null).print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,152,public void testPrint_chrono_and_zone() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,153,"DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,154,"assertEquals(""Wed 2004-06-09T10:20:30Z"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,155,f.withChronology(null).withZone(null).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,156,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,157,f.withChronology(ISO_PARIS).withZone(null).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,158,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,159,f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,160,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,161,f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,162,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,163,f.withChronology(null).withZone(NEWYORK).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,165,dt = dt.withChronology(ISO_PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,166,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,167,f.withChronology(null).withZone(null).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,168,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,169,f.withChronology(ISO_PARIS).withZone(null).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,170,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,171,f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,172,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,173,f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,174,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,175,f.withChronology(null).withZone(NEWYORK).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,177,dt = dt.withChronology(BUDDHIST_PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,178,"assertEquals(""Wed 2547-06-09T12:20:30+02:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,179,f.withChronology(null).withZone(null).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,180,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,181,f.withChronology(ISO_PARIS).withZone(null).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,182,"assertEquals(""Wed 2004-06-09T12:20:30+02:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,183,f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,184,"assertEquals(""Wed 2004-06-09T06:20:30-04:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,185,f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,186,"assertEquals(""Wed 2547-06-09T06:20:30-04:00"","
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,187,f.withChronology(null).withZone(NEWYORK).print(dt));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,190,public void testWithGetMethods() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,191,DateTimeFormatter f2 = f.withLocale(Locale.FRENCH);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,192,"assertEquals(Locale.FRENCH, f2.getLocale());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,193,"assertSame(f2, f2.withLocale(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,195,f2 = f.withZone(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,196,"assertEquals(PARIS, f2.getZone());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,197,"assertSame(f2, f2.withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,199,f2 = f.withChronology(BUDDHIST_PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,200,"assertEquals(BUDDHIST_PARIS, f2.getChronolgy());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,201,"assertSame(f2, f2.withChronology(BUDDHIST_PARIS));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,204,public void testWithGetOffsetParsedMethods() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,205,DateTimeFormatter f2 = f;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,206,"assertEquals(false, f2.isOffsetParsed());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,207,"assertEquals(null, f2.getZone());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,209,f2 = f.withOffsetParsed();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,210,"assertEquals(true, f2.isOffsetParsed());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,211,"assertEquals(null, f2.getZone());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,213,f2 = f2.withZone(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,214,"assertEquals(false, f2.isOffsetParsed());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,215,"assertEquals(PARIS, f2.getZone());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,217,f2 = f2.withOffsetParsed();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,218,"assertEquals(true, f2.isOffsetParsed());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,219,"assertEquals(null, f2.getZone());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,221,f2 = f.withOffsetParsed();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,222,"assertNotSame(f, f2);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,223,DateTimeFormatter f3 = f2.withOffsetParsed();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,224,"assertSame(f2, f3);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,227,public void testPrinterParserMethods() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,228,"DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,229,"assertEquals(f.getPrinter(), f2.getPrinter());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,230,"assertEquals(f.getParser(), f2.getParser());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,231,"assertEquals(true, f2.isPrinter());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,232,"assertEquals(true, f2.isParser());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,233,assertNotNull(f2.print(0L));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,234,"assertNotNull(f2.parseDateTime(""Thu 1970-01-01T00:00:00Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,236,"f2 = new DateTimeFormatter(f.getPrinter(), null);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,237,"assertEquals(f.getPrinter(), f2.getPrinter());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,238,"assertEquals(null, f2.getParser());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,239,"assertEquals(true, f2.isPrinter());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,240,"assertEquals(false, f2.isParser());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,241,assertNotNull(f2.print(0L));
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,242,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,243,"f2.parseDateTime(""Thu 1970-01-01T00:00:00Z"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,244,} catch (UnsupportedOperationException ex) {}
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,246,"f2 = new DateTimeFormatter(null, f.getParser());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,247,"assertEquals(null, f2.getPrinter());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,248,"assertEquals(f.getParser(), f2.getParser());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,249,"assertEquals(false, f2.isPrinter());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,250,"assertEquals(true, f2.isParser());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,251,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,252,f2.print(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,253,} catch (UnsupportedOperationException ex) {}
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,254,"assertNotNull(f2.parseDateTime(""Thu 1970-01-01T00:00:00Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,258,public void testParseDateTime_simple() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,259,DateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,260,"expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,261,"assertEquals(expect, g.parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,263,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,264,"g.parseDateTime(""ABC"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,265,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,268,public void testParseDateTime_zone() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,269,DateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,270,"expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,271,"assertEquals(expect, g.withZone(LONDON).parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,273,"expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,274,"assertEquals(expect, g.withZone(null).parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,276,"expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,277,"assertEquals(expect, g.withZone(PARIS).parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,280,public void testParseDateTime_zone2() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,281,DateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,282,"expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,283,"assertEquals(expect, g.withZone(LONDON).parseDateTime(""2004-06-09T06:20:30-04:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,285,"expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,286,"assertEquals(expect, g.withZone(null).parseDateTime(""2004-06-09T06:20:30-04:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,288,"expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,289,"assertEquals(expect, g.withZone(PARIS).parseDateTime(""2004-06-09T06:20:30-04:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,292,public void testParseDateTime_zone3() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,293,DateTimeFormatter h = new DateTimeFormatterBuilder()
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,294,.append(ISODateTimeFormat.date())
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,295,.appendLiteral('T')
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,296,.append(ISODateTimeFormat.timeElementParser())
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,297,.toFormatter();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,299,DateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,300,"expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,301,"assertEquals(expect, h.withZone(LONDON).parseDateTime(""2004-06-09T10:20:30""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,303,"expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,304,"assertEquals(expect, h.withZone(null).parseDateTime(""2004-06-09T10:20:30""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,306,"expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,307,"assertEquals(expect, h.withZone(PARIS).parseDateTime(""2004-06-09T10:20:30""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,310,public void testParseDateTime_simple_precedence() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,311,DateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,312,// use correct day of week
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,313,"expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,314,"assertEquals(expect, f.parseDateTime(""Wed 2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,316,// use wrong day of week
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,317,"expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,318,"// DayOfWeek takes precedence, because week < month in length"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,319,"assertEquals(expect, f.parseDateTime(""Mon 2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,322,public void testParseDateTime_offsetParsed() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,323,DateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,324,"expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,325,"assertEquals(expect, g.withOffsetParsed().parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,327,"expect = new DateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,328,"assertEquals(expect, g.withOffsetParsed().parseDateTime(""2004-06-09T06:20:30-04:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,330,"expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,331,"assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,332,"expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,333,"assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,336,public void testParseDateTime_chrono() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,337,DateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,338,"expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,339,"assertEquals(expect, g.withChronology(ISO_PARIS).parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,341,"expect = new DateTime(2004, 6, 9, 11, 20, 30, 0,LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,342,"assertEquals(expect, g.withChronology(null).parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,344,"expect = new DateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,345,"assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseDateTime(""2547-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,347,"expect = new DateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); // zone is +00:09:21 in 1451"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,348,"assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,352,public void testParseMutableDateTime_simple() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,353,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,354,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,355,"assertEquals(expect, g.parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,357,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,358,"g.parseMutableDateTime(""ABC"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,359,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,362,public void testParseMutableDateTime_zone() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,363,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,364,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,365,"assertEquals(expect, g.withZone(LONDON).parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,367,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,368,"assertEquals(expect, g.withZone(null).parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,370,"expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,371,"assertEquals(expect, g.withZone(PARIS).parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,374,public void testParseMutableDateTime_zone2() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,375,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,376,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,377,"assertEquals(expect, g.withZone(LONDON).parseMutableDateTime(""2004-06-09T06:20:30-04:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,379,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,380,"assertEquals(expect, g.withZone(null).parseMutableDateTime(""2004-06-09T06:20:30-04:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,382,"expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,383,"assertEquals(expect, g.withZone(PARIS).parseMutableDateTime(""2004-06-09T06:20:30-04:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,386,public void testParseMutableDateTime_zone3() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,387,DateTimeFormatter h = new DateTimeFormatterBuilder()
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,388,.append(ISODateTimeFormat.date())
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,389,.appendLiteral('T')
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,390,.append(ISODateTimeFormat.timeElementParser())
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,391,.toFormatter();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,393,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,394,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,395,"assertEquals(expect, h.withZone(LONDON).parseMutableDateTime(""2004-06-09T10:20:30""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,397,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,398,"assertEquals(expect, h.withZone(null).parseMutableDateTime(""2004-06-09T10:20:30""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,400,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,401,"assertEquals(expect, h.withZone(PARIS).parseMutableDateTime(""2004-06-09T10:20:30""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,404,public void testParseMutableDateTime_simple_precedence() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,405,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,406,// use correct day of week
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,407,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,408,"assertEquals(expect, f.parseDateTime(""Wed 2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,410,// use wrong day of week
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,411,"expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,412,"// DayOfWeek takes precedence, because week < month in length"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,413,"assertEquals(expect, f.parseDateTime(""Mon 2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,416,public void testParseMutableDateTime_offsetParsed() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,417,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,418,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,419,"assertEquals(expect, g.withOffsetParsed().parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,421,"expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,422,"assertEquals(expect, g.withOffsetParsed().parseMutableDateTime(""2004-06-09T06:20:30-04:00""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,424,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,425,"assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,426,"expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,427,"assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,430,public void testParseMutableDateTime_chrono() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,431,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,432,"expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,433,"assertEquals(expect, g.withChronology(ISO_PARIS).parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,435,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0,LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,436,"assertEquals(expect, g.withChronology(null).parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,438,"expect = new MutableDateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,439,"assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseMutableDateTime(""2547-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,441,"expect = new MutableDateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); // zone is +00:09:21 in 1451"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,442,"assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseMutableDateTime(""2004-06-09T10:20:30Z""));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,446,public void testParseInto_simple() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,447,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,448,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,449,MutableDateTime result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,450,"assertEquals(20, g.parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,451,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,453,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,454,"g.parseInto(null, ""2004-06-09T10:20:30Z"", 0);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,455,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,456,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,457,"g.parseInto(result, ""ABC"", 0);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,458,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,461,public void testParseInto_zone() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,462,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,463,MutableDateTime result = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,464,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,465,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,466,"assertEquals(20, g.withZone(LONDON).parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,467,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,469,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,470,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,471,"assertEquals(20, g.withZone(null).parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,472,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,474,"expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,475,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,476,"assertEquals(20, g.withZone(PARIS).parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,477,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,480,public void testParseInto_zone2() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,481,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,482,MutableDateTime result = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,483,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,484,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,485,"assertEquals(25, g.withZone(LONDON).parseInto(result, ""2004-06-09T06:20:30-04:00"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,486,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,488,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,489,"assertEquals(25, g.withZone(null).parseInto(result, ""2004-06-09T06:20:30-04:00"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,490,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,492,"expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,493,"assertEquals(25, g.withZone(PARIS).parseInto(result, ""2004-06-09T06:20:30-04:00"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,494,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,497,public void testParseInto_zone3() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,498,DateTimeFormatter h = new DateTimeFormatterBuilder()
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,499,.append(ISODateTimeFormat.date())
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,500,.appendLiteral('T')
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,501,.append(ISODateTimeFormat.timeElementParser())
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,502,.toFormatter();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,504,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,505,MutableDateTime result = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,506,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,507,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,508,"assertEquals(19, h.withZone(LONDON).parseInto(result, ""2004-06-09T10:20:30"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,509,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,511,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,512,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,513,"assertEquals(19, h.withZone(null).parseInto(result, ""2004-06-09T10:20:30"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,514,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,516,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,517,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,518,"assertEquals(19, h.withZone(PARIS).parseInto(result, ""2004-06-09T10:20:30"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,519,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,522,public void testParseInto_simple_precedence() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,523,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,524,MutableDateTime result = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,525,"expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,526,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,527,"// DayOfWeek takes precedence, because week < month in length"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,528,"assertEquals(24, f.parseInto(result, ""Mon 2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,529,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,532,public void testParseInto_offsetParsed() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,533,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,534,MutableDateTime result = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,535,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,536,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,537,"assertEquals(20, g.withOffsetParsed().parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,538,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,540,"expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,541,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,542,"assertEquals(25, g.withOffsetParsed().parseInto(result, ""2004-06-09T06:20:30-04:00"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,543,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,545,"expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,546,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,547,"assertEquals(20, g.withZone(PARIS).withOffsetParsed().parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,548,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,549,"expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,550,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,551,"assertEquals(20, g.withOffsetParsed().withZone(PARIS).parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,552,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,555,public void testParseInto_chrono() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,556,MutableDateTime expect = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,557,MutableDateTime result = null;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,558,"expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,559,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,560,"assertEquals(20, g.withChronology(ISO_PARIS).parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,561,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,563,"expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,564,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,565,"assertEquals(20, g.withChronology(null).parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,566,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,568,"expect = new MutableDateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,569,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,570,"assertEquals(20, g.withChronology(BUDDHIST_PARIS).parseInto(result, ""2547-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,571,"assertEquals(expect, result);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,573,"expect = new MutableDateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,574,result = new MutableDateTime(0L);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,575,"assertEquals(20, g.withChronology(BUDDHIST_PARIS).parseInto(result, ""2004-06-09T10:20:30Z"", 0));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,576,"assertEquals(expect, result);"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,88,"ssertEquals(""2004-06-09"", ISODateTimeFormat.getInstance().date().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,88,"assertEquals(""2004-06-09"", ISODateTimeFormat.date().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,91,"ssertEquals(""2004-06-09"", ISODateTimeFormat.getInstance().date().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,91,"assertEquals(""2004-06-09"", ISODateTimeFormat.date().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,94,"ssertEquals(""2004-06-09"", ISODateTimeFormat.getInstance().date().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,94,"assertEquals(""2004-06-09"", ISODateTimeFormat.date().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,99,"ssertEquals(""10:20:30.040Z"", ISODateTimeFormat.getInstance().time().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,99,"assertEquals(""10:20:30.040Z"", ISODateTimeFormat.time().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,102,"ssertEquals(""11:20:30.040+01:00"", ISODateTimeFormat.getInstance().time().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,102,"assertEquals(""11:20:30.040+01:00"", ISODateTimeFormat.time().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,105,"ssertEquals(""12:20:30.040+02:00"", ISODateTimeFormat.getInstance().time().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,105,"assertEquals(""12:20:30.040+02:00"", ISODateTimeFormat.time().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,110,"ssertEquals(""10:20:30Z"", ISODateTimeFormat.getInstance().timeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,110,"assertEquals(""10:20:30Z"", ISODateTimeFormat.timeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,113,"ssertEquals(""11:20:30+01:00"", ISODateTimeFormat.getInstance().timeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,113,"assertEquals(""11:20:30+01:00"", ISODateTimeFormat.timeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,116,"ssertEquals(""12:20:30+02:00"", ISODateTimeFormat.getInstance().timeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,116,"assertEquals(""12:20:30+02:00"", ISODateTimeFormat.timeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,121,"ssertEquals(""T10:20:30.040Z"", ISODateTimeFormat.getInstance().tTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,121,"assertEquals(""T10:20:30.040Z"", ISODateTimeFormat.tTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,124,"ssertEquals(""T11:20:30.040+01:00"", ISODateTimeFormat.getInstance().tTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,124,"assertEquals(""T11:20:30.040+01:00"", ISODateTimeFormat.tTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,127,"ssertEquals(""T12:20:30.040+02:00"", ISODateTimeFormat.getInstance().tTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,127,"assertEquals(""T12:20:30.040+02:00"", ISODateTimeFormat.tTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,132,"ssertEquals(""T10:20:30Z"", ISODateTimeFormat.getInstance().tTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,132,"assertEquals(""T10:20:30Z"", ISODateTimeFormat.tTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,135,"ssertEquals(""T11:20:30+01:00"", ISODateTimeFormat.getInstance().tTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,135,"assertEquals(""T11:20:30+01:00"", ISODateTimeFormat.tTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,138,"ssertEquals(""T12:20:30+02:00"", ISODateTimeFormat.getInstance().tTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,138,"assertEquals(""T12:20:30+02:00"", ISODateTimeFormat.tTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,143,"ssertEquals(""2004-06-09T10:20:30.040Z"", ISODateTimeFormat.getInstance().dateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,143,"assertEquals(""2004-06-09T10:20:30.040Z"", ISODateTimeFormat.dateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,146,"ssertEquals(""2004-06-09T11:20:30.040+01:00"", ISODateTimeFormat.getInstance().dateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,146,"assertEquals(""2004-06-09T11:20:30.040+01:00"", ISODateTimeFormat.dateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,149,"ssertEquals(""2004-06-09T12:20:30.040+02:00"", ISODateTimeFormat.getInstance().dateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,149,"assertEquals(""2004-06-09T12:20:30.040+02:00"", ISODateTimeFormat.dateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,155,"/        assertEquals(""2004-06-09T12:20:30.040+02:00"", ISODateTimeFormat.getInstance().dateTime().print(dt.getMillis(), PARIS));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,155,"//        assertEquals(""2004-06-09T12:20:30.040+02:00"", ISODateTimeFormat.dateTime().print(dt.getMillis(), PARIS));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,158,"/        assertEquals(""2288-02-19T10:20:30.040Z"", ISODateTimeFormat.getInstance().dateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,158,"//        assertEquals(""2288-02-19T10:20:30.040Z"", ISODateTimeFormat.dateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,166,"ssertEquals(""2004-06-09T10:20:30Z"", ISODateTimeFormat.getInstance().dateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,166,"assertEquals(""2004-06-09T10:20:30Z"", ISODateTimeFormat.dateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,169,"ssertEquals(""2004-06-09T11:20:30+01:00"", ISODateTimeFormat.getInstance().dateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,169,"assertEquals(""2004-06-09T11:20:30+01:00"", ISODateTimeFormat.dateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,172,"ssertEquals(""2004-06-09T12:20:30+02:00"", ISODateTimeFormat.getInstance().dateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,172,"assertEquals(""2004-06-09T12:20:30+02:00"", ISODateTimeFormat.dateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,177,"ssertEquals(""2004-W24-3"", ISODateTimeFormat.getInstance().weekDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,177,"assertEquals(""2004-W24-3"", ISODateTimeFormat.weekDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,180,"ssertEquals(""2004-W24-3"", ISODateTimeFormat.getInstance().weekDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,180,"assertEquals(""2004-W24-3"", ISODateTimeFormat.weekDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,183,"ssertEquals(""2004-W24-3"", ISODateTimeFormat.getInstance().weekDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,183,"assertEquals(""2004-W24-3"", ISODateTimeFormat.weekDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,188,"ssertEquals(""2004-W24-3T10:20:30.040Z"", ISODateTimeFormat.getInstance().weekDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,188,"assertEquals(""2004-W24-3T10:20:30.040Z"", ISODateTimeFormat.weekDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,191,"ssertEquals(""2004-W24-3T11:20:30.040+01:00"", ISODateTimeFormat.getInstance().weekDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,191,"assertEquals(""2004-W24-3T11:20:30.040+01:00"", ISODateTimeFormat.weekDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,194,"ssertEquals(""2004-W24-3T12:20:30.040+02:00"", ISODateTimeFormat.getInstance().weekDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,194,"assertEquals(""2004-W24-3T12:20:30.040+02:00"", ISODateTimeFormat.weekDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,199,"ssertEquals(""2004-W24-3T10:20:30Z"", ISODateTimeFormat.getInstance().weekDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,199,"assertEquals(""2004-W24-3T10:20:30Z"", ISODateTimeFormat.weekDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,202,"ssertEquals(""2004-W24-3T11:20:30+01:00"", ISODateTimeFormat.getInstance().weekDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,202,"assertEquals(""2004-W24-3T11:20:30+01:00"", ISODateTimeFormat.weekDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,205,"ssertEquals(""2004-W24-3T12:20:30+02:00"", ISODateTimeFormat.getInstance().weekDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,205,"assertEquals(""2004-W24-3T12:20:30+02:00"", ISODateTimeFormat.weekDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,211,"ssertEquals(""20040609"", ISODateTimeFormat.getInstance().basicDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,211,"assertEquals(""20040609"", ISODateTimeFormat.basicDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,214,"ssertEquals(""20040609"", ISODateTimeFormat.getInstance().basicDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,214,"assertEquals(""20040609"", ISODateTimeFormat.basicDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,217,"ssertEquals(""20040609"", ISODateTimeFormat.getInstance().basicDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,217,"assertEquals(""20040609"", ISODateTimeFormat.basicDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,222,"ssertEquals(""102030.040Z"", ISODateTimeFormat.getInstance().basicTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,222,"assertEquals(""102030.040Z"", ISODateTimeFormat.basicTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,225,"ssertEquals(""112030.040+0100"", ISODateTimeFormat.getInstance().basicTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,225,"assertEquals(""112030.040+0100"", ISODateTimeFormat.basicTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,228,"ssertEquals(""122030.040+0200"", ISODateTimeFormat.getInstance().basicTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,228,"assertEquals(""122030.040+0200"", ISODateTimeFormat.basicTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,233,"ssertEquals(""102030Z"", ISODateTimeFormat.getInstance().basicTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,233,"assertEquals(""102030Z"", ISODateTimeFormat.basicTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,236,"ssertEquals(""112030+0100"", ISODateTimeFormat.getInstance().basicTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,236,"assertEquals(""112030+0100"", ISODateTimeFormat.basicTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,239,"ssertEquals(""122030+0200"", ISODateTimeFormat.getInstance().basicTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,239,"assertEquals(""122030+0200"", ISODateTimeFormat.basicTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,244,"ssertEquals(""T102030.040Z"", ISODateTimeFormat.getInstance().basicTTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,244,"assertEquals(""T102030.040Z"", ISODateTimeFormat.basicTTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,247,"ssertEquals(""T112030.040+0100"", ISODateTimeFormat.getInstance().basicTTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,247,"assertEquals(""T112030.040+0100"", ISODateTimeFormat.basicTTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,250,"ssertEquals(""T122030.040+0200"", ISODateTimeFormat.getInstance().basicTTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,250,"assertEquals(""T122030.040+0200"", ISODateTimeFormat.basicTTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,255,"ssertEquals(""T102030Z"", ISODateTimeFormat.getInstance().basicTTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,255,"assertEquals(""T102030Z"", ISODateTimeFormat.basicTTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,258,"ssertEquals(""T112030+0100"", ISODateTimeFormat.getInstance().basicTTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,258,"assertEquals(""T112030+0100"", ISODateTimeFormat.basicTTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,261,"ssertEquals(""T122030+0200"", ISODateTimeFormat.getInstance().basicTTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,261,"assertEquals(""T122030+0200"", ISODateTimeFormat.basicTTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,266,"ssertEquals(""20040609T102030.040Z"", ISODateTimeFormat.getInstance().basicDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,266,"assertEquals(""20040609T102030.040Z"", ISODateTimeFormat.basicDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,269,"ssertEquals(""20040609T112030.040+0100"", ISODateTimeFormat.getInstance().basicDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,269,"assertEquals(""20040609T112030.040+0100"", ISODateTimeFormat.basicDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,272,"ssertEquals(""20040609T122030.040+0200"", ISODateTimeFormat.getInstance().basicDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,272,"assertEquals(""20040609T122030.040+0200"", ISODateTimeFormat.basicDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,277,"ssertEquals(""20040609T102030Z"", ISODateTimeFormat.getInstance().basicDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,277,"assertEquals(""20040609T102030Z"", ISODateTimeFormat.basicDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,280,"ssertEquals(""20040609T112030+0100"", ISODateTimeFormat.getInstance().basicDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,280,"assertEquals(""20040609T112030+0100"", ISODateTimeFormat.basicDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,283,"ssertEquals(""20040609T122030+0200"", ISODateTimeFormat.getInstance().basicDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,283,"assertEquals(""20040609T122030+0200"", ISODateTimeFormat.basicDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,288,"ssertEquals(""2004W243"", ISODateTimeFormat.getInstance().basicWeekDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,288,"assertEquals(""2004W243"", ISODateTimeFormat.basicWeekDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,291,"ssertEquals(""2004W243"", ISODateTimeFormat.getInstance().basicWeekDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,291,"assertEquals(""2004W243"", ISODateTimeFormat.basicWeekDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,294,"ssertEquals(""2004W243"", ISODateTimeFormat.getInstance().basicWeekDate().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,294,"assertEquals(""2004W243"", ISODateTimeFormat.basicWeekDate().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,299,"ssertEquals(""2004W243T102030.040Z"", ISODateTimeFormat.getInstance().basicWeekDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,299,"assertEquals(""2004W243T102030.040Z"", ISODateTimeFormat.basicWeekDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,302,"ssertEquals(""2004W243T112030.040+0100"", ISODateTimeFormat.getInstance().basicWeekDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,302,"assertEquals(""2004W243T112030.040+0100"", ISODateTimeFormat.basicWeekDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,305,"ssertEquals(""2004W243T122030.040+0200"", ISODateTimeFormat.getInstance().basicWeekDateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,305,"assertEquals(""2004W243T122030.040+0200"", ISODateTimeFormat.basicWeekDateTime().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,310,"ssertEquals(""2004W243T102030Z"", ISODateTimeFormat.getInstance().basicWeekDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,310,"assertEquals(""2004W243T102030Z"", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,313,"ssertEquals(""2004W243T112030+0100"", ISODateTimeFormat.getInstance().basicWeekDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,313,"assertEquals(""2004W243T112030+0100"", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,316,"ssertEquals(""2004W243T122030+0200"", ISODateTimeFormat.getInstance().basicWeekDateTimeNoMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,316,"assertEquals(""2004W243T122030+0200"", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,322,"ssertEquals(""2004"", ISODateTimeFormat.getInstance().year().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,322,"assertEquals(""2004"", ISODateTimeFormat.year().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,325,"ssertEquals(""2004"", ISODateTimeFormat.getInstance().year().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,325,"assertEquals(""2004"", ISODateTimeFormat.year().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,328,"ssertEquals(""2004"", ISODateTimeFormat.getInstance().year().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,328,"assertEquals(""2004"", ISODateTimeFormat.year().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,333,"ssertEquals(""2004-06"", ISODateTimeFormat.getInstance().yearMonth().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,333,"assertEquals(""2004-06"", ISODateTimeFormat.yearMonth().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,336,"ssertEquals(""2004-06"", ISODateTimeFormat.getInstance().yearMonth().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,336,"assertEquals(""2004-06"", ISODateTimeFormat.yearMonth().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,339,"ssertEquals(""2004-06"", ISODateTimeFormat.getInstance().yearMonth().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,339,"assertEquals(""2004-06"", ISODateTimeFormat.yearMonth().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,344,"ssertEquals(""2004-06-09"", ISODateTimeFormat.getInstance().yearMonthDay().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,344,"assertEquals(""2004-06-09"", ISODateTimeFormat.yearMonthDay().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,347,"ssertEquals(""2004-06-09"", ISODateTimeFormat.getInstance().yearMonthDay().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,347,"assertEquals(""2004-06-09"", ISODateTimeFormat.yearMonthDay().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,350,"ssertEquals(""2004-06-09"", ISODateTimeFormat.getInstance().yearMonthDay().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,350,"assertEquals(""2004-06-09"", ISODateTimeFormat.yearMonthDay().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,355,"ssertEquals(""2004"", ISODateTimeFormat.getInstance().weekyear().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,355,"assertEquals(""2004"", ISODateTimeFormat.weekyear().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,358,"ssertEquals(""2004"", ISODateTimeFormat.getInstance().weekyear().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,358,"assertEquals(""2004"", ISODateTimeFormat.weekyear().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,361,"ssertEquals(""2004"", ISODateTimeFormat.getInstance().weekyear().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,361,"assertEquals(""2004"", ISODateTimeFormat.weekyear().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,366,"ssertEquals(""2004-W24"", ISODateTimeFormat.getInstance().weekyearWeek().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,366,"assertEquals(""2004-W24"", ISODateTimeFormat.weekyearWeek().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,369,"ssertEquals(""2004-W24"", ISODateTimeFormat.getInstance().weekyearWeek().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,369,"assertEquals(""2004-W24"", ISODateTimeFormat.weekyearWeek().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,372,"ssertEquals(""2004-W24"", ISODateTimeFormat.getInstance().weekyearWeek().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,372,"assertEquals(""2004-W24"", ISODateTimeFormat.weekyearWeek().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,377,"ssertEquals(""2004-W24-3"", ISODateTimeFormat.getInstance().weekyearWeekDay().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,377,"assertEquals(""2004-W24-3"", ISODateTimeFormat.weekyearWeekDay().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,380,"ssertEquals(""2004-W24-3"", ISODateTimeFormat.getInstance().weekyearWeekDay().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,380,"assertEquals(""2004-W24-3"", ISODateTimeFormat.weekyearWeekDay().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,383,"ssertEquals(""2004-W24-3"", ISODateTimeFormat.getInstance().weekyearWeekDay().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,383,"assertEquals(""2004-W24-3"", ISODateTimeFormat.weekyearWeekDay().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,389,"ssertEquals(""10"", ISODateTimeFormat.getInstance().hour().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,389,"assertEquals(""10"", ISODateTimeFormat.hour().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,392,"ssertEquals(""11"", ISODateTimeFormat.getInstance().hour().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,392,"assertEquals(""11"", ISODateTimeFormat.hour().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,395,"ssertEquals(""12"", ISODateTimeFormat.getInstance().hour().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,395,"assertEquals(""12"", ISODateTimeFormat.hour().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,400,"ssertEquals(""10:20"", ISODateTimeFormat.getInstance().hourMinute().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,400,"assertEquals(""10:20"", ISODateTimeFormat.hourMinute().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,403,"ssertEquals(""11:20"", ISODateTimeFormat.getInstance().hourMinute().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,403,"assertEquals(""11:20"", ISODateTimeFormat.hourMinute().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,406,"ssertEquals(""12:20"", ISODateTimeFormat.getInstance().hourMinute().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,406,"assertEquals(""12:20"", ISODateTimeFormat.hourMinute().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,411,"ssertEquals(""10:20:30"", ISODateTimeFormat.getInstance().hourMinuteSecond().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,411,"assertEquals(""10:20:30"", ISODateTimeFormat.hourMinuteSecond().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,414,"ssertEquals(""11:20:30"", ISODateTimeFormat.getInstance().hourMinuteSecond().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,414,"assertEquals(""11:20:30"", ISODateTimeFormat.hourMinuteSecond().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,417,"ssertEquals(""12:20:30"", ISODateTimeFormat.getInstance().hourMinuteSecond().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,417,"assertEquals(""12:20:30"", ISODateTimeFormat.hourMinuteSecond().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,422,"ssertEquals(""10:20:30.040"", ISODateTimeFormat.getInstance().hourMinuteSecondMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,422,"assertEquals(""10:20:30.040"", ISODateTimeFormat.hourMinuteSecondMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,425,"ssertEquals(""11:20:30.040"", ISODateTimeFormat.getInstance().hourMinuteSecondMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,425,"assertEquals(""11:20:30.040"", ISODateTimeFormat.hourMinuteSecondMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,428,"ssertEquals(""12:20:30.040"", ISODateTimeFormat.getInstance().hourMinuteSecondMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,428,"assertEquals(""12:20:30.040"", ISODateTimeFormat.hourMinuteSecondMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,433,"ssertEquals(""10:20:30.040"", ISODateTimeFormat.getInstance().hourMinuteSecondFraction().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,433,"assertEquals(""10:20:30.040"", ISODateTimeFormat.hourMinuteSecondFraction().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,436,"ssertEquals(""11:20:30.040"", ISODateTimeFormat.getInstance().hourMinuteSecondFraction().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,436,"assertEquals(""11:20:30.040"", ISODateTimeFormat.hourMinuteSecondFraction().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,439,"ssertEquals(""12:20:30.040"", ISODateTimeFormat.getInstance().hourMinuteSecondFraction().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,439,"assertEquals(""12:20:30.040"", ISODateTimeFormat.hourMinuteSecondFraction().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,445,"ssertEquals(""2004-06-09T10"", ISODateTimeFormat.getInstance().dateHour().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,445,"assertEquals(""2004-06-09T10"", ISODateTimeFormat.dateHour().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,448,"ssertEquals(""2004-06-09T11"", ISODateTimeFormat.getInstance().dateHour().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,448,"assertEquals(""2004-06-09T11"", ISODateTimeFormat.dateHour().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,451,"ssertEquals(""2004-06-09T12"", ISODateTimeFormat.getInstance().dateHour().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,451,"assertEquals(""2004-06-09T12"", ISODateTimeFormat.dateHour().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,456,"ssertEquals(""2004-06-09T10:20"", ISODateTimeFormat.getInstance().dateHourMinute().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,456,"assertEquals(""2004-06-09T10:20"", ISODateTimeFormat.dateHourMinute().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,459,"ssertEquals(""2004-06-09T11:20"", ISODateTimeFormat.getInstance().dateHourMinute().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,459,"assertEquals(""2004-06-09T11:20"", ISODateTimeFormat.dateHourMinute().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,462,"ssertEquals(""2004-06-09T12:20"", ISODateTimeFormat.getInstance().dateHourMinute().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,462,"assertEquals(""2004-06-09T12:20"", ISODateTimeFormat.dateHourMinute().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,467,"ssertEquals(""2004-06-09T10:20:30"", ISODateTimeFormat.getInstance().dateHourMinuteSecond().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,467,"assertEquals(""2004-06-09T10:20:30"", ISODateTimeFormat.dateHourMinuteSecond().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,470,"ssertEquals(""2004-06-09T11:20:30"", ISODateTimeFormat.getInstance().dateHourMinuteSecond().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,470,"assertEquals(""2004-06-09T11:20:30"", ISODateTimeFormat.dateHourMinuteSecond().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,473,"ssertEquals(""2004-06-09T12:20:30"", ISODateTimeFormat.getInstance().dateHourMinuteSecond().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,473,"assertEquals(""2004-06-09T12:20:30"", ISODateTimeFormat.dateHourMinuteSecond().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,478,"ssertEquals(""2004-06-09T10:20:30.040"", ISODateTimeFormat.getInstance().dateHourMinuteSecondMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,478,"assertEquals(""2004-06-09T10:20:30.040"", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,481,"ssertEquals(""2004-06-09T11:20:30.040"", ISODateTimeFormat.getInstance().dateHourMinuteSecondMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,481,"assertEquals(""2004-06-09T11:20:30.040"", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,484,"ssertEquals(""2004-06-09T12:20:30.040"", ISODateTimeFormat.getInstance().dateHourMinuteSecondMillis().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,484,"assertEquals(""2004-06-09T12:20:30.040"", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,489,"ssertEquals(""2004-06-09T10:20:30.040"", ISODateTimeFormat.getInstance().dateHourMinuteSecondFraction().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,489,"assertEquals(""2004-06-09T10:20:30.040"", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,492,"ssertEquals(""2004-06-09T11:20:30.040"", ISODateTimeFormat.getInstance().dateHourMinuteSecondFraction().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,492,"assertEquals(""2004-06-09T11:20:30.040"", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,495,"ssertEquals(""2004-06-09T12:20:30.040"", ISODateTimeFormat.getInstance().dateHourMinuteSecondFraction().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,495,"assertEquals(""2004-06-09T12:20:30.040"", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt));"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,89,"ateTimePrinter printer = DateTimeFormat.getInstance().forPattern(""MMMM"");"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,89,"DateTimeFormatter printer = DateTimeFormat.forPattern(""MMMM"");"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,100,"ateTimePrinter printer = DateTimeFormat.getInstance().forPattern(""MMMM"");"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,100,"DateTimeFormatter printer = DateTimeFormat.forPattern(""MMMM"");"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,111,"ateTimePrinter printer = DateTimeFormat.getInstance().forPattern(""MMMM"");"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,111,"DateTimeFormatter printer = DateTimeFormat.forPattern(""MMMM"");"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,125,"ateTimePrinter printer = DateTimeFormat.getInstance().forPattern(""EEEE"");"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,125,"DateTimeFormatter printer = DateTimeFormat.forPattern(""EEEE"");"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,138,"ateTimePrinter printer = DateTimeFormat.getInstance().forPattern(""a"");"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,138,"DateTimeFormatter printer = DateTimeFormat.forPattern(""a"");"

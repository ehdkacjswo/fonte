is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,514, @param instant  the partial instant to validate
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,514,* @param partial  the partial instant to validate
False,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,518,"ublic abstract void validate(ReadablePartial instant, int[] values);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,518,"public abstract void validate(ReadablePartial partial, int[] values);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,521,* Gets the values of a partial from an instant.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,523,* @param partial  the partial instant to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,524,* @param instant  the instant to query
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,525,* @return the values of this partial extracted from the instant
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,527,"public abstract int[] get(ReadablePartial partial, long instant);"
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,530,* Sets the partial into the instant.
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,532,* @param partial  the partial instant to use
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,533,* @param instant  the instant to update
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,534,* @return the updated instant
True,JodaTime/src/java/org/joda/time/Chronology.java,JodaTime/src/java/org/joda/time/Chronology.java,536,"public abstract long set(ReadablePartial partial, long instant);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,544, Gets a copy of this datetime with the specified duration added.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,544,* Gets a copy of this datetime with the value of the specified field increased.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,546," If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,546,"* If the addition is zero or the field is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,547,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,548,"* An alternative to this method is to use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,549,* <pre>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,550,* DateTime added = dt.hourOfDay().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,551,* </pre>
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,548, @param durationToAdd  the duration to add to this one
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,549, @return a copy of this datetime with the duration added
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,553,"* @param fieldType  the field type to add to, null ignored"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,554,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,555,* @return a copy of this datetime with the field updated
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,552,ublic DateTime withDurationAdded(long durationToAdd) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,553,"eturn withDurationAdded(durationToAdd, 1);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,558,"public DateTime withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,559,if (fieldType == null || amount == 0) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,560,return this;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,562,"long instant = fieldType.getField(getChronology()).add(getMillis(), amount);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,563,return withMillis(instant);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,592,"* @param scalar  the amount of times to add, such as -1 to subtract once"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,584,ublic DateTime withDurationAdded(ReadableDuration durationToAdd) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,585,f (durationToAdd == null) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,596,"public DateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,597,if (durationToAdd == null || scalar == 0) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,588,"eturn withDurationAdded(durationToAdd.getMillis(), 1);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,600,"return withDurationAdded(durationToAdd.getMillis(), scalar);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,592, Gets a copy of this datetime with the specified duration added.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,604,* Gets a copy of this datetime with the specified period added.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,607,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,608,"* To add or subtract on a single field use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,609,* <pre>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,610,* DateTime added = dt.hourOfDay().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,611,* </pre>
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,596," @param durationToAdd  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,613,"* @param period  the period to add to this one, null means zero"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,598, @return a copy of this datetime with the duration added
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,615,* @return a copy of this datetime with the period added
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,601,"ublic DateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,602,f (durationToAdd == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,618,"public DateTime withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,619,if (period == null || scalar == 0) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,605,"eturn withDurationAdded(durationToAdd.getMillis(), scalar);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,622,"long instant = getChronology().add(getMillis(), period, scalar);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,623,return withMillis(instant);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,610, Gets a copy of this datetime with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,628,* Gets a copy of this datetime with the specified duration added.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,612," If the addition is zero or the field is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,630,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,632,* @param duration  the duration to add to this one
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,633,* @return a copy of this datetime with the duration added
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,634,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,636,public DateTime plus(long duration) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,637,"return withDurationAdded(duration, 1);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,641,* Gets a copy of this datetime with the specified duration added.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,614," An alternative to this method is to use the properties, for example:"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,615, <pre>
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,616, DateTime added = dt.hourOfDay().addToCopy(6);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,617, </pre>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,643,"* If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,619," @param fieldType  the field type to add to, null ignored"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,620, @param amount  the amount to add
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,621, @return a copy of this datetime with the field updated
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,645,"* @param durationToAdd  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,646,* @return a copy of this datetime with the duration added
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,624,"ublic DateTime withFieldAdded(DurationFieldType fieldType, int amount) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,625,f (fieldType == null || amount == 0) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,626,eturn this;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,628,"ong instant = fieldType.getField(getChronology()).add(getMillis(), amount);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,629,eturn withMillis(instant);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,649,public DateTime plus(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,650,"return withDurationAdded(duration, 1);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,635," If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,656,"* If the amount is zero or null, then <code>this</code> is returned."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,637," To add or subtract on a single field use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,658,* The following two lines are identical in effect:
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,661,* DateTime added = dt.plus(Period.hours(6));
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,642," @param periodToAdd  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,664,"* @param period  the duration to add to this one, null means zero"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,646,ublic DateTime withPeriodAdded(ReadablePeriod periodToAdd) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,647,"eturn withPeriodAdded(periodToAdd, 1);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,668,public DateTime plus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,669,"return withPeriodAdded(period, 1);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,651, Gets a copy of this datetime with the specified period added.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,674,* Gets a copy of this datetime with the specified duration take away.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,653," If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,676,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,678,* @param duration  the duration to reduce this instant by
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,679,* @return a copy of this datetime with the duration taken away
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,680,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,682,public DateTime minus(long duration) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,683,"return withDurationAdded(duration, -1);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,687,* Gets a copy of this datetime with the specified duration take away.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,655," To add or subtract on a single field use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,689,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,691,* @param duration  the duration to reduce this instant by
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,692,* @return a copy of this datetime with the duration taken away
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,693,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,695,public DateTime minus(ReadableDuration durationToAdd) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,696,"return withDurationAdded(durationToAdd, -1);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,700,* Gets a copy of this datetime with the specified period take away.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,701,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,702,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,703,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,704,* The following two lines are identical in effect:
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,657, DateTime added = dt.hourOfDay().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,706,* DateTime added = dt.hourOfDay().addToCopy(-6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,707,* DateTime added = dt.minus(Period.hours(6));
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,660," @param period  the period to add to this one, null means zero"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,661," @param scalar  the amount of times to add, such as -1 to subtract once"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,662, @return a copy of this datetime with the period added
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,710,* @param period  the period to reduce this instant by
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,711,* @return a copy of this datetime with the period taken away
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,665,"ublic DateTime withPeriodAdded(ReadablePeriod period, int scalar) {"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,666,f (period == null || scalar == 0) {
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,667,eturn this;
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,669,"ong instant = getChronology().add(getMillis(), period, scalar);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,670,eturn withMillis(instant);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,714,public DateTime minus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,715,"return withPeriodAdded(period, -1);"
False,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,57, Defines an partial time that does not support every datetime field.
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,57,"* Defines a partial time that does not support every datetime field, and is"
True,JodaTime/src/java/org/joda/time/ReadablePartial.java,JodaTime/src/java/org/joda/time/ReadablePartial.java,58,* thus a local time.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,223,"eturn resolve(baseInstant, chrono);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,223,"return chrono.set(this, baseInstant);"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,241,"ong resolved = resolve(instantMillis, chrono);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,241,"long resolved = chrono.set(this, instantMillis);"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,260,hronology chrono = baseInstant.getChronology();
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,261,"ong resolved = resolve(baseInstant.getMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,260,Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,261,"long resolved = chrono.set(this, baseInstant.getMillis());"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,266, Resolve this partial into the base millis using the specified chronology.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,268, @param baseInstant  the base millisecond instant
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,269, @param chrono  the chronology
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,270, @return the new resolved millis
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,272,"rotected long resolve(long baseInstant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,273,ong millis = baseInstant;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,274,"or (int i = 0, isize = size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,275,"illis = getField(i, chrono).set(millis, getValue(i));"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,277,eturn millis;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,146,"Values = initValues(instant, chronology);"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,146,"iValues = chronology.get(this, instant);"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,166,"Values = initValues(millis, chronology);"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,166,"iValues = chronology.get(this, millis);"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,192,"Values = initValues(millis, chronology);"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,192,"iValues = chronology.get(this, millis);"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,231, Initialize the array of values.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,232, The field and value arrays must match.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,234, @param instant  the instant to use
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,235, @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,237,"rotected int[] initValues(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,238,nt[] values = new int[size()];
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,239,or (int i = 0; i < values.length; i++) {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,240,"alues[i] = getField(i, chrono).get(instant);"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,242,eturn values;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,248,* Gets the values of a partial from an instant.
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,250,* @param partial  the partial instant to use
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,251,* @param instant  the instant to query
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,252,* @return the values of this partial extracted from the instant
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,254,"public int[] get(ReadablePartial partial, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,255,int size = partial.size();
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,256,int[] values = new int[size];
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,257,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,258,values[i] = partial.getFieldType(i).getField(this).get(instant);
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,260,return values;
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,264,* Sets the partial into the instant.
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,266,* @param partial  the partial instant to use
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,267,* @param instant  the instant to update
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,268,* @return the updated instant
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,270,"public long set(ReadablePartial partial, long instant) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,271,"for (int i = 0, isize = partial.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,272,"instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));"
True,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseChronology.java,274,return instant;

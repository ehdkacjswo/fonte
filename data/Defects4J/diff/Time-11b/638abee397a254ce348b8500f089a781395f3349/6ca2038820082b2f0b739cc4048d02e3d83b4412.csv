is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,20,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,21,mport org.joda.time.DurationFieldType;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,22,mport org.joda.time.field.PreciseDurationField;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,53,** Singleton fixed length month field used to build the monthOfYear field. */
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,54,tatic final DurationField MONTH_DURATION_FIELD;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,55,tatic {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,56,/ init after other static fields
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,57,ONTH_DURATION_FIELD =  new PreciseDurationField
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,58,"DurationFieldType.months(), MILLIS_PER_MONTH);"
True,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,131,int getMonthOfYear(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java,132,return (getDayOfYear(millis) - 1) / MONTH_LENGTH + 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,2,  Copyright 2001-2005 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,6,  You may obtain a copy of the License at
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,14,  limitations under the License.
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,16,ackage org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,18,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,19,mport org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,20,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,21,mport org.joda.time.field.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,24, Month of year implementation where the month length is fixed.
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,26, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,27, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,28," @since 1.2, refactored from CopticMonthOfYearDateTimeField"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,30,inal class BasicFixedMonthOfYearDateTimeField extends PreciseDurationDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,32,** Serialization version. */
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,33,rivate static final long serialVersionUID = 7741038885247700323L;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,35,** The base chronology. */
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,36,rivate final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,38,** The fixed month length. */
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,39,rivate static final int MONTH_LENGTH = 30;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,42, Restricted constructor.
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,44, @param chronology  the base chronology
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,45, @param months  the months duration field
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,47,"asicFixedMonthOfYearDateTimeField(BaseGJChronology chronology, DurationField months) {"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,48,"uper(DateTimeFieldType.monthOfYear(), months);"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,49,Chronology = chronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,52,ublic int get(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,53,eturn (iChronology.getDayOfYear(instant) - 1) / MONTH_LENGTH + 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,56,"ublic long set(long instant, int value) {"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,57,"nstant = super.set(instant, value);"
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,58,f (value == 13) {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,59,nt day = iChronology.getDayOfYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,60,f (day < MONTH_LENGTH) {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,61,"/ Move back a few days to the end of the 13th ""month""."
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,62,nstant -= (long)DateTimeConstants.MILLIS_PER_DAY * day;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,65,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,68,ublic DurationField getRangeDurationField() {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,69,eturn iChronology.years();
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,72,ublic boolean isLeap(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,73,eturn get(instant) > 12 && iChronology.isLeapYear(iChronology.getYear(instant));
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,76,ublic int getLeapAmount(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,77,eturn isLeap(instant) ? 1 : 0;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,80,ublic DurationField getLeapDurationField() {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,81,eturn iChronology.days();
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,84,ublic int getMinimumValue() {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,85,eturn 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,88,ublic int getMaximumValue() {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,89,eturn 13;
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,93, Serialization singleton
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,95,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,96,eturn iChronology.monthOfYear();
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,26, <p>
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,27, This implementation assumes 12 months at present.
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,32, @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,30,"* @since 1.2, refactored from GJMonthOfYearDateTimeField"
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,40,rivate static final int MAX = DateTimeConstants.DECEMBER;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,40,private final int iMax;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,51,iMax = iChronology.getMaxMonth();
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,113,earToUse = thisYear + (monthToUse / MAX);
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,114,onthToUse = (monthToUse % MAX) + 1;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,112,yearToUse = thisYear + (monthToUse / iMax);
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,113,monthToUse = (monthToUse % iMax) + 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,116,earToUse = thisYear + (monthToUse / MAX) - 1;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,115,yearToUse = thisYear + (monthToUse / iMax) - 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,118,nt remMonthToUse = monthToUse % MAX;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,117,int remMonthToUse = monthToUse % iMax;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,121,emMonthToUse = MAX;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,120,remMonthToUse = iMax;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,123,onthToUse = MAX - remMonthToUse + 1;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,122,monthToUse = iMax - remMonthToUse + 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,165,earToUse = thisYear + (monthToUse / MAX);
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,166,onthToUse = (monthToUse % MAX) + 1;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,164,yearToUse = thisYear + (monthToUse / iMax);
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,165,monthToUse = (monthToUse % iMax) + 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,168,earToUse = thisYear + (monthToUse / MAX) - 1;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,167,yearToUse = thisYear + (monthToUse / iMax) - 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,170,nt remMonthToUse = (int)(monthToUse % MAX);
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,169,int remMonthToUse = (int)(monthToUse % iMax);
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,172,emMonthToUse = MAX;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,171,remMonthToUse = iMax;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,174,onthToUse = MAX - remMonthToUse + 1;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,173,monthToUse = iMax - remMonthToUse + 1;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,212,"eturn set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, MAX));"
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,211,"return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));"
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,226,ong difference = (minuendYear - subtrahendYear) * 12L + minuendMonth - subtrahendMonth;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,225,long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,272,"ieldUtils.verifyValueBounds(this, month, MIN, MAX);"
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,271,"FieldUtils.verifyValueBounds(this, month, MIN, iMax);"
False,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,318,eturn MAX;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,317,return iMax;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,264,ields.months = MONTH_DURATION_FIELD;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,265,"ields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,266,"ields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,264,"fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,265,fields.months = fields.monthOfYear.getDurationField();
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,264,ields.months = MONTH_DURATION_FIELD;
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,265,"ields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);"
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,266,"ields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,264,"fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,265,fields.months = fields.monthOfYear.getDurationField();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,30,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,31,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,32,import org.joda.time.DateTime.Property;
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,38,rivate static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,41,private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,43,private static long SKIP = 1 * MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,53,y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,58,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,64,KIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,69,SKIP = 1 * MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,185,"ssertEquals(true, CopticChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,190,"assertEquals(false, CopticChronology.getInstanceUTC().months().isPrecise());"
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,356,"ssertEquals(1720, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,363,"assertEquals(1720, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,364,Property fld = dt.year();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,365,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,366,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,367,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,368,"assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,371,fld = dt.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,372,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,373,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,374,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,375,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,376,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,377,"assertEquals(13, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,378,"assertEquals(13, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,379,"assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,380,"assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,383,fld = dt.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,384,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,385,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,386,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,387,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,388,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,389,"assertEquals(30, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,390,"assertEquals(30, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,391,"assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,394,fld = dt.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,395,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,396,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,397,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,398,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,399,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,400,"assertEquals(7, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,401,"assertEquals(7, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,402,"assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,405,fld = dt.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,406,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,407,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,408,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,409,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,410,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,411,"assertEquals(365, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,412,"assertEquals(366, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,413,"assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,434,public void testDurationYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,435,// Leap 1723
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,436,"DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,437,"DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,438,"DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,439,"DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,440,"DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,442,DurationField fld = dt20.year().getDurationField();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,443,"assertEquals(COPTIC_UTC.years(), fld);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,444,"assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,445,"assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,446,"assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,447,"assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,449,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,450,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,452,"assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,453,"assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,454,"assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,455,"assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,457,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,458,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,460,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis());"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,462,"assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,463,"assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,464,"assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,465,"assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,466,"assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,467,"assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,468,"assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,469,"assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,470,"assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,471,"assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,472,"assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,473,"assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,475,"assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,476,"assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,477,"assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,478,"assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,480,"assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,481,"assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,482,"assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,483,"assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,486,public void testDurationMonth() {
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,487,// Leap 1723
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,488,"DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,489,"DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,490,"DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,491,"DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,493,DurationField fld = dt11.monthOfYear().getDurationField();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,494,"assertEquals(COPTIC_UTC.months(), fld);"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,495,"assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,496,"assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,497,"assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,498,"assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,500,"assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,501,"assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,502,"assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,504,"assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,505,"assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,506,"assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,507,"assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,509,"assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,510,"assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,511,"assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,513,"assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,514,"assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,515,"assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,516,"assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,517,"assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,518,"assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,519,"assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,520,"assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,521,"assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,522,"assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,523,"assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,524,"assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,526,"assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,527,"assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,528,"assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,530,"assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,531,"assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L));"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,532,"assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,30,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,31,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,32,import org.joda.time.DateTime.Property;
False,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,38,rivate static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,41,private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,43,private static long SKIP = 1 * MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,53,y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,58,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,64,KIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,69,SKIP = 1 * MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,185,"ssertEquals(true, EthiopicChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,190,"assertEquals(false, EthiopicChronology.getInstanceUTC().months().isPrecise());"
False,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,353,ystem.out.println(dt);
False,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,357,"ssertEquals(1996, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,363,"assertEquals(1996, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,364,Property fld = dt.year();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,365,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,366,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,367,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,368,"assertEquals(new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,371,fld = dt.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,372,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,373,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,374,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,375,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,376,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,377,"assertEquals(13, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,378,"assertEquals(13, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,379,"assertEquals(new DateTime(1997, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(4));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,380,"assertEquals(new DateTime(1996, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addWrapFieldToCopy(4));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,383,fld = dt.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,384,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,385,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,386,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,387,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,388,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,389,"assertEquals(30, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,390,"assertEquals(30, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,391,"assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,394,fld = dt.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,395,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,396,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,397,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,398,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,399,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,400,"assertEquals(7, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,401,"assertEquals(7, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,402,"assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,405,fld = dt.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,406,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,407,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,408,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,409,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,410,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,411,"assertEquals(365, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,412,"assertEquals(366, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,413,"assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,434,public void testDurationYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,435,"// Leap 1999, NotLeap 1996,97,98"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,436,"DateTime dt96 = new DateTime(1996, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,437,"DateTime dt97 = new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,438,"DateTime dt98 = new DateTime(1998, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,439,"DateTime dt99 = new DateTime(1999, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,440,"DateTime dt00 = new DateTime(2000, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,442,DurationField fld = dt96.year().getDurationField();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,443,"assertEquals(ETHIOPIC_UTC.years(), fld);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,444,"assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,445,"assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,446,"assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,447,"assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,449,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,450,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,452,"assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,453,"assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,454,"assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,455,"assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,457,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,458,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,460,"assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,462,"assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,463,"assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,464,"assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,465,"assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,466,"assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,467,"assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,468,"assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,469,"assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,470,"assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,471,"assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,472,"assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,473,"assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt96.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,475,"assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,476,"assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,477,"assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,478,"assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,480,"assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,481,"assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,482,"assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,483,"assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,486,public void testDurationMonth() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,487,"// Leap 1999, NotLeap 1996,97,98"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,488,"DateTime dt11 = new DateTime(1999, 11, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,489,"DateTime dt12 = new DateTime(1999, 12, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,490,"DateTime dt13 = new DateTime(1999, 13, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,491,"DateTime dt01 = new DateTime(2000, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,493,DurationField fld = dt11.monthOfYear().getDurationField();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,494,"assertEquals(ETHIOPIC_UTC.months(), fld);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,495,"assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,496,"assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,497,"assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,498,"assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,500,"assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,501,"assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,502,"assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,504,"assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,505,"assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,506,"assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,507,"assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,509,"assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,510,"assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,511,"assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,513,"assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,514,"assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,515,"assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,516,"assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,517,"assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,518,"assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,519,"assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,520,"assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,521,"assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,522,"assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,523,"assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,524,"assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,526,"assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,527,"assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,528,"assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,530,"assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,531,"assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,532,"assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L));"

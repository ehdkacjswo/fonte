is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,640,ong millis = getMillis();
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,641,illis += originalZone.getOffset(millis);
False,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,642,illis -= newZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/AbstractDateTime.java,JodaTime/src/java/org/joda/time/AbstractDateTime.java,640,"long millis = originalZone.getMillisKeepLocal(newZone, getMillis());"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,353," @param newDateTimeZone  the new time zone, null means default"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,353,"* @param newZone  the new time zone, null means default"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,356,ublic final DateMidnight withZoneRetainFields(DateTimeZone newDateTimeZone) {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,357,ewDateTimeZone = (newDateTimeZone == null ? DateTimeZone.getDefault() : newDateTimeZone);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,356,public final DateMidnight withZoneRetainFields(DateTimeZone newZone) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,357,newZone = (newZone == null ? DateTimeZone.getDefault() : newZone);
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,360,f (newDateTimeZone == originalZone) {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,360,if (newZone == originalZone) {
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,364,ong originalMillis = getMillis();
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,365,ong newMillis = originalMillis + originalZone.getOffset(originalMillis);
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,366,ewMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,368,"eturn new DateMidnight(newMillis, getChronology().withZone(newDateTimeZone));"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,364,"long millis = originalZone.getMillisKeepLocal(newZone, getMillis());"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,365,"return new DateMidnight(millis, getChronology().withZone(newZone));"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,388,ong millis = getMillis();
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,389,illis += originalZone.getOffset(millis);
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,390,illis -= newZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,388,"long millis = originalZone.getMillisKeepLocal(newZone, getMillis());"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,716, @return the millisceond offset to subtract from local time to get UTC time.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,716,* @return the millisecond offset to subtract from local time to get UTC time
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,723,* Gets the millisecond instant in another zone keeping the same local time.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,724,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,725,* The conversion is performed by converting the specified UTC millis to local
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,726,"* millis in this zone, then converting back to UTC millis in the new zone."
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,728,"* @param newZone  the new zone, null means default"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,729,* @param oldInstant  the UTC millisecond instant to convert
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,730,* @return the UTC millisecond instant with the same local time in the new zone
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,732,"public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,733,if (newZone == null) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,734,newZone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,736,long instantLocal = oldInstant + getOffset(oldInstant);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,737,return instantLocal - newZone.getOffsetFromLocal(instantLocal);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,628,public void testGetMillisKeepLocal() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,629,long millisLondon = TEST_TIME_SUMMER;
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,630,long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,632,"assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,633,"assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,634,"assertEquals(millisLondon, PARIS.getMillisKeepLocal(null, millisParis));"

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,226,* Get this object as a DateTime using ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,227,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,228,* This method returns a DateTime object in the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,229,"* This differs from the similarly named method on DateTime, DateMidnight"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,230,* or MutableDateTime which retains the time zone. The difference is
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,231,"* because Instant really represents a time <i>without</i> a zone,"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,232,* thus calling this method we really have no zone to 'retain' and
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,233,* hence expect to switch to the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,234,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,235,* This method definition preserves compatability with earlier versions
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,236,* of Joda-Time.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,238,* @return a DateTime using the same millis
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,240,public DateTime toDateTime() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,241,"return new DateTime(getMillis(), ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,245,* Get this object as a DateTime using ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,246,* This method is identical to <code>toDateTime()</code>.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,247,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,248,* This method returns a DateTime object in the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,249,"* This differs from the similarly named method on DateTime, DateMidnight"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,250,* or MutableDateTime which retains the time zone. The difference is
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,251,"* because Instant really represents a time <i>without</i> a zone,"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,252,* thus calling this method we really have no zone to 'retain' and
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,253,* hence expect to switch to the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,254,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,255,* This method definition preserves compatability with earlier versions
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,256,* of Joda-Time.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,258,* @return a DateTime using the same millis with ISOChronology
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,259,* @deprecated Use toDateTime() as it is identical
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,261,public DateTime toDateTimeISO() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,262,return toDateTime();
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,266,* Get this object as a MutableDateTime using ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,267,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,268,* This method returns a MutableDateTime object in the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,269,"* This differs from the similarly named method on DateTime, DateMidnight"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,270,* or MutableDateTime which retains the time zone. The difference is
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,271,"* because Instant really represents a time <i>without</i> a zone,"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,272,* thus calling this method we really have no zone to 'retain' and
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,273,* hence expect to switch to the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,274,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,275,* This method definition preserves compatability with earlier versions
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,276,* of Joda-Time.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,278,* @return a MutableDateTime using the same millis
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,280,public MutableDateTime toMutableDateTime() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,281,"return new MutableDateTime(getMillis(), ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,285,* Get this object as a MutableDateTime using ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,286,* This method is identical to <code>toMutableDateTime()</code>.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,287,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,288,* This method returns a MutableDateTime object in the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,289,"* This differs from the similarly named method on DateTime, DateMidnight"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,290,* or MutableDateTime which retains the time zone. The difference is
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,291,"* because Instant really represents a time <i>without</i> a zone,"
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,292,* thus calling this method we really have no zone to 'retain' and
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,293,* hence expect to switch to the default zone.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,294,* <p>
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,295,* This method definition preserves compatability with earlier versions
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,296,* of Joda-Time.
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,298,* @return a MutableDateTime using the same millis with ISOChronology
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,299,* @deprecated Use toMutableDateTime() as it is identical
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,301,public MutableDateTime toMutableDateTimeISO() {
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,302,return toMutableDateTime();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,139," Get this object as a DateTime, in the same zone."
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,139,* Get this object as a DateTime in the same zone.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,148," Get this object as a DateTime using ISOChronology, in the same zone."
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,148,* Get this object as a DateTime using ISOChronology in the same zone.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,184," Get this object as a MutableDateTime, in the same zone."
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,184,* Get this object as a MutableDateTime in the same zone.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,193," Get this object as a MutableDateTime using ISOChronology, in the same zone."
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,193,* Get this object as a MutableDateTime using ISOChronology in the same zone.
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,437,ublic void testToDateMidnight() {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,438,ateMidnight test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,437,public void testToDateTime() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,438,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,441,"ssertEquals(TEST_TIME1_LONDON, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,442,"ssertEquals(LONDON, result.getZone());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,441,"assertEquals(TEST_TIME1_PARIS, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,442,"assertEquals(PARIS, result.getZone());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,446,ateMidnight test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,446,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,451,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,451,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,507,ateMidnight test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,507,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,510,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,510,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,514,ateMidnight test = new DateMidnight(TEST_TIME1_UTC);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,514,"DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,519,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,519,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,569,ateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,569,"DateTime test = new DateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,572,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,572,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,576,ateTime test = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,576,"DateTime test = new DateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,581,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,581,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,398,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,406,"ssertEquals(ISOChronology.getInstanceUTC(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,407,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,446,"ssertEquals(ISOChronology.getInstanceUTC(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,447,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,455,"ssertEquals(ISOChronology.getInstanceUTC(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,456,"assertEquals(ISOChronology.getInstance(), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,442,utableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,442,"MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,445,"ssertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,445,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,449,utableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,449,"MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,454,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,454,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,509,utableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,509,"MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,513,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,513,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,517,utableDateTime test = new MutableDateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,517,"MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,522,"ssertEquals(ISOChronology.getInstance(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,522,"assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());"

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,407,* Instructs the printer to emit a field value as a fixed-width decimal
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,408,"* number (smaller numbers will be left-padded with zeros), and the parser"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,409,* to expect an unsigned decimal number with the same fixed width.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,411,* @param fieldType type of field to append
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,412,"* @param numDigits the exact number of digits to parse or print, except if"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,413,* printed value requires more digits
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,414,* @return this DateTimeFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,415,* @throws IllegalArgumentException if field type is null or if <code>numDigits <= 0</code>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,416,* @since 1.4
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,418,public DateTimeFormatterBuilder appendFixedDecimal(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,419,"DateTimeFieldType fieldType, int numDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,420,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,421,"throw new IllegalArgumentException(""Field type must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,423,if (numDigits <= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,424,"throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,426,"return append0(new FixedNumber(fieldType, numDigits, false));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,459,* Instructs the printer to emit a field value as a fixed-width decimal
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,460,"* number (smaller numbers will be left-padded with zeros), and the parser"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,461,* to expect an signed decimal number with the same fixed width.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,463,* @param fieldType type of field to append
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,464,"* @param numDigits the exact number of digits to parse or print, except if"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,465,* printed value requires more digits
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,466,* @return this DateTimeFormatterBuilder
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,467,* @throws IllegalArgumentException if field type is null or if <code>numDigits <= 0</code>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,468,* @since 1.4
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,470,public DateTimeFormatterBuilder appendFixedSignedDecimal(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,471,"DateTimeFieldType fieldType, int numDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,472,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,473,"throw new IllegalArgumentException(""Field type must not be null"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,475,if (numDigits <= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,476,"throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,478,"return append0(new FixedNumber(fieldType, numDigits, true));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1376,static class FixedNumber extends PaddedNumber {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1378,"protected FixedNumber(DateTimeFieldType fieldType, int numDigits, boolean signed) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1379,"super(fieldType, numDigits, signed, numDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1382,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1383,"int newPos = super.parseInto(bucket, text, position);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1384,if (newPos < 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1385,return newPos;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1387,int expectedPos = position + iMaxParsedDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1388,if (newPos != expectedPos) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1389,if (iSigned) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1390,char c = text.charAt(position);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1391,if (c == '-' || c == '+') {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1392,expectedPos++;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1395,if (newPos > expectedPos) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1396,// The failure is at the position of the first extra digit.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1397,return ~(expectedPos + 1);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1398,} else if (newPos < expectedPos) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1399,// The failure is at the position where the next digit should be.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1400,return ~newPos;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1403,return newPos;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,21,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,22,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,28,* @author Brian S O'Neill
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,130,public void test_appendFixedDecimal() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,131,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,132,"bld.appendFixedDecimal(DateTimeFieldType.year(), 4);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,133,DateTimeFormatter f = bld.toFormatter();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,135,"assertEquals(""2007"", f.print(new DateTime(""2007-01-01"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,136,"assertEquals(""0123"", f.print(new DateTime(""123-01-01"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,137,"assertEquals(""0001"", f.print(new DateTime(""1-2-3"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,138,"assertEquals(""99999"", f.print(new DateTime(""99999-2-3"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,139,"assertEquals(""-0099"", f.print(new DateTime(""-99-2-3"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,140,"assertEquals(""0000"", f.print(new DateTime(""0-2-3"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,142,"assertEquals(2001, f.parseDateTime(""2001"").getYear());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,143,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,144,"f.parseDateTime(""-2001"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,145,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,146,} catch (IllegalArgumentException e) {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,148,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,149,"f.parseDateTime(""200"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,150,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,151,} catch (IllegalArgumentException e) {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,153,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,154,"f.parseDateTime(""20016"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,155,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,156,} catch (IllegalArgumentException e) {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,159,bld = new DateTimeFormatterBuilder();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,160,"bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,161,bld.appendLiteral(':');
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,162,"bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,163,bld.appendLiteral(':');
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,164,"bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,165,f = bld.toFormatter();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,167,"assertEquals(""01:02:34"", f.print(new DateTime(""T1:2:34"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,169,"DateTime dt = f.parseDateTime(""01:02:34"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,170,"assertEquals(1, dt.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,171,"assertEquals(2, dt.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,172,"assertEquals(34, dt.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,174,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,175,"f.parseDateTime(""0145:02:34"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,176,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,177,} catch (IllegalArgumentException e) {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,179,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,180,"f.parseDateTime(""01:0:34"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,181,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,182,} catch (IllegalArgumentException e) {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,187,public void test_appendFixedSignedDecimal() {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,188,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,189,"bld.appendFixedSignedDecimal(DateTimeFieldType.year(), 4);"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,190,DateTimeFormatter f = bld.toFormatter();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,192,"assertEquals(""2007"", f.print(new DateTime(""2007-01-01"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,193,"assertEquals(""0123"", f.print(new DateTime(""123-01-01"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,194,"assertEquals(""0001"", f.print(new DateTime(""1-2-3"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,195,"assertEquals(""99999"", f.print(new DateTime(""99999-2-3"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,196,"assertEquals(""-0099"", f.print(new DateTime(""-99-2-3"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,197,"assertEquals(""0000"", f.print(new DateTime(""0-2-3"")));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,199,"assertEquals(2001, f.parseDateTime(""2001"").getYear());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,200,"assertEquals(-2001, f.parseDateTime(""-2001"").getYear());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,201,"assertEquals(2001, f.parseDateTime(""+2001"").getYear());"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,202,try {
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,203,"f.parseDateTime(""20016"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,204,fail();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java,205,} catch (IllegalArgumentException e) {

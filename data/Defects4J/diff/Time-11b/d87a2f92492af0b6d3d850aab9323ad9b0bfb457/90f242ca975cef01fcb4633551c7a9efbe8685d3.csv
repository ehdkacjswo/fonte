is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,56,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,88,// setup a time zone other than one tester is in
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,89,"TimeZone.setDefault(TimeZone.getTimeZone(""Asia/Seoul""));"
True,JodaTime/src/test/org/joda/time/TestAllPackages.java,JodaTime/src/test/org/joda/time/TestAllPackages.java,91,// run tests
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,344,"ssertEquals(LONDON, DateTimeUtils.getZone(null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,344,"assertEquals(DateTimeZone.getDefault(), DateTimeUtils.getZone(null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,87,rivate static final Chronology JULIAN = JulianChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,88,rivate static final Chronology ISO = ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,87,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,88,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,104,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,105,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,106,ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,80,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,81,rivate static final Chronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,81,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,82,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,98,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,99,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,100,ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,79,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,80,rivate static final Chronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,80,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,81,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,97,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,98,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,99,ISO = ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,60,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,61,import java.util.TimeZone;
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,91,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,92,rivate static final Chronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,94,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,95,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,98,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,99,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,100,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,116,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,117,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,118,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,119,"DateTimeZone.setDefault(DateTimeZone.getInstance(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,120,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,121,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,123,ISO = ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,124,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,129,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,130,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,131,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,132,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,133,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,134,originalLocale = null;
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,82,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,83,rivate static final Chronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,83,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,84,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,100,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,101,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,102,ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,83,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,84,rivate static final Chronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,84,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,85,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,101,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,102,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,103,ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,82,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,83,rivate static final Chronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,83,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,84,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,100,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,101,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,102,ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,84,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,85,rivate static final Chronology JULIAN = JulianChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,86,rivate static final Chronology BUDDHIST = BuddhistChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,85,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,86,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,87,private static Chronology BUDDHIST;
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,103,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,104,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,105,ISO = ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,106,BUDDHIST = BuddhistChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,81,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,82,rivate static final Chronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,82,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,83,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,99,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,100,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,101,ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,89,rivate static final Chronology ISO = ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,90,rivate static final Chronology JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,92,private static Chronology ISO;
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,93,private static Chronology JULIAN;
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,116,JULIAN = JulianChronology.getInstance();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,117,ISO = ISOChronology.getInstance();

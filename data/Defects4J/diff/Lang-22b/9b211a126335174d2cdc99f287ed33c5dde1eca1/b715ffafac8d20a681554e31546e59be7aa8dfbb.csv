is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,36,ublic final class Fraction extends Number implements Comparable {
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,36,public final class Fraction extends Number implements Comparable<Fraction> {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,870, @param object  the object to compare to
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,870,* @param other  the object to compare to
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,875,ublic int compareTo(Object object) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,876,raction other = (Fraction) object;
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,875,public int compareTo(Fraction other) {
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,122,nt compare = ((Comparable) num1).compareTo(num2);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,122,int compare = ((Comparable<Number>) num1).compareTo(num2);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,179,nt compareMin = ((Comparable) min).compareTo(number);
False,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,180,nt compareMax = ((Comparable) max).compareTo(number);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,179,int compareMin = ((Comparable<Number>) min).compareTo(number);
True,src/java/org/apache/commons/lang/math/NumberRange.java,src/java/org/apache/commons/lang/math/NumberRange.java,180,int compareMax = ((Comparable<Number>) max).compareTo(number);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,461,or (int i = 0; i < tokens.length; i++) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,462,ist.add(tokens[i]);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,461,for (String element : tokens) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,462,list.add(element);
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1267,ry {
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1268,1.compareTo(new Object());
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1269,"ail(""expecting ClassCastException"");"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,1270, catch (ClassCastException ex) {}

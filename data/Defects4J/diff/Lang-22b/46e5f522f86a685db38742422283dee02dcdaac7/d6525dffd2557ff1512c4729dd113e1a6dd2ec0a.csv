is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,19,mport java.util.Map;
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,20,import java.util.Arrays;
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,21,mport java.util.EnumSet;
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,22,import java.util.List;
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,23,import java.util.Map;
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,31, <p>This constructor is public to permit tools that require a JavaBean
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,32, instance to operate.</p>
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,33,* This constructor is public to permit tools that require a JavaBean
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,34,* instance to operate.
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,38, <p>Gets the <code>Map</code> of <code>enums</code> by name.</p>
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,40,* Gets the <code>Map</code> of <code>enums</code> by name.
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,41,* <p>
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,42,* This method is useful when you need a map of enums by name.
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,40, @param enumClass the class of the <code>enum</code> to get
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,41, @return the enum Map
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,44,"* @param enumClass  the class of the <code>enum</code> to get, not null"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,45,"* @return the modifiable map of enum names to enums, never null"
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,43,"ublic static <E extends Enum<E>> Map<String, Enum<E>> getEnumMap(Class<E> enumClass) {"
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,44,"ap<String, Enum<E>> map = new LinkedHashMap<String, Enum<E>>();"
False,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,46,or (E e: EnumSet.allOf(enumClass)) {
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,47,"public static <E extends Enum<E>> Map<String, E> getEnumMap(Class<E> enumClass) {"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,48,"Map<String, E> map = new LinkedHashMap<String, E>();"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,49,for (E e: enumClass.getEnumConstants()) {
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,56,* Gets the <code>List</code> of <code>enums</code>.
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,57,* <p>
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,58,* This method is useful when you need a list of enums rather than an array.
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,60,"* @param enumClass  the class of the <code>enum</code> to get, not null"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,61,"* @return the modifiable list of enums, never null"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,63,public static <E extends Enum<E>> List<E> getEnumList(Class<E> enumClass) {
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,64,return new ArrayList<E>(Arrays.asList(enumClass.getEnumConstants()));
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,68,* Checks if the specified name is a valid <code>enum</code> for the class.
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,69,* <p>
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,70,* This method differs from {@link Enum#valueOf} in that checks if the name is
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,71,* a valid enum without needing to catch the exception.
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,73,"* @param enumClass  the class of the <code>enum</code> to get, not null"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,74,"* @return the map of enum names to enums, never null"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,76,"public static <E extends Enum<E>> boolean isEnum(Class<E> enumClass, String enumName) {"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,77,try {
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,78,"Enum.valueOf(enumClass, enumName);"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,79,return true;
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,80,} catch (IllegalArgumentException ex) {
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,81,return false;
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,86,"* Gets the <code>enum</code> for the class, returning <code>null</code> if not found."
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,87,* <p>
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,88,* This method differs from {@link Enum#valueOf} in that it does not throw an exception
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,89,* for an invalid enum name.
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,91,"* @param enumClass  the class of the <code>enum</code> to get, not null"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,92,"* @return the map of enum names to enums, never null"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,94,"public static <E extends Enum<E>> E getEnum(Class<E> enumClass, String enumName) {"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,95,try {
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,96,"return Enum.valueOf(enumClass, enumName);"
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,97,} catch (IllegalArgumentException ex) {
True,src/java/org/apache/commons/lang/EnumUtils.java,src/java/org/apache/commons/lang/EnumUtils.java,98,return null;
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,21,import java.util.List;
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,22,import java.util.Map;
False,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,38,ublic void testGetEnumMap() {
False,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,39,tring toString = EnumUtils.getEnumMap(Traffic.class).toString();
False,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,40,"ssertEquals( ""getEnumMap not created correctly"", ""{RED=RED, AMBER=AMBER, GREEN=GREEN}"", toString);"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,41,public void test_getEnumMap() {
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,42,"Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class);"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,43,"assertEquals( ""getEnumMap not created correctly"", ""{RED=RED, AMBER=AMBER, GREEN=GREEN}"", test.toString());"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,44,"assertEquals(3, test.size());"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,45,"assertEquals(true, test.containsKey(""RED""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,46,"assertEquals(Traffic.RED, test.get(""RED""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,47,"assertEquals(true, test.containsKey(""AMBER""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,48,"assertEquals(Traffic.AMBER, test.get(""AMBER""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,49,"assertEquals(true, test.containsKey(""GREEN""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,50,"assertEquals(Traffic.GREEN, test.get(""GREEN""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,51,"assertEquals(false, test.containsKey(""PURPLE""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,54,public void test_getEnumList() {
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,55,List<Traffic> test = EnumUtils.getEnumList(Traffic.class);
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,56,"assertEquals(3, test.size());"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,57,"assertEquals(Traffic.RED, test.get(0));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,58,"assertEquals(Traffic.AMBER, test.get(1));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,59,"assertEquals(Traffic.GREEN, test.get(2));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,62,public void test_isEnum() {
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,63,"assertEquals(true, EnumUtils.isEnum(Traffic.class, ""RED""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,64,"assertEquals(true, EnumUtils.isEnum(Traffic.class, ""AMBER""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,65,"assertEquals(true, EnumUtils.isEnum(Traffic.class, ""GREEN""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,66,"assertEquals(false, EnumUtils.isEnum(Traffic.class, ""PURPLE""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,69,public void test_getEnum() {
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,70,"assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, ""RED""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,71,"assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, ""AMBER""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,72,"assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, ""GREEN""));"
True,src/test/org/apache/commons/lang/EnumUtilsTest.java,src/test/org/apache/commons/lang/EnumUtilsTest.java,73,"assertEquals(null, EnumUtils.getEnum(Traffic.class, ""PURPLE""));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,17,package org.apache.commons.lang.concurrent;
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,20,* <p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,21,* This class provides a generic implementation of the lazy initialization
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,22,* pattern.
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,23,* </p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,24,* <p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,25,* Sometimes an application has to deal with an object only under certain
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,26,"* circumstances, e.g. when the user selects a specific menu item or if a"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,27,* special event is received. If the creation of the object is costly or the
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,28,"* consumption of memory or other system resources is significant, it may make"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,29,* sense to defer the creation of this object until it is really needed. This is
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,30,* a use case for the lazy initialization pattern.
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,31,* </p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,32,* <p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,33,* This abstract base class provides an implementation of the double-check idiom
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,34,"* for an instance field as discussed in Joshua Bloch's ""Effective Java"", 2nd"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,35,"* edition, item 71. The class already implements all necessary synchronization."
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,36,"* A concrete subclass has to implement the {@code initialize()} method, which"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,37,* actually creates the wrapped data object.
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,38,* </p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,39,* <p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,40,* As an usage example consider that we have a class {@code ComplexObject} whose
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,41,* instantiation is a complex operation. In order to apply lazy initialization
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,42,"* to this class, a subclass of {@code LazyInitializer} has to be created:"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,44,* <pre>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,45,* public class ComplexObjectInitializer extends LazyInitializer&lt;ComplexObject&gt; {
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,46,*     &#064;Override
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,47,*     protected ComplexObject initialize() {
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,48,*         return new ComplexObject();
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,51,* </pre>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,53,"* Access to the data object is provided through the {@code get()} method. So,"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,54,* code that wants to obtain the {@code ComplexObject} instance would simply
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,55,* look like this:
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,57,* <pre>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,58,* // Create an instance of the lazy initializer
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,59,* ComplexObjectInitializer initializer = new ComplexObjectInitializer();
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,61,* // When the object is actually needed:
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,62,* ComplexObject cobj = initializer.get();
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,63,* </pre>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,65,* </p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,66,* <p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,67,* If multiple threads call the {@code get()} method when the object has not yet
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,68,"* been created, they are blocked until initialization completes. The algorithm"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,69,* guarantees that only a single instance of the wrapped object class is
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,70,"* created, which is passed to all callers. Once initialized, calls to the"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,71,* {@code get()} method are pretty fast because no synchronization is needed
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,72,* (only an access to a <b>volatile</b> member field).
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,73,* </p>
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,75,* @version $Id$
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,76,* @param <T> the type of the object managed by this initializer class
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,78,public abstract class LazyInitializer<T> {
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,79,/** Stores the managed object. */
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,80,private volatile T object;
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,83,* Returns the object wrapped by this instance. On first access the object
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,84,* is created. After that it is cached and can be accessed pretty fast.
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,86,* @return the object initialized by this {@code LazyInitializer}
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,88,public T get() {
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,89,T result = object;
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,91,if (result == null) {
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,92,synchronized (this) {
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,93,result = object;
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,94,if (result == null) {
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,95,object = result = initialize();
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,100,return result;
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,104,* Creates and initializes the object managed by this {@code
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,105,* LazyInitializer}. This method is called by {@link #get()} when the object
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,106,* is accessed for the first time. An implementation can focus on the
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,107,"* creation of the object. No synchronization is needed, as this is already"
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,108,* handled by {@code get()}.
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,110,* @return the managed data object
True,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,src/java/org/apache/commons/lang/concurrent/LazyInitializer.java,112,protected abstract T initialize();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,17,package org.apache.commons.lang.concurrent;
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,19,import java.util.concurrent.CountDownLatch;
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,24,* Test class for {@code LazyInitializer}.
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,26,* @version $Id$
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,28,public class LazyInitializerTest extends TestCase {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,29,/** The initializer to be tested. */
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,30,private LazyInitializerTestImpl initializer;
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,32,@Override
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,33,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,34,super.setUp();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,35,initializer = new LazyInitializerTestImpl();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,39,* Tests obtaining the managed object.
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,41,public void testGet() {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,42,"assertNotNull(""No managed object"", initializer.get());"
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,46,* Tests whether sequential get() invocations always return the same
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,47,* instance.
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,49,public void testGetMultipleTimes() {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,50,Object obj = initializer.get();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,51,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,52,"assertEquals(""Got different object at "" + i, obj, initializer.get());"
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,57,* Tests invoking get() from multiple threads concurrently.
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,59,public void testGetConcurrent() throws InterruptedException {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,60,final int threadCount = 20;
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,61,final CountDownLatch startLatch = new CountDownLatch(1);
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,62,class GetThread extends Thread {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,63,Object object;
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,65,@Override
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,66,public void run() {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,67,try {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,68,// wait until all threads are ready for maximum parallelism
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,69,startLatch.await();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,70,// access the initializer
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,71,object = initializer.get();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,72,} catch (InterruptedException iex) {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,73,// ignore
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,78,GetThread[] threads = new GetThread[threadCount];
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,79,for (int i = 0; i < threadCount; i++) {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,80,threads[i] = new GetThread();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,81,threads[i].start();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,84,// fire all threads and wait until they are ready
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,85,startLatch.countDown();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,86,for (Thread t : threads) {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,87,t.join();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,90,// check results
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,91,Object managedObject = initializer.get();
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,92,for (GetThread t : threads) {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,93,"assertEquals(""Wrong object"", managedObject, t.object);"
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,98,* A test implementation of LazyInitializer. This class creates a plain
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,99,"* Object. As Object does not provide a specific equals() method, it is easy"
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,100,* to check whether multiple instances were created.
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,102,private static class LazyInitializerTestImpl extends
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,103,LazyInitializer<Object> {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,104,@Override
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,105,protected Object initialize() {
True,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,src/test/org/apache/commons/lang/concurrent/LazyInitializerTest.java,106,return new Object();

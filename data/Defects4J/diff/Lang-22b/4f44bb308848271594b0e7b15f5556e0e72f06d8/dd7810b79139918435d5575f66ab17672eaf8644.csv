is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,17,package org.apache.commons.lang.concurrent;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,20,* <p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,21,* An exception class used for reporting error conditions related to accessing
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,22,* data of background tasks.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,23,* </p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,24,* <p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,25,* The purpose of this exception class is analogous to the default JDK exception
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,26,"* class {@link java.util.concurrent.ExecutionException}, i.e. it wraps an"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,27,"* exception that occurred during the execution of a task. However, in contrast"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,28,"* to {@code ExecutionException}, it wraps only checked exceptions. Runtime"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,29,* exceptions are thrown directly.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,30,* </p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,32,* @version $Id$
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,34,public class ConcurrentException extends Exception {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,36,* The serial version UID.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,38,private static final long serialVersionUID = 6622707671812226130L;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,41,"* Creates a new, uninitialized instance of {@code ConcurrentException}."
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,43,protected ConcurrentException() {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,44,super();
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,48,* Creates a new instance of {@code ConcurrentException} and initializes it
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,49,* with the given cause.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,51,* @param cause the cause of this exception
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,52,* @throws IllegalArgumentException if the cause is not a checked exception
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,54,public ConcurrentException(Throwable cause) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,55,super(ConcurrentUtils.checkedException(cause));
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,59,* Creates a new instance of {@code ConcurrentException} and initializes it
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,60,* with the given message and cause.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,62,* @param msg the error message
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,63,* @param cause the cause of this exception
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,64,* @throws IllegalArgumentException if the cause is not a checked exception
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,66,"public ConcurrentException(String msg, Throwable cause) {"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,src/java/org/apache/commons/lang/concurrent/ConcurrentException.java,67,"super(msg, ConcurrentUtils.checkedException(cause));"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,17,package org.apache.commons.lang.concurrent;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,19,import java.util.concurrent.ExecutionException;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,22,* <p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,23,* An utility class providing functionality related to the {@code
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,24,* java.util.concurrent} package.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,25,* </p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,27,* @version $Id$
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,29,public class ConcurrentUtils {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,31,* Private constructor so that no instances can be created. This class
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,32,* contains only static utility methods.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,34,private ConcurrentUtils() {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,38,* Inspects the cause of the specified {@code ExecutionException} and
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,39,* creates a {@code ConcurrentException} with the checked cause if
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,40,* necessary. This method performs the following checks on the cause of the
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,41,* passed in exception:
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,42,* <ul>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,43,* <li>If the passed in exception is <b>null</b> or the cause is
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,44,"* <b>null</b>, this method returns <b>null</b>.</li>"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,45,"* <li>If the cause is a runtime exception, it is directly thrown.</li>"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,46,"* <li>If the cause is an error, it is directly thrown, too.</li>"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,47,* <li>In any other case the cause is a checked exception. The method then
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,48,"* creates a {@link ConcurrentException}, initializes it with the cause, and"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,49,* returns it.</li>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,50,* </ul>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,52,* @param ex the exception to be processed
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,53,* @return a {@code ConcurrentException} with the checked cause
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,55,public static ConcurrentException extractCause(ExecutionException ex) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,56,if (ex == null || ex.getCause() == null) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,57,return null;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,60,throwCause(ex);
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,61,"return new ConcurrentException(ex.getMessage(), ex.getCause());"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,65,* Handles the specified {@code ExecutionException}. This method calls
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,66,* {@link #extractCause(ExecutionException)} for obtaining the cause of the
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,67,* exception - which might already cause an unchecked exception or an error
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,68,"* being thrown. If the cause is a checked exception however, it is wrapped"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,69,"* in a {@code ConcurrentException}, which is thrown. If the passed in"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,70,"* exception is <b>null</b> or has no cause, the method simply returns"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,71,* without throwing an exception.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,73,* @param ex the exception to be handled
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,74,* @throws ConcurrentException if the cause of the {@code
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,75,* ExecutionException} is a checked exception
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,77,public static void handleCause(ExecutionException ex)
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,78,throws ConcurrentException {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,79,ConcurrentException cex = extractCause(ex);
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,81,if (cex != null) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,82,throw cex;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,87,* Tests whether the specified {@code Throwable} is a checked exception. If
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,88,"* not, an exception is thrown."
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,90,* @param ex the {@code Throwable} to check
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,91,* @return a flag whether the passed in exception is a checked exception
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,92,* @throws IllegalArgumentException if the {@code Throwable} is not a
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,93,* checked exception
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,95,static Throwable checkedException(Throwable ex) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,96,if (ex != null && !(ex instanceof RuntimeException)
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,97,&& !(ex instanceof Error)) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,98,return ex;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,99,} else {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,100,"throw new IllegalArgumentException(""Not a checked exception: "" + ex);"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,105,* Tests whether the cause of the specified {@code ExecutionException}
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,106,* should be thrown and does it if necessary.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,108,* @param ex the exception in question
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,110,private static void throwCause(ExecutionException ex) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,111,if (ex.getCause() instanceof RuntimeException) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,112,throw (RuntimeException) ex.getCause();
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,115,if (ex.getCause() instanceof Error) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,116,throw (Error) ex.getCause();

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,99,** Constant for the default variable prefix. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,100,"tatic final String DEFAULT_PREFIX = ""${"";"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,102,** Constant for the default variable suffix. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,103,"tatic final String DEFAULT_SUFFIX = ""}"";"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,105,** Constant for the default escape character. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,106,tatic final char DEFAULT_ESCAPE = '$';
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,108,** Stores the map with the variables' values. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,109,rivate Map valueMap;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,111,** Stores the variable prefix. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,112,rivate String variablePrefix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,114,** Stores the variable suffix. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,115,rivate String variableSuffix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,117,** Stores the escape character. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,118,rivate char escapeCharacter;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,121, Creates a new instance of <code>VariableFormat</code> and initializes it.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,101,* A VariableResolver backed by a {@link Map}.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,123, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,124,            the map with the variables' values
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,125, @param prefix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,126,            the prefix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,127, @param suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,128,            the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,129, @param escape
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,130,            the escape character
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,131, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,132,             if the map is undefined
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,134,"ublic VariableFormatter(Map valueMap, String prefix, String suffix, char escape) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,135,etValueMap(valueMap);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,136,etVariablePrefix(prefix);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,137,etVariableSuffix(suffix);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,138,etEscapeCharacter(escape);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,142, Creates a new instance of <code>VariableFormat</code> and initializes it.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,143, Uses a default escaping character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,145, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,146,            the map with the variables' values
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,147, @param prefix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,148,            the prefix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,149, @param suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,150,            the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,151, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,152,             if the map is undefined
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,103,"* @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,104,* @version $Id$
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,154,"ublic VariableFormatter(Map valueMap, String prefix, String suffix) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,155,"his(valueMap, prefix, suffix, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,159, Creates a new instance of <code>VariableFormat</code> and initializes it.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,160, Uses defaults for variable prefix and suffix and the escaping character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,162, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,163,            the map with the variables' values
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,164, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,165,             if the map is undefined
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,167,ublic VariableFormatter(Map valueMap) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,168,"his(valueMap, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,172, Returns the escape character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,174, @return the character used for escaping variable references
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,176,ublic char getEscapeCharacter() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,177,eturn this.escapeCharacter;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,181, Sets the escape character. If this character is placed before a
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,182," variable reference in the source text, this variable will be ignored."
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,184, @param escapeCharacter
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,185,            the escape character (0 for disabling escaping)
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,187,ublic void setEscapeCharacter(char escapeCharacter) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,188,his.escapeCharacter = escapeCharacter;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,192, Returns the map with the variables' values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,194, @return the values of the variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,196,ublic Map getValueMap() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,197,eturn this.valueMap;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,106,public static class MapVariableResolver implements VariableResolver {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,108,* Map keys are variable names and value
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,110,private Map map;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,113,* Creates a new VariableResolver backed by a Map.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,115,* @param map
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,116,*            The variable names and values.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,118,public MapVariableResolver(Map map) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,119,this.setMap(map);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,201, Sets the map with the variables' values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,203, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,204,            the values of the variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,205, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,206,             if <code>valueMap</code> is <b>null</b>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,208,ublic void setValueMap(Map valueMap) throws IllegalArgumentException {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,209,f (valueMap == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,210,"hrow new IllegalArgumentException(""Value map must not be null"");"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,123,* Gets the variable names and values.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,125,* @return the variable names and values.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,127,public Map getMap() {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,128,return this.map;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,212,his.valueMap = valueMap;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,216, Returns the prefix for variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,218, @return the prefix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,220,ublic String getVariablePrefix() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,221,eturn this.variablePrefix;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,132,* Resolves the given variable name with the backing Map.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,134,* @param varName
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,135,*            a variable name
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,136,* @return a value or <code>null</code> if the variable name is not in Map
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,138,public Object resolveVariable(String varName) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,139,if (this.getMap() == null) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,140,return null;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,142,return this.getMap().get(varName);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,225, Sets the prefix for variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,227, @param variablePrefix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,228,            the prefix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,229, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,230,             if the prefix is <b>null</b>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,232,ublic void setVariablePrefix(String variablePrefix) throws IllegalArgumentException {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,233,f (variablePrefix == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,234,"hrow new IllegalArgumentException(""Variable prefix must not be null!"");"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,146,* Gets the variable names and values.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,148,* @param map
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,149,*            the variable names and values.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,151,public void setMap(Map map) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,152,this.map = map;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,236,his.variablePrefix = variablePrefix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,240, Returns the suffix for variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,242, @return the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,157,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,158,* Definition of an interface for obtaining values for variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,159,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,160,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,161,* Objects implementing this interface can be passed to <code>VariableFormatter</code> as source for variables'
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,162,* values. The interface is quite simple and defines only a single method for retrieving the value of a specified
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,163,* value.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,164,* </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,244,ublic String getVariableSuffix() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,245,eturn this.variableSuffix;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,166,public static interface VariableResolver {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,168,* Returns the value of the specified variable. The variable's value can be an arbitrary object. If no variable
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,169,"* with the given name is known, an implementation should return <b>null</b>."
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,171,* @param varName
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,172,*            the name of the searched variable
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,173,* @return the variable's value
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,175,Object resolveVariable(String varName);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,249, Sets the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,251, @param variableSuffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,252,            the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,253, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,254,             if the prefix is <b>null</b>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,256,ublic void setVariableSuffix(String variableSuffix) throws IllegalArgumentException {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,257,f (variableSuffix == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,258,"hrow new IllegalArgumentException(""Variable suffix must not be null!"");"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,260,his.variableSuffix = variableSuffix;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,178,/** Constant for the default escape character. */
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,179,static final char DEFAULT_ESCAPE = '$';
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,264, Replaces the occurrences of all variables in the given source data by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,265, their current values. If the source consists only of a single variable
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,266," reference, this method directly returns the value of this variable"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,267, (which can be an arbitrary object). If the source contains multiple
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,268," variable references or static text, the return value will always be a"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,269, String with the concatenation of all these elements.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,271, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,272,            the text to be interpolated; this can be an arbitrary object whose <code>toString()</code> method
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,273,            will be called
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,274, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,276,ublic Object replaceObject(Object source) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,277,"eturn doReplace(source, null);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,181,/** Constant for the default variable prefix. */
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,182,"static final String DEFAULT_PREFIX = ""${"";"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,281, Replaces the occurrences of all variables in the given source data by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,282, their current values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,284, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,285,            the text to be interpolated; this can be an arbitrary object whose <code>toString()</code> method
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,286,            will be called
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,287, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,289,ublic String replace(Object source) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,290,bject result = replaceObject(source);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,291,eturn result == null ? null : result.toString();
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,184,/** Constant for the default variable suffix. */
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,185,"static final String DEFAULT_SUFFIX = ""}"";"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,295, Replaces the occurrences of all variables in the given source data by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,296, their current values obtained from the passed in map.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,188,* Replaces the occurrences of all variables in the given source data by their current values obtained from the
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,189,* passed in map.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,309, Replaces the occurrences of all variables in the given source data by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,310, their current values obtained from the passed in map. This method
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,311, allows to specifiy a custom variable prefix and suffix
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,202,* Replaces the occurrences of all variables in the given source data by their current values obtained from the
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,203,* passed in map. This method allows to specifiy a custom variable prefix and suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,328, Replaces all variables in the given source data with values obtained
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,329, from system properties.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,220,* Replaces all variables in the given source data with values obtained from system properties.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,340, Checks if the variable reference found at the specified position is
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,341," escaped and if this is the case, where the escaped text starts."
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,343, @param text
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,344,            the text to be processed
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,345, @param beginIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,346,            the start index of the variable reference to check
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,347, @return the starting index of the escaped text or -1 if this reference is not escaped
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,349,"rotected int escaped(String text, int beginIndex) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,350,f (beginIndex < 1 || text.charAt(beginIndex - 1) != getEscapeCharacter()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,351,eturn -1;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,353,nt idx = beginIndex - 2;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,354,hile (idx >= 0 && text.charAt(idx) == getEscapeCharacter()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,355,dx--;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,357,eturn idx + 1;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,230,/** Stores the escape character. */
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,231,private char escapeCharacter;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,233,/** Stores the variable prefix. */
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,234,private String variablePrefix;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,236,private VariableResolver variableResolver;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,238,/** Stores the variable suffix. */
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,239,private String variableSuffix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,361, Unescapes an escaped variable reference. This method is called if
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,362, <code>escaped()</code> has determined an escaped variable reference.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,363, Its purpose is to remove any escaping characters and to add the
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,364, resulting text into the target buffer. This implementation will remove
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,365," the first escape character. So if the default values are used,"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,366," a text portion of <code>$${myvar}</code> will become <code>${myvar}</code>,"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,367, <code>$$$${var with dollars}</code> will result in <code>$$${var with
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,368, dollars}</code>. Text between the first variable start token and the last
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,369, unescaped variable end token can contain variable references and will be
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,370, recursively replaced. So constructs of the following form can be built:
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,371, <code>Variable $${${varName$}} is incorrect!</code> (note how the first
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,372," &quot;}&quot; character is escaped, so that the second &quot;}&quot;"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,373, marks the end of this construct.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,242,* Creates a new instance of <code>VariableFormat</code> and initializes it. Uses defaults for variable prefix and
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,243,* suffix and the escaping character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,375, @param buf
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,376,            the target buffer
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,377, @param text
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,378,            the text to be processed
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,379, @param beginIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,380,            the begin index of the escaped variable reference
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,381, @param endIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,382,            the end index of the escaped variable reference
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,383, @param priorVariables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,384,            keeps track of the replaced variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,245,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,246,*            the map with the variables' values
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,247,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,248,*             if the map is undefined
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,386,"rotected void unescape(StringBuffer buf, String text, int beginIndex, int endIndex, List priorVariables) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,387,"nt startToken = text.indexOf(getVariablePrefix(), beginIndex);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,388,"uf.append(text.substring(beginIndex + 1, startToken));"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,389,uf.append(getVariablePrefix());
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,390,"tring escapedContent = text.substring(startToken + getVariablePrefix().length(), endIndex);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,391,"uf.append(doReplace(StringUtils.replace(escapedContent, String.valueOf(getEscapeCharacter())"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,392," getVariableSuffix(), getVariableSuffix()), priorVariables));"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,250,public VariableFormatter(Map valueMap) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,251,"this(valueMap, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,396, Searches for a variable end token in the given string from the
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,397, specified start position.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,255,* Creates a new instance of <code>VariableFormat</code> and initializes it. Uses a default escaping character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,399, @param text
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,400,            the text to search
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,401, @param beginIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,402,            the start index
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,403, @return the index of the end token or -1 if none was found
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,257,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,258,*            the map with the variables' values
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,259,* @param prefix
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,260,*            the prefix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,261,* @param suffix
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,262,*            the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,263,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,264,*             if the map is undefined
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,405,"rotected int findEndToken(String text, int beginIndex) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,406,nt pos = beginIndex - getVariableSuffix().length();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,408,o {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,409,"os = text.indexOf(getVariableSuffix(), pos + getVariableSuffix().length());"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,410, while (pos > 0 && getEscapeCharacter() == text.charAt(pos - 1));
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,412,eturn pos;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,266,"public VariableFormatter(Map valueMap, String prefix, String suffix) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,267,"this(valueMap, prefix, suffix, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,416, Resolves the specified variable. This method is called whenever a
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,417, variable reference is detected in the source text. It is passed the
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,418, variable's name and must return the corresponding value.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,419, This implementation accesses the value map using the variable's name
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,420, as key. Derived classes may override this method to implement a different
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,421, strategy for resolving variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,271,* Creates a new instance of <code>VariableFormat</code> and initializes it.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,423, @param name
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,424,            the name of the variable
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,425, @return the variable's value or <b>null</b> if the variable is unknown
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,273,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,274,*            the map with the variables' values
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,275,* @param prefix
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,276,*            the prefix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,277,* @param suffix
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,278,*            the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,279,* @param escape
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,280,*            the escape character
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,281,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,282,*             if the map is undefined
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,427,rotected Object resolveVariable(String name) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,428,eturn getValueMap().get(name);
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,284,"public VariableFormatter(Map valueMap, String prefix, String suffix, char escape) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,285,this.setVariableResolver(new MapVariableResolver(valueMap));
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,286,this.setVariablePrefix(prefix);
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,287,this.setVariableSuffix(suffix);
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,288,this.setEscapeCharacter(escape);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,432, Recursive handler for multple levels of interpolation. This is the main
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,433," interpolation method, which resolves the values of all variable"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,434, references contained in the passed in text.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,292,"* Recursive handler for multple levels of interpolation. This is the main interpolation method, which resolves the"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,293,* values of all variable references contained in the passed in text.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,393,"* Checks if the variable reference found at the specified position is escaped and if this is the case, where the"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,394,* escaped text starts.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,396,* @param text
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,397,*            the text to be processed
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,398,* @param beginIndex
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,399,*            the start index of the variable reference to check
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,400,* @return the starting index of the escaped text or -1 if this reference is not escaped
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,402,"protected int escaped(String text, int beginIndex) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,403,if (beginIndex < 1 || text.charAt(beginIndex - 1) != getEscapeCharacter()) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,404,return -1;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,406,int idx = beginIndex - 2;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,407,while (idx >= 0 && text.charAt(idx) == getEscapeCharacter()) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,408,idx--;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,410,return idx + 1;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,414,* Searches for a variable end token in the given string from the specified start position.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,416,* @param text
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,417,*            the text to search
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,418,* @param beginIndex
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,419,*            the start index
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,420,* @return the index of the end token or -1 if none was found
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,422,"protected int findEndToken(String text, int beginIndex) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,423,int pos = beginIndex - getVariableSuffix().length();
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,425,do {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,426,"pos = text.indexOf(getVariableSuffix(), pos + getVariableSuffix().length());"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,427,} while (pos > 0 && getEscapeCharacter() == text.charAt(pos - 1));
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,429,return pos;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,433,* Returns the escape character.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,435,* @return the character used for escaping variable references
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,437,public char getEscapeCharacter() {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,438,return this.escapeCharacter;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,442,* Returns the prefix for variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,444,* @return the prefix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,446,public String getVariablePrefix() {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,447,return this.variablePrefix;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,450,public VariableResolver getVariableResolver() {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,451,return this.variableResolver;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,455,* Returns the suffix for variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,457,* @return the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,459,public String getVariableSuffix() {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,460,return this.variableSuffix;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,464,* Replaces the occurrences of all variables in the given source data by their current values.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,466,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,467,*            the text to be interpolated; this can be an arbitrary object whose <code>toString()</code> method
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,468,*            will be called
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,469,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,471,public String replace(Object source) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,472,Object result = replaceObject(source);
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,473,return result == null ? null : result.toString();
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,477,* Replaces the occurrences of all variables in the given source data by their current values. If the source
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,478,"* consists only of a single variable reference, this method directly returns the value of this variable (which can"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,479,"* be an arbitrary object). If the source contains multiple variable references or static text, the return value"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,480,* will always be a String with the concatenation of all these elements.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,482,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,483,*            the text to be interpolated; this can be an arbitrary object whose <code>toString()</code> method
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,484,*            will be called
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,485,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,487,public Object replaceObject(Object source) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,488,"return doReplace(source, null);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,492,* Resolves the specified variable. This method is called whenever a variable reference is detected in the source
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,493,* text. It is passed the variable's name and must return the corresponding value. This implementation accesses the
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,494,* value map using the variable's name as key. Derived classes may override this method to implement a different
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,495,* strategy for resolving variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,497,* @param name
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,498,*            the name of the variable
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,499,* @return the variable's value or <b>null</b> if the variable is unknown
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,501,protected Object resolveVariable(String name) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,502,if (this.getVariableResolver() == null) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,503,return null;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,505,return this.getVariableResolver().resolveVariable(name);
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,509,"* Sets the escape character. If this character is placed before a variable reference in the source text, this"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,510,* variable will be ignored.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,512,* @param escapeCharacter
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,513,*            the escape character (0 for disabling escaping)
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,515,public void setEscapeCharacter(char escapeCharacter) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,516,this.escapeCharacter = escapeCharacter;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,520,* Sets the prefix for variables.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,522,* @param variablePrefix
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,523,*            the prefix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,524,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,525,*             if the prefix is <b>null</b>
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,527,public void setVariablePrefix(String variablePrefix) throws IllegalArgumentException {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,528,if (variablePrefix == null) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,529,"throw new IllegalArgumentException(""Variable prefix must not be null!"");"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,531,this.variablePrefix = variablePrefix;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,534,public void setVariableResolver(VariableResolver variableResolver) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,535,this.variableResolver = variableResolver;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,539,* Sets the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,541,* @param variableSuffix
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,542,*            the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,543,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,544,*             if the prefix is <b>null</b>
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,546,public void setVariableSuffix(String variableSuffix) throws IllegalArgumentException {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,547,if (variableSuffix == null) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,548,"throw new IllegalArgumentException(""Variable suffix must not be null!"");"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,550,this.variableSuffix = variableSuffix;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,554,* Unescapes an escaped variable reference. This method is called if <code>escaped()</code> has determined an
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,555,* escaped variable reference. Its purpose is to remove any escaping characters and to add the resulting text into
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,556,"* the target buffer. This implementation will remove the first escape character. So if the default values are used,"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,557,"* a text portion of <code>$${myvar}</code> will become <code>${myvar}</code>,"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,558,* <code>$$$${var with dollars}</code> will result in <code>$$${var with
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,559,* dollars}</code>. Text between the
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,560,* first variable start token and the last unescaped variable end token can contain variable references and will be
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,561,* recursively replaced. So constructs of the following form can be built:
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,562,"* <code>Variable $${${varName$}} is incorrect!</code> (note how the first &quot;}&quot; character is escaped, so"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,563,* that the second &quot;}&quot; marks the end of this construct.
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,565,* @param buf
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,566,*            the target buffer
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,567,* @param text
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,568,*            the text to be processed
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,569,* @param beginIndex
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,570,*            the begin index of the escaped variable reference
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,571,* @param endIndex
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,572,*            the end index of the escaped variable reference
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,573,* @param priorVariables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,574,*            keeps track of the replaced variables
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,576,"protected void unescape(StringBuffer buf, String text, int beginIndex, int endIndex, List priorVariables) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,577,"int startToken = text.indexOf(getVariablePrefix(), beginIndex);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,578,"buf.append(text.substring(beginIndex + 1, startToken));"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,579,buf.append(getVariablePrefix());
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,580,"String escapedContent = text.substring(startToken + getVariablePrefix().length(), endIndex);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,581,"buf.append(doReplace(StringUtils.replace(escapedContent, String.valueOf(getEscapeCharacter())"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,582,"+ getVariableSuffix(), getVariableSuffix()), priorVariables));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,24,import org.apache.commons.lang.text.VariableFormatter.MapVariableResolver;
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,39,VariableFormatter getFormat() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,40,return this.format;
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,43,MapVariableResolver getMapVariableResolver() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,44,return (MapVariableResolver)this.getFormat().getVariableResolver();
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,47,private Map getValueMap() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,48,return this.getMapVariableResolver().getMap();
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,51,Map getValues() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,52,return this.values;
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,55,void setFormat(VariableFormatter format) {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,56,this.format = format;
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,68,private void setValueMap(Map valuesMap) {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,69,this.getMapVariableResolver().setMap(valuesMap);
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,72,void setValues(Map values) {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,73,this.values = values;
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,77,* Tests a cyclic replace operation. The cycle should be detected and cause an exception to be thrown.
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,79,public void testCyclicReplacement() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,80,Map valuesMap = new HashMap();
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,81,"valuesMap.put(""animal"", ""${critter}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,82,"valuesMap.put(""target"", ""${pet}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,83,"valuesMap.put(""pet"", ""${petCharacteristic} dog"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,84,"valuesMap.put(""petCharacteristic"", ""lazy"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,85,"valuesMap.put(""critter"", ""${critterSpeed} ${critterColor} ${critterType}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,86,"valuesMap.put(""critterSpeed"", ""quick"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,87,"valuesMap.put(""critterColor"", ""brown"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,88,"valuesMap.put(""critterType"", ""${animal}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,89,this.setValueMap(valuesMap);
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,90,try {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,91,this.getFormat().replace(REPLACE_TEMPLATE);
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,92,"fail(""Cyclic replacement was not detected!"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,93,} catch (IllegalStateException isx) {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,94,// ok
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,99,* Tests escaping variable references.
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,101,public void testEscape() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,102,"assertEquals(""${animal}"", this.getFormat().replace(""$${animal}""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,103,"this.getValueMap().put(""var_name"", ""x"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,104,"assertEquals(""Many $$$$${target} $s"", this.getFormat().replace(""Many $$$$$${target} $s""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,105,"assertEquals(""Variable ${x} must be used!"", this.getFormat().replace(""Variable $${${var_name$}} must be used!""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,50,ssertNotNull(format.getValueMap());
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,51,"ssertEquals(VariableFormatter.DEFAULT_PREFIX, format.getVariablePrefix());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,52,"ssertEquals(VariableFormatter.DEFAULT_SUFFIX, format.getVariableSuffix());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,53,"ssertEquals(VariableFormatter.DEFAULT_ESCAPE, format.getEscapeCharacter());"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,112,assertNotNull(this.getFormat().getVariableResolver());
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,113,"assertEquals(VariableFormatter.DEFAULT_PREFIX, this.getFormat().getVariablePrefix());"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,114,"assertEquals(VariableFormatter.DEFAULT_SUFFIX, this.getFormat().getVariableSuffix());"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,115,"assertEquals(VariableFormatter.DEFAULT_ESCAPE, this.getFormat().getEscapeCharacter());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,56,"ssertEquals(""<<"", format.getVariablePrefix());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,57,"ssertEquals("">>"", format.getVariableSuffix());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,58,"ssertEquals('\\', format.getEscapeCharacter());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,60,ry {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,61,ormat = new VariableFormatter(null);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,62,"ail(""Could create format object with null map!"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,63, catch (IllegalArgumentException iex) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,64,/ ok
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,118,"assertEquals(""<<"", this.getFormat().getVariablePrefix());"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,119,"assertEquals("">>"", this.getFormat().getVariableSuffix());"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,120,"assertEquals('\\', this.getFormat().getEscapeCharacter());"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,122,// new VariableFormatter(null) should be OK IMO
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,123,// Gary Gregory - July 14 2005
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,124,//        try {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,125,//            format = new VariableFormatter(null);
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,126,"//            fail(""Could create format object with null map!"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,127,//        } catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,128,//            // ok
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,83, Tests typical replace operations.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,85,ublic void testReplace() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,86,"ssertEquals(""The quick brown fox jumps over the lazy dog."", format.replaceObject(REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,88,"ormat.getValueMap().put(""animal"", ""cow"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,89,"ormat.getValueMap().put(""target"", ""moon"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,90,"ssertEquals(""The cow jumps over the moon."", format.replace(REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,92,"ssertEquals(""Variable ${var} is unknown!"", format.replace(""Variable ${var} is unknown!""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,96, Tests source texts with nothing to replace.
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,147,* Tests chaning variable prefix and suffix and the escaping character.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,98,ublic void testReplaceNothing() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,99,ssertNull(format.replace(null));
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,100,"ssertEquals(""Nothing to replace."", format.replace(""Nothing to replace.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,101,"ssertEquals(""42"", format.replace(new Integer(42)));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,149,public void testNonDefaultTokens() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,150,"format = new VariableFormatter(values, ""<<"", "">>"", '\\');"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,151,"assertEquals(""The quick brown fox jumps over the lazy dog."", format"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,152,".replace(""The <<animal>> jumps over the <<target>>.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,153,"assertEquals(""The quick brown fox jumps over the <<target>>."", format"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,154,".replace(""The <<animal>> jumps over the \\<<target>>.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,105, Tests escaping variable references.
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,158,* Tests invoking the static convenience methods.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,107,ublic void testEscape() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,108,"ssertEquals(""${animal}"", format.replace(""$${animal}""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,109,"ormat.getValueMap().put(""var_name"", ""x"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,110,"ssertEquals(""Many $$$$${target} $s"", format.replace(""Many $$$$$${target} $s""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,111,"ssertEquals(""Variable ${x} must be used!"", format.replace(""Variable $${${var_name$}} must be used!""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,160,public void testNonInstanceMethods() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,161,"assertEquals(""The quick brown fox jumps over the lazy dog."", VariableFormatter.replace(values, REPLACE_TEMPLATE));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,162,"values.put(""animal"", ""cow"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,163,"values.put(""target"", ""moon"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,164,"assertEquals(""The cow jumps over the moon."", VariableFormatter.replace(values, ""&"", "";"","
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,165,"""The &animal; jumps over the &target;.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,127,ormat.setValueMap(valuesMap);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,128,"ssertEquals(""The quick brown fox jumps over the lazy dog."", format.replace(REPLACE_TEMPLATE));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,181,this.setValueMap(valuesMap);
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,182,"assertEquals(""The quick brown fox jumps over the lazy dog."", this.getFormat().replace(REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,132, Tests a cyclic replace operation. The cycle should be detected and cause an exception to be thrown.
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,186,* Tests typical replace operations.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,134,ublic void testCyclicReplacement() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,135,ap valuesMap = new HashMap();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,136,"aluesMap.put(""animal"", ""${critter}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,137,"aluesMap.put(""target"", ""${pet}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,138,"aluesMap.put(""pet"", ""${petCharacteristic} dog"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,139,"aluesMap.put(""petCharacteristic"", ""lazy"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,140,"aluesMap.put(""critter"", ""${critterSpeed} ${critterColor} ${critterType}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,141,"aluesMap.put(""critterSpeed"", ""quick"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,142,"aluesMap.put(""critterColor"", ""brown"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,143,"aluesMap.put(""critterType"", ""${animal}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,144,ormat.setValueMap(valuesMap);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,145,ry {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,146,ormat.replace(REPLACE_TEMPLATE);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,147,"ail(""Cyclic replacement was not detected!"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,148, catch (IllegalStateException isx) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,149,/ ok
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,188,public void testReplace() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,189,"assertEquals(""The quick brown fox jumps over the lazy dog."", this.getFormat().replaceObject(REPLACE_TEMPLATE));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,190,Map map = this.getValueMap();
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,191,"map.put(""animal"", ""cow"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,192,"map.put(""target"", ""moon"");"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,193,"assertEquals(""The cow jumps over the moon."", this.getFormat().replace(REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,154, Tests operating on objects.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,156,ublic void testReplaceObject() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,157,"ormat.getValueMap().put(""value"", new Integer(42));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,158,"ssertEquals(new Integer(42), format.replaceObject(""${value}""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,159,"ssertEquals(""The answer is 42."", format.replaceObject(""The answer is ${value}.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,195,"assertEquals(""Variable ${var} is unknown!"", this.getFormat().replace(""Variable ${var} is unknown!""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,163, Tests chaning variable prefix and suffix and the escaping character.
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,199,* Tests source texts with nothing to replace.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,165,ublic void testNonDefaultTokens() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,166,"ormat = new VariableFormatter(values, ""<<"", "">>"", '\\');"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,167,"ssertEquals(""The quick brown fox jumps over the lazy dog."", format"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,168,"replace(""The <<animal>> jumps over the <<target>>.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,169,"ssertEquals(""The quick brown fox jumps over the <<target>>."", format"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,170,"replace(""The <<animal>> jumps over the \\<<target>>.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,201,public void testReplaceNothing() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,202,assertNull(this.getFormat().replace(null));
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,203,"assertEquals(""Nothing to replace."", this.getFormat().replace(""Nothing to replace.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,204,"assertEquals(""42"", this.getFormat().replace(new Integer(42)));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,174, Tests invoking the static convenience methods.
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,208,* Tests operating on objects.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,176,ublic void testNonInstanceMethods() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,177,"ssertEquals(""The quick brown fox jumps over the lazy dog."", VariableFormatter.replace(values, REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,178,"alues.put(""animal"", ""cow"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,179,"alues.put(""target"", ""moon"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,180,"ssertEquals(""The cow jumps over the moon."", VariableFormatter.replace(values, ""&"", "";"","
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,181,"The &animal; jumps over the &target;.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,210,public void testReplaceObject() {
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,211,"this.getValueMap().put(""value"", new Integer(42));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,212,"assertEquals(new Integer(42), this.getFormat().replaceObject(""${value}""));"
True,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,213,"assertEquals(""The answer is 42."", this.getFormat().replaceObject(""The answer is ${value}.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,199,ap getValues() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,200,eturn this.values;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,203,oid setValues(Map values) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,204,his.values = values;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,207,ariableFormatter getFormat() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,208,eturn this.format;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,211,oid setFormat(VariableFormatter format) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,212,his.format = format;

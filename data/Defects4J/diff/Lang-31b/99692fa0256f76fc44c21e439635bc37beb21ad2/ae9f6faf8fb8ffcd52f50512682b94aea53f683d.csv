is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,62, Stores a cache of MethodDescriptor -> Method in a WeakHashMap.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,63, <p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,64, The keys into this map only ever exist as temporary variables within
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,65," methods of this class, and are never exposed to users of this class."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,66, This means that the WeakHashMap is used only as a mechanism for
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,67," limiting the size of the cache, ie a way to tell the garbage collector"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,68, that the contents of the cache can be completely garbage-collected
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,69, whenever it needs the memory. Whether this is a good approach to
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,70, this problem is doubtful; something like the commons-collections
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,71, LRUMap may be more appropriate (though of course selecting an
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,72, appropriate size is an issue).
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,73, <p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,74, This static variable is safe even when this code is deployed via a
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,75, shared classloader because it is keyed via a MethodDescriptor object
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,76, which has a Class as one of its members and that member is used in
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,77, the MethodDescriptor.equals method. So two components that load the same
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,78, class via different classloaders will generate non-equal MethodDescriptor
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,79, objects and hence end up with different entries in the map.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,81,"rivate static final WeakHashMap/* <MethodDescriptor, Method> */cache = new WeakHashMap();"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,84, Indicates whether methods should be cached for improved performance.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,85, <p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,86, Note that when this class is deployed via a shared classloader in
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,87," a container, this will affect all webapps. However making this"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,88, configurable per webapp would mean having a map keyed by context classloader
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,89, which may introduce memory-leak problems.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,91,rivate static boolean cacheMethods = true;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,106," Set whether methods should be cached for greater performance or not,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,107, default is <code>true</code>.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,109, @param cacheMethods <code>true</code> if methods should be
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,110," cached for greater performance, otherwise <code>false</code>"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,112,ublic static synchronized void setCacheMethods(boolean cacheMethods) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,113,ethodUtils.cacheMethods = cacheMethods;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,114,f (!MethodUtils.cacheMethods) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,115,learCache();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,120, Clear the method cache.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,121, @return the number of cached methods cleared
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,123,ublic static synchronized int clearCache() {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,124,nt size = cache.size();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,125,ache.clear();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,126,eturn size;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,564,"ethodDescriptor md = new MethodDescriptor(cls, methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,565,"arameterTypes, true);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,566,/ Check the cache first
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,567,ethod method = getCachedMethod(md);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,568,f (method != null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,569,eturn method;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,571,"ethod = getAccessibleMethod(cls.getMethod(methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,508,"return getAccessibleMethod(cls.getMethod(methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,573,"acheMethod(md, method);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,574,eturn method;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,711,"ethodDescriptor md = new MethodDescriptor(cls, methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,712,"arameterTypes, false);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,713,/ Check the cache first
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,714,ethod method = getCachedMethod(md);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,715,f (method != null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,716,eturn method;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,718,/ see if we can find the method directly
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,719,/ most of the time this works and it's much faster
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,721,"ethod = cls.getMethod(methodName, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,647,"Method method = cls.getMethod(methodName, parameterTypes);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,723,"acheMethod(md, method);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,751,"acheMethod(md, bestMatch);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,757," Return the method from the cache, if present."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,759, @param md The method descriptor
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,760, @return The cached method
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,762,rivate static Method getCachedMethod(MethodDescriptor md) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,763,f (cacheMethods) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,764,eturn (Method) cache.get(md);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,766,eturn null;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,770, Add a method to the cache.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,772, @param md The method descriptor
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,773, @param method The method to cache
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,775,"rivate static void cacheMethod(MethodDescriptor md, Method method) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,776,f (cacheMethods) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,777,f (method != null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,778,"ache.put(md, method);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,784, Represents the key to looking up a Method by reflection.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,786,rivate static class MethodDescriptor {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,787,rivate Class cls;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,788,rivate String methodName;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,789,rivate Class[] paramTypes;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,790,rivate boolean exact;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,791,rivate int hashCode;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,794, The sole constructor.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,796," @param cls  the class to reflect, must not be null"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,797, @param methodName  the method name to obtain
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,798, @param paramTypes the array of classes representing the paramater types
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,799, @param exact whether the match has to be exact.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,801,"ublic MethodDescriptor(Class cls, String methodName,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,802,"lass[] paramTypes, boolean exact) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,803,f (cls == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,804,"hrow new IllegalArgumentException(""Class cannot be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,806,f (methodName == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,807,"hrow new IllegalArgumentException(""Method Name cannot be null"");"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,809,f (paramTypes == null) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,810,aramTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,812,his.cls = cls;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,813,his.methodName = methodName;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,814,his.paramTypes = paramTypes;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,815,his.exact = exact;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,816,/ is this adequate? :/
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,817,his.hashCode = methodName.length();
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,821, Checks for equality.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,822, @param obj object to be tested for equality
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,823," @return true, if the object describes the same Method."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,825,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,826,f (!(obj instanceof MethodDescriptor)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,827,eturn false;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,829,ethodDescriptor md = (MethodDescriptor) obj;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,831,eturn exact == md.exact && methodName.equals(md.methodName)
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,832,& cls.equals(md.cls)
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,833,"& Arrays.equals(paramTypes, md.paramTypes);"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,837, Returns the string length of method name. I.e. if the
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,838," hashcodes are different, the objects are different. If the"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,839," hashcodes are the same, need to use the equals method to"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,840, determine equality.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,841, @return the string length of method name.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,843,ublic int hashCode() {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,844,eturn hashCode;
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,321,ublic void testSetCacheMethods() throws Exception {
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,322,ethodUtils.clearCache();
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,323,ethodUtils.setCacheMethods(true);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,324,"ethodUtils.invokeMethod(testBean, ""foo"", """");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,325,"ssertEquals(1, MethodUtils.clearCache());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,326,"ssertEquals(0, MethodUtils.clearCache());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,327,ethodUtils.setCacheMethods(false);
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,328,"ethodUtils.invokeMethod(testBean, ""foo"", """");"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,329,"ssertEquals(0, MethodUtils.clearCache());"
False,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,330,ethodUtils.setCacheMethods(true);

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,24, <p>Assists in validating arguments.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,26, <p>The class is based along the lines of JUnit. If an argument value is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,27," deemed invalid, an IllegalArgumentException is thrown. For example:</p>"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,24,* <p>This class assists in validating arguments. The validation methods are
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,25,* based along the following principles:
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,26,* <ul>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,27,*   <li>An invalid <code>null</code> argument causes a {@link NullPointerException}.</li>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,28,*   <li>A non-<code>null</code> argument causes an {@link IllegalArgumentException}.</li>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,29,*   <li>An invalid index into an array/collection/map/string causes an {@link IndexOutOfBoundsException}.</li>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,30,* </ul>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,32,"* <p>All exceptions messages are <a href=""http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax"">format strings</a>"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,33,* as defined by the Java platform. For example:</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,30," Validate.isTrue( i > 0, ""The value must be greater than zero: "", i);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,31," Validate.notNull( surname, ""The surname must not be null"");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,36,"* Validate.isTrue(i > 0, ""The value must be greater than zero: %d"", i);"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,37,"* Validate.notNull(surname, ""The surname must not be %s"", null);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,38, @since 2.0
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,44,* @author Paul Benedict
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,46,"* @see java.lang.String#format(String, Object...)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,47,* @since 2.0
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,51,"private static final String DEFAULT_IS_NULL_EXCEPTION_MESSAGE = ""The validated object is null"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,52,"private static final String DEFAULT_IS_TRUE_EXCEPTION_MESSAGE = ""The validated expression is false"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,53,"private static final String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EXCEPTION_MESSAGE = ""The validated array contains null element at index: %d"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,54,"private static final String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE = ""The validated collection contains null element at index: %d"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,55,"private static final String DEFAULT_NOT_BLANK_EXCEPTION_MESSAGE = ""The validated character sequence is blank"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,56,"private static final String DEFAULT_NOT_EMPTY_ARRAY_EXCEPTION_MESSAGE = ""The validated array is empty"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,57,"private static final String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EXCEPTION_MESSAGE = ""The validated character sequence is empty"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,58,"private static final String DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE = ""The validated collection is empty"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,59,"private static final String DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE = ""The validated map is empty"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,60,"private static final String DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE = ""The validated array index is invalid: %d"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,61,"private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE = ""The validated character sequence is invalid: %d"";"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,62,"private static final String DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE = ""The validated collection index is invalid: %d"";"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,54," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,55, if the test result is <code>false</code>.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,57," <p>This is used when validating according to an arbitrary boolean expression,"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,58, such as validating a primitive number or using your own custom validation
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,59, expression.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,75,* <p>Validate that the argument condition is <code>true</code>; otherwise
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,76,* throwing an exception with the specified message. This method is useful when
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,77,"* validating according to an arbitrary boolean expression, such as validating a"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,78,* primitive number or using your own custom validation expression.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,61, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,62," Validate.isTrue( myObject.isOk(), ""The object is not OK: "", myObject);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,63, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,80,"* <pre>Validate.isTrue(myObject.isOk(), ""The object is not OK: %s"", myObject);</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,66, appended to the message string only in the case of an error.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,83,* appended to the exception message only in the case of an error.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,68, @param expression  a boolean expression
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,69, @param message  the exception message you would like to see if the
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,70,  expression is <code>false</code>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,71, @param value  the value to append to the message in case of error
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,85,* @param expression the boolean expression to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,86,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,87,* @param value the value to append to the message when invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,89,* @see #isTrue(boolean)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,90,"* @see #isTrue(boolean, String, long)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,91,"* @see #isTrue(boolean, String, double)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,92,"* @see #isTrue(boolean, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,76,hrow new IllegalArgumentException(message + value);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,96,"throw new IllegalArgumentException(String.format(message, value));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,81," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,82, if the test result is <code>false</code>.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,84," <p>This is used when validating according to an arbitrary boolean expression,"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,85, such as validating a primitive number or using your own custom validation
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,86, expression.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,101,* <p>Validate that the argument condition is <code>true</code>; otherwise
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,102,* throwing an exception with the specified message. This method is useful when
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,103,"* validating according to an arbitrary boolean expression, such as validating a"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,104,* primitive number or using your own custom validation expression.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,88, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,89," Validate.isTrue( i > 0, ""The value must be greater than zero: "", i);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,90, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,106,"* <pre>Validate.isTrue(i > 0.0, ""The value must be greater than zero: %d"", i);</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,93, appended to the message string only in the case of an error.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,109,* appended to the exception message only in the case of an error.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,95, @param expression  a boolean expression
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,96, @param message  the exception message you would like to see if the expression is <code>false</code>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,97, @param value  the value to append to the message in case of error
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,111,* @param expression the boolean expression to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,112,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,113,* @param value the value to append to the message when invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,115,* @see #isTrue(boolean)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,116,"* @see #isTrue(boolean, String, double)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,117,"* @see #isTrue(boolean, String, Object)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,118,"* @see #isTrue(boolean, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,102,hrow new IllegalArgumentException(message + value);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,122,"throw new IllegalArgumentException(String.format(message, value));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,107," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,108, if the test result is <code>false</code>.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,110," <p>This is used when validating according to an arbitrary boolean expression,"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,111, such as validating a primitive number or using your own custom validation
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,112, expression.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,127,* <p>Validate that the argument condition is <code>true</code>; otherwise
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,128,* throwing an exception with the specified message. This method is useful when
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,129,"* validating according to an arbitrary boolean expression, such as validating a"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,130,* primitive number or using your own custom validation expression.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,114, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,115," Validate.isTrue( d > 0.0, ""The value must be greater than zero: "", d);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,116, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,132,"* <pre>Validate.isTrue(d > 0.0, ""The value must be greater than zero: %s"", d);</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,119, appended to the message string only in the case of an error.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,135,* appended to the exception message only in the case of an error.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,121, @param expression  a boolean expression
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,122, @param message  the exception message you would like to see if the expression
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,123,  is <code>false</code>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,124, @param value  the value to append to the message in case of error
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,137,* @param expression the boolean expression to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,138,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,139,* @param value the value to append to the message when invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,141,* @see #isTrue(boolean)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,142,"* @see #isTrue(boolean, String, long)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,143,"* @see #isTrue(boolean, String, Object)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,144,"* @see #isTrue(boolean, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,129,hrow new IllegalArgumentException(message + value);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,148,"throw new IllegalArgumentException(String.format(message, value));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,134," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,135, if the test result is <code>false</code>.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,137," <p>This is used when validating according to an arbitrary boolean expression,"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,138, such as validating a primitive number or using your own custom validation
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,139, expression.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,153,* <p>Validate that the argument condition is <code>true</code>; otherwise
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,154,* throwing an exception with the specified message. This method is useful when
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,155,"* validating according to an arbitrary boolean expression, such as validating a"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,156,* primitive number or using your own custom validation expression.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,142," Validate.isTrue( (i > 0), ""The value must be greater than zero"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,143," Validate.isTrue( myObject.isOk(), ""The object is not OK"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,144, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,159,"* Validate.isTrue(i >= min && i <= max, ""The value must be between %d and %d"", min, max);"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,160,"* Validate.isTrue(myObject.isOk(), ""The object is not okay"");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,149, @param expression  a boolean expression
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,150, @param message  the exception message you would like to see if the expression
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,151,  is <code>false</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,165,* @param expression the boolean expression to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,166,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,167,* @param values the optional values for the formatted exception message
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,169,* @see #isTrue(boolean)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,170,"* @see #isTrue(boolean, String, long)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,171,"* @see #isTrue(boolean, String, double)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,172,"* @see #isTrue(boolean, String, Object)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,154,"ublic static void isTrue(boolean expression, String message) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,174,"public static void isTrue(boolean expression, String message, Object... values) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,156,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,176,"throw new IllegalArgumentException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,161," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,162, if the test result is <code>false</code>.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,164," <p>This is used when validating according to an arbitrary boolean expression,"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,165, such as validating a primitive number or using your own custom validation
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,166, expression.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,181,* <p>Validate that the argument condition is <code>true</code>; otherwise
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,182,* throwing an exception. This method is useful when validating according
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,183,"* to an arbitrary boolean expression, such as validating a"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,184,* primitive number or using your own custom validation expression.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,169, Validate.isTrue( i > 0 );
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,170, Validate.isTrue( myObject.isOk() );
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,171, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,187,* Validate.isTrue(i > 0);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,188,* Validate.isTrue(myObject.isOk());</pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,173, <p>The message in the exception is 'The validated expression is false'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,190,* <p>The message of the exception is &quot;The validated expression is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,191,* false&quot;.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,175, @param expression  a boolean expression
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,193,* @param expression the boolean expression to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,195,"* @see #isTrue(boolean, String, long)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,196,"* @see #isTrue(boolean, String, double)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,197,"* @see #isTrue(boolean, String, Object)"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,198,"* @see #isTrue(boolean, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,180,"hrow new IllegalArgumentException(""The validated expression is false"");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,202,throw new IllegalArgumentException(DEFAULT_IS_TRUE_EXCEPTION_MESSAGE);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,188," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,189, if the argument is <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,210,* <p>Validate that the specified argument is not <code>null</code>;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,211,* otherwise throwing an exception.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,191, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,192," Validate.notNull(myObject, ""The object must not be null"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,193, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,195, @param object  the object to check is not <code>null</code>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,196, @param message  the exception message you would like to see
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,197,  if the object is <code>null</code>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,198," @return the input object, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,199, @throws IllegalArgumentException if the object is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,213,"* <pre>Validate.notNull(myObject, ""The object must not be null"");</pre>"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,215,* <p>The message of the exception is &quot;The validated object is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,216,* null&quot;.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,218,* @param <T> the object type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,219,* @param object the object to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,220,* @return the validated object (never <code>null</code> for method chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,221,* @throws NullPointerException if the object is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,222,"* @see #notNull(Object, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,201,"ublic static <T> T notNull(T object, String message) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,202,f (object == null) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,203,hrow new IllegalArgumentException(message);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,205,eturn object;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,224,public static <T> T notNull(T object) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,225,"return notNull(object, DEFAULT_IS_NULL_EXCEPTION_MESSAGE);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,209," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,210, if the argument is <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,229,* <p>Validate that the specified argument is not <code>null</code>;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,230,* otherwise throwing an exception with the specified message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,212, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,213, Validate.notNull(myObject);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,214, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,216, <p>The message in the exception is 'The validated object is null'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,232,"* <pre>Validate.notNull(myObject, ""The object must not be null"");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,218, @param object  the object to check is not <code>null</code>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,219," @return the input object, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,220, @throws IllegalArgumentException if the object is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,234,* @param <T> the object type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,235,* @param object the object to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,236,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,237,* @param values the optional values for the formatted exception message
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,238,* @return the validated object (never <code>null</code> for method chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,239,* @throws NullPointerException if the object is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,240,* @see #notNull(Object)
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,222,ublic static <T> T notNull(T object) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,223,"eturn notNull(object, ""The validated object is null"");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,242,"public static <T> T notNull(T object, String message, Object... values) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,243,if (object == null) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,244,"throw new NullPointerException(String.format(message, values));"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,246,return object;
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,230," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,231, if the argument array is empty (<code>null</code> or no elements).</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,253,* <p>Validate that the specified argument array is neither <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,254,* nor a length of zero (no elements); otherwise throwing an exception
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,255,* with the specified message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,233, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,234," Validate.notEmpty(myArray, ""The array must not be empty"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,235, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,257,"* <pre>Validate.notEmpty(myArray, ""The array must not be empty"");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,237, @param array  the array to check is not empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,238, @param message  the exception message you would like to see if the array is empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,239," @return the input array, never <code>null</code> or empty, for chaining"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,259,* @param <T> the array type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,260,* @param array the array to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,261,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,262,* @return the validated array (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,263,* @throws NullPointerException if the array is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,265,* @see #notEmpty(Object[])
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,242,"ublic static <T> T[] notEmpty(T[] array, String message) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,243,f (array == null || array.length == 0) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,244,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,267,"public static <T> T[] notEmpty(T[] array, String message, Object... values) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,268,if (array == null) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,269,"throw new NullPointerException(String.format(message, values));"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,271,if (array.length == 0) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,272,"throw new IllegalArgumentException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,250," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,251, if the argument array is empty (<code>null</code> or no elements).</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,253, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,254, Validate.notEmpty(myArray);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,255, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,278,* <p>Validate that the specified argument array is neither <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,279,* nor a length of zero (no elements); otherwise throwing an exception.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,257, <p>The message in the exception is 'The validated array is empty'.
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,281,* <pre>Validate.notEmpty(myArray);</pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,259, @param array  the array to check is not empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,260," @return the input array, never <code>null</code> or empty, for chaining"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,283,* <p>The message in the exception is &quot;The validated array is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,284,* empty&quot;.
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,286,* @param <T> the array type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,287,* @param array the array to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,288,* @return the validated array (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,289,* @throws NullPointerException if the array is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,291,"* @see #notEmpty(Object[], String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,264,"eturn notEmpty(array, ""The validated array is empty"");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,294,"return notEmpty(array, DEFAULT_NOT_EMPTY_ARRAY_EXCEPTION_MESSAGE);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,271," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,272, if the argument Collection is empty (<code>null</code> or no elements).</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,301,* <p>Validate that the specified argument collection is neither <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,302,* nor a size of zero (no elements); otherwise throwing an exception
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,303,* with the specified message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,274, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,275," Validate.notEmpty(myCollection, ""The collection must not be empty"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,276, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,305,"* <pre>Validate.notEmpty(myCollection, ""The collection must not be empty"");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,278, @param collection  the collection to check is not empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,279, @param message  the exception message you would like to see if the collection is empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,280," @return the input collection, never <code>null</code> or empty, for chaining"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,307,* @param <T> the collection type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,308,* @param collection the collection to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,309,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,310,* @return the validated collection (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,311,* @throws NullPointerException if the collection is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,313,* @see #notEmpty(Object[])
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,283,"ublic static <T extends Collection<?>> T notEmpty(T collection, String message) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,284,f (collection == null || collection.size() == 0) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,285,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,315,"public static <T extends Collection<?>> T notEmpty(T collection, String message, Object... values) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,316,if (collection == null) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,317,"throw new NullPointerException(String.format(message, values));"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,319,if (collection.size() == 0) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,320,"throw new IllegalArgumentException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,291," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,292, if the argument Collection is empty (<code>null</code> or no elements).</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,326,* <p>Validate that the specified argument collection is neither <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,327,* nor a size of zero (no elements); otherwise throwing an exception.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,294, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,295, Validate.notEmpty(myCollection);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,296, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,298, <p>The message in the exception is 'The validated collection is empty'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,329,* <pre>Validate.notEmpty(myCollection);</pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,331,* <p>The message in the exception is &quot;The validated collection is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,332,* empty&quot;.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,300, @param collection  the collection to check is not empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,301," @return the input collection, never <code>null</code> or empty, for chaining"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,334,* @param <T> the collection type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,335,* @param collection the collection to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,336,* @return the validated collection (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,337,* @throws NullPointerException if the collection is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,339,"* @see #notEmpty(Collection, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,305,"eturn notEmpty(collection, ""The validated collection is empty"");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,342,"return notEmpty(collection, DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,312," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,313, if the argument Map is empty (<code>null</code> or no elements).</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,349,* <p>Validate that the specified argument map is neither <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,350,* nor a size of zero (no elements); otherwise throwing an exception
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,351,* with the specified message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,315, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,316," Validate.notEmpty(myMap, ""The map must not be empty"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,317, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,353,"* <pre>Validate.notEmpty(myMap, ""The map must not be empty"");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,319, @param map  the map to check is not empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,320, @param message  the exception message you would like to see if the map is empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,321," @return the input map, never <code>null</code> or empty, for chaining"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,355,* @param <T> the map type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,356,* @param map the map to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,357,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,358,* @return the validated map (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,359,* @throws NullPointerException if the map is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,361,* @see #notEmpty(Object[])
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,324,"ublic static <T extends Map<?, ?>> T notEmpty(T map, String message) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,325,f (map == null || map.size() == 0) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,326,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,363,"public static <T extends Map<?, ?>> T notEmpty(T map, String message, Object... values) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,364,if (map == null) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,365,"throw new NullPointerException(String.format(message, values));"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,367,if (map.size() == 0) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,368,"throw new IllegalArgumentException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,332," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,333, if the argument Map is empty (<code>null</code> or no elements).</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,335, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,336, Validate.notEmpty(myMap);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,337, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,374,* <p>Validate that the specified argument map is neither <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,375,* nor a size of zero (no elements); otherwise throwing an exception.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,339, <p>The message in the exception is 'The validated map is empty'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,377,* <pre>Validate.notEmpty(myMap);</pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,379,* <p>The message in the exception is &quot;The validated map is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,380,* empty&quot;.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,341, @param map  the map to check is not empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,342," @return the input map, never <code>null</code> or empty, for chaining"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,382,* @param <T> the map type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,383,* @param map the map to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,384,* @return the validated map (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,385,* @throws NullPointerException if the map is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,387,"* @see #notEmpty(Map, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,346,"eturn notEmpty(map, ""The validated map is empty"");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,390,"return notEmpty(map, DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,353," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,354, if the argument String is empty (<code>null</code> or zero length).</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,397,* <p>Validate that the specified argument character sequence is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,398,* neither <code>null</code> nor a length of zero (no characters);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,399,* otherwise throwing an exception with the specified message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,356, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,357," Validate.notEmpty(myString, ""The string must not be empty"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,358, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,401,"* <pre>Validate.notEmpty(myString, ""The string must not be empty"");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,360, @param string  the string to check is not empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,361, @param message  the exception message you would like to see if the string is empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,362," @return the input string, never <code>null</code> or empty, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,363, @throws IllegalArgumentException if the string is empty
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,403,* @param <T> the character sequence type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,404,* @param chars the character sequence to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,405,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,406,* @return the validated character sequence (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,407,* @throws NullPointerException if the character sequence is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,408,* @throws IllegalArgumentException if the character sequence is empty
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,409,* @see #notEmpty(CharSequence)
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,365,"ublic static <T extends CharSequence> T notEmpty(T string, String message) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,366,f (string == null || string.length() == 0) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,367,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,411,"public static <T extends CharSequence> T notEmpty(T chars, String message, Object... values) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,412,if (chars == null) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,413,"throw new NullPointerException(String.format(message, values));"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,415,if (chars.length() == 0) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,416,"throw new IllegalArgumentException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,369,eturn string;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,418,return chars;
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,373," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,374, if the argument String is empty (<code>null</code> or zero length).</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,422,* <p>Validate that the specified argument character sequence is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,423,* neither <code>null</code> nor a length of zero (no characters);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,424,* otherwise throwing an exception with the specified message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,376, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,377, Validate.notEmpty(myString);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,378, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,380, <p>The message in the exception is 'The validated string is empty'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,426,* <pre>Validate.notEmpty(myString);</pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,428,* <p>The message in the exception is &quot;The validated
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,429,* character sequence is empty&quot;.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,382, @param string  the string to check is not empty
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,383," @return the input string, never <code>null</code> or empty, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,384, @throws IllegalArgumentException if the string is empty
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,431,* @param <T> the character sequence type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,432,* @param chars the character sequence to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,433,* @return the validated character sequence (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,434,* @throws NullPointerException if the character sequence is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,435,* @throws IllegalArgumentException if the character sequence is empty
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,436,"* @see #notEmpty(CharSequence, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,386,ublic static <T extends CharSequence> T notEmpty(T string) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,387,"eturn notEmpty(string, ""The validated string is empty"");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,438,public static <T extends CharSequence> T notEmpty(T chars) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,439,"return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EXCEPTION_MESSAGE);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,394," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,395," if the argument String is blank (<code>null</code>, empty or whitespace).</p>"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,446,* <p>Validate that the specified argument character sequence is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,447,"* neither <code>null</code>, a length of zero (no characters), empty"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,448,* nor whitespace; otherwise throwing an exception with the specified
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,449,* message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,397, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,398," Validate.notBlank(myString, ""The string must not be blank"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,399, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,401, @param string  the string to check is not blank
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,402, @param message  the exception message you would like to see if the string is blank
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,403," @return the input string, never <code>null</code> or blank, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,404, @throws IllegalArgumentException if the string is blank
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,405, @see StringUtils#isBlank(CharSequence)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,451,"* <pre>Validate.notBlank(myString, ""The string must not be blank"");</pre>"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,453,* @param <T> the character sequence type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,454,* @param chars the character sequence to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,455,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,456,* @return the validated character sequence (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,457,* @throws NullPointerException if the character sequence is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,458,* @throws IllegalArgumentException if the character sequence is blank
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,459,* @see #notBlank(CharSequence)
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,407,"ublic static <T extends CharSequence> T notBlank(T string, String message) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,408,f (StringUtils.isBlank(string)) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,409,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,461,"public static <T extends CharSequence> T notBlank(T chars, String message, Object... values) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,462,if (chars == null) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,463,"throw new NullPointerException(String.format(message, values));"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,465,if (StringUtils.isBlank(chars)) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,466,"throw new IllegalArgumentException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,411,eturn string;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,468,return chars;
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,415," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,416," if the argument String is blank (<code>null</code>, empty or whitespace).</p>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,418, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,419, Validate.notBlank(myString);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,420, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,422, <p>The message in the exception is 'The validated string is blank'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,472,* <p>Validate that the specified argument character sequence is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,473,"* neither <code>null</code>, a length of zero (no characters), empty"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,474,* nor whitespace; otherwise throwing an exception.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,424, @param string  the string to check is not blank
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,425," @return the input string, never <code>null</code> or blank, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,426, @throws IllegalArgumentException if the string is blank
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,427, @see StringUtils#isBlank(CharSequence)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,476,* <pre>Validate.notBlank(myString);</pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,478,* <p>The message in the exception is &quot;The validated character
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,479,* sequence is blank&quot;.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,481,* @param <T> the character sequence type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,482,* @param chars the character sequence to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,483,* @return the validated character sequence (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,484,* @throws NullPointerException if the character sequence is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,485,* @throws IllegalArgumentException if the character sequence is blank
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,486,"* @see #notBlank(CharSequence, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,429,ublic static <T extends CharSequence> T notBlank(T string) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,430,"eturn notBlank(string, ""The validated string is blank"");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,488,public static <T extends CharSequence> T notBlank(T chars) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,489,"return notBlank(chars, DEFAULT_NOT_BLANK_EXCEPTION_MESSAGE);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,437," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,438, if the argument array has <code>null</code> elements or is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,439, <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,496,* <p>Validate that the specified argument array is neither
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,497,* <code>null</code> nor contains any elements that are <code>null</code>;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,498,* otherwise throwing an exception with the specified message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,441, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,442," Validate.noNullElements(myArray, ""The array must not contain null elements"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,443, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,500,"* <pre>Validate.noNullElements(myArray, ""The array contain null at position %d"");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,445, <p>If the array is null then the message in the exception is 'The validated object is null'.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,447, @param array  the array to check
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,448, @param message  the exception message if the array has
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,449,  <code>null</code> elements
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,450," @return the validated input array, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,451, @throws IllegalArgumentException if the array has <code>null</code>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,452,  elements or is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,502,"* <p>If the array is <code>null</code>, then the message in the exception"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,503,* is &quot;The validated object is null&quot;.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,505,"* <p>If the array has a <code>null</code> element, then the iteration"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,506,* index of the invalid element is appended to the <code>values</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,507,* argument.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,509,* @param <T> the array type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,510,* @param array the array to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,511,* @return the validated array (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,512,* @throws NullPointerException if the array is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,513,* @throws IllegalArgumentException if an element is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,514,* @see #noNullElements(Object[])
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,454,"ublic static <T> T[] noNullElements(T[] array, String message) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,516,"public static <T> T[] noNullElements(T[] array, String message, Object... values) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,458,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,520,"Object[] values2 = ArrayUtils.add(values, i);"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,521,"throw new IllegalArgumentException(String.format(message, values2));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,465," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,466, if the argument array has <code>null</code> elements or is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,467, <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,528,* <p>Validate that the specified argument array is neither
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,529,* <code>null</code> nor contains any elements that are <code>null</code>;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,530,* otherwise throwing an exception.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,469, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,470, Validate.noNullElements(myArray);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,471, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,473, <p>If the array has a null element the message in the exception is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,474, 'The validated array contains null element at index: '.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,476, <p>If the array is null then the message in the exception is 'The validated object is null'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,532,* <pre>Validate.noNullElements(myArray);</pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,534,"* <p>If the array is <code>null</code>, then the message in the exception"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,535,* is &quot;The validated object is null&quot;.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,478, @param array  the array to check
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,479," @return the validated input array, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,480, @throws IllegalArgumentException if the array has <code>null</code>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,481,  elements or is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,537,"* <p>If the array has a <code>null</code> element, then the message in the"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,538,* exception is &quot;The validated array contains null element at index:
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,539,* &quot followed by the index.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,541,* @param <T> the array type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,542,* @param array the array to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,543,* @return the validated array (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,544,* @throws NullPointerException if the array is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,545,* @throws IllegalArgumentException if an element is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,546,"* @see #noNullElements(Object[], String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,484,alidate.notNull(array);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,485,or (int i = 0; i < array.length; i++) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,486,f (array[i] == null) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,487,"hrow new IllegalArgumentException(""The validated array contains null element at index: "" + i);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,490,eturn array;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,549,"return noNullElements(array, DEFAULT_NO_NULL_ELEMENTS_ARRAY_EXCEPTION_MESSAGE);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,497," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,498, if the argument Collection has <code>null</code> elements or is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,499, <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,556,* <p>Validate that the specified argument collection is neither
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,557,* <code>null</code> nor contains any elements that are <code>null</code>;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,558,* otherwise throwing an exception with the specified message.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,501, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,502," Validate.noNullElements(myCollection, ""The collection must not contain null elements"");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,503, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,505, <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,560,"* <pre>Validate.noNullElements(myCollection, ""The collection contains null at position %d"");</pre>"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,562,"* <p>If the collection is <code>null</code>, then the message in the exception"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,563,* is &quot;The validated object is null&quot;.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,507, @param collection  the collection to check
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,508, @param message  the exception message if the collection has
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,509,  <code>null</code> elements
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,510," @return the validated input collection, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,511, @throws IllegalArgumentException if the collection has
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,512,  <code>null</code> elements or is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,565,"* <p>If the collection has a <code>null</code> element, then the iteration"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,566,* index of the invalid element is appended to the <code>values</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,567,* argument.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,569,* @param <T> the collection type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,570,* @param collection the collection to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,571,* @return the validated collection (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,572,* @throws NullPointerException if the array is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,573,* @throws IllegalArgumentException if an element is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,574,"* @see #noNullElements(Collection, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,514,"ublic static <T extends Collection<?>> T noNullElements(T collection, String message) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,576,"public static <T extends Collection<?>> T noNullElements(T collection, String message, Object... values) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,516,or (Iterator<?> it = collection.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,578,int i = 0;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,579,for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,518,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,581,"Object[] values2 = ArrayUtils.addAll(values, i);"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,582,"throw new IllegalArgumentException(String.format(message, values2));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,525," <p>Validate an argument, throwing <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,526, if the argument Collection has <code>null</code> elements or is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,527, <code>null</code>.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,529, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,530, Validate.noNullElements(myCollection);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,531, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,589,* <p>Validate that the specified argument collection is neither
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,590,* <code>null</code> nor contains any elements that are <code>null</code>;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,591,* otherwise throwing an exception.
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,533, <p>The message in the exception is 'The validated collection contains null element at index: '.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,535, <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,593,* <pre>Validate.noNullElements(myCollection);</pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,595,"* <p>If the collection is <code>null</code>, then the message in the exception"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,596,* is &quot;The validated object is null&quot;.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,537, @param collection  the collection to check
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,538," @return the validated input collection, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,539, @throws IllegalArgumentException if the collection has
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,540,  <code>null</code> elements or is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,598,"* <p>If the array has a <code>null</code> element, then the message in the"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,599,* exception is &quot;The validated collection contains null element at index:
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,600,* &quot followed by the index.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,602,* @param <T> the collection type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,603,* @param collection the collection to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,604,* @return the validated collection (never <code>null</code> method for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,605,* @throws NullPointerException if the array is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,606,* @throws IllegalArgumentException if an element is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,607,"* @see #noNullElements(Collection, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,543,alidate.notNull(collection);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,544,nt i = 0;
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,545,or (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,546,f (it.next() == null) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,547,"hrow new IllegalArgumentException(""The validated collection contains null element at index: "" + i);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,550,eturn collection;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,610,"return noNullElements(collection, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,557," <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,558, index for the argument array is invalid or if the array is <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,617,* <p>Validates that the index is within the bounds of the argument
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,618,* array; otherwise throwing an exception with the specified message.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,560, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,561," Validate.validIndex(myArray, 2, ""The array index is invalid: "");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,562, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,620,"* <pre>Validate.validIndex(myArray, 2, ""The array index is invalid: "");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,564, <p>If the array is null then the message in the exception is 'The validated object is null'.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,566," @param array  the array to check, not null"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,567, @param message  the exception message if the array index is invalid
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,568," @return the validated input array, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,569, @throws IllegalArgumentException if the array index is invalid or null
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,622,"* <p>If the array is <code>null</code>, then the message of the exception"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,623,* is &quot;The validated object is null&quot;.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,625,* @param <T> the array type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,626,* @param array the array to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,627,* @param index the index
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,628,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,629,* @return the validated array (never <code>null</code> for method chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,630,* @throws NullPointerException if the array is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,631,* @throws IndexOutOfBoundsException if the index is invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,632,"* @see #validIndex(Object[], int)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,571,"ublic static <T> T[] validIndex(T[] array, int index, String message) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,634,"public static <T> T[] validIndex(T[] array, int index, String message, Object... values) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,574,hrow new IllegalArgumentException(message + index);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,637,"throw new IndexOutOfBoundsException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,580," <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,581, index for the argument array is invalid or if the array is <code>null</code>.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,583, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,584," Validate.validIndex(myArray, 2);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,585, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,643,* <p>Validates that the index is within the bounds of the argument
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,644,* array; otherwise throwing an exception.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,587, <p>If the array index is invalid the message in the exception is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,588, 'The validated array index is invalid: ' followed by the index.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,646,"* <pre>Validate.validIndex(myArray, 2);</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,590, <p>If the array is null then the message in the exception is 'The validated object is null'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,648,"* <p>If the array is <code>null</code>, then the message of the exception"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,649,* is &quot;The validated object is null&quot;.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,651,"* <p>If the index is invalid, then the message of the exception is"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,652,* &quot;The validated array index is invalid: &quot; followed by the
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,653,* index.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,592," @param array  the array to check, not null"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,593," @return the validated input array, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,594, @throws IllegalArgumentException if the array index is invalid or null
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,655,* @param <T> the array type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,656,* @param array the array to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,657,* @param index the index
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,658,* @return the validated array (never <code>null</code> for method chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,659,* @throws NullPointerException if the array is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,660,* @throws IndexOutOfBoundsException if the index is invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,661,"* @see #validIndex(Object[], int, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,597,"eturn validIndex(array, index, ""The validated array index is invalid: "");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,664,"return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE, index);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,604," <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,605, index for the argument collection is invalid or if the collection is <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,671,* <p>Validates that the index is within the bounds of the argument
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,672,* collection; otherwise throwing an exception with the specified message.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,607, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,608," Validate.validIndex(myCollection, 2, ""The collection index is invalid: "");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,609, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,674,"* <pre>Validate.validIndex(myCollection, 2, ""The collection index is invalid: "");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,611, <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,613," @param coll  the collection to check, not null"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,614, @param message  the exception message if the collection index is invalid
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,615," @return the validated input collection, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,616, @throws IllegalArgumentException if the collection index is invalid or null
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,676,"* <p>If the collection is <code>null</code>, then the message of the"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,677,* exception is &quot;The validated object is null&quot;.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,679,* @param <T> the collection type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,680,* @param collection the collection to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,681,* @param index the index
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,682,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,683,* @return the validated collection (never <code>null</code> for chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,684,* @throws NullPointerException if the collection is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,685,* @throws IndexOutOfBoundsException if the index is invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,686,"* @see #validIndex(Collection, int)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,618,"ublic static <T extends Collection<?>> T validIndex(T coll, int index, String message) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,619,alidate.notNull(coll);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,620,f (index < 0 || index >= coll.size()) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,621,hrow new IllegalArgumentException(message + index);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,688,"public static <T extends Collection<?>> T validIndex(T collection, int index, String message, Object... values) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,689,Validate.notNull(collection);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,690,if (index < 0 || index >= collection.size()) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,691,"throw new IndexOutOfBoundsException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,623,eturn coll;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,693,return collection;
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,627," <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,628, index for the argument collection is invalid or if the collection is <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,697,* <p>Validates that the index is within the bounds of the argument
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,698,* collection; otherwise throwing an exception.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,630, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,631," Validate.validIndex(myCollection, 2);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,632, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,634, <p>If the collection index is invalid the message in the exception is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,635, 'The validated collection index is invalid: ' followed by the index.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,700,"* <pre>Validate.validIndex(myCollection, 2);</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,637, <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,702,"* <p>If the index is invalid, then the message of the exception"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,703,* is &quot;The validated collection index is invalid: &quot;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,704,* followed by the index.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,639," @param coll  the collection to check, not null"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,640," @return the validated input collection, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,641, @throws IllegalArgumentException if the collection index is invalid or null
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,706,* @param <T> the collection type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,707,* @param collection the collection to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,708,* @param index the index
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,709,* @return the validated collection (never <code>null</code> for method chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,710,* @throws NullPointerException if the collection is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,711,* @throws IndexOutOfBoundsException if the index is invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,712,"* @see #validIndex(Collection, int, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,643,"ublic static <T extends Collection<?>> T validIndex(T coll, int index) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,644,"eturn validIndex(coll, index, ""The validated collection index is invalid: "");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,714,"public static <T extends Collection<?>> T validIndex(T collection, int index) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,715,"return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE, index);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,651," <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,652, index for the argument character sequence (including String and StringBuffer)
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,653, is invalid or if the string is <code>null</code>.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,722,* <p>Validates that the index is within the bounds of the argument
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,723,* character sequence; otherwise throwing an exception with the
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,724,* specified message.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,655, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,656," Validate.validIndex(myStr, 2, ""The string index is invalid: "");"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,657, </pre>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,726,"* <pre>Validate.validIndex(myStr, 2, ""The string index is invalid: "");</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,659, <p>If the string is null then the message in the exception is 'The validated object is null'.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,661," @param str  the string to check, not null"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,662, @param message  the exception message if the string index is invalid
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,663," @return the validated input string, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,664, @throws IllegalArgumentException if the string index is invalid or null
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,728,"* <p>If the character sequence is <code>null</code>, then the message"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,729,* of the exception is &quot;The validated object is null&quot;.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,731,* @param <T> the character sequence type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,732,* @param chars the character sequence to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,733,* @param index the index
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,734,* @param message the exception message if invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,735,* @return the validated character sequence (never <code>null</code> for method chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,736,* @throws NullPointerException if the character sequence is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,737,* @throws IndexOutOfBoundsException if the index is invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,738,"* @see #validIndex(CharSequence, int)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,666,"ublic static <T extends CharSequence> T validIndex(T str, int index, String message) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,667,alidate.notNull(str);
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,668,f (index < 0 || index >= str.length()) {
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,669,hrow new IllegalArgumentException(message + index);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,740,"public static <T extends CharSequence> T validIndex(T chars, int index, String message, Object... values) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,741,Validate.notNull(chars);
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,742,if (index < 0 || index >= chars.length()) {
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,743,"throw new IndexOutOfBoundsException(String.format(message, values));"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,671,eturn str;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,745,return chars;
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,675," <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,676, index for the argument character sequence (including String and StringBuffer)
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,677, is invalid or if the string is <code>null</code>.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,679, <pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,680," Validate.validIndex(myStr, 2);"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,681, </pre>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,683, <p>If the string index is invalid the message in the exception is
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,684, 'The validated string index is invalid: ' followed by the index.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,749,* <p>Validates that the index is within the bounds of the argument
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,750,* character sequence; otherwise throwing an exception.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,752,"* <pre>Validate.validIndex(myStr, 2);</pre>"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,686, <p>If the string is null then the message in the exception is 'The validated object is null'.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,754,"* <p>If the character sequence is <code>null</code>, then the message"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,755,* of the exception is &quot;The validated object is
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,756,* null&quot;.</p>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,758,"* <p>If the index is invalid, then the message of the exception"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,759,* is &quot;The validated character sequence index is invalid: &quot;
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,760,* followed by the index.</p>
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,688," @param str  the string to check, not null"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,689," @return the validated input string, never <code>null</code>, for chaining"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,690, @throws IllegalArgumentException if the string index is invalid or null
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,762,* @param <T> the character sequence type
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,763,* @param chars the character sequence to check
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,764,* @param index the index
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,765,* @return the validated character sequence (never <code>null</code> for method chaining)
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,766,* @throws NullPointerException if the character sequence is <code>null</code>
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,767,* @throws IndexOutOfBoundsException if the index is invalid
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,768,"* @see #validIndex(CharSequence, int, String, Object...)"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,692,"ublic static <T extends CharSequence> T validIndex(T str, int index) {"
False,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,693,"eturn validIndex(str, index, ""The validated string index is invalid: "");"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,770,"public static <T extends CharSequence> T validIndex(T chars, int index) {"
True,src/java/org/apache/commons/lang/Validate.java,src/java/org/apache/commons/lang/Validate.java,771,"return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE, index);"

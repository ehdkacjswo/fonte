is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,576,* @throws IOException if there is a problem writing
True,src/java/org/apache/commons/lang/StringEscapeUtils.java,src/java/org/apache/commons/lang/StringEscapeUtils.java,629,* @throws IOException if there is a problem writing
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,263,* @param excludeFields  fields to exclude
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,271,"ublic static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients, Class reflectUpToClass, String[] excludeFields) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,272,public static int reflectionCompare(
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,273,"Object lhs,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,274,"Object rhs,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,275,"boolean compareTransients,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,276,"Class reflectUpToClass,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,277,String[] excludeFields) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,291,"eturn reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,291,"return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,292,"object, testTransients, null, null"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,357,* @param excludeFields  Collection of String field names to exclude from use in calculation of hash code
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,382,"ublic static String toString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {"
True,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,382,"public static String toString(Object object, ToStringStyle style,"
True,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,383,"boolean outputTransients, Class reflectUpToClass)"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,719,"rivate int readWithQuotes(char[] chars, int start, int len, StrBuilder workArea, List tokens, int quoteStart, int quoteLen) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,719,"private int readWithQuotes(char[] chars, int start, int len, StrBuilder workArea,"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,720,"List tokens, int quoteStart, int quoteLen)"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1073,* @throws CloneNotSupportedException if there is a problem cloning
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,368,"hile (hasNext() && (endLen = getVarEndMatcher().isMatch(data, getPos(), 0, getLength())) <= 0) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,368,while ( hasNext() &&
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,369,"(endLen = getVarEndMatcher().isMatch(data, getPos(), 0, getLength())) <= 0"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,691,"System.err.println(""DST: "" + val.get(Calendar.DST_OFFSET));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,163, @throws IllegalArgumentException if the <code>Number</code> cannot be compared
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,172,ublic boolean lessThan(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,172,* <p>Tests whether the specified element occurs before this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,174,* @param element  the element to test
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,175,* @return <code>true</code> if the specified element occurs before this range
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,177,public boolean elementBefore(T element) {
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,174,eturn false;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,179,return false; // ??
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,177,"eturn this.comparator.compare(getMinimum(), element) < 1;"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,182,"return this.comparator.compare(element, getMinimum()) < 0;"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,180,ublic boolean greaterThan(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,186,* <p>Tests whether the specified element occurs after this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,188,* @param element  the element to test
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,189,* @return <code>true</code> if the specified element occurs after this range
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,191,public boolean elementAfter(T element) {
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,182,eturn false;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,193,return false; // ??
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,185,"eturn this.comparator.compare(getMaximum(), element) > -1;"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,196,"return this.comparator.compare(element, getMaximum()) > 0;"
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,55, Test method for 'org.apache.commons.lang.Range.equals(Object)'
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,70, Test method for 'org.apache.commons.lang.Range.hashCode()'
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,70,"assertEquals(intRange.hashCode(), intRange.hashCode());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,71,assertTrue(intRange.hashCode() != 0);
False,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,78, Test method for 'org.apache.commons.lang.Range.toString()'
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,77,String str = intRange.toString();
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,78,"assertEquals(""Range[10,20]"", str);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,79,"//        assertSame(str, intRange.toString());  // no longer passes - does it matter?"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,80,"assertEquals(""Range[-20,-10]"", new Range<Integer>(-20, -10).toString());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,109,public void testElementBefore() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,110,assertFalse(intRange.elementBefore(null));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,112,assertTrue(intRange.elementBefore(5));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,113,assertFalse(intRange.elementBefore(10));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,114,assertFalse(intRange.elementBefore(15));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,115,assertFalse(intRange.elementBefore(20));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,116,assertFalse(intRange.elementBefore(25));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,119,public void testElementAfter() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,120,assertFalse(intRange.elementAfter(null));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,122,assertFalse(intRange.elementAfter(5));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,123,assertFalse(intRange.elementAfter(10));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,124,assertFalse(intRange.elementAfter(15));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,125,assertFalse(intRange.elementAfter(20));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,126,assertTrue(intRange.elementAfter(25));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,163,public void testOverlapsRange() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,165,// null handling
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,166,assertFalse(intRange.overlapsRange(null));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,168,// easy inside range
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,169,"assertTrue(intRange.overlapsRange(new Range(12, 18)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,171,// outside range on each side
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,172,"assertFalse(intRange.overlapsRange(new Range(32, 45)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,173,"assertFalse(intRange.overlapsRange(new Range(2, 8)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,175,// equals range
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,176,"assertTrue(intRange.overlapsRange(new Range(10, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,178,// overlaps
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,179,"assertTrue(intRange.overlapsRange(new Range(9, 14)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,180,"assertTrue(intRange.overlapsRange(new Range(16, 21)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,182,// touches lower boundary
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,183,"assertTrue(intRange.overlapsRange(new Range(10, 19)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,184,"assertTrue(intRange.overlapsRange(new Range(10, 21)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,186,// touches upper boundary
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,187,"assertTrue(intRange.overlapsRange(new Range(11, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,188,"assertTrue(intRange.overlapsRange(new Range(9, 20)));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,190,// negative
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,191,"assertFalse(intRange.overlapsRange(new Range(-11, -18)));"

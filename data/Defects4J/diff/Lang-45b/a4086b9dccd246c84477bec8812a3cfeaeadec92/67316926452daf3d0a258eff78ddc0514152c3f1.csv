is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,315,hile (days < 0) {
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,316,"nd.add(Calendar.MONTH, -1);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,317,ays += end.getActualMaximum(Calendar.DAY_OF_MONTH);
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,318,/ HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,315,if (days < 0) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,316,days += start.getActualMaximum(Calendar.DAY_OF_MONTH);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,317,// It's a tricky subject. Jan 15th to March 10th. If I count days-first it is
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,319,// Here we choose the former.
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,323,"nd.add(Calendar.MONTH, 1);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,327,"start.add(Calendar.YEAR, 1);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,330,/ This next block of code adds in values that
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,330,// This rest of this code adds in values that
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,338,"/ TODO: this is a bit weak, needs work to know about leap years"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,339,ays += 365 * years;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,339,while(start.get(Calendar.YEAR) != end.get(Calendar.YEAR)) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,340,days += start.getActualMaximum(Calendar.DAY_OF_YEAR);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,341,"start.add(Calendar.YEAR, 1);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,343,"f (!Token.containsTokenWithValue(tokens, M)) {"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,347,"if (!Token.containsTokenWithValue(tokens, M) && months != 0) {"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,348,"start.set(start.get(Calendar.YEAR), start.get(Calendar.MONTH), 0, 0, 0, 0);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,349,"start.add(Calendar.MONTH, 1);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,350,"end.set(end.get(Calendar.YEAR), end.get(Calendar.MONTH), 0, 0, 0, 0);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,354,// WARNING: For performance sake the Calendar instances are not being
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,355,// cloned but modified inline. They should not be trusted after this point
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,356,start = null;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,357,end = null;
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,424,"assertEqualDuration( ""01 26"", new int[] { 2006, 0, 15, 0, 0, 0 },"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,425,"new int[] { 2006, 2, 10, 0, 0, 0 }, ""MM dd"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,426,"assertEqualDuration( ""54"", new int[] { 2006, 0, 15, 0, 0, 0 },"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,427,"new int[] { 2006, 2, 10, 0, 0, 0 }, ""dd"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,429,"assertEqualDuration( ""09 12"", new int[] { 2006, 1, 20, 0, 0, 0 },"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,430,"new int[] { 2006, 11, 4, 0, 0, 0 }, ""MM dd"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,431,"assertEqualDuration( ""287"", new int[] { 2006, 1, 20, 0, 0, 0 },"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,432,"new int[] { 2006, 11, 4, 0, 0, 0 }, ""dd"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,434,"assertEqualDuration( ""11 30"", new int[] { 2006, 0, 2, 0, 0, 0 },"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,435,"new int[] { 2007, 0, 1, 0, 0, 0 }, ""MM dd"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,436,"assertEqualDuration( ""364"", new int[] { 2006, 0, 2, 0, 0, 0 },"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,437,"new int[] { 2007, 0, 1, 0, 0, 0 }, ""dd"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,439,"assertEqualDuration( ""12 00"", new int[] { 2006, 0, 1, 0, 0, 0 },"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,440,"new int[] { 2007, 0, 1, 0, 0, 0 }, ""MM dd"");"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,441,"assertEqualDuration( ""365"", new int[] { 2006, 0, 1, 0, 0, 0 },"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,442,"new int[] { 2007, 0, 1, 0, 0, 0 }, ""dd"");"
False,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,432,"tring result = DurationFormatUtils.formatPeriod(cal1.getTime().getTime(), cal2.getTime().getTime(), format);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,453,long milli1 = cal1.getTime().getTime();
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,454,long milli2 = cal2.getTime().getTime();
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,455,"String result = DurationFormatUtils.formatPeriod(milli1, milli2, format);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,31," @version $Id: Nestable.java,v 1.11 2004/02/18 22:54:04 ggregory Exp $"
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,31,"* @version $Id: Nestable.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $"
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,109," specified type in the chain of <code>Throwable</code>s, or -1 if the"
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,110, specified type is not found in the chain.
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,109,"* specified type, or a subclass, in the chain of <code>Throwable</code>s."
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,110,* The method returns -1 if the specified type is not found in the chain.
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,111,* <p>
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,112,"* NOTE: From v2.1, we have clarified the <code>Nestable</code> interface"
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,113,* such that this method matches subclasses.
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,114,"* If you want to NOT match subclasses, please use"
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,115,"* {@link ExceptionUtils#indexOfThrowable(Throwable, Class)}"
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,116,* (which is avaiable in all versions of lang).
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,112, @param type <code>Class</code> to be found
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,118,"* @param type  the type to find, subclasses match, null returns -1"
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,120, that matches the specified type in the chain of <code>Throwable</code>s
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,121," with an index greater than or equal to the specified index, or -1 if"
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,122, the type is not found.
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,126,"* that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s"
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,127,* with an index greater than or equal to the specified index.
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,128,* The method returns -1 if the specified type is not found in the chain.
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,129,* <p>
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,130,"* NOTE: From v2.1, we have clarified the <code>Nestable</code> interface"
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,131,* such that this method matches subclasses.
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,132,"* If you want to NOT match subclasses, please use"
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,133,"* {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}"
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,134,* (which is avaiable in all versions of lang).
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,124, @param type <code>Class</code> to be found
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,136,"* @param type  the type to find, subclasses match, null returns -1"
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,155, included--using the provided writer.  Used by {@link
False,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,156, org.apache.commons.lang.exception.NestableDelegate} to write
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,167,* included--using the provided writer.  Used by
True,src/java/org/apache/commons/lang/exception/Nestable.java,src/java/org/apache/commons/lang/exception/Nestable.java,168,* {@link org.apache.commons.lang.exception.NestableDelegate} to write
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,44," @version $Id: NestableDelegate.java,v 1.25 2004/09/30 07:03:25 bayard Exp $"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,44,"* @version $Id: NestableDelegate.java,v 1.26 2004/10/09 10:45:24 scolebourne Exp $"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,65,"* This exists for backwards compatability, setting it to false will return"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,66,* the library to v1.0 behaviour (but will affect all users of the library
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,67,* in the classloader).
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,75,"* This exists for backwards compatability, setting it to false will return"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,76,* the library to v1.0 behaviour (but will affect all users of the library
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,77,* in the classloader).
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,83,* Whether to match subclasses via indexOf.
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,84,"* This public flag may be set by calling code, typically in initialisation."
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,85,"* This exists for backwards compatability, setting it to false will return"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,86,* the library to v2.0 behaviour (but will affect all users of the library
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,87,* in the classloader).
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,88,* @since 2.1
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,90,public static boolean matchSubclasses = true;
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,215, that matches the specified type in the chain of <code>Throwable</code>s
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,216, held in this delegate's <code>Nestable</code> with an index greater than
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,217," or equal to the specified index, or -1 if the type is not found."
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,231,"* that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,232,* with an index greater than or equal to the specified index.
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,233,* The method returns -1 if the specified type is not found in the chain.
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,234,* <p>
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,235,"* NOTE: From v2.1, we have clarified the <code>Nestable</code> interface"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,236,* such that this method matches subclasses.
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,237,"* If you want to NOT match subclasses, please use"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,238,"* {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,239,* (which is avaiable in all versions of lang).
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,240,* An alternative is to use the public static flag {@link #matchSubclasses}
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,241,"* on <code>NestableDelegate</code>, however this is not recommended."
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,219, @param type <code>Class</code> to be found
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,243,"* @param type  the type to find, subclasses match, null returns -1"
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,254,if (type == null) {
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,255,return -1;
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,238,or (int i = fromIndex; i < throwables.length; i++) {
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,239,/ TODO: decide on whether to include this
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,240,/            if (type.isAssignableFrom(throwables[i].getClass())) {
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,241,f (throwables[i].getClass().equals(type)) {
False,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,242,eturn i;
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,265,if (matchSubclasses) {
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,266,for (int i = fromIndex; i < throwables.length; i++) {
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,267,if (type.isAssignableFrom(throwables[i].getClass())) {
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,268,return i;
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,271,} else {
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,272,for (int i = fromIndex; i < throwables.length; i++) {
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,273,if (type.equals(throwables[i].getClass())) {
True,src/java/org/apache/commons/lang/exception/NestableDelegate.java,src/java/org/apache/commons/lang/exception/NestableDelegate.java,274,return i;
False,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,28," @version $Id: AbstractNestableTestCase.java,v 1.6 2004/02/18 23:02:15 ggregory Exp $"
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,28,"* @version $Id: AbstractNestableTestCase.java,v 1.7 2004/10/09 10:45:24 scolebourne Exp $"
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,363,"doNestableExceptionIndexOfThrowable(n, getBaseThrowableClass(), 0, msgs[0]);"
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,365,"doNestableExceptionIndexOfThrowable(n, null, -1, null);"
False,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,371,"ssertEquals(""index of throwable "" + type.getName(), expectedIndex, index);"
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,373,"assertEquals(""index of throwable "" + (type == null ? ""null"" : type.getName()), expectedIndex, index);"
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,426,"doNestableExceptionIndexOfThrowableI(n, null, 0, -1, null);"
False,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,450,"ssertEquals(""index of throwable "" + type.getName(), expectedIndex, index);"
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,453,"assertEquals(""index of throwable "" + (type == null ? ""null"" : type.getName()), expectedIndex, index);"
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,673,"* Returns the base class being used, typically Error, Eception or RuntimeException."
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,675,* @return the class
True,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java,677,public abstract Class getBaseThrowableClass();
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,19,import java.io.EOFException;
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,20,import java.io.IOException;
False,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,31," @version $Id: NestableDelegateTestCase.java,v 1.8 2004/02/18 23:02:15 ggregory Exp $"
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,33,"* @version $Id: NestableDelegateTestCase.java,v 1.9 2004/10/09 10:45:24 scolebourne Exp $"
False,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,425,hrowables[4] = Exception.class;
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,427,throwables[4] = EOFException.class;
False,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,431,ew Exception(msgs[4])
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,433,new EOFException(msgs[4])
False,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,445,"oNestableDelegateIndexOfThrowable(d, Exception.class, 2, 4, msgs[4]);"
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,447,"doNestableDelegateIndexOfThrowable(d, EOFException.class, 2, 4, msgs[4]);"
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,448,"doNestableDelegateIndexOfThrowable(d, IOException.class, 2, 4, msgs[4]);"
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,449,"doNestableDelegateIndexOfThrowable(d, Exception.class, 2, 2, msgs[2]);"
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,450,"doNestableDelegateIndexOfThrowable(d, Exception.class, 0, 0, msgs[0]);"
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,452,"doNestableDelegateIndexOfThrowable(d, null, 0, -1, null);"
False,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,472,"ssertEquals(""index of throwable "" + type.getName(), expectedIndex, index);"
True,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java,478,"assertEquals(""index of throwable "" + (type == null ? ""null"" : type.getName()), expectedIndex, index);"
True,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,18,import java.io.EOFException;
False,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,26," @version $Id: NestableErrorTestCase.java,v 1.6 2004/02/18 23:02:15 ggregory Exp $"
True,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,28,"* @version $Id: NestableErrorTestCase.java,v 1.7 2004/10/09 10:45:24 scolebourne Exp $"
False,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,192,eturn new Error(msg);
True,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,194,return new EOFException(msg);
True,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,202,return EOFException.class;
True,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,206,* @see AbstractNestableTestCase#getBaseThrowableClass()
True,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java,208,public Class getBaseThrowableClass()
True,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,20,import java.io.EOFException;
False,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,32," @version $Id: NestableExceptionTestCase.java,v 1.11 2004/02/18 23:02:15 ggregory Exp $"
True,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,33,"* @version $Id: NestableExceptionTestCase.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $"
False,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,198,eturn new Exception(msg);
True,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,199,return new EOFException(msg);
False,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,206,eturn Exception.class;
True,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,207,return EOFException.class;
True,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,211,* @see AbstractNestableTestCase#getBaseThrowableClass()
True,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,213,public Class getBaseThrowableClass()
True,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java,215,return Exception.class;
True,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,19,import java.io.EOFException;
False,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,29," @version $Id: NestableRuntimeExceptionTestCase.java,v 1.11 2004/02/18 23:22:29 ggregory Exp $"
True,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,30,"* @version $Id: NestableRuntimeExceptionTestCase.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $"
False,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,195,eturn new RuntimeException(msg);
True,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,196,return new EOFException(msg);
True,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,204,return EOFException.class;
True,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,208,* @see AbstractNestableTestCase#getBaseThrowableClass()
True,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java,210,public Class getBaseThrowableClass()

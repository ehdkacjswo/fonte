is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,2, Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,18,import java.io.Serializable;
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,19, A mutable <code>Byte</code>.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,21,* A mutable <code>byte</code>.
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,22," @version $Id: MutableByte.java,v 1.3 2004/06/24 04:20:46 bayard Exp $"
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,24,"* @version $Id: MutableByte.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $"
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,24,ublic class MutableByte extends MutableNumber {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,26,public class MutableByte extends Number
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,27,"implements Comparable, Mutable, Serializable {"
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,29,/** Serialization lock. */
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,30,private static final long serialVersionUID = -1585823265L;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,32,/** The mutable value. */
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,33,private byte value;
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,27, Internal value.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,36,* Constructs a new MutableByte with the default value of zero.
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,29,rivate byte value;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,38,public MutableByte() {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,39,super();
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,32, Instantiates with the specified value
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,43,* Constructs a new MutableByte with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,53,* Constructs a new MutableByte with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,55,* @param value a value.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,56,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,58,public MutableByte(Number value) {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,59,super();
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,60,this.value = value.byteValue();
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,65,* Gets the value as a Byte instance.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,67,* @return the value as a Byte
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,69,public Object getValue() {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,70,return new Byte(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,74,* Sets the value.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,76,* @param value  the value to set
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,83,* Sets the value from any Number instance.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,85,* @param value  the value to set
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,86,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,87,* @throws ClassCastException if the type is invalid
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,89,public void setValue(Object value) {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,90,setValue(((Number) value).byteValue());
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,94,public byte byteValue() {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,95,return value;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,98,public int intValue() {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,99,return (int) value;
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,45,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,103,return (long) value;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,106,public float floatValue() {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,107,return (float) value;
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,49,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,111,return (double) value;
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,52,ublic int intValue() {
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,53,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,116,* Checks if this object equals the specified object.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,117,* <p>
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,118,* The object must be a MutableByte with the same value to be equal.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,120,* @param obj  the object to compare to
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,121,* @return true if equal
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,123,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,124,if (obj instanceof MutableByte) {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,125,return (value == ((MutableByte) obj).value);
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,127,return false;
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,57, @return a <code>Byte</code>
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,131,* Returns a suitable hashcode for this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,133,* @return a suitable hashcode
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,59,ublic Object getValue() {
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,60,eturn new Byte(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,135,public int hashCode() {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,136,return (int) value;
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,64, @param value a <code>Byte</code>
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,140,* Compares this mutable to another in ascending order.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,142,* @param obj  the mutable to compare to
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,143,"* @return negative if this is less, zero if equal, positive if greater"
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,66,ublic void setValue(Object value) {
False,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,67,etValue(((Number)value).byteValue());
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,145,public int compareTo(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,146,MutableByte other = (MutableByte) obj;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,147,byte anotherVal = other.value;
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,148,return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,152,* Returns the String value of this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,154,* @return the mutable value as a string
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,156,public String toString() {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,157,return String.valueOf((int) value);
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,2, Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,20,import org.apache.commons.lang.math.NumberUtils;
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,19, A mutable <code>Double</code>
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,23,* A mutable <code>double</code>.
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,22," @version $Id: MutableDouble.java,v 1.3 2004/06/24 04:20:46 bayard Exp $"
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,26,"* @version $Id: MutableDouble.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $"
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,24,ublic class MutableDouble extends MutableNumber {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,28,public class MutableDouble extends Number
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,29,"implements Comparable, Mutable, Serializable {"
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,31,/** Serialization lock. */
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,32,private static final long serialVersionUID = 1587163916L;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,34,/** The mutable value. */
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,35,private double value;
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,27, Internal value.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,38,* Constructs a new MutableDouble with the default value of zero.
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,29,rivate double value;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,40,public MutableDouble() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,41,super();
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,32, Instantiates with the specified value
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,45,* Constructs a new MutableDouble with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,55,* Constructs a new MutableDouble with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,57,* @param value a value.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,58,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,60,public MutableDouble(Number value) {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,61,super();
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,62,this.value = value.doubleValue();
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,67,* Gets the value as a Double instance.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,69,* @return the value as a Double
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,71,public Object getValue() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,72,return new Double(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,76,* Sets the value.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,78,* @param value  the value to set
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,44,ublic double doubleValue() {
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,45,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,85,* Sets the value from any Number instance.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,87,* @param value  the value to set
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,88,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,89,* @throws ClassCastException if the type is invalid
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,91,public void setValue(Object value) {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,92,setValue(((Number) value).doubleValue());
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,96,public int intValue() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,97,return (int) value;
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,49,eturn (long)this.value;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,101,return (long) value;
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,52,ublic int intValue() {
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,53,eturn (int)this.value;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,104,public float floatValue() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,105,return (float) value;
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,56,ublic Object getValue() {
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,57,eturn new Double(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,108,public double doubleValue() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,109,return value;
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,60,ublic void setValue(Object value) {
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,61,etValue(((Number)value).doubleValue());
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,113,* Checks whether the double value is the special NaN value.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,115,* @return true if NaN
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,117,public boolean isNaN() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,118,return Double.isNaN(value);
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,122,* Checks whether the double value is infinite.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,124,* @return true if infinite
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,126,public boolean isInfinite() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,127,return Double.isInfinite(value);
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,132,* Checks if this object equals the specified object.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,133,* <p>
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,134,* The object must be a MutableDouble with the same value to be equal.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,136,* @param obj  the object to compare to
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,137,* @return true if equal
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,139,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,140,if (obj instanceof MutableDouble) {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,141,double other = ((MutableDouble) obj).value;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,142,return (Double.doubleToLongBits(other) == Double.doubleToLongBits(value));
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,144,return false;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,148,* Returns a suitable hashcode for this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,150,* @return a suitable hashcode
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,152,public int hashCode() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,153,long bits = Double.doubleToLongBits(value);
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,154,return (int)(bits ^ (bits >>> 32));
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,158,* Compares this mutable to another in ascending order.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,160,* @param obj  the mutable to compare to
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,161,"* @return negative if this is less, zero if equal, positive if greater"
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,163,public int compareTo(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,164,MutableDouble other = (MutableDouble) obj;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,165,double anotherVal = other.value;
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,166,"return NumberUtils.compare(value, anotherVal);"
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,170,* Returns the String value of this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,172,* @return the mutable value as a string
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,174,public String toString() {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,175,return String.valueOf(value);
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,2, Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,20,import org.apache.commons.lang.math.NumberUtils;
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,19, A mutable <code>Float</code>
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,23,* A mutable <code>float</code>.
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,22," @version $Id: MutableFloat.java,v 1.3 2004/06/24 04:20:46 bayard Exp $"
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,26,"* @version $Id: MutableFloat.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $"
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,24,ublic class MutableFloat extends MutableNumber {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,28,public class MutableFloat extends Number
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,29,"implements Comparable, Mutable, Serializable {"
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,31,/** Serialization lock. */
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,32,private static final long serialVersionUID = 5787169186L;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,34,/** The mutable value. */
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,35,private float value;
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,27, Internal value.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,38,* Constructs a new MutableFloat with the default value of zero.
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,29,rivate float value;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,40,public MutableFloat() {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,41,super();
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,32, Instantiates with the specified value
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,45,* Constructs a new MutableFloat with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,55,* Constructs a new MutableFloat with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,57,* @param value a value.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,58,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,60,public MutableFloat(Number value) {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,61,super();
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,62,this.value = value.floatValue();
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,67,* Gets the value as a Float instance.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,69,* @return the value as a Float
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,71,public Object getValue() {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,72,return new Float(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,76,* Sets the value.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,78,* @param value  the value to set
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,45,ublic double doubleValue() {
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,46,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,85,* Sets the value from any Number instance.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,87,* @param value  the value to set
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,88,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,89,* @throws ClassCastException if the type is invalid
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,91,public void setValue(Object value) {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,92,setValue(((Number) value).floatValue());
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,50,eturn (int)this.value;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,97,return (int) value;
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,54,eturn (long)this.value;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,101,return (long) value;
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,57,ublic Object getValue() {
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,58,eturn new Float(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,104,public float floatValue() {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,105,return value;
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,61,ublic void setValue(Object value) {
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,62,etValue(((Number)value).floatValue());
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,108,public double doubleValue() {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,109,return (double) value;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,113,* Checks whether the float value is the special NaN value.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,115,* @return true if NaN
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,117,public boolean isNaN() {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,118,return Float.isNaN(value);
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,122,* Checks whether the float value is infinite.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,124,* @return true if infinite
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,126,public boolean isInfinite() {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,127,return Float.isInfinite(value);
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,132,* Checks if this object equals the specified object.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,133,* <p>
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,134,* The object must be a MutableFloat with the same value to be equal.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,136,* @param obj  the object to compare to
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,137,* @return true if equal
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,139,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,140,if (obj instanceof MutableFloat) {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,141,float other = ((MutableFloat) obj).value;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,142,return (Float.floatToIntBits(other) == Float.floatToIntBits(value));
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,144,return false;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,148,* Returns a suitable hashcode for this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,150,* @return a suitable hashcode
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,152,public int hashCode() {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,153,return Float.floatToIntBits(value);
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,157,* Compares this mutable to another in ascending order.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,159,* @param obj  the mutable to compare to
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,160,"* @return negative if this is less, zero if equal, positive if greater"
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,162,public int compareTo(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,163,MutableFloat other = (MutableFloat) obj;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,164,float anotherVal = other.value;
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,165,"return NumberUtils.compare(value, anotherVal);"
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,169,* Returns the String value of this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,171,* @return the mutable value as a string
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,173,public String toString() {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,174,return String.valueOf(value);
False,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,24," @version $Id: MutableInt.java,v 1.1 2004/07/05 22:15:33 scolebourne Exp $"
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,24,"* @version $Id: MutableInt.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $"
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,53,* Constructs a new MutableInt with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,55,* @param value a value.
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,56,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,58,public MutableInt(Number value) {
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,59,super();
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,60,this.value = value.intValue();
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,65,* Gets the value as a Integer instance.
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,67,* @return the value as a Integer
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,74,* Sets the value.
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,76,* @param value  the value to set
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,83,* Sets the value from any Number instance.
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,85,* @param value  the value to set
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,86,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,87,* @throws ClassCastException if the type is invalid
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,2, Copyright 2002-2004 The Apache Software Foundation.
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,14, limitations under the License.
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,16,ackage org.apache.commons.lang.mutable;
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,19, A mutable <code>Integer</code>.
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,21, @since 2.1
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,22," @version $Id: MutableInteger.java,v 1.4 2004/06/27 05:23:47 bayard Exp $"
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,24,ublic class MutableInteger extends MutableNumber {
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,27, Internal value.
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,29,rivate int value;
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,32, Instantiates with the specified value
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,34, @param value a value.
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,36,ublic MutableInteger(int value) {
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,37,uper();
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,38,his.value = value;
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,41,ublic void setValue(int value) {
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,42,his.value = value;
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,45,ublic double doubleValue() {
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,46,eturn this.value;
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,49,ublic long longValue() {
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,50,eturn this.value;
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,53,ublic int intValue() {
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,54,eturn this.value;
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,57,ublic Object getValue() {
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,58,eturn new Integer(this.value);
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,61,ublic void setValue(Object value) {
False,src/java/org/apache/commons/lang/mutable/MutableInteger.java,src/java/org/apache/commons/lang/mutable/MutableInteger.java,62,etValue(((Number)value).intValue());
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,2, Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,18,import java.io.Serializable;
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,19, A mutable <code>Long</code>
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,21,* A mutable <code>long</code>.
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,22," @version $Id: MutableLong.java,v 1.3 2004/06/24 04:20:46 bayard Exp $"
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,24,"* @version $Id: MutableLong.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $"
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,24,ublic class MutableLong extends MutableNumber {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,26,public class MutableLong extends Number
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,27,"implements Comparable, Mutable, Serializable {"
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,29,/** Serialization lock. */
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,30,private static final long serialVersionUID = 62986528375L;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,32,/** The mutable value. */
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,33,private long value;
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,27, Internal value.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,36,* Constructs a new MutableLong with the default value of zero.
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,29,rivate long value;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,38,public MutableLong() {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,39,super();
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,32, Instantiates with the specified value
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,43,* Constructs a new MutableLong with the specified value.
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,37,etValue(value);
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,49,this.value = value;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,53,* Constructs a new MutableLong with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,55,* @param value a value.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,56,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,58,public MutableLong(Number value) {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,59,super();
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,60,this.value = value.longValue();
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,65,* Gets the value as a Long instance.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,67,* @return the value as a Long
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,69,public Object getValue() {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,70,return new Long(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,74,* Sets the value.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,76,* @param value  the value to set
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,44,ublic double doubleValue() {
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,45,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,83,* Sets the value from any Number instance.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,85,* @param value  the value to set
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,86,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,87,* @throws ClassCastException if the type is invalid
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,89,public void setValue(Object value) {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,90,setValue(((Number) value).longValue());
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,94,public int intValue() {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,95,return (int) value;
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,49,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,99,return value;
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,52,ublic int intValue() {
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,53,eturn (int)this.value;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,102,public float floatValue() {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,103,return (float) value;
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,56,ublic Object getValue() {
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,57,eturn new Long(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,106,public double doubleValue() {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,107,return (double) value;
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,60,ublic void setValue(Object value) {
False,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,61,etValue(((Number)value).longValue());
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,112,* Checks if this object equals the specified object.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,113,* <p>
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,114,* The object must be a MutableLong with the same value to be equal.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,116,* @param obj  the object to compare to
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,117,* @return true if equal
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,119,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,120,if (obj instanceof MutableLong) {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,121,return (value == ((MutableLong) obj).value);
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,123,return false;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,127,* Returns a suitable hashcode for this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,129,* @return a suitable hashcode
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,131,public int hashCode() {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,132,return (int)(value ^ (value >>> 32));
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,136,* Compares this mutable to another in ascending order.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,138,* @param obj  the mutable to compare to
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,139,"* @return negative if this is less, zero if equal, positive if greater"
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,141,public int compareTo(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,142,MutableLong other = (MutableLong) obj;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,143,long anotherVal = other.value;
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,144,return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,148,* Returns the String value of this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,150,* @return the mutable value as a string
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,152,public String toString() {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,153,return String.valueOf(value);
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,2, Copyright 2002-2004 The Apache Software Foundation.
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,14, limitations under the License.
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,17,ackage org.apache.commons.lang.mutable;
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,22, A mutable <code>Number</code>.
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,24, @since 2.1
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,25," @version $Id: MutableNumber.java,v 1.3 2004/06/24 04:20:46 bayard Exp $"
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,27,ublic abstract class MutableNumber
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,28,xtends Number
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,29,"mplements Comparable, Mutable, Serializable {"
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,31,utableNumber() {
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,32,uper();
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,36,/ Number overrides
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,39,ublic float floatValue() {
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,40,eturn (float)doubleValue();
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,44,/ Object overrides
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,47,ublic String toString() {
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,48,eturn String.valueOf(doubleValue()).intern();
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,51,ublic int hashCode() {
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,52,eturn super.hashCode();
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,56, Compares <code>this</code> to another object.
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,58, @param obj an object to compare to
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,59, @return <code>true</code> if <code>this</code> is equal to
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,60, <code>obj</code>.
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,61, @see #compareTo(Object)
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,63,ublic boolean equals(Object obj) {
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,64,eturn super.equals(obj);
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,68,/  Comparable overrides
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,72, Compares to another object
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,74, @param o an object to compare to
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,75," @return -1 if <code>this < o</code>, 0 if <code>this.equals(o)</code>,"
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,76,  1 if <code>this > o<code>
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,77, @throws ClassCastException if <code>o</code> is not a
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,78, <code>Number</code>.
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,80,ublic int compareTo(Object o) {
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,81,inal double d = ((Number)o).doubleValue();
False,src/java/org/apache/commons/lang/mutable/MutableNumber.java,src/java/org/apache/commons/lang/mutable/MutableNumber.java,82,eturn (doubleValue() < d) ? -1 : (doubleValue() > d) ? 1 : 0;
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,2, Copyright 2002-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,18,import java.io.Serializable;
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,19, A mutable <code>Short</code>
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,21,* A mutable <code>short</code>.
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,22," @version $Id: MutableShort.java,v 1.3 2004/06/24 04:20:46 bayard Exp $"
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,24,"* @version $Id: MutableShort.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $"
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,24,ublic class MutableShort extends MutableNumber {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,26,public class MutableShort extends Number
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,27,"implements Comparable, Mutable, Serializable {"
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,29,/** Serialization lock. */
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,30,private static final long serialVersionUID = -2135791679L;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,32,/** The mutable value. */
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,33,private short value;
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,27, Internal value.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,36,* Constructs a new MutableShort with the default value of zero.
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,29,rivate short value;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,38,public MutableShort() {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,39,super();
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,32, Instantiates with the specified value
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,43,* Constructs a new MutableShort with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,53,* Constructs a new MutableShort with the specified value.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,55,* @param value a value.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,56,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,58,public MutableShort(Number value) {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,59,super();
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,60,this.value = value.shortValue();
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,65,* Gets the value as a Short instance.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,67,* @return the value as a Short
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,69,public Object getValue() {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,70,return new Short(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,74,* Sets the value.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,76,* @param value  the value to set
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,44,ublic double doubleValue() {
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,45,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,83,* Sets the value from any Number instance.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,85,* @param value  the value to set
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,86,* @throws NullPointerException if the object is null
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,87,* @throws ClassCastException if the type is invalid
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,89,public void setValue(Object value) {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,90,setValue(((Number) value).shortValue());
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,94,public short shortValue() {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,95,return value;
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,49,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,99,return (int) value;
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,53,eturn this.value;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,103,return (long) value;
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,56,ublic Object getValue() {
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,57,eturn new Short(this.value);
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,106,public float floatValue() {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,107,return (float) value;
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,60,ublic void setValue(Object value) {
False,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,61,etValue(((Number)value).shortValue());
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,110,public double doubleValue() {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,111,return (double) value;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,116,* Checks if this object equals the specified object.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,117,* <p>
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,118,* The object must be a MutableShort with the same value to be equal.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,120,* @param obj  the object to compare to
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,121,* @return true if equal
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,123,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,124,if (obj instanceof MutableShort) {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,125,return (value == ((MutableShort) obj).value);
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,127,return false;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,131,* Returns a suitable hashcode for this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,133,* @return a suitable hashcode
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,135,public int hashCode() {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,136,return (int) value;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,140,* Compares this mutable to another in ascending order.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,142,* @param obj  the mutable to compare to
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,143,"* @return negative if this is less, zero if equal, positive if greater"
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,145,public int compareTo(Object obj) {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,146,MutableShort other = (MutableShort) obj;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,147,short anotherVal = other.value;
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,148,return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,152,* Returns the String value of this mutable.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,154,* @return the mutable value as a string
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,156,public String toString() {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,157,return String.valueOf((int) value);
True,src/test/org/apache/commons/lang/AllLangTestSuite.java,src/test/org/apache/commons/lang/AllLangTestSuite.java,27,import org.apache.commons.lang.mutable.MutableTestSuite;
False,src/test/org/apache/commons/lang/AllLangTestSuite.java,src/test/org/apache/commons/lang/AllLangTestSuite.java,32," @version $Id: AllLangTestSuite.java,v 1.6 2004/06/01 20:55:28 scolebourne Exp $"
True,src/test/org/apache/commons/lang/AllLangTestSuite.java,src/test/org/apache/commons/lang/AllLangTestSuite.java,34,"* @version $Id: AllLangTestSuite.java,v 1.7 2004/07/07 23:50:28 scolebourne Exp $"
True,src/test/org/apache/commons/lang/AllLangTestSuite.java,src/test/org/apache/commons/lang/AllLangTestSuite.java,64,suite.addTest(MutableTestSuite.suite());
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,19,import junit.framework.TestCase;
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,25," @version $Id: MutableByteTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,26,"* @version $Id: MutableByteTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $"
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,28,ublic class MutableByteTest extends MutableNumberTest {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,29,public class MutableByteTest extends TestCase {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,31,public MutableByteTest(String testName) {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,32,super(testName);
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,38,ublic MutableByteTest(String testName) {
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,39,uper(testName);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,44,public void testConstructors() {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,45,"assertEquals((byte) 0, new MutableByte().byteValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,47,"assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,49,"assertEquals((byte) 2, new MutableByte(new Byte((byte) 2)).byteValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,50,"assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,51,try {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,52,new MutableByte(null);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,53,fail();
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,54,} catch (NullPointerException ex) {}
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,42,ublic MutableNumber getMutableNumber(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,43,eturn new MutableByte((byte)value);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,57,public void testGetSet() {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,58,final MutableByte mutNum = new MutableByte((byte) 0);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,59,"assertEquals((byte) 0, new MutableByte().byteValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,60,"assertEquals(new Byte((byte) 0), new MutableByte().getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,62,mutNum.setValue((byte) 1);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,63,"assertEquals((byte) 1, mutNum.byteValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,64,"assertEquals(new Byte((byte) 1), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,66,mutNum.setValue(new Byte((byte) 2));
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,67,"assertEquals((byte) 2, mutNum.byteValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,68,"assertEquals(new Byte((byte) 2), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,70,mutNum.setValue(new MutableByte((byte) 3));
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,71,"assertEquals((byte) 3, mutNum.byteValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,72,"assertEquals(new Byte((byte) 3), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,73,try {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,74,mutNum.setValue(null);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,75,fail();
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,76,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,77,try {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,78,"mutNum.setValue(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,79,fail();
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,80,} catch (ClassCastException ex) {}
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,47,/  Converters
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,83,public void testEquals() {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,84,final MutableByte mutNumA = new MutableByte((byte) 0);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,85,final MutableByte mutNumB = new MutableByte((byte) 0);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,86,final MutableByte mutNumC = new MutableByte((byte) 1);
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,50,ublic byte byteValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,51,eturn (byte)value;
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,88,"assertEquals(true, mutNumA.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,89,"assertEquals(true, mutNumA.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,90,"assertEquals(true, mutNumB.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,91,"assertEquals(true, mutNumB.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,92,"assertEquals(false, mutNumA.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,93,"assertEquals(false, mutNumB.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,94,"assertEquals(true, mutNumC.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,95,"assertEquals(false, mutNumA.equals(null));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,96,"assertEquals(false, mutNumA.equals(new Byte((byte) 0)));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,97,"assertEquals(false, mutNumA.equals(""0""));"
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,54,ublic short shortValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,55,eturn (byte)value;
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,100,public void testHashCode() {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,101,final MutableByte mutNumA = new MutableByte((byte) 0);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,102,final MutableByte mutNumB = new MutableByte((byte) 0);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,103,final MutableByte mutNumC = new MutableByte((byte) 1);
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,58,ublic int intValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,59,eturn (byte)value;
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,105,"assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,106,"assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,107,"assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,108,"assertEquals(true, mutNumA.hashCode() == new Byte((byte) 0).hashCode());"
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,62,ublic long longValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,63,eturn (byte)value;
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,111,public void testCompareTo() {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,112,final MutableByte mutNum = new MutableByte((byte) 0);
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,66,ublic float floatValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,67,eturn (byte)value;
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,114,"assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,115,"assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,116,"assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,117,try {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,118,mutNum.compareTo(null);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,119,fail();
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,120,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,121,try {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,122,mutNum.compareTo(new Byte((byte) 0));
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,123,fail();
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,124,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,125,try {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,126,"mutNum.compareTo(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,127,fail();
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,128,} catch (ClassCastException ex) {}
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,70,ublic double doubleValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,71,eturn (byte)value;
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,131,public void testToString() {
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,132,"assertEquals(""0"", new MutableByte((byte) 0).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,133,"assertEquals(""10"", new MutableByte((byte) 10).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,134,"assertEquals(""-123"", new MutableByte((byte) -123).toString());"
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,74, // MutableByteTest
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,2, Copyright 2002-2004 The Apache Software Foundation.
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,14, limitations under the License.
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,16,ackage org.apache.commons.lang.mutable;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,18,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,19,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,20,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,23, JUnit tests.
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,25," @version $Id: MutableDoubleTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $"
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,26, @see MutableDouble
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,28,ublic class MutableDoubleTest extends MutableNumberTest {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,30,ublic static void main(String[] args) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,31,estRunner.run(suite());
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,34,ublic static Test suite() {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,35,eturn new TestSuite(MutableDoubleTest.class);
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,38,ublic MutableDoubleTest(String testName) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,39,uper(testName);
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,42,ublic MutableNumber getMutableNumber(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,43,eturn new MutableDouble(value);
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,46,/ Converters
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,49,ublic byte byteValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,50,eturn (byte)value;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,53,ublic short shortValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,54,eturn (short)value;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,57,ublic int intValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,58,eturn (int)value;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,61,ublic long longValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,62,eturn (long)value;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,65,ublic float floatValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,66,eturn (float)value;
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,69,ublic double doubleValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,70,eturn value;
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,16,package org.apache.commons.lang.mutable;
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,18,import junit.framework.Test;
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,20,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,21,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,24,* JUnit tests.
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,26,"* @version $Id: MutableDoubleTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,27,* @see MutableDouble
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,29,public class MutableDoubleTest extends TestCase {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,31,public MutableDoubleTest(String testName) {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,32,super(testName);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,35,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,36,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,39,public static Test suite() {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,40,return new TestSuite(MutableDoubleTest.class);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,44,public void testConstructors() {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,45,"assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,47,"assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,49,"assertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,50,"assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,51,try {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,52,new MutableDouble(null);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,53,fail();
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,54,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,57,public void testGetSet() {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,58,final MutableDouble mutNum = new MutableDouble(0d);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,59,"assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,60,"assertEquals(new Double(0), new MutableDouble().getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,62,mutNum.setValue(1);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,63,"assertEquals(1d, mutNum.doubleValue(), 0.0001d);"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,64,"assertEquals(new Double(1d), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,66,mutNum.setValue(new Double(2d));
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,67,"assertEquals(2d, mutNum.doubleValue(), 0.0001d);"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,68,"assertEquals(new Double(2d), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,70,mutNum.setValue(new MutableDouble(3d));
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,71,"assertEquals(3d, mutNum.doubleValue(), 0.0001d);"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,72,"assertEquals(new Double(3d), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,73,try {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,74,mutNum.setValue(null);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,75,fail();
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,76,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,77,try {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,78,"mutNum.setValue(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,79,fail();
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,80,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,83,public void testNanInfinite() {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,84,MutableDouble mutNum = new MutableDouble(Double.NaN);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,85,"assertEquals(true, mutNum.isNaN());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,87,mutNum = new MutableDouble(Double.POSITIVE_INFINITY);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,88,"assertEquals(true, mutNum.isInfinite());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,90,mutNum = new MutableDouble(Double.NEGATIVE_INFINITY);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,91,"assertEquals(true, mutNum.isInfinite());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,94,public void testEquals() {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,95,final MutableDouble mutNumA = new MutableDouble(0d);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,96,final MutableDouble mutNumB = new MutableDouble(0d);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,97,final MutableDouble mutNumC = new MutableDouble(1d);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,99,"assertEquals(true, mutNumA.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,100,"assertEquals(true, mutNumA.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,101,"assertEquals(true, mutNumB.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,102,"assertEquals(true, mutNumB.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,103,"assertEquals(false, mutNumA.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,104,"assertEquals(false, mutNumB.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,105,"assertEquals(true, mutNumC.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,106,"assertEquals(false, mutNumA.equals(null));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,107,"assertEquals(false, mutNumA.equals(new Double(0d)));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,108,"assertEquals(false, mutNumA.equals(""0""));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,111,public void testHashCode() {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,112,final MutableDouble mutNumA = new MutableDouble(0d);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,113,final MutableDouble mutNumB = new MutableDouble(0d);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,114,final MutableDouble mutNumC = new MutableDouble(1d);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,116,"assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,117,"assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,118,"assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,119,"assertEquals(true, mutNumA.hashCode() == new Double(0d).hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,122,public void testCompareTo() {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,123,final MutableDouble mutNum = new MutableDouble(0d);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,125,"assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,126,"assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,127,"assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,128,try {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,129,mutNum.compareTo(null);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,130,fail();
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,131,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,132,try {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,133,mutNum.compareTo(new Double(0d));
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,134,fail();
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,135,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,136,try {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,137,"mutNum.compareTo(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,138,fail();
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,139,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,142,public void testToString() {
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,143,"assertEquals(""0.0"", new MutableDouble(0d).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,144,"assertEquals(""10.0"", new MutableDouble(10d).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,145,"assertEquals(""-123.0"", new MutableDouble(-123d).toString());"
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,2, Copyright 2002-2004 The Apache Software Foundation.
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,14, limitations under the License.
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,16,ackage org.apache.commons.lang.mutable;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,18,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,19,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,20,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,23, JUnit tests.
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,25," @version $Id: MutableFloatTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $"
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,26, @see MutableFloat
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,28,ublic class MutableFloatTest extends MutableNumberTest {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,30,ublic static void main(String[] args) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,31,estRunner.run(suite());
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,34,ublic static Test suite() {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,35,eturn new TestSuite(MutableFloatTest.class);
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,39, @param testName
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,41,ublic MutableFloatTest(String testName) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,42,uper(testName);
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,45,ublic MutableNumber getMutableNumber(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,46,eturn new MutableFloat((float)value);
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,49,/  Converters
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,51,ublic byte byteValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,52,eturn (byte)(float)value;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,55,ublic short shortValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,56,eturn (short)(float)value;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,59,ublic int intValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,60,eturn (int)(float)value;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,63,ublic long longValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,64,eturn (long)(float)value;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,67,ublic float floatValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,68,eturn (float)value;
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,71,ublic double doubleValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,72,eturn (float)value;
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,16,package org.apache.commons.lang.mutable;
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,18,import junit.framework.Test;
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,20,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,21,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,24,* JUnit tests.
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,26,"* @version $Id: MutableFloatTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,27,* @see MutableFloat
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,29,public class MutableFloatTest extends TestCase {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,31,public MutableFloatTest(String testName) {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,32,super(testName);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,35,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,36,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,39,public static Test suite() {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,40,return new TestSuite(MutableFloatTest.class);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,44,public void testConstructors() {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,45,"assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,47,"assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,49,"assertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,50,"assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,51,try {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,52,new MutableFloat(null);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,53,fail();
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,54,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,57,public void testGetSet() {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,58,final MutableFloat mutNum = new MutableFloat(0f);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,59,"assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,60,"assertEquals(new Float(0), new MutableFloat().getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,62,mutNum.setValue(1);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,63,"assertEquals(1f, mutNum.floatValue(), 0.0001f);"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,64,"assertEquals(new Float(1f), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,66,mutNum.setValue(new Float(2f));
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,67,"assertEquals(2f, mutNum.floatValue(), 0.0001f);"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,68,"assertEquals(new Float(2f), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,70,mutNum.setValue(new MutableFloat(3f));
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,71,"assertEquals(3f, mutNum.floatValue(), 0.0001f);"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,72,"assertEquals(new Float(3f), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,73,try {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,74,mutNum.setValue(null);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,75,fail();
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,76,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,77,try {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,78,"mutNum.setValue(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,79,fail();
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,80,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,83,public void testNanInfinite() {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,84,MutableFloat mutNum = new MutableFloat(Float.NaN);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,85,"assertEquals(true, mutNum.isNaN());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,87,mutNum = new MutableFloat(Float.POSITIVE_INFINITY);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,88,"assertEquals(true, mutNum.isInfinite());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,90,mutNum = new MutableFloat(Float.NEGATIVE_INFINITY);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,91,"assertEquals(true, mutNum.isInfinite());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,94,public void testEquals() {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,95,final MutableFloat mutNumA = new MutableFloat(0f);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,96,final MutableFloat mutNumB = new MutableFloat(0f);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,97,final MutableFloat mutNumC = new MutableFloat(1f);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,99,"assertEquals(true, mutNumA.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,100,"assertEquals(true, mutNumA.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,101,"assertEquals(true, mutNumB.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,102,"assertEquals(true, mutNumB.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,103,"assertEquals(false, mutNumA.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,104,"assertEquals(false, mutNumB.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,105,"assertEquals(true, mutNumC.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,106,"assertEquals(false, mutNumA.equals(null));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,107,"assertEquals(false, mutNumA.equals(new Float(0f)));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,108,"assertEquals(false, mutNumA.equals(""0""));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,111,public void testHashCode() {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,112,final MutableFloat mutNumA = new MutableFloat(0f);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,113,final MutableFloat mutNumB = new MutableFloat(0f);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,114,final MutableFloat mutNumC = new MutableFloat(1f);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,116,"assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,117,"assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,118,"assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,119,"assertEquals(true, mutNumA.hashCode() == new Float(0f).hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,122,public void testCompareTo() {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,123,final MutableFloat mutNum = new MutableFloat(0f);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,125,"assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,126,"assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,127,"assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,128,try {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,129,mutNum.compareTo(null);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,130,fail();
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,131,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,132,try {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,133,mutNum.compareTo(new Float(0f));
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,134,fail();
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,135,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,136,try {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,137,"mutNum.compareTo(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,138,fail();
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,139,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,142,public void testToString() {
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,143,"assertEquals(""0.0"", new MutableFloat(0f).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,144,"assertEquals(""10.0"", new MutableFloat(10f).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,145,"assertEquals(""-123.0"", new MutableFloat(-123f).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,16,package org.apache.commons.lang.mutable;
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,18,import junit.framework.Test;
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,20,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,21,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,24,* JUnit tests.
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,26,"* @version $Id: MutableIntTest.java,v 1.1 2004/07/07 23:50:28 scolebourne Exp $"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,27,* @see MutableInt
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,29,public class MutableIntTest extends TestCase {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,31,public MutableIntTest(String testName) {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,32,super(testName);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,35,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,36,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,39,public static Test suite() {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,40,return new TestSuite(MutableIntTest.class);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,44,public void testConstructors() {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,45,"assertEquals(0, new MutableInt().intValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,47,"assertEquals(1, new MutableInt(1).intValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,49,"assertEquals(2, new MutableInt(new Integer(2)).intValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,50,"assertEquals(3, new MutableInt(new MutableLong(3)).intValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,51,try {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,52,new MutableInt(null);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,53,fail();
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,54,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,57,public void testGetSet() {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,58,final MutableInt mutNum = new MutableInt(0);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,59,"assertEquals(0, new MutableInt().intValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,60,"assertEquals(new Integer(0), new MutableInt().getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,62,mutNum.setValue(1);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,63,"assertEquals(1, mutNum.intValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,64,"assertEquals(new Integer(1), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,66,mutNum.setValue(new Integer(2));
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,67,"assertEquals(2, mutNum.intValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,68,"assertEquals(new Integer(2), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,70,mutNum.setValue(new MutableLong(3));
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,71,"assertEquals(3, mutNum.intValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,72,"assertEquals(new Integer(3), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,73,try {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,74,mutNum.setValue(null);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,75,fail();
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,76,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,77,try {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,78,"mutNum.setValue(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,79,fail();
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,80,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,83,public void testEquals() {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,84,final MutableInt mutNumA = new MutableInt(0);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,85,final MutableInt mutNumB = new MutableInt(0);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,86,final MutableInt mutNumC = new MutableInt(1);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,88,"assertEquals(true, mutNumA.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,89,"assertEquals(true, mutNumA.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,90,"assertEquals(true, mutNumB.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,91,"assertEquals(true, mutNumB.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,92,"assertEquals(false, mutNumA.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,93,"assertEquals(false, mutNumB.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,94,"assertEquals(true, mutNumC.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,95,"assertEquals(false, mutNumA.equals(null));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,96,"assertEquals(false, mutNumA.equals(new Integer(0)));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,97,"assertEquals(false, mutNumA.equals(""0""));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,100,public void testHashCode() {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,101,final MutableInt mutNumA = new MutableInt(0);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,102,final MutableInt mutNumB = new MutableInt(0);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,103,final MutableInt mutNumC = new MutableInt(1);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,105,"assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,106,"assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,107,"assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,108,"assertEquals(true, mutNumA.hashCode() == new Integer(0).hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,111,public void testCompareTo() {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,112,final MutableInt mutNum = new MutableInt(0);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,114,"assertEquals(0, mutNum.compareTo(new MutableInt(0)));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,115,"assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,116,"assertEquals(-1, mutNum.compareTo(new MutableInt(1)));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,117,try {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,118,mutNum.compareTo(null);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,119,fail();
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,120,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,121,try {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,122,mutNum.compareTo(new Integer(0));
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,123,fail();
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,124,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,125,try {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,126,"mutNum.compareTo(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,127,fail();
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,128,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,131,public void testToString() {
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,132,"assertEquals(""0"", new MutableInt(0).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,133,"assertEquals(""10"", new MutableInt(10).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,134,"assertEquals(""-123"", new MutableInt(-123).toString());"
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,2, Copyright 2002-2004 The Apache Software Foundation.
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,14, limitations under the License.
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,16,ackage org.apache.commons.lang.mutable;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,18,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,19,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,20,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,23, JUnit tests.
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,25," @version $Id: MutableIntegerTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $"
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,26, @see MutableInteger
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,28,ublic class MutableIntegerTest extends MutableNumberTest {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,30,ublic MutableIntegerTest(String testName) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,31,uper(testName);
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,34,ublic static void main(String[] args) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,35,estRunner.run(suite());
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,38,ublic static Test suite() {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,39,eturn new TestSuite(MutableIntegerTest.class);
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,42,ublic MutableNumber getMutableNumber(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,43,eturn new MutableInteger((int)value);
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,47,/  Converters
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,50,ublic byte byteValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,51,eturn (byte)(int)value;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,54,ublic double doubleValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,55,eturn (int)value;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,58,ublic float floatValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,59,eturn (int)value;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,62,ublic int intValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,63,eturn (int)value;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,66,ublic long longValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,67,eturn (int)value;
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,70,ublic short shortValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java,71,eturn (short)(int)value;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,2, Copyright 2002-2004 The Apache Software Foundation.
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,14, limitations under the License.
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,16,ackage org.apache.commons.lang.mutable;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,18,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,19,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,20,mport junit.textui.TestRunner;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,23, JUnit tests.
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,25," @version $Id: MutableLongTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $"
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,26, @see MutableLong
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,28,ublic class MutableLongTest extends MutableNumberTest {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,30,ublic static void main(String[] args) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,31,estRunner.run(suite());
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,34,ublic static Test suite() {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,35,eturn new TestSuite(MutableLongTest.class);
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,38,ublic MutableLongTest(String testName) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,39,uper(testName);
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,42,ublic MutableNumber getMutableNumber(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,43,eturn new MutableLong((long)value);
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,47,/ Converters
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,50,ublic byte byteValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,51,eturn (byte)(long)value;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,54,ublic short shortValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,55,eturn (short)(long)value;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,58,ublic int intValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,59,eturn (int)(long)value;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,62,ublic long longValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,63,eturn (long)value;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,66,ublic float floatValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,67,eturn (long)value;
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,70,ublic double doubleValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,71,eturn (long)value;
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,2,* Copyright 2002-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,16,package org.apache.commons.lang.mutable;
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,18,import junit.framework.Test;
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,20,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,21,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,24,* JUnit tests.
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,26,"* @version $Id: MutableLongTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,27,* @see MutableLong
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,29,public class MutableLongTest extends TestCase {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,31,public MutableLongTest(String testName) {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,32,super(testName);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,35,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,36,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,39,public static Test suite() {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,40,return new TestSuite(MutableLongTest.class);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,44,public void testConstructors() {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,45,"assertEquals(0, new MutableLong().longValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,47,"assertEquals(1, new MutableLong(1).longValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,49,"assertEquals(2, new MutableLong(new Long(2)).longValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,50,"assertEquals(3, new MutableLong(new MutableLong(3)).longValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,51,try {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,52,new MutableLong(null);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,53,fail();
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,54,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,57,public void testGetSet() {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,58,final MutableLong mutNum = new MutableLong(0);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,59,"assertEquals(0, new MutableLong().longValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,60,"assertEquals(new Long(0), new MutableLong().getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,62,mutNum.setValue(1);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,63,"assertEquals(1, mutNum.longValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,64,"assertEquals(new Long(1), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,66,mutNum.setValue(new Long(2));
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,67,"assertEquals(2, mutNum.longValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,68,"assertEquals(new Long(2), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,70,mutNum.setValue(new MutableLong(3));
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,71,"assertEquals(3, mutNum.longValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,72,"assertEquals(new Long(3), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,73,try {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,74,mutNum.setValue(null);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,75,fail();
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,76,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,77,try {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,78,"mutNum.setValue(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,79,fail();
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,80,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,83,public void testEquals() {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,84,final MutableLong mutNumA = new MutableLong(0);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,85,final MutableLong mutNumB = new MutableLong(0);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,86,final MutableLong mutNumC = new MutableLong(1);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,88,"assertEquals(true, mutNumA.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,89,"assertEquals(true, mutNumA.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,90,"assertEquals(true, mutNumB.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,91,"assertEquals(true, mutNumB.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,92,"assertEquals(false, mutNumA.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,93,"assertEquals(false, mutNumB.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,94,"assertEquals(true, mutNumC.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,95,"assertEquals(false, mutNumA.equals(null));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,96,"assertEquals(false, mutNumA.equals(new Long(0)));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,97,"assertEquals(false, mutNumA.equals(""0""));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,100,public void testHashCode() {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,101,final MutableLong mutNumA = new MutableLong(0);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,102,final MutableLong mutNumB = new MutableLong(0);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,103,final MutableLong mutNumC = new MutableLong(1);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,105,"assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,106,"assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,107,"assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,108,"assertEquals(true, mutNumA.hashCode() == new Long(0).hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,111,public void testCompareTo() {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,112,final MutableLong mutNum = new MutableLong(0);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,114,"assertEquals(0, mutNum.compareTo(new MutableLong(0)));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,115,"assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,116,"assertEquals(-1, mutNum.compareTo(new MutableLong(1)));"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,117,try {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,118,mutNum.compareTo(null);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,119,fail();
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,120,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,121,try {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,122,mutNum.compareTo(new Long(0));
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,123,fail();
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,124,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,125,try {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,126,"mutNum.compareTo(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,127,fail();
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,128,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,131,public void testToString() {
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,132,"assertEquals(""0"", new MutableLong(0).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,133,"assertEquals(""10"", new MutableLong(10).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,134,"assertEquals(""-123"", new MutableLong(-123).toString());"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,2, Copyright 2002-2004 The Apache Software Foundation.
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,14, limitations under the License.
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,16,ackage org.apache.commons.lang.mutable;
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,18,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,21, JUnit tests.
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,23," @version $Id: MutableNumberTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,24, @see MutableNumber
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,26,ublic abstract class MutableNumberTest extends TestCase {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,28,ublic MutableNumberTest(String testName) {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,29,uper(testName);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,33, Gets an instance to test.
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,34, @param value the value of the number.
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,35, @return a <code>MutableNumber</code>
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,37,ublic abstract MutableNumber getMutableNumber(double value);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,40,/ Converters
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,43,ublic abstract byte byteValue(double value);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,45,ublic abstract short shortValue(double value);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,47,ublic abstract int intValue(double value);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,49,ublic abstract long longValue(double value);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,51,ublic abstract float floatValue(double value);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,53,ublic abstract double doubleValue(double value);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,56,/ Tests
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,59,ublic void testCompareTo() {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,60,inal double num = 0;
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,61,inal MutableNumber mutNum = getMutableNumber(num);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,63,"ssertEquals(""Equality"", 0, mutNum.compareTo(new Double(num)));"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,65,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,66,"Less than"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,67,"1,"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,68,utNum.compareTo(new Double(Double.POSITIVE_INFINITY)));
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,70,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,71,"Greater than"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,72,","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,73,utNum.compareTo(new Double(Double.NEGATIVE_INFINITY)));
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,76,ublic void testPrimitiveAccessors() {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,77,estPrimitiveAccessors(0);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,78,estPrimitiveAccessors(Double.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,79,estPrimitiveAccessors(-Double.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,81,estPrimitiveAccessors(Float.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,82,estPrimitiveAccessors(-Float.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,84,estPrimitiveAccessors(Long.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,85,estPrimitiveAccessors(Long.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,87,estPrimitiveAccessors(Integer.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,88,estPrimitiveAccessors(Integer.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,90,estPrimitiveAccessors(Short.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,91,estPrimitiveAccessors(Short.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,93,estPrimitiveAccessors(Byte.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,94,estPrimitiveAccessors(Byte.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,97,ublic void XtestObjectAccessors() {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,98,estObjectAccessors(0);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,99,estObjectAccessors(Double.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,100,estObjectAccessors(-Double.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,102,estObjectAccessors(Float.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,103,estObjectAccessors(-Float.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,105,estObjectAccessors(Long.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,106,estObjectAccessors(Long.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,108,estObjectAccessors(Integer.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,109,estObjectAccessors(Integer.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,111,estObjectAccessors(Short.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,112,estObjectAccessors(Short.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,114,estObjectAccessors(Byte.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,115,estObjectAccessors(Byte.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,118,ublic void testSetValue() {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,119,etValueAndTestAccessors(Double.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,120,etValueAndTestAccessors(-Double.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,122,etValueAndTestAccessors(Float.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,123,etValueAndTestAccessors(-Float.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,125,etValueAndTestAccessors(Long.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,126,etValueAndTestAccessors(Long.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,128,etValueAndTestAccessors(Integer.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,129,etValueAndTestAccessors(Integer.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,131,etValueAndTestAccessors(Short.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,132,etValueAndTestAccessors(Short.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,134,etValueAndTestAccessors(Byte.MAX_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,135,etValueAndTestAccessors(Byte.MIN_VALUE);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,139,/ Private methods
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,142,rivate void setValueAndTestAccessors(double num) {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,143,inal MutableNumber mutNum = getMutableNumber(0);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,144,utNum.setValue(new Double(num));
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,145,"estPrimitiveAccessors(mutNum, num);"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,146,"/testObjectAccessors(mutNum, num);"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,149,rivate void testPrimitiveAccessors(double num) {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,150,"estPrimitiveAccessors(getMutableNumber(num), num);"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,153,"rivate void testPrimitiveAccessors(MutableNumber mutNum, double num) {"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,154,"ssertEquals(""byte comparison"", byteValue(num), mutNum.byteValue());"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,155,"ssertEquals(""short comparison"", shortValue(num), mutNum.shortValue());"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,156,"ssertEquals(""int comparison"", intValue(num), mutNum.intValue());"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,157,"ssertEquals(""long comparison"", longValue(num), mutNum.longValue());"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,159,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,160,"float comparison"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,161,"loatValue(num),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,162,"utNum.floatValue(),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,163,);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,165,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,166,"double comparison"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,167,"oubleValue(num),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,168,"utNum.doubleValue(),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,169,);
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,172,rivate void testObjectAccessors(double num) {
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,173,"estObjectAccessors(getMutableNumber(num), num);"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,176,"rivate void testObjectAccessors(MutableNumber mutNum, double num) {"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,177,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,178,"byte comparison"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,179,"ew Byte(byteValue(num)),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,180,utNum.getValue());
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,182,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,183,"short comparison"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,184,"ew Short(shortValue(num)),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,185,utNum.getValue());
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,187,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,188,"int comparison"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,189,"ew Integer(intValue(num)),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,190,utNum.getValue());
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,192,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,193,"long comparison"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,194,"ew Long(longValue(num)),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,195,utNum.getValue());
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,197,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,198,"float comparison"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,199,"ew Float(floatValue(num)),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,200,utNum.getValue());
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,202,ssertEquals(
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,203,"double comparison"","
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,204,"ew Double(doubleValue(num)),"
False,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,src/test/org/apache/commons/lang/mutable/MutableNumberTest.java,205,utNum.getValue());
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,19,import junit.framework.TestCase;
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,25," @version $Id: MutableShortTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,26,"* @version $Id: MutableShortTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $"
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,28,ublic class MutableShortTest extends MutableNumberTest {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,29,public class MutableShortTest extends TestCase {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,31,public MutableShortTest(String testName) {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,32,super(testName);
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,38,ublic MutableShortTest(String testName) {
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,39,uper(testName);
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,43,/  Converters
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,46,ublic MutableNumber getMutableNumber(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,47,eturn new MutableShort((short)value);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,44,public void testConstructors() {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,45,"assertEquals((short) 0, new MutableShort().shortValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,47,"assertEquals((short) 1, new MutableShort((short) 1).shortValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,49,"assertEquals((short) 2, new MutableShort(new Short((short) 2)).shortValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,50,"assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,51,try {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,52,new MutableShort(null);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,53,fail();
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,54,} catch (NullPointerException ex) {}
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,50,ublic byte byteValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,51,eturn (byte)(short)value;
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,57,public void testGetSet() {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,58,final MutableShort mutNum = new MutableShort((short) 0);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,59,"assertEquals((short) 0, new MutableShort().shortValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,60,"assertEquals(new Short((short) 0), new MutableShort().getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,62,mutNum.setValue((short) 1);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,63,"assertEquals((short) 1, mutNum.shortValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,64,"assertEquals(new Short((short) 1), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,66,mutNum.setValue(new Short((short) 2));
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,67,"assertEquals((short) 2, mutNum.shortValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,68,"assertEquals(new Short((short) 2), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,70,mutNum.setValue(new MutableShort((short) 3));
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,71,"assertEquals((short) 3, mutNum.shortValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,72,"assertEquals(new Short((short) 3), mutNum.getValue());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,73,try {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,74,mutNum.setValue(null);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,75,fail();
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,76,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,77,try {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,78,"mutNum.setValue(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,79,fail();
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,80,} catch (ClassCastException ex) {}
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,54,ublic short shortValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,55,eturn (short)value;
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,83,public void testEquals() {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,84,final MutableShort mutNumA = new MutableShort((short) 0);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,85,final MutableShort mutNumB = new MutableShort((short) 0);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,86,final MutableShort mutNumC = new MutableShort((short) 1);
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,58,ublic int intValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,59,eturn (short)value;
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,88,"assertEquals(true, mutNumA.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,89,"assertEquals(true, mutNumA.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,90,"assertEquals(true, mutNumB.equals(mutNumA));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,91,"assertEquals(true, mutNumB.equals(mutNumB));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,92,"assertEquals(false, mutNumA.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,93,"assertEquals(false, mutNumB.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,94,"assertEquals(true, mutNumC.equals(mutNumC));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,95,"assertEquals(false, mutNumA.equals(null));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,96,"assertEquals(false, mutNumA.equals(new Short((short) 0)));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,97,"assertEquals(false, mutNumA.equals(""0""));"
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,62,ublic long longValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,63,eturn (short)value;
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,100,public void testHashCode() {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,101,final MutableShort mutNumA = new MutableShort((short) 0);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,102,final MutableShort mutNumB = new MutableShort((short) 0);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,103,final MutableShort mutNumC = new MutableShort((short) 1);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,105,"assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,106,"assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,107,"assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,108,"assertEquals(true, mutNumA.hashCode() == new Short((short) 0).hashCode());"
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,66,ublic float floatValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,67,eturn (short)value;
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,111,public void testCompareTo() {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,112,final MutableShort mutNum = new MutableShort((short) 0);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,114,"assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,115,"assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,116,"assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,117,try {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,118,mutNum.compareTo(null);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,119,fail();
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,120,} catch (NullPointerException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,121,try {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,122,mutNum.compareTo(new Short((short) 0));
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,123,fail();
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,124,} catch (ClassCastException ex) {}
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,125,try {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,126,"mutNum.compareTo(""0"");"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,127,fail();
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,128,} catch (ClassCastException ex) {}
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,70,ublic double doubleValue(double value) {
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,71,eturn (short)value;
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,131,public void testToString() {
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,132,"assertEquals(""0"", new MutableShort((short) 0).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,133,"assertEquals(""10"", new MutableShort((short) 10).toString());"
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,134,"assertEquals(""-123"", new MutableShort((short) -123).toString());"
False,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,25," @version $Id: MutableTestSuite.java,v 1.2 2004/06/27 06:28:32 bayard Exp $"
True,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,25,"* @version $Id: MutableTestSuite.java,v 1.3 2004/07/07 23:50:28 scolebourne Exp $"
False,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,27,ublic final class MutableTestSuite {
True,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,27,public class MutableTestSuite {
False,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,38,uite.addTest(MutableIntegerTest.suite());
True,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,src/test/org/apache/commons/lang/mutable/MutableTestSuite.java,38,suite.addTest(MutableIntTest.suite());

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,58,import org.apache.commons.math.stat.univariate.rank.Percentile;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,58, Provides univariate measures for an array of doubles.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,60," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,61,* Provides univariate measures for an array of doubles.
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,62,* @version $Revision: 1.9 $ $Date: 2003/07/09 21:45:23 $
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,62,ublic abstract class AbstractStoreUnivariate implements StoreUnivariate {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,65, Returns the skewness of this collection of values
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,66, @see org.apache.commons.math.stat.StoreUnivariate#getSkewness()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,68,ublic double getSkewness() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,69,/ Initialize the skewness
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,70,ouble skewness = Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,72,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,73,ouble mean = getMean();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,74,ouble stdDev = getStandardDeviation();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,76,/ Sum the cubes of the distance from the mean divided by the
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,77,/ standard deviation
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,78,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,79,or (int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,80,"ccum += Math.pow((getElement(i) - mean) / stdDev, 3.0);"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,83,/ Get N
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,84,ouble n = getN();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,86,/ Calculate skewness
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,87,kewness = (n / ((n - 1) * (n - 2))) * accum;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,89,eturn skewness;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,93, Returns the kurtosis for this collection of values
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,94, @see org.apache.commons.math.stat.StoreUnivariate#getKurtosis()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,96,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,97,/ Initialize the kurtosis
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,98,ouble kurtosis = Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,100,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,101,ouble mean = getMean();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,102,ouble stdDev = getStandardDeviation();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,104,/ Sum the ^4 of the distance from the mean divided by the
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,105,/ standard deviation
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,106,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,107,or (int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,108,"ccum += Math.pow((getElement(i) - mean) / stdDev, 4.0);"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,111,/ Get N
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,112,ouble n = getN();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,114,ouble coefficientOne = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,115,"ouble termTwo = ((3 * Math.pow(n - 1, 2.0)) / ((n - 2) * (n - 3)));"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,116,/ Calculate kurtosis
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,117,urtosis = (coefficientOne * accum) - termTwo;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,119,eturn kurtosis;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,64,public abstract class AbstractStoreUnivariate
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,65,extends AbstractUnivariate
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,66,implements StoreUnivariate {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,68,/** Percentile */
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,69,protected Percentile percentile = new Percentile(50);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,123, Returns the type or class of kurtosis that this collection of
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,124, values exhibits
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,125, @see org.apache.commons.math.stat.StoreUnivariate#getKurtosisClass()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,72,* Create an AbstractStoreUnivariate
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,127,ublic int getKurtosisClass() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,129,nt kClass = StoreUnivariate.MESOKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,131,ouble kurtosis = getKurtosis();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,132,f (kurtosis > 0) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,133,Class = StoreUnivariate.LEPTOKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,134, else if (kurtosis < 0) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,135,Class = StoreUnivariate.PLATYKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,138,eturn (kClass);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,74,public AbstractStoreUnivariate() {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,75,super();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,143, Returns the mean for this collection of values
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,144, @see org.apache.commons.math.stat.Univariate#getMean()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,79,* Create an AbstractStoreUnivariate with a specific Window
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,80,* @param window WindowSIze for stat calculation
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,146,ublic double getMean() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,147,ouble arithMean = getSum() / getN();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,148,eturn arithMean;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,152, Returns the geometric mean for this collection of values
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,153, @see org.apache.commons.math.stat.Univariate#getGeometricMean()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,155,ublic double getGeometricMean() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,156,ouble gMean = Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,158,f (getN() > 0) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,159,ouble sumLog = 0.0;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,160,or (int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,161,umLog += Math.log(getElement(i));
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,163,Mean = Math.exp(sumLog / (double)getN() );
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,166,eturn gMean;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,82,public AbstractStoreUnivariate(int window) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,83,super(window);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,170, Returns the variance for this collection of values
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,171, @see org.apache.commons.math.stat.Univariate#getVariance()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,87,* @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,173,ublic double getVariance() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,174,/ Initialize variance
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,175,ouble variance = Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,177,f (getN() == 1) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,178,/ If this is a single value
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,179,ariance = 0;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,180, else if (getN() > 1) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,181,/ Get the mean
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,182,ouble mean = getMean();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,184,/ Calculate the sum of the squares of the distance between each
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,185,/ value and the mean
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,186,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,187,or (int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,188,"ccum += Math.pow((getElement(i) - mean), 2.0);"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,191,/ Divide the accumulator by N - Hmmm... unbiased or biased?
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,192,ariance = accum / (getN() - 1);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,195,eturn variance;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,89,public double getPercentile(double p) {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,90,percentile.setPercentile(p);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,91,"return percentile.evaluate(this.getValues(), this.start(), this.size());"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,199, Returns the standard deviation for this collection of values
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,200, @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,95,* @see org.apache.commons.math.stat2.AbstractStoreUnivariate#getSortedValues()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,202,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,203,ouble stdDev = Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,204,f (getN() != 0) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,205,tdDev = Math.sqrt(getVariance());
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,207,eturn (stdDev);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,97,public double[] getSortedValues() {
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,98,double[] sort = getValues();
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,99,Arrays.sort(sort);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,100,return sort;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,211, Returns the maximum value contained herein.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,212, @see org.apache.commons.math.stat.Univariate#getMax()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,104,* @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,214,ublic double getMax() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,216,/ Initialize maximum to NaN
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,217,ouble max = Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,219,or (int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,220,f (i == 0) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,221,ax = getElement(i);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,222, else {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,223,f (getElement(i) > max) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,224,ax = getElement(i);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,229,eturn max;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,106,public abstract void addValue(double value);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,233, Returns the minimum value contained herein
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,234, @see org.apache.commons.math.stat.Univariate#getMin()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,109,* @see org.apache.commons.math.stat.StoreUnivariate#getValues()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,236,ublic double getMin() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,237,/ Initialize minimum to NaN
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,238,ouble min = Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,240,or (int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,241,f (i == 0) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,242,in = getElement(i);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,243, else {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,244,f (getElement(i) < min) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,245,in = getElement(i);
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,111,public abstract double[] getValues();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,250,eturn min;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,254, Returns the sum of all values contained herein
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,255, @see org.apache.commons.math.stat.Univariate#getSum()
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,115,* @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,257,ublic double getSum() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,258,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,259,or (int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,260,ccum += getElement(i);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,262,eturn accum;
True,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,117,public abstract double getElement(int index);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,266, Returns the sun of the squares of all values contained herein
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,267, @see org.apache.commons.math.stat.Univariate#getSumsq()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,269,ublic double getSumsq() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,270,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,271,or (int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,272,"ccum += Math.pow(getElement(i), 2.0);"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,274,eturn accum;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,278, @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,281,ublic double[] getSortedValues() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,282,ouble[] values = getValues();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,283,rrays.sort(values);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,284,eturn values;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,288, Returns an estimate for the pth percentile of the stored values
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,289, @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,291,ublic double getPercentile(double p) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,292,f ((p > 100) || (p <= 0)) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,293,"hrow new IllegalArgumentException(""invalid percentile value"");"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,295,ouble n = (double) getN();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,296,f (n == 0) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,297,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,299,f (n == 1) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,300,eturn getElement(0); // always return single value for n = 1
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,302,ouble pos = p * (n + 1) / 100;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,303,ouble fpos = Math.floor(pos);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,304,nt intPos = (int) fpos;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,305,ouble d = pos - fpos;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,306,ouble[] sorted = getSortedValues();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,307,f (pos < 1) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,308,eturn sorted[0];
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,310,f (pos > n) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,311,eturn sorted[getN() - 1];
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,313,ouble lower = sorted[intPos - 1];
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,314,ouble upper = sorted[intPos];
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,315,eturn lower + d * (upper - lower);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,5,* reserved.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,9,* are met:
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,17,*    distribution.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,54,package org.apache.commons.math.stat;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,56,import org.apache.commons.math.stat.univariate.moment.FourthMoment;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,57,import org.apache.commons.math.stat.univariate.moment.GeometricMean;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,58,import org.apache.commons.math.stat.univariate.moment.Kurtosis;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,59,import org.apache.commons.math.stat.univariate.moment.Mean;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,60,import org.apache.commons.math.stat.univariate.moment.Skewness;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,61,import org.apache.commons.math.stat.univariate.moment.Variance;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,62,import org.apache.commons.math.stat.univariate.rank.Max;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,63,import org.apache.commons.math.stat.univariate.rank.Min;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,64,import org.apache.commons.math.stat.univariate.summary.Sum;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,65,import org.apache.commons.math.stat.univariate.summary.SumOfLogs;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,66,import org.apache.commons.math.stat.univariate.summary.SumOfSquares;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,69,* Provides univariate measures for an array of doubles.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,70,* @version $Revision: 1.1 $ $Date: 2003/07/09 21:45:23 $
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,72,public abstract class AbstractUnivariate implements Univariate {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,74,/** hold the window size **/
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,75,protected int windowSize = Univariate.INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,77,/** count of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,78,protected int n = 0;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,80,"/** FourthMoment is used in calculating mean, variance,skew and kurtosis */"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,81,protected FourthMoment moment = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,83,/** sum of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,84,protected Sum sum = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,86,/** sum of the square of each value that has been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,87,protected SumOfSquares sumsq = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,89,/** min of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,90,protected Min min = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,92,/** max of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,93,protected Max max = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,95,/** sumLog of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,96,protected SumOfLogs sumLog = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,98,/** geoMean of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,99,protected GeometricMean geoMean = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,101,/** mean of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,102,protected Mean mean = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,104,/** variance of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,105,protected Variance variance = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,107,/** skewness of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,108,protected Skewness skewness = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,110,/** kurtosis of values that have been added */
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,111,protected Kurtosis kurtosis = null;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,114,* Construct an AbstractUnivariate
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,116,public AbstractUnivariate() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,117,super();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,119,sum = new Sum();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,120,sumsq = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,121,min = new Min();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,122,max = new Max();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,123,sumLog = new SumOfLogs();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,124,geoMean = new GeometricMean();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,126,moment = new FourthMoment();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,127,mean = new Mean(moment);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,128,variance = new Variance(moment);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,129,skewness = new Skewness(moment);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,130,kurtosis = new Kurtosis(moment);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,134,* Construct an AbstractUnivariate with a window
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,135,* @param window The Window Size
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,137,public AbstractUnivariate(int window) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,138,this();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,139,setWindowSize(window);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,143,* Returns the internalValues array.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,144,* @return the array
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,146,protected abstract double[] internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,149,* Returns the start index of the array
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,150,* @return start index
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,152,protected abstract int start();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,155,* Returns the size of the array appropriate for doing calculations.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,156,* @return Usually this is just numElements.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,158,protected abstract int size();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,161,"* If windowSize is set to Infinite,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,162,* statistics are calculated using the following
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,163,"* <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,164,* recursive strategy
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,165,* </a>.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,166,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,168,public abstract void addValue(double value);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,171,* @see org.apache.commons.math.stat.Univariate#getN()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,173,public int getN() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,174,return n;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,178,* @see org.apache.commons.math.stat.Univariate#getSum()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,180,public double getSum() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,181,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,182,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,183,"return sum.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,186,return sum.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,190,* @see org.apache.commons.math.stat.Univariate#getSumsq()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,192,public double getSumsq() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,193,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,194,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,195,"return sumsq.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,198,return sumsq.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,202,* @see org.apache.commons.math.stat.Univariate#getMean()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,204,public double getMean() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,205,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,206,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,207,"return mean.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,210,return mean.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,214,* Returns the standard deviation for this collection of values
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,215,* @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,217,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,218,double stdDev = Double.NaN;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,219,if (getN() > 0) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,220,if (getN() > 1) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,221,stdDev = Math.sqrt(getVariance());
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,222,} else {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,223,stdDev = 0.0;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,226,return (stdDev);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,230,* Returns the variance of the values that have been added via West's
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,231,* algorithm as described by
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,232,"* <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,233,"* J. G. Lewis 1979, <i>Communications of the ACM</i>,"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,234,"* vol. 22 no. 9, pp. 526-531.</a>."
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,236,* @return The variance of a set of values.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,237,*         Double.NaN is returned for an empty
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,238,*         set of values and 0.0 is returned for
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,239,*         a &lt;= 1 value set.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,241,public double getVariance() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,242,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,243,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,244,"return variance.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,247,return variance.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,251,* Returns the skewness of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,252,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,253,* Equation (6) for k-Statistics</a>.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,254,* @return The skew of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,255,*         an empty set of values and 0.0 is returned for a
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,256,*         &lt;= 2 value set.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,258,public double getSkewness() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,259,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,260,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,261,"return skewness.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,264,return skewness.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,268,* Returns the kurtosis of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,269,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,270,* Equation (7) for k-Statistics</a>.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,272,* @return The kurtosis of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,273,*         an empty set of values and 0.0 is returned for a &lt;= 3
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,274,*         value set.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,276,public double getKurtosis() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,277,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,278,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,279,"return kurtosis.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,282,return kurtosis.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,286,* @see org.apache.commons.math.stat.StoreUnivariate#getKurtosisClass()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,288,public int getKurtosisClass() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,289,int kClass = Univariate.MESOKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,291,double kurtosis = getKurtosis();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,292,if (kurtosis > 0) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,293,kClass = Univariate.LEPTOKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,294,} else if (kurtosis < 0) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,295,kClass = Univariate.PLATYKURTIC;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,297,return (kClass);
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,301,* @see org.apache.commons.math.stat.Univariate#getMax()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,303,public double getMax() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,304,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,305,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,306,"return max.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,309,return max.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,313,* @see org.apache.commons.math.stat.Univariate#getMin()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,315,public double getMin() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,316,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,317,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,318,"return min.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,321,return min.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,325,* @see org.apache.commons.math.stat.Univariate#getGeometricMean()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,327,public double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,328,double[] v = internalValues();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,329,if (v != null) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,330,"return geoMean.evaluate(v, this.start(), this.size());"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,333,return geoMean.getResult();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,337,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,338,* univariate statistics from values that
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,339,* have been added.
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,340,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,342,public String toString() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,343,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,344,"outBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,345,"outBuffer.append(""n: "" + n + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,346,"outBuffer.append(""min: "" + min + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,347,"outBuffer.append(""max: "" + max + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,348,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,349,"outBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,350,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,351,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,352,return outBuffer.toString();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,356,* @see org.apache.commons.math.Univariate#clear()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,358,public void clear() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,359,this.n = 0;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,360,min.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,361,max.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,362,sum.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,363,sumLog.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,364,sumsq.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,365,geoMean.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,367,moment.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,368,mean.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,369,variance.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,370,skewness.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,371,kurtosis.clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,375,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,377,public int getWindowSize() {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,378,return windowSize;
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,382,* @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,384,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,385,clear();
True,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,386,this.windowSize = windowSize;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,57,mport org.apache.commons.beanutils.PropertyUtils;
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,58,import org.apache.commons.math.util.BeanTransformer;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65,* @version $Revision: 1.3 $ $Date: 2003/07/09 21:45:23 $
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,70,* propertyName of the property to get from the bean
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,75,* Construct a BeanListUnivariate with specified
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,76,* backing list
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,77,* @param list Backing List
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,72,uper( list );
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,80,super(list);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,84,* Construct a BeanListUnivariate with specified
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,85,* backing list and propertyName
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,86,* @param list Backing List
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,87,* @param propertyName Bean propertyName
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,76,uper( list );
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,77,etPropertyName( propertyName );
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,90,super(list);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,91,setPropertyName(propertyName);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,92,this.transformer = new BeanTransformer(propertyName);
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,96,* @return propertyName
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,103,* @param propertyName Name of Property
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,85,"ystem.out.println( ""Set prop name; "" + propertyName );"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,106,"System.out.println(""Set prop name; "" + propertyName);"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,108,this.transformer = new BeanTransformer(propertyName);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,90,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,94,"tring msg = ""The BeanListUnivariateImpl does not accept values "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,95,"through the addValue method.  Because elements of this list "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,96,"are JavaBeans, one must be sure to set the 'propertyName' "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,97,"property and add new Beans to the underlying list via the "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,98,"addBean(Object bean) method"";"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,99,hrow new UnsupportedOperationException( msg );
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,115,String msg =
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,116,"""The BeanListUnivariateImpl does not accept values """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,117,"+ ""through the addValue method.  Because elements of this list """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,118,"+ ""are JavaBeans, one must be sure to set the 'propertyName' """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,119,"+ ""property and add new Beans to the underlying list via the """
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,120,"+ ""addBean(Object bean) method"";"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,121,throw new UnsupportedOperationException(msg);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,112, Reads the property of an element in the list.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,114, @param index The location of the value in the internal List
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,115, @return A Number object representing the value at a given
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,116,         index
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,118,rotected Number getInternalIndex(int index) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,120,ry {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,121,"umber n = (Number) PropertyUtils.getProperty( list.get( index ),"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,122,ropertyName );
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,124,eturn n;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,125, catch( Exception e ) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,126,/ TODO: We could use a better strategy for error handling
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,127,/ here.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,129,"/ This is a somewhat foolish design decision, but until"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,130,"/ we figure out what needs to be done, let's return NaN"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,131,eturn new Double(Double.NaN);
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,66,* @version $Revision: 1.4 $ $Date: 2003/07/09 21:45:23 $
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,57,import org.apache.commons.math.util.DefaultTransformer;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,58,import org.apache.commons.math.util.NumberTransformer;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,59," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,61,* @version $Revision: 1.3 $ $Date: 2003/07/09 21:45:23 $
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,61,ublic class ListUnivariateImpl extends AbstractStoreUnivariate {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,63,public class ListUnivariateImpl
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,64,extends AbstractStoreUnivariate
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,65,implements StoreUnivariate {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,63,"/ Holds the value of the windowSize, initial windowSize is the constant"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,64,/ Univariate.INFINITE_WINDOW
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,65,rivate int windowSize = Univariate.INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,68,* Holds a reference to a list - GENERICs are going to make
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,69,* out lives easier here as we could only accept List<Number>
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,71,protected List list;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,67,/ Holds a reference to a list - GENERICs are going to make
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,68,/ out lives easier here as we could only accept List<Number>
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,69,ist list;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,73,/** Number Transformer maps Objects to Number for us. */
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,74,protected NumberTransformer transformer;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,77,* Construct a ListUnivariate with a specific List.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,78,* @param list The list that will back this Univariate
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,81,super();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,83,transformer = new DefaultTransformer();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,87,* Construct a ListUnivariate with a specific List.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,88,* @param list The list that will back this Univariate
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,90,"public ListUnivariateImpl(List list, NumberTransformer transformer) {"
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,91,super();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,92,this.list = list;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,93,this.transformer = transformer;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,75,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,80,nt startIndex = 0;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,81,nt endIndex = list.size() - 1;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,101,int length = list.size();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,88,f (windowSize != Univariate.INFINITE_WINDOW &&
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,89,indowSize < list.size()) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,90,tartIndex = (list.size() - 1) - windowSize;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,108,if (windowSize != Univariate.INFINITE_WINDOW
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,109,&& windowSize < list.size()) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,110,"length = list.size() - Math.max(0, list.size() - windowSize);"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,94,ouble[] copiedArray = new double[list.size() - startIndex];
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,114,double[] copiedArray = new double[length];
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,96,or( int i = startIndex; i <= endIndex; i++ ) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,97,umber n = (Number) getInternalIndex( i );
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,98,opiedArray[i] = n.doubleValue();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,99,++;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,116,for (int i = 0; i < copiedArray.length; i++) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,117,copiedArray[i] = getElement(i);
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,105,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,111,f (windowSize != Univariate.INFINITE_WINDOW &&
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,112,indowSize < list.size()) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,114,nt calcIndex = (list.size() - windowSize) + index;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,129,int calcIndex = index;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,116,umber n = (Number) getInternalIndex(calcIndex);
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,117,alue = n.doubleValue();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,118, else {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,119,umber n = (Number) getInternalIndex(index);
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,120,alue = n.doubleValue();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,131,if (windowSize != Univariate.INFINITE_WINDOW
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,132,&& windowSize < list.size()) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,133,calcIndex = (list.size() - windowSize) + index;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,136,try {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,137,value = transformer.transform(list.get(calcIndex));
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,138,} catch (Exception e) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,139,e.printStackTrace();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,125,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,129,nt N = 0;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,149,int n = 0;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,133, = windowSize;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,153,n = windowSize;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,135, = list.size();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,155,n = list.size();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,138, = list.size();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,158,n = list.size();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,140,eturn N;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,160,return n;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,143,* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,171,* Adds an object to this list.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,172,* @param o Object to add to the list
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,174,public void addObject(Object o) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,175,list.add(o);
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,150,* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,182,super.clear();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,157,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,158, @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,187,* @see org.apache.commons.math.stat.AbstractUnivariate#internalValues()
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,160,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,161,eturn windowSize;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,189,protected double[] internalValues() {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,190,return getValues();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,164,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,165, @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,194,* @see org.apache.commons.math.stat.AbstractUnivariate#start()
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,167,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,168,his.windowSize = windowSize;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,196,protected int start() {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,197,return 0;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,172, This function exists to support the function of classes which
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,173, extend the ListUnivariateImpl.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,175, @param index The location of the value in the internal List
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,176, @return A Number object representing the value at a given
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,177,         index
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,201,* @see org.apache.commons.math.stat.AbstractUnivariate#size()
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,179,rotected Number getInternalIndex(int index) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,181,umber n = (Number) list.get( index );
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,182,eturn n;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,203,protected int size() {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,204,return getN();
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,207,* @return
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,209,public NumberTransformer getTransformer() {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,210,return transformer;
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,214,* @param transformer
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,216,public void setTransformer(NumberTransformer transformer) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,217,this.transformer = transformer;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,60,* @version $Revision: 1.14 $ $Date: 2003/07/09 21:45:23 $
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,164, Returns the geometric mean for this collection of values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,165, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,166, @return the geometric mean or Double.NaN if the array is empty or
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,167, any of the values are &lt;= 0.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,169,ublic static double geometricMean(double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,170,"eturn geometricMean(values, 0, values.length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,174, Returns the geometric mean for this collection of values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,175, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,176, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,177, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,178, @return the geometric mean or Double.NaN if the array is empty or
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,179, any of the values are &lt;= 0.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,181,"ublic static double geometricMean(double[] values, int begin, int length) {"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,182,"estInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,183,"eturn Math.exp(sumLog(values, begin, length) / (double) length );"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,211, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,212," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,213, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,215,ublic static double standardDeviation(double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,216,"eturn standardDeviation(values, 0, values.length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,221, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,222, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,223, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,224," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,225, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,227,ublic static double standardDeviation(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,228,"ouble[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,229,"nt begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,230,nt length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,231,"estInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,232,ouble stdDev = Double.NaN;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,233,f (values.length != 0) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,234,"tdDev = Math.sqrt(variance(values, begin, length));"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,236,eturn (stdDev);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,293, Returns the skewness of a collection of values.  Skewness is a
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,294, measure of the assymetry of a given distribution.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,295, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,296, @return the skewness of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,298,ublic static double skewness(double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,299,"eturn skewness(values, 0, values.length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,302, Returns the skewness of a collection of values.  Skewness is a
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,303, measure of the assymetry of a given distribution.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,304, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,305, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,306, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,307, @return the skewness of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,309,"ublic static double skewness(double[] values, int begin, int length) {"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,311,"estInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,313,/ Initialize the skewness
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,314,ouble skewness = Double.NaN;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,316,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,317,"ouble mean = mean(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,319,"/ Calc the std, this is implemented here instead of using the"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,320,/ standardDeviation method eliminate a duplicate pass to get the mean
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,321,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,322,ouble accum2 = 0.0;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,323,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,324,"ccum += Math.pow((values[i] - mean), 2.0);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,325,ccum2 += (values[i] - mean);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,327,ouble stdDev =
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,328,ath.sqrt(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,329,"accum - (Math.pow(accum2, 2) / ((double) length)))"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,330, (double) (length - 1));
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,332,/ Calculate the skew as the sum the cubes of the distance
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,333,/ from the mean divided by the standard deviation.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,334,ouble accum3 = 0.0;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,335,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,336,"ccum3 += Math.pow((values[i] - mean) / stdDev, 3.0);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,339,/ Get N
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,340,ouble n = length;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,342,/ Calculate skewness
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,343,kewness = (n / ((n - 1) * (n - 2))) * accum3;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,345,eturn skewness;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,349, Returns the kurtosis for this collection of values. Kurtosis is a
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,350," measure of the ""peakedness"" of a distribution."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,351, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,352, @return the kurtosis of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,354,ublic static double kurtosis(double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,355,"eturn kurtosis(values, 0, values.length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,359, Returns the kurtosis for this collection of values. Kurtosis is a
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,360," measure of the ""peakedness"" of a distribution."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,361, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,362, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,363, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,364, @return the kurtosis of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,366,"ublic static double kurtosis(double[] values, int begin, int length) {"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,367,"estInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,369,/ Initialize the kurtosis
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,370,ouble kurtosis = Double.NaN;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,372,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,373,"ouble mean = mean(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,375,"/ Calc the std, this is implemented here instead of using the"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,376,/ standardDeviation method eliminate a duplicate pass to get the mean
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,377,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,378,ouble accum2 = 0.0;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,379,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,380,"ccum += Math.pow((values[i] - mean), 2.0);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,381,ccum2 += (values[i] - mean);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,384,ouble stdDev =
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,385,ath.sqrt(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,386,"accum - (Math.pow(accum2, 2) / ((double) length)))"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,387, (double) (length - 1));
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,389,/ Sum the ^4 of the distance from the mean divided by the
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,390,/ standard deviation
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,391,ouble accum3 = 0.0;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,392,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,393,"ccum3 += Math.pow((values[i] - mean) / stdDev, 4.0);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,396,/ Get N
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,397,ouble n = length;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,399,ouble coefficientOne = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,400,"ouble termTwo = ((3 * Math.pow(n - 1, 2.0)) / ((n - 2) * (n - 3)));"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,402,/ Calculate kurtosis
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,403,urtosis = (coefficientOne * accum3) - termTwo;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,405,eturn kurtosis;
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,64," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,63,* @version $Revision: 1.7 $ $Date: 2003/07/09 21:45:23 $
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,69, A LEPTOKURTIC set has a positive kurtosis (a high peak)
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,71,ublic static int LEPTOKURTIC = 1;
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,74, A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,76,ublic static int MESOKURTIC = 0;
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,79," A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,81,ublic static int PLATYKURTIC = -1;
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,84, Returns the skewness of a given distribution.  Skewness is a
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,85, measure of the assymetry of a given distribution.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,87, @return The skewness of this distribution
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,89,ouble getSkewness();
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,92," Kurtosis is a measure of the ""peakedness"" of a distribution"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,94, @return the mode
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,96,ouble getKurtosis();
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,99," Returns the Kurtosis ""classification"" a distribution can be"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,100," leptokurtic (high peak), platykurtic (flat peak),"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,101, or mesokurtic (zero kurtosis).
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,103," @return A static constant defined in this interface,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,104,"         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,105,         StoredDeviation.MESOKURTIC
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,107,nt getKurtosisClass();
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,59," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,59,* @version $Revision: 1.4 $ $Date: 2003/07/09 21:45:23 $
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,63,/ Use an internal double array
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,64,ontractableDoubleArray eDA;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,66,/ Store the windowSize
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,67,rivate int windowSize = Univariate.INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,63,/** A contractable double array is used.  memory is reclaimed when
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,64,* the storage of the array becomes too empty.
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,66,protected ContractableDoubleArray eDA;
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,69,* Construct a StoreUnivariateImpl
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,70,/ A contractable double array is used.  memory is reclaimed when
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,71,/ the storage of the array becomes too empty.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,75,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,80,ouble[] copiedArray = new double[ eDA.getNumElements() ];
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,81,"ystem.arraycopy( eDA.getElements(), 0,"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,82,"opiedArray, 0, eDA.getNumElements());"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,80,double[] copiedArray = new double[eDA.getNumElements()];
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,81,System.arraycopy(
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,82,"eDA.getElements(),"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,83,"0,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,84,"copiedArray,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,85,"0,"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,86,eDA.getNumElements());
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,86,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,93,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,100,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,104,f( windowSize != Univariate.INFINITE_WINDOW ) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,105,f( getN() == windowSize ) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,106,DA.addElementRolling( v );
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,107, else if( getN() < windowSize ) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,108,if (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,109,if (getN() == windowSize) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,110,eDA.addElementRolling(v);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,111,} else if (getN() < windowSize) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,110,"tring msg = ""A window Univariate had more element than "" +"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,111,"the windowSize.  This is an inconsistent state."";"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,112,hrow new RuntimeException( msg );
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,114,String msg =
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,115,"""A window Univariate had more element than """
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,116,"+ ""the windowSize.  This is an inconsistent state."";"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,117,throw new RuntimeException(msg);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,119,* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,128,super.clear();
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,126,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,127, @see org.apache.commons.math.Univariate#getWindowSize()
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,129,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,130,eturn windowSize;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,133,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,142,f( windowSize < eDA.getNumElements() ) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,143,DA.discardFrontElements( eDA.getNumElements() - windowSize);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,141,if (windowSize < eDA.getNumElements()) {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,142,eDA.discardFrontElements(eDA.getNumElements() - windowSize);
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,147,* @see org.apache.commons.math.stat.AbstractUnivariate#internalValues()
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,149,protected double[] internalValues() {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,150,return eDA.getValues();
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,154,* @see org.apache.commons.math.stat.AbstractUnivariate#start()
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,156,protected int start() {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,157,return eDA.start();
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,161,* @see org.apache.commons.math.stat.AbstractUnivariate#size()
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,163,protected int size() {
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,164,return eDA.getNumElements();
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,58, @version $Revision: 1.3 $ $Date: 2003/07/07 23:19:20 $
True,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,58,* @version $Revision: 1.4 $ $Date: 2003/07/09 21:45:23 $
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,64, @version $Revision: 1.3 $ $Date: 2003/07/07 23:19:20 $
True,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,64,* @version $Revision: 1.4 $ $Date: 2003/07/09 21:45:23 $
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,73," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,74, @version $Revision: 1.7 $ $Date: 2003/07/07 23:25:13 $
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,72,* @version $Revision: 1.8 $ $Date: 2003/07/09 21:45:23 $
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,76,* A LEPTOKURTIC set has a positive kurtosis (a high peak)
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,78,public static int LEPTOKURTIC = 1;
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,80,* A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,82,public static int MESOKURTIC = 0;
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,84,"* A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,86,public static int PLATYKURTIC = -1;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,86, Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,95,"* Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,93, Returns the <a href=http://www.xycoon.com/geometric_mean.htm>
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,102,"* Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,140,"* Returns the Kurtosis ""classification"" a distribution can be"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,141,"* leptokurtic (high peak), platykurtic (flat peak),"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,142,* or mesokurtic (zero kurtosis).
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,144,"* @return A static constant defined in this interface,"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,145,"*         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or"
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,146,*         StoredDeviation.MESOKURTIC
True,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,148,int getKurtosisClass();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,58,mport org.apache.commons.math.util.DoubleArray;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,69," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,70, @author Brent Worden
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,71, @version $Revision: 1.17 $ $Date: 2003/07/07 23:25:13 $
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,67,* @version $Revision: 1.18 $ $Date: 2003/07/09 21:45:23 $
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74,"ublic class UnivariateImpl implements Univariate, Serializable {"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,76,** hold the window size **/
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,77,rivate int windowSize = Univariate.INFINITE_WINDOW;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,79,"** Just in case the windowSize is not infinite, we need to"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,80,  keep an array to remember values 0 to N
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,82,rivate DoubleArray doubleArray;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,84,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85,rivate int n = 0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,87,** sum of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,88,rivate double sum = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,90,** sum of the square of each value that has been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,91,rivate double sumsq = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,93,** min of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,94,rivate double min = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96,** max of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,97,rivate double max = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,99,** sumLog of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,100,rivate double sumLog = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,102,** mean of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,103,rivate double mean = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,69,public class UnivariateImpl
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,70,extends AbstractUnivariate
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,71,"implements Univariate, Serializable {"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,** second moment of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,106,rivate double m2 = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,108,** third moment of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,109,rivate double m3 = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,111,** fourth moment of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,112,rivate double m4 = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,114,** variance of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,115,rivate double variance = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117,** skewness of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,118,rivate double skewness = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,** kurtosis of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,121,rivate double kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,73,/** fixed storage */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74,private FixedDoubleArray storage = null;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,78,super();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,** Creates a new univariate with a fixed window **/
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,128,ublic UnivariateImpl(int window) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,129,etWindowSize(window);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,132,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,133, @see org.apache.commons.math.stat.Univariate#getN()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,135,ublic int getN() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,136,eturn n;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,139,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,140, @see org.apache.commons.math.stat.Univariate#getSum()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,142,ublic double getSum() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,144,eturn StatUtils.sum(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,147,eturn sum;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,150,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,151, @see org.apache.commons.math.stat.Univariate#getSumsq()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,153,ublic double getSumsq() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,154,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,155,eturn StatUtils.sumSq(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,158,eturn sumsq;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,161,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,162, @see org.apache.commons.math.stat.Univariate#getMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,164,ublic double getMean() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166,eturn StatUtils.mean(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,169,eturn mean;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,173, Returns the standard deviation for this collection of values
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,174, @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,176,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177,ouble stdDev = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,178,f (getN() != 0) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,179,tdDev = Math.sqrt(getVariance());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,181,eturn (stdDev);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,185, Returns the variance of the values that have been added via West's
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,186, algorithm as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,187," <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,188," J. G. Lewis 1979, <i>Communications of the ACM</i>,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,189," vol. 22 no. 9, pp. 526-531.</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,191, @return The variance of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,192,         an empty set of values and 0.0 is returned for a &lt;= 1 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,194,ublic double getVariance() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,195,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,196,ariance = StatUtils.variance(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,198,eturn variance;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,202, Returns the skewness of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,203," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (6) for k-Statistics</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,205, @return The skew of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,206,         an empty set of values and 0.0 is returned for a &lt;= 2 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,82,* Creates a new univariate with a fixed window
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,83,* @param window Window Size
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,208,ublic double getSkewness() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,209,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,210,eturn StatUtils.skewness(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,212,eturn skewness;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85,public UnivariateImpl(int window) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,86,super(window);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,87,storage = new FixedDoubleArray(window);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,216, Returns the kurtosis of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,217," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (7) for k-Statistics</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,219, @return The kurtosis of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,220,         an empty set of values and 0.0 is returned for a &lt;= 3 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,222,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,223,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,224,eturn StatUtils.kurtosis(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,226,eturn kurtosis;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,229,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,230, @see org.apache.commons.math.stat.Univariate#getMax()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,232,ublic double getMax() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,233,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,234,eturn StatUtils.max(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,236,eturn max;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,239,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,240, @see org.apache.commons.math.stat.Univariate#getMin()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,242,ublic double getMin() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,243,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,244,eturn StatUtils.min(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,246,eturn min;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,249,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,250, @see org.apache.commons.math.stat.Univariate#getGeometricMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,252,ublic double getGeometricMean() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,254,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,255,eturn StatUtils.geometricMean(doubleArray.getElements());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,258,f (n == 0) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,259,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,260, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,261,eturn Math.exp(sumLog / (double) n);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,265,"* If windowSize is set to Infinite, moments are calculated using the following"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,91,"*  If windowSize is set to Infinite, moments"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,92,*  are calculated using the following
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,274,f (windowSize != Univariate.INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,101,if (storage != null) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,278,f (windowSize == n) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,279,oubleArray.addElementRolling(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,if (getWindowSize() == n) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,106,storage.addElementRolling(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,282,oubleArray.addElement(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,109,storage.addElement(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,291,f (n <= 1) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,292,"* if n <= 1, initialize the sumLog, min, max, mean, variance and pre-variance */"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,293,umLog = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,294,um = min = max = mean = value;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,295,umsq = value * value;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,296,ariance = m2 = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,297,kewness = kurtosis = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,298,2 = m3 = m4 = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,299, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,300,* otherwise calc these values */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,301,umLog += Math.log(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,302,um += value;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,303,umsq += value * value;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,304,"in = Math.min(min, value);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,305,"ax = Math.max(max, value);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,307,ouble dev = value - mean;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,308,ouble v = dev / ((double) n);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,309,ouble v2 = v * v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,311,ouble n0 = (double) n;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,312,ouble n1 = (double) (n - 1);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,313,ouble n2 = (double) (n - 2);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,314,ouble n3 = (double) (n - 3);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,316,4 =
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,317,4
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,318, (4.0 * v * m3)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,319, (6.0 * v2 * m2)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,320, ((n0 * n0) - 3 * n1) * (v2 * v2 * n1 * n0);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,322,3 = m3 - (3.0 * v * m2) + (n0 * n1 * n2 * v2 * v);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,324,2 += n1 * dev * v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,326,ean += v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,328,ariance = (n <= 1) ? 0.0 : m2 / n1;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,330,kewness =
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,331,n <= 2 || variance < 10E-20)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,332, 0.0
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,333, (n0 * m3) / (n1 * n2 * Math.sqrt(variance) * variance);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,335,urtosis =
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,336,n <= 3 || variance < 10E-20)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,337, 0.0
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,338, (n0 * (n0 + 1) * m4 - 3 * m2 * m2 * n1)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,339, (n1 * n2 * n3 * variance * variance);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117,min.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,118,max.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,119,sum.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,sumsq.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,121,sumLog.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,122,geoMean.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,124,moment.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,125,//mean.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,126,//variance.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,//skewness.increment(value);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,128,//kurtosis.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,353,"utBuffer.append(""n: "" + n + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,354,"utBuffer.append(""min: "" + min + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,355,"utBuffer.append(""max: "" + max + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,141,"outBuffer.append(""n: "" + getN() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,142,"outBuffer.append(""min: "" + getMin() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143,"outBuffer.append(""max: "" + getMax() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,363,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,367,his.n = 0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,368,his.min = this.max = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,369,his.sumLog = this.mean = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,370,his.variance = this.skewness = this.kurtosis = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,371,his.m2 = this.m3 = this.m4 = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,372,f (doubleArray != null)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,373,oubleArray = new FixedDoubleArray(windowSize);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,155,super.clear();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,156,if (getWindowSize() != INFINITE_WINDOW) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,157,storage = new FixedDoubleArray(getWindowSize());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,376,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,377, @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,162,* @see org.apache.commons.math.stat.AbstractUnivariate#internalValues()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,379,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,380,eturn windowSize;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,164,protected double[] internalValues() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165,return storage == null ? null : storage.getValues();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,383,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,384, @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,169,* @see org.apache.commons.math.stat.AbstractUnivariate#start()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,171,protected int start() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,172,return storage.start();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,176,* @see org.apache.commons.math.stat.AbstractUnivariate#size()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,386,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,387,lear();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,388,his.windowSize = windowSize;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,389,oubleArray = new FixedDoubleArray(windowSize);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,178,protected int size() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,179,return storage.getNumElements();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,5,* reserved.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,9,* are met:
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,54,package org.apache.commons.math.stat;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,56,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,57,import java.util.List;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,58,import org.apache.commons.math.util.NumberTransformer;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,59,import org.apache.commons.math.util.TransformerMap;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,60,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,61,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,62,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,65,* Test cases for the {@link Univariate} class.
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,67,* @version $Revision: 1.1 $ $Date: 2003/07/09 21:45:24 $
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,70,public final class MixedListUnivariateImplTest extends TestCase {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,71,private double one = 1;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,72,private float two = 2;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,73,private int three = 3;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,75,private double mean = 2;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,76,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,77,private double sum = 8;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,78,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,79,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,80,private double n = 4;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,81,private double min = 1;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,82,private double max = 3;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,83,private double skewness = 0;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,84,private double kurtosis = 0.5;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,85,private int kClass = StoreUnivariate.LEPTOKURTIC;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,86,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,88,private TransformerMap transformers = new TransformerMap();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,90,public MixedListUnivariateImplTest(String name) {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,91,super(name);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,92,transformers = new TransformerMap();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,94,"transformers.putTransformer(Foo.class, new NumberTransformer() {"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,95,public double transform(Object o) {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,96,return Double.parseDouble(((Foo) o).heresFoo());
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,100,"transformers.putTransformer(Bar.class, new NumberTransformer() {"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,101,public double transform(Object o) {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,102,return Double.parseDouble(((Bar) o).heresBar());
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,109,public void setUp() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,112,public static Test suite() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,113,TestSuite suite = new TestSuite(MixedListUnivariateImplTest.class);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,114,"suite.setName(""Mixed List Tests"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,115,return suite;
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,118,/** test stats */
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,119,public void testStats() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,120,List externalList = new ArrayList();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,122,"StoreUnivariate u = new ListUnivariateImpl(externalList,transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,124,"assertEquals(""total count"", 0, u.getN(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,125,u.addValue(one);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,126,u.addValue(two);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,127,u.addValue(two);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,128,u.addValue(three);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,129,"assertEquals(""N"", n, u.getN(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,130,"assertEquals(""sum"", sum, u.getSum(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,131,"assertEquals(""sumsq"", sumSq, u.getSumsq(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,132,"assertEquals(""var"", var, u.getVariance(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,133,"assertEquals(""std"", std, u.getStandardDeviation(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,134,"assertEquals(""mean"", mean, u.getMean(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,135,"assertEquals(""min"", min, u.getMin(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,136,"assertEquals(""max"", max, u.getMax(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,137,u.clear();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,138,"assertEquals(""total count"", 0, u.getN(), tolerance);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,141,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,142,List list = new ArrayList();
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,144,"StoreUnivariate u = new ListUnivariateImpl(new ArrayList(),transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,146,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,147,"""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,148,Double.isNaN(u.getMean()));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,149,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,150,"""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,151,Double.isNaN(u.getStandardDeviation()));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,152,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,153,"""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,154,Double.isNaN(u.getVariance()));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,156,u.addValue(one);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,158,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,159,"""Mean of n = 1 set should be value of single item n1, instead it is "" + u.getMean() ,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,160,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,162,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,163,"""StdDev of n = 1 set should be zero, instead it is: """
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,164,"+ u.getStandardDeviation(),"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,165,u.getStandardDeviation() == 0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,166,assertTrue(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,167,"""Variance of n = 1 set should be zero"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,168,u.getVariance() == 0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,171,public void testSkewAndKurtosis() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,172,ListUnivariateImpl u =
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,173,"new ListUnivariateImpl(new ArrayList(), transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,175,"u.addObject(""12.5"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,176,u.addObject(new Integer(12));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,177,"u.addObject(""11.8"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,178,"u.addObject(""14.2"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,179,u.addObject(new Foo());
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,180,"u.addObject(""14.5"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,181,u.addObject(new Long(21));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,182,"u.addObject(""8.2"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,183,"u.addObject(""10.3"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,184,"u.addObject(""11.3"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,185,u.addObject(new Float(14.1));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,186,"u.addObject(""9.9"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,187,"u.addObject(""12.2"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,188,u.addObject(new Bar());
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,189,"u.addObject(""12.1"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,190,"u.addObject(""11"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,191,u.addObject(new Double(19.8));
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,192,"u.addObject(""11"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,193,"u.addObject(""10"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,194,"u.addObject(""8.8"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,195,"u.addObject(""9"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,196,"u.addObject(""12.3"");"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,199,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,200,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,201,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,202,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,205,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,206,"ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList(),transformers);"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,207,u.setWindowSize(10);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,209,u.addValue(1.0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,210,u.addValue(2.0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,211,u.addValue(3.0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,212,u.addValue(4.0);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,214,assertEquals(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,215,"""Geometric mean not expected"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,216,"2.213364,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,217,"u.getGeometricMean(),"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,218,0.00001);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,220,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,221,// of a discarded element
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,222,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,223,u.addValue(i + 2);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,225,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,226,assertEquals(
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,227,"""Geometric mean not expected"","
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,228,"5.755931,"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,229,"u.getGeometricMean(),"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,230,0.00001);
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,234,public final class Foo {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,235,public String heresFoo() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,236,"return ""14.9"";"
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,240,public final class Bar {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,241,public String heresBar() {
True,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,242,"return ""12.0"";"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,62, @version $Revision: 1.5 $ $Date: 2003/07/07 23:25:14 $
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,62,* @version $Revision: 1.6 $ $Date: 2003/07/09 21:45:24 $
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,102,ssertEquals(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,103,"std"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,104,"td,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,105,"tatUtils.standardDeviation(values),"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,106,olerance);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,118,ssertTrue(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,119,"Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,120,ouble.isNaN(StatUtils.standardDeviation(values)));
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,130,ssertTrue(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,131,"StdDev of n = 1 set should be zero, instead it is: """
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,132," StatUtils.standardDeviation(values),"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,133,tatUtils.standardDeviation(values) == 0);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,168,"ssertEquals(""skewness"", 1.437424, StatUtils.skewness(values), 0.0001);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,169,"ssertEquals(""kurtosis"", 2.37719, StatUtils.kurtosis(values), 0.0001);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,180,ssertEquals(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,181,"Geometric mean not expected"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,182,".213364,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,183,"tatUtils.geometricMean(values),"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,184,.00001);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,64, @version $Revision: 1.5 $ $Date: 2003/07/07 23:19:19 $
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,64,* @version $Revision: 1.6 $ $Date: 2003/07/09 21:45:24 $
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,133,"ssertTrue(""geometric should be one (n = 1)"","
True,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,133,"assertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,122,"ssertEquals(mean,m.getValue(),tolerance);"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,123,"ssertEquals(var,v.getValue(),tolerance);"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,124,"ssertEquals(skew ,s.getValue(),tolerance);"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,125,"ssertEquals(kurt,k.getValue(),tolerance);"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,122,"assertEquals(mean,m.getResult(),tolerance);"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,123,"assertEquals(var,v.getResult(),tolerance);"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,124,"assertEquals(skew ,s.getResult(),tolerance);"
True,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,125,"assertEquals(kurt,k.getResult(),tolerance);"

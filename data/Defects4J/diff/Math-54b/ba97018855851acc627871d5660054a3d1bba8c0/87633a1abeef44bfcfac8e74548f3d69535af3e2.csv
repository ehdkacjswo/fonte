is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,191,"{ ""all weights must be finite real numbers, but {0}-th is {1}"","
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,192,"""tous les poids doivent \u00eatre des nombres r\u00e9els finis, mais le poids {0} vaut {1}"" },"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,50,/** Default value for accuracy. */
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,51,public static final double DEFAULT_ACCURACY = 1e-12;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,76,* If the median residual at a certain robustness iteration
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,77,"* is less than this amount, no more iterations are done."
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,79,private final double accuracy;
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,74, with a bandwidth of {@link #DEFAULT_BANDWIDTH} and
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,75, {@link #DEFAULT_ROBUSTNESS_ITERS} robustness iterations.
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,76," See {@link #LoessInterpolator(double, int)} for an explanation of"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,83,"* with a bandwidth of {@link #DEFAULT_BANDWIDTH},"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,84,* {@link #DEFAULT_ROBUSTNESS_ITERS} robustness iterations
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,85,* and an accuracy of {#link #DEFAULT_ACCURACY}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,86,"* See {@link #LoessInterpolator(double, int, double)} for an explanation of"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,92,this.accuracy = DEFAULT_ACCURACY;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,98,* <p>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,99,* Calling this constructor is equivalent to calling {link {@link
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,100,"* #LoessInterpolator(double, int, double) LoessInterpolator(bandwidth,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,101,"* robustnessIters, LoessInterpolator.DEFAULT_ACCURACY)}"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,102,* </p>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,116,"* @see #LoessInterpolator(double, int, double)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,119,"this(bandwidth, robustnessIters, DEFAULT_ACCURACY);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,123,* Constructs a new {@link LoessInterpolator}
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,124,"* with given bandwidth, number of robustness iterations and accuracy."
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,126,* @param bandwidth  when computing the loess fit at
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,127,"* a particular point, this fraction of source points closest"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,128,* to the current point is taken into account for computing
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,129,* a least-squares regression.</br>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,130,"* A sensible value is usually 0.25 to 0.5, the default value is"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,131,* {@link #DEFAULT_BANDWIDTH}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,132,* @param robustnessIters This many robustness iterations are done.</br>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,133,* A sensible value is usually 0 (just the initial fit without any
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,134,"* robustness iterations) to 4, the default value is"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,135,* {@link #DEFAULT_ROBUSTNESS_ITERS}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,136,* @param accuracy If the median residual at a certain robustness iteration
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,137,"* is less than this amount, no more iterations are done."
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,138,"* @throws MathException if bandwidth does not lie in the interval [0,1]"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,139,* or if robustnessIters is negative.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,140,"* @see #LoessInterpolator(double, int)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,141,* @since 2.1
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,143,"public LoessInterpolator(double bandwidth, int robustnessIters, double accuracy) throws MathException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,155,this.accuracy = accuracy;
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,138, Compute a loess fit on the data at the original abscissae.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,181,* Compute a weighted loess fit on the data at the original abscissae.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,185,* @param weights point weights: coefficients by which the robustness weight of a point is multiplied
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,193,* @since 2.1
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,150,"ublic final double[] smooth(final double[] xval, final double[] yval)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,195,"public final double[] smooth(final double[] xval, final double[] yval, final double[] weights)"
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,166,"heckAllFiniteReal(xval, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,167,"heckAllFiniteReal(yval, false);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,211,"checkAllFiniteReal(xval, ""all abscissae must be finite real numbers, but {0}-th is {1}"");"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,212,"checkAllFiniteReal(yval, ""all ordinatae must be finite real numbers, but {0}-th is {1}"");"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,213,"checkAllFiniteReal(weights, ""all weights must be finite real numbers, but {0}-th is {1}"");"
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,240,inal double w    = tricube(dist * denom) * robustnessWeights[k];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,286,final double w    = tricube(dist * denom) * robustnessWeights[k] * weights[k];
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,255,f (meanXSquared == meanX * meanX) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,301,if (Math.sqrt(Math.abs(meanXSquared - meanX * meanX)) < accuracy) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,282,f (medianResidual == 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,328,if (Math.abs(medianResidual) < accuracy) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,288,"obustnessWeights[i] = (arg >= 1) ? 0 : Math.pow(1 - arg * arg, 2);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,334,if (arg >= 1) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,335,robustnessWeights[i] = 0;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,336,} else {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,337,final double w = 1 - arg * arg;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,338,robustnessWeights[i] = w * w;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,347,* Compute a loess fit on the data at the original abscissae.
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,349,* @param xval the arguments for the interpolation points
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,350,* @param yval the values for the interpolation points
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,351,* @return values of the loess fit at corresponding original abscissae
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,352,* @throws MathException if some of the following conditions are false:
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,353,* <ul>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,354,* <li> Arguments and values are of the same size that is greater than zero</li>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,355,* <li> The arguments are in a strictly increasing order</li>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,356,* <li> All arguments and values are finite real numbers</li>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,357,* </ul>
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,359,"public final double[] smooth(final double[] xval, final double[] yval)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,360,throws MathException {
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,362,final double[] unitWeights = new double[xval.length];
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,363,"Arrays.fill(unitWeights, 1.0);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,365,"return smooth(xval, yval, unitWeights);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,339," @param isAbscissae if true, elements are abscissae otherwise they are ordinatae"
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,340, @throws MathException if one of the values is not
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,341,         a finite real number
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,414,* @param pattern pattern of the error message
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,415,* @throws MathException if one of the values is not a finite real number
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,343,"rivate static void checkAllFiniteReal(final double[] values, final boolean isAbscissae)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,417,"private static void checkAllFiniteReal(final double[] values, final String pattern)"
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,348,inal String pattern = isAbscissae ?
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,349,"all abscissae must be finite real numbers, but {0}-th is {1}"" :"
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,350,"all ordinatae must be finite real numbers, but {0}-th is {1}"";"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,222,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,223,public void testMath296withoutWeights() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,224,double[] xval = {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,225,"0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,226,"1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,227,double[] yval = {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,228,"0.47, 0.48, 0.55, 0.56, -0.08, -0.04, -0.07, -0.07,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,229,"-0.56, -0.46, -0.56, -0.52, -3.03, -3.08, -3.09,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,230,"-3.04, 3.54, 3.46, 3.36, 3.35};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,231,"// Output from R, rounded to .001"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,232,double[] yref = {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,233,"0.461, 0.499, 0.541, 0.308, 0.175, -0.042, -0.072,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,234,"-0.196, -0.311, -0.446, -0.557, -1.497, -2.133,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,235,"-3.08, -3.09, -0.621, 0.982, 3.449, 3.389, 3.336"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,237,"LoessInterpolator li = new LoessInterpolator(0.3, 4, 1e-12);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,238,"double[] res = li.smooth(xval, yval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,239,"Assert.assertEquals(xval.length, res.length);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,240,for(int i = 0; i < res.length; ++i) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,241,"Assert.assertEquals(yref[i], res[i], 0.02);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,245,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,246,public void testMath296withWeights() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,247,double[] xval = {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,248,"0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,249,"1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,250,double[] yval = {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,251,"0.47, 0.48, 0.55, 0.56, -0.08, -0.04, -0.07, -0.07,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,252,"-0.56, -0.46, -0.56, -0.52, -3.03, -3.08, -3.09,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,253,"-3.04, 3.54, 3.46, 3.36, 3.35};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,254,double[] weights = {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,255,"1,1,1,1,1,1,1,1,1,1,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,256,"1,1,0,0,1,1,0,0,1,1};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,257,"// Output from R, rounded to .001"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,258,double[] yref = {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,259,"0.478, 0.492, 0.484, 0.320, 0.179, -0.003, -0.088, -0.209,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,260,"-0.327, -0.455, -0.518, -0.537, -1.492, -2.115, -3.09, -3.04,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,261,"-3.0, 0.155, 1.752, 3.35};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,262,"LoessInterpolator li = new LoessInterpolator(0.3, 4, 1e-12);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,263,"double[] res = li.smooth(xval, yval,weights);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,264,"Assert.assertEquals(xval.length, res.length);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,265,for(int i = 0; i < res.length; ++i) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java,266,"Assert.assertEquals(yref[i], res[i], 0.05);"

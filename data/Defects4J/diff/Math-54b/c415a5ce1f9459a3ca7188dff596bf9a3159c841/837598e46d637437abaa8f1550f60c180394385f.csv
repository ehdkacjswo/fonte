is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,22, @version $Revision: 1.8 $ $Date: 2004/02/21 21:35:18 $
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,22,* @version $Revision: 1.9 $ $Date: 2004/05/04 13:15:47 $
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,38,protected ExpandableDoubleArray newInstance(int initialCapacity) {
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,39,return new ContractableDoubleArray(initialCapacity);
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,42,protected ExpandableDoubleArray newInstance() {
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,43,return new ContractableDoubleArray();
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,46,"protected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor) {"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,47,if (expansionFactor < 2.5f) {
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,48,"return new ContractableDoubleArray(initialCapacity, expansionFactor);"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,49,} else {
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,50,"return newInstance(initialCapacity, expansionFactor, expansionFactor + 1.0f);"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,54,"protected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor, float contractionFactor) {"
True,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,55,"return new ContractableDoubleArray(initialCapacity, expansionFactor, contractionFactor);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,22, @version $Revision: 1.9 $ $Date: 2004/02/21 21:35:18 $
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,22,* @version $Revision: 1.10 $ $Date: 2004/05/04 13:15:47 $
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,34,a = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,35,a = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,34,da = newInstance();
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,35,ra = newInstance();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,111,xpandableDoubleArray eDA2 = new ExpandableDoubleArray(2);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,111,ExpandableDoubleArray eDA2 = newInstance(2);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,130,"xpandableDoubleArray eDA3 = new ExpandableDoubleArray(3, 3.0f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,130,"ExpandableDoubleArray eDA3 = newInstance(3, 3.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,184,"xpandableDoubleArray eDA = new ExpandableDoubleArray(-3, 2.0f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,184,"ExpandableDoubleArray eDA = newInstance(-3, 2.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,191,"xpandableDoubleArray eDA = new ExpandableDoubleArray(0, 2.0f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,191,"ExpandableDoubleArray eDA = newInstance(0, 2.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,199,"xpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.66f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,199,"ExpandableDoubleArray eDA = newInstance(3, 0.66f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,205,"xpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.0f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,205,"ExpandableDoubleArray eDA = newInstance(3, 0.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,212,"xpandableDoubleArray eDA = new ExpandableDoubleArray(3, -4.35f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,212,"ExpandableDoubleArray eDA = newInstance(3, -4.35f);"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,240,protected ExpandableDoubleArray newInstance(int initialCapacity) {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,241,return new ExpandableDoubleArray(initialCapacity);
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,244,protected ExpandableDoubleArray newInstance() {
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,245,return new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,248,"protected ExpandableDoubleArray newInstance(int initialCapacity, float expansionFactor) {"
True,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,249,"return new ExpandableDoubleArray(initialCapacity, expansionFactor);"

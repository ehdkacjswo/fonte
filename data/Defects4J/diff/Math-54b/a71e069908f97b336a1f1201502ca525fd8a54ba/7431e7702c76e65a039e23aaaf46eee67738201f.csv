is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,67, @version $Revision: 1.7 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,67,* @version $Revision: 1.8 $ $Date: 2003/11/15 18:44:52 $
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,125, @see UnivariateRealFunction#firstDerivative(double)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,148, @see UnivariateRealFunction#secondDerivative(double)
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,5,* reserved.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,9,* are met:
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,17,*    distribution.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,54,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,58,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,61,* Represents a Polynomial function.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,62,* Spline functions map a certain interval of real numbers to real numbers.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,63,"* A cubic spline consists of segments of cubic functions. For this class,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,64,* polynominal coefficents are used.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,65,* Arguments outside of the domain cause an IllegalArgumentException.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,67,* @version $Revision: 1.1 $ $Date: 2003/11/15 18:44:52 $
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,69,public class PolynomialFunction implements UnivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,72,* The polynominal coefficients.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,73,"* The index represents the coefficients of the polynomail, with"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,74,* index 0 being the absolute coefficient and index N the coefficient
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,75,* for the Nth power.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,77,private double c[];
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,80,* Construct a function with the given segment delimiters and polynomial
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,81,* coefficients.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,82,* @param c polynominal coefficients
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,84,public PolynomialFunction(double c[]) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,85,super();
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,86,"// TODO: should copy the arguments here, for safety. This could be a major overhead."
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,87,this.c = c;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,91,* Compute the value for the function.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,93,* <p>This can be explicitly determined by
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,94,*   <tt>c_n * x^n + ... + c_1 * x  + c_0</tt>
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,95,* </p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,97,* @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,98,* @return the value
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,99,* @throws MathException if the function couldn't be computed due to
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,100,*  missing additional data or other environmental problems.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,101,* @see UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,103,public double value(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,105,double value = c[0];
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,107,for (int i=1; i < c.length; i++ ) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,108,"value += c[i] * Math.pow( x, (int)i);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,111,return value;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,117,* Compute the value for the first derivative of the function.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,119,* <p>This can be explicitly determined by
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,120,*   <tt>n * c_n * x^(n-1) + ... + 2 * c_2 * x  + c_1</tt>
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,121,* </p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,123,* @param x the point for which the first derivative should be computed
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,124,* @return the value
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,125,* @throws MathException if the derivative couldn't be computed.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,127,public double firstDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,129,double value = c[1];
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,131,if ( c.length > 1 ) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,132,for (int i=2; i < c.length; i++ ) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,133,"value += i * c[i] * Math.pow( x, (int)i-1);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,137,return value;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,141,* Compute the value for the second derivative of the function.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,143,* <p>This can be explicitly determined by
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,144,*   <tt>n * (n-1) * c_n * x^(n-2) + ... + 3 * 2 * c_3 * x  + 2 * c_2</tt>
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,145,* </p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,147,* @param x the point for which the first derivative should be computed
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,148,* @return the value
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,149,* @throws MathException if the second derivative couldn't be computed.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,151,public double secondDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,153,double value = 2.0 * c[2];
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,155,if ( c.length > 2 ) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,156,for (int i=3; i < c.length; i++ ) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,157,"value += i * (i-1) * c[i] * Math.pow( x, (int)i-2);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,161,return value;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,166,* local power function using integer powers.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,167,"* <p>The Math.pow() function always returns absolute value,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,168,*   and is a bit 'heavier' since it can handle double values
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,169,*   for the exponential value.</p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,170,* @param x any double value
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,171,* @param n must be 0 or greater
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,172,* @return x^n (or 0 if n < 0 ).
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,173,* @throws MathException if n < 0.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,175,"//     private double pow( double x, int n ) throws MathException {"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,176,//         double value = x;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,177,//         if ( n < 0 ) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,178,"//             throw new MathException( ""power n must be 0 or greater"" );"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,179,//         } else if ( n == 0 ) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,180,//             // x^0 = 1 always.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,181,//             value = 1.0;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,182,//         } else {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,183,//             // only multiply for powers > 1.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,184,//             for (int i=1; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,185,//                 value *= x;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,189,"//         System.out.println(""pow:""+x+""^""+n+""=""+value);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,190,//         return value;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65,* @version $Revision: 1.9 $ $Date: 2003/11/15 18:44:52 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,78, Compute the value for the first derivative of the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,79, It is recommended to provide this method only if the first derivative is
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,80, analytical. Numerical derivatives may be acceptable in some cases.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,81, An implementation should throw an UnsupportedOperationException if
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,82, this method is not implemented.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,83, @param x the point for which the first derivative should be computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,84, @return the value
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,85, @throws MathException if the derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,87,ublic double firstDerivative(double x) throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,90, Compute the value for the second derivative of the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,91, It is recommended to provide this method only if the second derivative is
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,92, analytical. Numerical derivatives may be acceptable in some cases.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,93, An implementation should throw an UnsupportedOperationException if
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,94, this method is not implemented.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,95, @param x the point for which the first derivative should be computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,96, @return the value
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,97, @throws MathException if the second derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,99,ublic double secondDerivative(double x) throws MathException;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,9,* are met:
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,54,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,56,// commons-math
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,57,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,59,// junit
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,60,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,63,* Tests the PolynomialFunction implementation of a UnivariateRealFunction.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,65,* @version $Revision: 1.1 $
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,66,* @author Matt Cliff <matt@mattcliff.com>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,68,public final class PolynomialFunctionTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,70,// all values are known precisely accept 15 digit precision error
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,71,final double error = 1.0e-15;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,74,* tests the value of a constant polynomial.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,76,* <p>value of this is 2.5 everywhere.</p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,78,public void testConstants() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,79,double[] c = { 2.5 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,80,UnivariateRealFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,82,// verify that we are equal to c[0] at several (nonsymmetric) places
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,83,"assertEquals( f.value( 0.0), c[0], error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,84,"assertEquals( f.value( -1.0), c[0], error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,85,"assertEquals( f.value( -123.5), c[0], error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,86,"assertEquals( f.value( 3.0), c[0], error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,87,"assertEquals( f.value( 456.89), c[0], error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,93,* tests the value of a linear polynomial.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,95,* <p>This will test the function f(x) = 3*x - 1.5</p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,96,* <p>This will have the values
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,97,"*  <tt>f(0.0) = -1.5, f(-1.0) = -4.5, f(-2.5) = -9.0,"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,98,"*      f(0.5) = 0.0, f(1.5) = 3.0</tt> and <tt>f(3.0) = 7.5</tt>"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,99,* </p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,101,public void testLinear() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,102,"double[] c = { -1.5, 3.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,103,UnivariateRealFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,105,// verify that we are equal to c[0] when x=0
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,106,"assertEquals( f.value( 0.0), c[0], error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,108,// now check a few other places
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,109,"assertEquals( -4.5, f.value( -1.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,110,"assertEquals( -9.0, f.value( -2.5), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,111,"assertEquals( 0.0, f.value( 0.5), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,112,"assertEquals( 3.0, f.value( 1.5), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,113,"assertEquals( 7.5, f.value( 3.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,119,* Tests a second order polynomial.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,120,* <p> This will test the function f(x) = 2x^2 - 3x -2 = (2x+1)(x-2)</p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,123,public void testQuadratic() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,124,"double[] c = { -2.0, -3.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,125,UnivariateRealFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,127,// verify that we are equal to c[0] when x=0
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,128,"assertEquals( f.value( 0.0), c[0], error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,130,// now check a few other places
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,131,"assertEquals( 0.0, f.value( -0.5), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,132,"assertEquals( 0.0, f.value( 2.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,133,"assertEquals( -2.0, f.value( 1.5), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,134,"assertEquals( 7.0, f.value( -1.5), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,135,"assertEquals( 265.5312, f.value( 12.34), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,141,* This will test the quintic function
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,142,*   f(x) = x^2(x-5)(x+3)(x-1) = x^5 - 3x^4 -13x^3 + 15x^2</p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,145,public void testQuintic() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,146,"double[] c = { 0.0, 0.0, 15.0, -13.0, -3.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,147,UnivariateRealFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,149,// verify that we are equal to c[0] when x=0
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,150,"assertEquals( f.value( 0.0), c[0], error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,152,// now check a few other places
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,153,"assertEquals( 0.0, f.value( 5.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,154,"assertEquals( 0.0, f.value( 1.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,155,"assertEquals( 0.0, f.value( -3.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,156,"assertEquals( 54.84375, f.value( -1.5), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,157,"assertEquals( -8.06637, f.value( 1.3), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,163,* tests the derivative function by comparision
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,165,* <p>This will test the functions
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,166,"* <tt>f(x) = x^3 - 2x^2 + 6x + 3, g(x) = 3x^2 - 4x + 6</tt>"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,167,* and <tt>h(x) = 6x - 4</tt>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,169,public void testDerivativeComparision() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,170,"double[] f_coeff = { 3.0, 6.0, -2.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,171,"double[] g_coeff = { 6.0, -4.0, 3.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,172,"double[] h_coeff = { -4.0, 6.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,174,PolynomialFunction f = new PolynomialFunction( f_coeff );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,175,PolynomialFunction g = new PolynomialFunction( g_coeff );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,176,PolynomialFunction h = new PolynomialFunction( h_coeff );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,178,// compare f' = g
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,179,"assertEquals( f.firstDerivative(0.0), g.value(0.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,180,"assertEquals( f.firstDerivative(1.0), g.value(1.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,181,"assertEquals( f.firstDerivative(100.0), g.value(100.0), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,182,"assertEquals( f.firstDerivative(4.1), g.value(4.1), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,183,"assertEquals( f.firstDerivative(-3.25), g.value(-3.25), error );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,185,// compare g' = h
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,188,// compare f'' = h
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,61, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,61,* @version $Revision: 1.9 $ $Date: 2003/11/15 18:44:52 $
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,73, @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,79,* Second order derivative of quintic.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,80, Unsupported.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,81, @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,83,ublic double secondDerivative(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,84,hrow new UnsupportedOperationException();
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,66, @version $Revision: 1.8 $ $Date: 2003/11/14 22:22:17 $
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,66,* @version $Revision: 1.9 $ $Date: 2003/11/15 18:44:52 $
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,78, @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,84,* Second derivative of sinus function.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,85, Unsupported.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,86, @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,88,ublic double secondDerivative(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,89,hrow new UnsupportedOperationException();

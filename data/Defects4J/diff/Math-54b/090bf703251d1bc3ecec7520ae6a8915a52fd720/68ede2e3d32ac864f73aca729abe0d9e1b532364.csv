is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,96,his.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,96,setInitialCapacity( initialCapacity );
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,111,his.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,111,setInitialCapacity( initialCapacity );
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,190,* (non-Javadoc)
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,191, @see org.apache.commons.math.ExpandableDoubleArray#setStartIndex(int)
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,193,ublic synchronized void setStartIndex(int i) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,194,uper.setStartIndex(i);
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,195,f( shouldContract() ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,196,ontract();
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,220,f( contractionCriteria <= 1.0 ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,221,"hrow new IllegalArgumentException( ""The contraction criteria must be a number larger than"" +"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,233,"ublic void checkContractExpand( float contractionCritera, float expansionFactor ) {"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,220,"protected void checkContractExpand( float contractionCritera, float expansionFactor ) {"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,229,if( contractionCriteria <= 1.0 ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,230,"throw new IllegalArgumentException( ""The contraction criteria must be a number larger than"" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,231,""" one.  If the contractionCriteria is less than or equal to one an endless loop of contraction "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,232,"""and expansion would ensue as an internalArray.length == numElements would satisfy "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,233,"""the contraction criteria"");"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,236,if (expansionFactor < 1.0) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,237,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,238,"""The expansion factor must be a number greater than"" + ""1.0"");"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,244,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,245,* @see org.apache.commons.math.ExpandableDoubleArray#discardFrontElements(int)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,247,public synchronized void discardFrontElements(int i) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,248,super.discardFrontElements(i);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,249,if( shouldContract() ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,250,contract();
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,167,ublic double[] getValues() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,167,protected double[] getValues() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,327, Returns the starting index from the internal array.  This value should remain at
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,328, zero in this implementation of ExpandableDoubleArray.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,327,* Discards values from the front of the list.  This function removes n elements from
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,328,* the front of the array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,330," @return the starting Index in the internal storage array, in this class it is always zero."
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,330,* @param i number of elements to discard from the front of the array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,332,ublic int getStartIndex() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,333,eturn startIndex;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,337," Sets the starting index of the element array in the internal array, and subtracts the difference"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,338, between the original startIndex and the new startIndex from the number of elements.   This
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,339, method should be used with care.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,341, @param Index relative to the internal array from which to start the element array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,343,ublic synchronized void setStartIndex(int i) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,332,public synchronized void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,345,f( i > (startIndex + numElements) ) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,346,"hrow new IllegalArgumentException( ""Cannot start the element array outside of the "" +"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,335,if( i > numElements ) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,336,"throw new IllegalArgumentException( ""Cannot discard more elements than are"" +"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,350,"hrow new IllegalArgumentException( ""The starting index cannot be set to a negative index"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,339,"throw new IllegalArgumentException( ""Cannot discard a negative number"" +"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,354,/ Calculat the difference between the original start index and the current start index
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,355,nt difference = i - startIndex;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,357,"/ ""Subtract"" this difference from numElements - this works both ways.  If the"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,358,/ new start index is lower than the current start index then numElements is
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,359,/ incremenet by that differen
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,360,umElements -= difference;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,362,tartIndex = i;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,342,"// ""Subtract"" this number of discarded from numElements"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,343,numElements -= i;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,344,startIndex += i;
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,5,* reserved.
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,9,* are met:
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,58,* This class contains test cases for the ExpandableDoubleArray.
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,60,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,62,public class ContractableDoubleArrayTest extends DoubleArrayAbstractTest {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,64,public ContractableDoubleArrayTest(String name) {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,65,super( name );
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,68,/* (non-Javadoc)
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,69,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,71,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,72,eDA = new ContractableDoubleArray();
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,75,/** Test normal operations and then test internal storage */
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,76,public void testAdd1000() {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,77,super.testAdd1000();
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,78,"assertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,79,"""16 and an expansion factor of 2.0"","
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,80,"1024, eDA.getInternalLength());"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,83,public void testSetElementArbitraryExpansion() {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,84,super.testSetElementArbitraryExpansion();
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,85,"assertEquals( ""The length of the internal array should now be 1001, it isn't"", eDA.getInternalLength(), 1001);"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,88,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,89,super.testAddElementRolling();
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,90,"assertTrue( ""Even though there are only 6 element, internal storage should be less than 2.5 times the number of elements"","
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,91,eDA.getInternalLength() < ((int) 6 * 2.5) );
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,95,/** Test ERROR conditions */
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,96,/** TEST ERROR CONDITIONS **/
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,98,public void testIllegalInitialCapacity() {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,99,try {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,100,"ContractableDoubleArray eDA = new ContractableDoubleArray(-3, 2.0f);"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,101,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,102,"""the initialCapacity was negative, if it didn't then"" +"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,103,""" the range checking of initialCapacity is not working properly"" );"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,104,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,106,try {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,107,"ContractableDoubleArray eDA = new ContractableDoubleArray(0, 2.0f);"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,108,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,109,"""the initialCapacity was ZERO if it didn't then"" +"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,110,""" the range checking of initialCapacity is not working properly"" );"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,111,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,115,public void testIllegalExpansionFactor() {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,116,try {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,117,"ContractableDoubleArray eDA = new ContractableDoubleArray(3, 0.66f);"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,118,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,119,"""the expansionFactor for 0.66 which would shrink the array instead of expand the array"");"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,120,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,122,try {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,123,"ContractableDoubleArray eDA = new ContractableDoubleArray(3, 0.0f);"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,124,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,125,"""the expansionFactor for 0.0"");"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,126,} catch( IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,129,try {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,130,"ContractableDoubleArray eDA = new ContractableDoubleArray(3, -4.35f);"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,131,"fail( ""That constructor should have thrown an IllegalArgumentException because "" +"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,132,"""the expansionFactor for -4.35"");"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,133,} catch( IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,5,* reserved.
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,9,* are met:
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,56,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,59,* This class contains test cases for the ExpandableDoubleArray.
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,61,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,63,public abstract class DoubleArrayAbstractTest extends TestCase {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,65,protected ExpandableDoubleArray eDA = null;
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,67,public DoubleArrayAbstractTest(String name) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,68,super( name );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,73,/** TEST NORMAL OPERATIONS **/
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,75,public void testAdd1000() {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,77,for( int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,78,eDA.addElement( i );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,81,"assertEquals(""Number of elements should be equal to 1000 after adding 1000 values"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,82,"1000, eDA.getNumElements() );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,85,"assertEquals(""The element at the 56th index should be 56"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,86,"56.0, eDA.getElement(56), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,91,public void testGetValues() {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,92,"double[] controlArray = {2.0, 4.0, 6.0};"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,94,eDA.addElement(2.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,95,eDA.addElement(4.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,96,eDA.addElement(6.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,97,double[] testArray = eDA.getValues();
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,99,for( int i = 0; i < eDA.getNumElements(); i++) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,100,"assertEquals( ""The testArray values should equal the controlArray values, index i: "" + i +"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,101,""" does not match"", testArray[i], controlArray[i], Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,106,public void testSetElementArbitraryExpansion() {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,107,"double[] controlArray = {2.0, 4.0, 6.0};"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,109,eDA.addElement(2.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,110,eDA.addElement(4.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,111,eDA.addElement(6.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,112,"eDA.setElement(1, 3.0);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,114,// Expand the array arbitrarily to 1000 items
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,115,"eDA.setElement(1000, 3.4);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,117,"assertEquals( ""The number of elements should now be 1001, it isn't"", eDA.getNumElements(), 1001);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,119,"assertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,120,"eDA.getElement( 760 ), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,122,"assertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, eDA.getElement(1000), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,123,"assertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, eDA.getElement(0), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,127,public void testSetNumberOfElements() {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,128,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,129,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,130,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,131,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,132,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,133,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,134,"assertEquals( ""Number of elements should equal 6"", eDA.getNumElements(), 6);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,136,eDA.setNumElements( 3 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,137,"assertEquals( ""Number of elements should equal 3"", eDA.getNumElements(), 3);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,139,try {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,140,eDA.setNumElements( -3 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,141,"fail( ""Setting number of elements to negative should've thrown an exception"");"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,142,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,145,eDA.setNumElements(1024);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,146,"assertEquals( ""Number of elements should now be 1024"", eDA.getNumElements(), 1024);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,147,"assertEquals( ""Element 453 should be a default double"", eDA.getElement( 453 ), 0.0, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,151,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,152,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,153,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,154,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,155,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,156,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,157,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,158,eDA.addElementRolling( 2.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,160,"assertEquals( ""There should be 6 elements in the eda"", eDA.getNumElements(), 6);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,161,"assertEquals( ""The last element should be 2.0"", eDA.getElement( eDA.getNumElements() -1 ), 2.0, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,163,for( int i = 0; i  < 1024; i++ ) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,164,eDA.addElementRolling( i );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,167,"assertEquals( ""We just inserted 1024 rolling elements, num elements should still be 6"", eDA.getNumElements(), 6);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,56,mport java.util.NoSuchElementException;
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,58,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,65,ublic class ExpandableDoubleArrayTest extends TestCase {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,62,public class ExpandableDoubleArrayTest extends DoubleArrayAbstractTest {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,71,** TEST NORMAL OPERATIONS **/
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,68,/* (non-Javadoc)
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,69,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,71,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,72,eDA = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,75,/* (non-Javadoc)
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,76,* @see junit.framework.TestCase#tearDown()
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,78,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,79,eDA = null;
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,83,/** TEST NORMAL OPERATIONS - calling super class test and then checking internal
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,84,*   storage **/
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,75,xpandableDoubleArray exDoubleArr = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,77,or( int i = 0; i < 1000; i++) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,78,xDoubleArr.addElement( i );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,81,"ssertTrue(""Number of elements should be equal to 1000 after adding 1000 values"","
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,82,xDoubleArr.getNumElements() == 1000);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,84,"ssertTrue(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,86,xDoubleArr.getInternalLength() == 1024);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,88,"ssertTrue(""The element at the 56th index should be 56"","
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,89,xDoubleArr.getElement(56) == 56 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,88,super.testAdd1000();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,89,"assertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,90,"""16 and an expansion factor of 2.0"","
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,91,"1024, eDA.getInternalLength());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,94,public void testSetElementArbitraryExpansion() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,95,super.testSetElementArbitraryExpansion();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,96,"assertEquals( ""The length of the internal array should now be 1001, it isn't"", eDA.getInternalLength(), 1001);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,99,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,100,super.testAddElementRolling();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,101,"assertEquals( ""Even though there are only 6 element, internal storage should be 2048"", eDA.getInternalLength(), 2048);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,104,/** TESTS WHICH FOCUS ON ExpandableSpecific internal storage */
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,94,xpandableDoubleArray exDoubleArr = new ExpandableDoubleArray(2);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,96,"ssertTrue(""Initial internal length should be 2"", exDoubleArr.getInternalLength() == 2);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,97,"ssertTrue(""Initial number of elements should be 0"", exDoubleArr.getNumElements() == 0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,108,ExpandableDoubleArray eDA2 = new ExpandableDoubleArray(2);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,109,"assertEquals(""Initial internal length should be 2"", 2, eDA2.getInternalLength());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,110,"assertEquals(""Initial number of elements should be 0"", 0, eDA2.getNumElements());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,102,xDoubleArr.addElement( i );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,115,eDA2.addElement( i );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,105,"ssertTrue(""Number of elements should be equal to 2^15"", exDoubleArr.getNumElements() == (int) Math.pow(2.0, 15.0));"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,106,"ssertTrue(""Internal length should be 2^15"", exDoubleArr.getInternalLength() == (int) Math.pow(2.0, 15.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,118,"assertEquals(""Number of elements should be equal to 2^15"", (int) Math.pow(2.0, 15.0), eDA2.getNumElements());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,119,"assertEquals(""Internal length should be 2^15"", (int) Math.pow(2.0, 15.0), eDA2.getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,108,xDoubleArr.addElement( 2.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,121,eDA2.addElement( 2.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,110,"ssertTrue(""Number of elements should be equals to 2^15 + 1"","
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,111,"xDoubleArr.getNumElements() == ( (int) Math.pow(2.0, 15.0) + 1 ) );"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,112,"ssertTrue(""Internal length should be 2^16"", exDoubleArr.getInternalLength() == (int) Math.pow(2.0, 16.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,123,"assertEquals(""Number of elements should be equals to 2^15 + 1"","
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,124,"( (int) Math.pow(2.0, 15.0) + 1 ), eDA2.getNumElements() );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,125,"assertEquals(""Internal length should be 2^16"", (int) Math.pow(2.0, 16.0), eDA2.getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,117,ublic void testWithInitialCapacitAndExpansionFactor() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,118,"xpandableDoubleArray exDoubleArr = new ExpandableDoubleArray(3, 3.0f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,128,public void testWithInitialCapacityAndExpansionFactor() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,120,"ssertTrue(""Initial internal length should be 3"", exDoubleArr.getInternalLength() == 3);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,121,"ssertTrue(""Initial number of elements should be 0"", exDoubleArr.getNumElements() == 0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,130,"ExpandableDoubleArray eDA3 = new ExpandableDoubleArray(3, 3.0f);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,131,"assertEquals(""Initial internal length should be 3"", 3, eDA3.getInternalLength() );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,132,"assertEquals(""Initial number of elements should be 0"", 0, eDA3.getNumElements() );"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,126,xDoubleArr.addElement( i );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,137,eDA3.addElement( i );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,129,"ssertTrue(""Number of elements should be equal to 3^7"", exDoubleArr.getNumElements() == (int) Math.pow(3.0, 7.0));"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,130,"ssertTrue(""Internal length should be 3^7"", exDoubleArr.getInternalLength() == (int) Math.pow(3.0, 7.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,140,"assertEquals(""Number of elements should be equal to 3^7"", (int) Math.pow(3.0, 7.0), eDA3.getNumElements());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,141,"assertEquals(""Internal length should be 3^7"", (int) Math.pow(3.0, 7.0), eDA3.getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,132,xDoubleArr.addElement( 2.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,143,eDA3.addElement( 2.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,134,"ssertTrue(""Number of elements should be equals to 3^7 + 1"","
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,135,"xDoubleArr.getNumElements() == ( (int) Math.pow(3.0, 7.0) + 1 ) );"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,136,"ssertTrue(""Internal length should be 3^8"", exDoubleArr.getInternalLength() == (int) Math.pow(3.0, 8.0));"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,145,"assertEquals(""Number of elements should be equals to 3^7 + 1"","
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,146,"( (int) Math.pow(3.0, 7.0) + 1 ), eDA3.getNumElements() );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,147,"assertEquals(""Internal length should be 3^8"", (int) Math.pow(3.0, 8.0), eDA3.getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,138,"ssertTrue(""Expansion factor should equal 3.0"", exDoubleArr.getExpansionFactor() == 3.0f);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,141,ublic void testGetValues() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,143,xpandableDoubleArray eDA = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,145,"ouble[] controlArray = {2.0, 4.0, 6.0};"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,147,DA.addElement(2.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,148,DA.addElement(4.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,149,DA.addElement(6.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,150,ouble[] testArray = eDA.getValues();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,152,or( int i = 0; i < eDA.getNumElements(); i++) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,153,"ssertTrue( ""The testArray values should equal the controlArray values, index i: "" + i +"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,154," does not match"", testArray[i] == controlArray[i]);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,149,"assertEquals(""Expansion factor should equal 3.0"", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,159,ublic void testSetElementArbitraryExpansion() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,161,xpandableDoubleArray eDA = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,163,"ouble[] controlArray = {2.0, 4.0, 6.0};"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,165,DA.addElement(2.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,166,DA.addElement(4.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,167,DA.addElement(6.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,168,"DA.setElement(1, 3.0);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,170,/ Expand the array arbitrarily to 1000 items
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,171,"DA.setElement(1000, 3.4);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,173,"ssertTrue( ""The length of the internal array should now be 1001, it isn't"", eDA.getInternalLength() == 1001);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,174,"ssertTrue( ""The number of elements should now be 1001, it isn't"", eDA.getNumElements() == 1001);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,176,"ssertTrue( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"","
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,177,DA.getElement( 760 ) == 0.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,179,"ssertTrue( ""The 1000th index should be 3.4, it isn't"", eDA.getElement(1000) == 3.4);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,180,"ssertTrue( ""The 0th index should be 2.0, it isn't"", eDA.getElement(0) == 2.0);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,184,ublic void testSetNumberOfElements() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,186,xpandableDoubleArray eDA = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,187,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,188,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,189,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,190,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,191,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,192,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,193,"ssertTrue( ""Number of elements should equal 6"", eDA.getNumElements() == 6);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,195,DA.setNumElements( 3 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,196,"ssertTrue( ""Number of elements should equal 3"", eDA.getNumElements() == 3);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,198,ry {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,199,DA.setNumElements( -3 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,200,"ail( ""Setting number of elements to negative should've thrown an exception"");"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,201, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,204,DA.setNumElements(1024);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,205,"ssertTrue( ""Number of elements should now be 1024"", eDA.getNumElements() == 1024);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,206,"ssertTrue( ""Element 453 should be a default double"", eDA.getElement( 453 ) == 0.0);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,210,ublic void testAddElementRolling() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,212,xpandableDoubleArray eDA = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,214,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,215,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,216,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,217,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,218,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,219,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,220,DA.addElementRolling( 2.0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,222,"ssertTrue( ""There should be 6 elements in the eda"", eDA.getNumElements() == 6);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,223,"ssertTrue( ""The last element should be 2.0"", eDA.getElement( eDA.getNumElements() -1 ) == 2.0);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,225,or( int i = 0; i  < 1024; i++ ) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,226,DA.addElementRolling( i );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,229,"ssertTrue( ""We just inserted 1024 rolling elements, num elements should still be 6"", eDA.getNumElements() == 6);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,230,"ssertTrue( ""Even though there are only 6 element, internal storage should be 2048"", eDA.getInternalLength() == 2048);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,231,"ssertEquals( ""The start index should be 1025"", 1025, eDA.getStartIndex());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,233,DA.setStartIndex( 0 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,235,"ssertEquals( ""There shoud now be 1031 elements in this array"", 1031, eDA.getNumElements(), 0.001);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,236,"ssertEquals( ""The first element should be 1.0"",1.0,  eDA.getElement(0), 0.001);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,238,ry {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,239,DA.setStartIndex( 100000 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,240,"ail( ""TRying to set the start index outside of the current array should have caused an error"");"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,241, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,244,ry {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,245,DA.setStartIndex( -1 );
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,246,"ail( ""TRying to set the start index to a negative number should have caused an error"");"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,247, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,288,ublic void testGetOutOfBounds() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,290,xpandableDoubleArray eDA = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,291,DA.addElement(2.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,292,DA.addElement(3.0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,294,ry {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,295,DA.getElement(0);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,296,DA.getElement(1);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,297, catch( NoSuchElementException nsee ) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,298,"ail( ""There are values for index 0 and 1, this should not have thrown an exception"");"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,301,ry {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,302,DA.getElement(2);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,303,"ail( ""There are 2 elements in the array, you asked for index 2 implying that there are 3.  "" +"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,305, catch( NoSuchElementException nsee ) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,308,ry {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,309,DA.getElement(-234);
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,310,"ail( ""You tried to retrieve a negative index, this should have thrown an exception. "" );"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,311, catch( IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,315,ublic void testSetOutOfBounds() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,317,xpandableDoubleArray eDA = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,319,ry {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,320,"DA.setElement( -3, 3.4 );"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,321,"ail( ""You tried to set an element with a negative index, thisshould have thrown an error"");"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,322, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/TestStatisticTest.java,src/test/org/apache/commons/math/TestStatisticTest.java,59,mport junit.framework.AssertionFailedError;
False,src/test/org/apache/commons/math/TestStatisticTest.java,src/test/org/apache/commons/math/TestStatisticTest.java,64, @version $Revision: 1.1 $ $Date: 2003/05/15 21:58:23 $
True,src/test/org/apache/commons/math/TestStatisticTest.java,src/test/org/apache/commons/math/TestStatisticTest.java,63,* @version $Revision: 1.2 $ $Date: 2003/05/16 03:55:34 $

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,"ublic interface ExponentialDistribution extends ContinuousDistribution, HasDensity<Double> {"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,34, Modify the mean.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,35, @param mean the new mean.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,36, @deprecated as of v2.1
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,38,Deprecated
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,39,oid setMean(double mean);
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,public interface ExponentialDistribution extends ContinuousDistribution {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,49, @param x  The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,50, @return  The pdf at point x.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,43,* @param x Point at which the density should be computed.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,44,* @return the pdf at point {@code x}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,52,ouble density(Double x);
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,46,double density(double x);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,23,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,60, @param inverseCumAccuracy the maximum absolute error in inverse cumulative probability estimates
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,61, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY})
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,57,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,58,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,59,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,60,* @throws NotStrictlyPositiveException if {@code mean <= 0}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,65,uper();
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,66,etMeanInternal(mean);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,67,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,71, Modify the mean.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,72, @param mean the new mean.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,73, @throws IllegalArgumentException if <code>mean</code> is not positive.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,74, @deprecated as of 2.1 (class will become immutable in 3.0)
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,76,Deprecated
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,77,ublic void setMean(double mean) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,78,etMeanInternal(mean);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,81, Modify the mean.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,82, @param newMean the new mean.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,83, @throws IllegalArgumentException if <code>newMean</code> is not positive.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,85,rivate void setMeanInternal(double newMean) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,86,f (newMean <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,87,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,88,"ocalizedFormats.NOT_POSITIVE_MEAN, newMean);"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,64,if (mean <= 0) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,65,"throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,90,his.mean = newMean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,67,this.mean = mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,68,solverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,104, @param x The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,105, @return The pdf at point x.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,106, @deprecated - use density(double)
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,108,ublic double density(Double x) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,109,eturn density(x.doubleValue());
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,113, Return the probability density for a particular point.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,115, @param x The point at which the density should be computed.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,116, @return The pdf at point x.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,83,* @param x Point at which the density should be computed.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,84,* @return the pdf at point {@code x}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,138, @return CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,106,* @return the CDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,140,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,108,* computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,142,ublic double cumulativeProbability(double x) throws MathException{
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,110,public double cumulativeProbability(double x) throws MathException {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,154, that P(X &lt; x) = <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,155, <p>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,156, Returns 0 for p=0 and <code>Double.POSITIVE_INFINITY</code> for p=1.</p>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,122,* that {@code P(X < x) = p}.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,123,* Returns 0 when p = 0 and {@code Double.POSITIVE_INFINITY} when p = 1.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,159," @return x, such that P(X &lt; x) = <code>p</code>"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,126,"* @return {@code x}, such that {@code P(X < x) = p}."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,161,            computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,162, @throws IllegalArgumentException if p < 0 or p > 1.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,128,* computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,129,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,169,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,170,"ocalizedFormats.OUT_OF_RANGE_SIMPLE, p, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,136,"throw new OutOfRangeException(p, 0.0, 1.0);"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,186, uniform deviates. </p>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,152,* uniform deviates.</p>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,188, @return random value
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,154,* @return a random value.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,155,* @throws MathException if an error occurs generating the random value.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,190, @throws MathException if an error occurs generating the random value
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,198," Access the domain value lower bound, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,164,"* Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,201, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,202," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,203,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,167,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,168,"* @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,214, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,215," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,216,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,179,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,180,"* @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,223,f (p < .5) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,187,if (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,233," Access the initial domain value, based on <code>p</code>, used to"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,197,"* Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,236, @param p the desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,237, @return initial domain value
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,200,* @param p Desired probability for the critical value.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,201,* @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,245,f (p < .5) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,209,if (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,247,eturn mean * .5;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,211,return mean * 0.5;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,258, @return the solver absolute accuracy
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,222,* @return the solver absolute accuracy.
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,20,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,114,istribution.setMean(2d);
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,115,"ssertEquals(2d, distribution.getMean(), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,117,public void testPreconditions() {
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,117,istribution.setMean(0);
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,118,"ail(""Expecting IllegalArgumentException for 0 mean"");"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,119, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,120,/ expected
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,119,ExponentialDistribution distribution = new ExponentialDistributionImpl(0);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,120,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,121,// Expected.

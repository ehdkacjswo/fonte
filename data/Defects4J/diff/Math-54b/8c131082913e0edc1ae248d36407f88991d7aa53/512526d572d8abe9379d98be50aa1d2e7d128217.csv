is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,117,"athUtils.checkOrder(x, 1, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,118,"athUtils.checkOrder(y, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,117,MathUtils.checkOrder(x);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,118,MathUtils.checkOrder(y);
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,49,"athUtils.checkOrder(xval, 1, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,50,"athUtils.checkOrder(yval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,49,MathUtils.checkOrder(xval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,50,MathUtils.checkOrder(yval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,19,mport org.apache.commons.math.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,20,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,20,import org.apache.commons.math.exception.NoDataException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,22,mport org.apache.commons.math.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,73,"hrows MathException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,72,throws MathException {
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,75,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_DATA);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,74,throw new NoDataException();
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,90,"athUtils.checkOrder(xval, 1, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,91,"athUtils.checkOrder(yval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,89,MathUtils.checkOrder(xval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,90,MathUtils.checkOrder(yval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,21,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,22,mport org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,21,import org.apache.commons.math.exception.NoDataException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,23,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,138,* @throws NoDataException if any of the arrays has zero length.
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,152,ouble[][][] d3FdXdYdZ)
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,153,hrows DimensionMismatchException {
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,154,double[][][] d3FdXdYdZ) {
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,160,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_DATA);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,161,throw new NoDataException();
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,187,"athUtils.checkOrder(x, 1, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,188,"athUtils.checkOrder(y, 1, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,189,"athUtils.checkOrder(z, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,188,MathUtils.checkOrder(x);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,189,MathUtils.checkOrder(y);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,190,MathUtils.checkOrder(z);
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,311,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,312,"ocalizedFormats.OUT_OF_RANGE_SIMPLE,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,313,", xval[0], xval[xval.length - 1]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,312,"throw new OutOfRangeException(x, xval[0], xval[xval.length - 1]);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,317,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,318,"ocalizedFormats.OUT_OF_RANGE_SIMPLE,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,319,", yval[0], yval[yval.length - 1]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,316,"throw new OutOfRangeException(y, yval[0], yval[yval.length - 1]);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,323,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,324,"ocalizedFormats.OUT_OF_RANGE_SIMPLE,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,325,", zval[0], zval[zval.length - 1]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,320,"throw new OutOfRangeException(z, zval[0], zval[zval.length - 1]);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,456,"hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.OUT_OF_RANGE_SIMPLE,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,457,", 0, 1);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,451,"throw new OutOfRangeException(x, 0, 1);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,460,"hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.OUT_OF_RANGE_SIMPLE,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,461,", 0, 1);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,454,"throw new OutOfRangeException(y, 0, 1);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,464,"hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.OUT_OF_RANGE_SIMPLE,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,465,", 0, 1);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,457,"throw new OutOfRangeException(z, 0, 1);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,19,mport org.apache.commons.math.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,20,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,20,import org.apache.commons.math.exception.NoDataException;
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,22,mport org.apache.commons.math.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,40,"hrows MathException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,39,throws MathException {
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,42,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NO_DATA);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,41,throw new NoDataException();
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,48,"athUtils.checkOrder(xval, 1, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,49,"athUtils.checkOrder(yval, 1, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,50,"athUtils.checkOrder(zval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,47,MathUtils.checkOrder(xval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,48,MathUtils.checkOrder(yval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,49,MathUtils.checkOrder(zval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,27,* @since 2.2
False,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,40, @return a function which interpolates the data set.
True,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,41,* @return a function that interpolates the data set.
True,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,42,* @throws NoDataException if any of the arrays has zero length.
True,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TrivariateRealGridInterpolator.java,43,* @throws DimensionMismatchException if the array lengths are inconsistent.
False,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,37, @param Localizable pattern.
True,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java,37,* @param pattern Localizable pattern.
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,19,import org.apache.commons.math.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,22,* Exception to be thrown when the required data is missing.
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,24,* @since 2.2
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,27,public class NoDataException extends MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,29,* Construct the exception.
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,31,public NoDataException() {
True,src/main/java/org/apache/commons/math/exception/NoDataException.java,src/main/java/org/apache/commons/math/exception/NoDataException.java,32,"super(LocalizedFormats.NO_DATA, null);"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,19,import org.apache.commons.math.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,20,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,23,* Exception to be thrown when the a sequence of values is not monotonously
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,24,* increasing or decreasing.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,26,* @since 2.2
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,27,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,29,public class NonMonotonousSequenceException extends MathIllegalNumberException {
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,31,"* Direction (positive for increasing, negative for decreasing)."
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,33,private final MathUtils.Order.Direction direction;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,35,* Whether the sequence must be strictly increasing or decreasing.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,37,private final boolean strict;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,39,* Index of the wrong value.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,41,private final int index;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,43,* Previous value.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,45,private final Number previous;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,48,* Construct the exception.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,49,* This constructor uses default values assuming that the sequence should
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,50,* have been strictly increasing.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,52,* @param wrong Value that did not match the requirements.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,53,* @param previous Previous value in the sequence.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,54,* @param index Index of the value that did not match the requirements.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,56,"public NonMonotonousSequenceException(Number wrong,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,57,"Number previous,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,58,int index) {
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,59,"this(wrong, previous, index, MathUtils.Order.Direction.INCREASING, true);"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,63,* Construct the exception.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,65,* @param wrong Value that did not match the requirements.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,66,* @param previous Previous value in the sequence.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,67,* @param index Index of the value that did not match the requirements.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,68,* @param direction Strictly positive for a sequence required to be
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,69,"* increasing, negative (or zero) for a decreasing sequence."
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,70,* @param strict Whether the sequence must be strictly increasing or
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,71,* decreasing.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,73,"public NonMonotonousSequenceException(Number wrong,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,74,"Number previous,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,75,"int index,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,76,"MathUtils.Order.Direction direction,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,77,boolean strict) {
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,78,super(direction == MathUtils.Order.Direction.INCREASING ?
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,79,(strict ?
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,80,LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE :
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,81,LocalizedFormats.NOT_INCREASING_SEQUENCE) :
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,82,(strict ?
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,83,LocalizedFormats.NOT_STRICTLY_DECREASING_SEQUENCE :
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,84,"LocalizedFormats.NOT_DECREASING_SEQUENCE),"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,85,"wrong, previous, index, index - 1);"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,87,this.direction = direction;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,88,this.strict = strict;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,89,this.index = index;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,90,this.previous = previous;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,94,* @return the order direction.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,96,public MathUtils.Order.Direction getDirection() {
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,97,return direction;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,100,* @return {@code true} is the sequence should be strictly monotonous.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,102,public boolean getStrict() {
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,103,return strict;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,106,* Get the index of the wrong value.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,108,* @return the current index.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,110,public int getIndex() {
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,111,return index;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,114,* @return the previous value.
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,116,public Number getPrevious() {
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,117,return previous;
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,163,"NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,167,"NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,195,"NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,198,"NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */"
False,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,199,"O_DATA(""no data""),"
True,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/util/LocalizedFormats.java,203,"NO_DATA(""no data""), /* keep */"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,25,import org.apache.commons.math.exception.NonMonotonousSequenceException;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,416," useful (see e.g. {@link equalsIncludingNaN(double,double)"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,417,"* useful (see e.g. {@link #equalsIncludingNaN(double,double)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,528," useful (see e.g. {@link equalsIncludingNaN(double[],double[])"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,529,"* useful (see e.g. {@link #equalsIncludingNaN(double[],double[])"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1870,public static class Order {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1871,public static enum Direction {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1872,"INCREASING,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1873,DECREASING
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1872, @param val Values
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1873," @param dir Order direction (-1 for decreasing, 1 for increasing)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1874, @param strict Whether the order should be strict
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1875, @throws IllegalArgumentException if the array is not sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1880,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1881,* @param dir Order direction.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1882,* @param strict Whether the order should be strict.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1883,* @throws NonMonotonousSequenceException if the array is not sorted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1877,"ublic static void checkOrder(double[] val, int dir, boolean strict) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1885,"public static void checkOrder(double[] val, Order.Direction dir, boolean strict) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1887,boolean ok = true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1882,f (dir > 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1891,switch (dir) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1892,case INCREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1885,"hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1886," - 1, i, previous, val[i]);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1895,ok = false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1890,"hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_INCREASING_NUMBER_OF_POINTS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1891," - 1, i, previous, val[i]);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1899,ok = false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1894, else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1902,break;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1903,case DECREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1897,"hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1898," - 1, i, previous, val[i]);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1906,ok = false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1902,"hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_DECREASING_NUMBER_OF_POINTS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1903," - 1, i, previous, val[i]);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1910,ok = false;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1913,break;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1914,default:
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1915,// Should never happen.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1916,throw new IllegalArgumentException();
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1919,if (!ok) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1920,"throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1927,* Checks that the given array is sorted in strictly increasing order.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1929,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1930,* @throws NonMonotonousSequenceException if the array is not sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1932,public static void checkOrder(double[] val) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1933,"checkOrder(val, Order.Direction.INCREASING, true);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1937,* Checks that the given array is sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1939,* @param val Values
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1940,"* @param dir Order direction (-1 for decreasing, 1 for increasing)"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1941,* @param strict Whether the order should be strict
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1942,* @throws NonMonotonousSequenceException if the array is not sorted.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1943,"* @deprecated as of 2.2 (please use the new {@link #checkOrder(double[],Order.Direction,boolean)"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1944,* checkOrder} method). To be removed in 3.0.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1946,"public static void checkOrder(double[] val, int dir, boolean strict) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1947,if (dir > 0) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1948,"checkOrder(val, Order.Direction.INCREASING, strict);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1949,} else {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1950,"checkOrder(val, Order.Direction.DECREASING, strict);"
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,209, @returns the multidimensional counts.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,209,* @return the multidimensional counts.
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,20,mport org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,20,mport org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,20,mport org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,17,package org.apache.commons.math.exception;
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,19,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,25,* Test for {@link NonMonotonousSequenceException}.
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,27,* @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,29,public class NonMonotonousSequenceExceptionTest {
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,30,@Test
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,31,public void testAccessors() {
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,32,NonMonotonousSequenceException e
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,33,"= new NonMonotonousSequenceException(0, -1, 1, MathUtils.Order.Direction.DECREASING, false);"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,34,"Assert.assertEquals(0, e.getArgument());"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,35,"Assert.assertEquals(-1, e.getPrevious());"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,36,"Assert.assertEquals(1, e.getIndex());"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,37,Assert.assertTrue(e.getDirection() == MathUtils.Order.Direction.DECREASING);
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,38,Assert.assertFalse(e.getStrict());
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,40,"e = new NonMonotonousSequenceException(-1, 0, 1);"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,41,"Assert.assertEquals(-1, e.getArgument());"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,42,"Assert.assertEquals(0, e.getPrevious());"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,43,"Assert.assertEquals(1, e.getIndex());"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,44,Assert.assertTrue(e.getDirection() == MathUtils.Order.Direction.INCREASING);
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,45,Assert.assertTrue(e.getStrict());
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,27,import org.apache.commons.math.exception.NonMonotonousSequenceException;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1472,"athUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 15}, 1, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1473,"athUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 2}, 1, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1474,"athUtils.checkOrder(new double[] {3, -5.5, -11, -27.5}, -1, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1475,"athUtils.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5}, -1, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1473,"MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 15},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1474,"MathUtils.Order.Direction.INCREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1475,"MathUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 2},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1476,"MathUtils.Order.Direction.INCREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1477,"MathUtils.checkOrder(new double[] {3, -5.5, -11, -27.5},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1478,"MathUtils.Order.Direction.DECREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1479,"MathUtils.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1480,"MathUtils.Order.Direction.DECREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1478,"athUtils.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15}, 1, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1483,"MathUtils.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1484,"MathUtils.Order.Direction.INCREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1480, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1486,} catch (NonMonotonousSequenceException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1484,"athUtils.checkOrder(new double[] {-15, -5.5, -1, -2, 2}, 1, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1490,"MathUtils.checkOrder(new double[] {-15, -5.5, -1, -2, 2},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1491,"MathUtils.Order.Direction.INCREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1486, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1493,} catch (NonMonotonousSequenceException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1490,"athUtils.checkOrder(new double[] {3, 3, -5.5, -11, -27.5}, -1, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1497,"MathUtils.checkOrder(new double[] {3, 3, -5.5, -11, -27.5},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1498,"MathUtils.Order.Direction.DECREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1492, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1500,} catch (NonMonotonousSequenceException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1496,"athUtils.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5}, -1, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1504,"MathUtils.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5},"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1505,"MathUtils.Order.Direction.DECREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1498, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1507,} catch (NonMonotonousSequenceException e) {

is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,20,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,54,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,56,mport java.util.ArrayList;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,57,mport java.util.List;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,59,mport junit.framework.Test;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,60,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,61,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,63,mport org.apache.commons.math.beans.*;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,66, Test cases for the {@link BeanListUnivariateImpl} class.
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,68," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,69, @version $Revision: 1.1 $ $Date: 2003/05/29 19:41:31 $
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,72,ublic final class BeanListUnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,74,rivate List patientList = null;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,75,rivate double tolerance = Double.MIN_VALUE;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,77,ublic BeanListUnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,78,uper(name);
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,81,ublic void setUp() {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,82,atientList = new ArrayList();
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,84,/ Create and add patient bean 1
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,85,"italStats vs1 = new VitalStats( new Double(120.0),"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,86,ew Double(96.4) );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,87,"atient p1 = new Patient( vs1, new Integer( 35 ) );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,88,atientList.add( p1 );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,90,/ Create and add patient bean 2
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,91,"italStats vs2 = new VitalStats( new Double(70.0),"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,92,ew Double(97.4) );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,93,"atient p2 = new Patient( vs2, new Integer( 23 ) );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,94,atientList.add( p2 );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,96,/ Create and add patient bean 3
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,97,"italStats vs3 = new VitalStats( new Double(90.0),"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,98,ew Double(98.6) );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,99,"atient p3 = new Patient( vs3, new Integer( 42 ) );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,100,atientList.add( p3 );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,103,ublic static Test suite() {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,104,estSuite suite = new TestSuite(BeanListUnivariateImplTest.class);
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,105,"uite.setName(""Freq Tests"");"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,106,eturn suite;
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,109,** test stats */
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,110,ublic void testStats() {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,112,toreUnivariate u = new BeanListUnivariateImpl( patientList );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,114,"ssertEquals(""total count"",3,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,116,.clear();
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,117,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,120,ublic void testPropStats() {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,122,"toreUnivariate heartU = new BeanListUnivariateImpl( patientList,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,123,"vitalStats.heartRate"" );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,127,"ssertEquals( ""Mean heart rate unexpected"", 93.333,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,128,"eartU.getMean(), 0.001 );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,129,"ssertEquals( ""Max heart rate unexpected"", 120.0,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,130,"eartU.getMax(), 0.001 );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,132,"toreUnivariate ageU = new BeanListUnivariateImpl( patientList,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,133,"age"" );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,135,"ssertEquals( ""Mean age unexpected"", 33.333,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,136,"geU.getMean(), 0.001 );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,137,"ssertEquals( ""Max age unexpected"", 42.0,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,138,"geU.getMax(), 0.001 );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,142,*    public void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,143,ist list = new ArrayList();
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,145,toreUnivariate u = new ListUnivariateImpl( list );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,147,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,148,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,149,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,151,ist.add( new Double(one));
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,153,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,154,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,155,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,158,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,159,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,161,"ouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,162,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,163,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,164,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,167,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,168,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,169,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,170,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,173,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,174,istUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,175,.setWindowSize(10);
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,177,.addValue( 1.0 );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,178,.addValue( 2.0 );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,179,.addValue( 3.0 );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,180,.addValue( 4.0 );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,182,"ssertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,183,"ssertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,185,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,186,/ of a discarded element
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,187,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,188,.addValue( i + 2 );
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,190,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,192,"ssertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/BeanListUnivariateImplTest.java,193,"ssertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,5, reserved.
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,9, are met:
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,20,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,54,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,60, Test cases for the TestStatistic class.
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,62, @author Phil Steitz
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,63, @version $Revision: 1.1 $ $Date: 2003/05/26 02:11:50 $
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,66,ublic final class BivariateRegressionTest extends TestCase {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,69," NIST ""Norris"" refernce data set from"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,70, http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,71," Strangely, order is {y,x}"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,73,"rivate double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,74,"888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,75,"449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,76,"778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,77,"557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,78,"0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,79,"998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,80,"668.4,669.1},{449.2,448.9},{0.2,0.5}};"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,83, Correlation example from
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,84, http://www.xycoon.com/correlation.htm
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,86,"rivate double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,87,"90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,88,"70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,89,"52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,91,ublic BivariateRegressionTest(String name) {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,92,uper(name);
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,95,ublic void setUp() {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,98,ublic static Test suite() {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,99,estSuite suite = new TestSuite(BivariateRegressionTest.class);
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,100,"uite.setName(""BivariateRegression Tests"");"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,101,eturn suite;
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,104,ublic void testNorris() {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,105,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,106,or (int i = 0; i < data.length; i++) {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,107,"egression.addData(data[i][1],data[i][0]);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,109,"ssertEquals(""slope"",1.00211681802045,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,110,"egression.getSlope(),10E-12);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,111,"ssertEquals(""slope std err"",0.429796848199937E-03,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,112,"egression.getSlopeStdErr(),10E-12);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,113,"ssertEquals(""number of observations"",36,regression.getN());"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,114,"ssertEquals(""intercept"", -0.262323073774029,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,115,"egression.getIntercept(),10E-12);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,116,"ssertEquals(""std err intercept"", 0.232818234301152,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,117,"egression.getInterceptStdErr(),10E-12);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,118,"ssertEquals(""r-square"",0.999993745883712,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,119,"egression.getRSquare(),10E-12);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,120,"ssertEquals(""SSR"",4255954.13232369,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,121,"egression.getRegressionSumSquares(),10E-8);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,122,"ssertEquals(""MSE"",0.782864662630069,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,123,"egression.getMeanSquareError(),10E-8);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,124,"ssertEquals(""SSE"",26.6173985294224,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,125,"egression.getSumSquaredErrors(),10E-8);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,126,"ssertEquals(""predict(0)"",-0.262323073774029,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,127,"egression.predict(0),10E-12);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,128,"ssertEquals(""predict(1)"",1.00211681802045-0.262323073774029,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,129,"egression.predict(1),10E-11);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,132,ublic void testCorr() {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,133,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,134,egression.addData(corrData);
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,135,"ssertEquals(""number of observations"",17,regression.getN());"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,136,"ssertEquals(""r-square"",.896123,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,137,"egression.getRSquare(),10E-6);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,138,"ssertEquals(""r"",-.946638,"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,139,"egression.getR(),10E-6);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,142,ublic void testNaNs() {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,144,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,146,"ssertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,147,"ssertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,148,"ssertTrue(""slope std err not NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,149,ouble.isNaN(regression.getSlopeStdErr()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,150,"ssertTrue(""intercept std err not NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,151,ouble.isNaN(regression.getInterceptStdErr()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,152,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,153,"ssertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,154,"ssertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,155,"ssertTrue(""RSS not NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,156,ouble.isNaN(regression.getRegressionSumSquares()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,157,"ssertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,158,"ssertTrue(""SSTO not NaN"",Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,159,"ssertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,161,"egression.addData(1,2);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,162,"egression.addData(1,3);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,164,"/ No x variation, so these should still blow..."
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,165,"ssertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,166,"ssertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,167,"ssertTrue(""slope std err not NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,168,ouble.isNaN(regression.getSlopeStdErr()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,169,"ssertTrue(""intercept std err not NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,170,ouble.isNaN(regression.getInterceptStdErr()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,171,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,172,"ssertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,173,"ssertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,174,"ssertTrue(""RSS not NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,175,ouble.isNaN(regression.getRegressionSumSquares()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,176,"ssertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,177,"ssertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,179,/ but SSTO should be OK
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,180,"ssertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,182,egression = new BivariateRegression();
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,184,"egression.addData(1,2);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,185,"egression.addData(3,3);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,187,"/ All should be OK except MSE, s(b0), s(b1) which need one more df"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,188,"ssertTrue(""interceptNaN"",!Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,189,"ssertTrue(""slope NaN"",!Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,190,"ssertTrue(""slope std err not NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,191,ouble.isNaN(regression.getSlopeStdErr()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,192,"ssertTrue(""intercept std err not NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,193,ouble.isNaN(regression.getInterceptStdErr()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,194,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,195,"ssertTrue(""r NaN"",!Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,196,"ssertTrue(""r-square NaN"",!Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,197,"ssertTrue(""RSS NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,198,Double.isNaN(regression.getRegressionSumSquares()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,199,"ssertTrue(""SSE NaN"",!Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,200,"ssertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,201,"ssertTrue(""predict NaN"",!Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,203,"egression.addData(1,4);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,205,"/ MSE, MSE, s(b0), s(b1) should all be OK now"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,206,"ssertTrue(""MSE NaN"",!Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,207,"ssertTrue(""slope std err NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,208,Double.isNaN(regression.getSlopeStdErr()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,209,"ssertTrue(""intercept std err NaN"","
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,210,Double.isNaN(regression.getInterceptStdErr()));
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,213,ublic void testClear() {
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,214,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,215,egression.addData(corrData);
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,216,"ssertEquals(""number of observations"",17,regression.getN());"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,217,egression.clear();
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,218,"ssertEquals(""number of observations"",0,regression.getN());"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,219,egression.addData(corrData);
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,220,"ssertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);"
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,221,egression.addData(data);
False,src/test/org/apache/commons/math/BivariateRegressionTest.java,src/test/org/apache/commons/math/BivariateRegressionTest.java,222,"ssertEquals(""number of observations"",53,regression.getN());"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,20,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,54,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,56,mport java.util.ArrayList;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,57,mport java.util.List;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,59,mport junit.framework.Test;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,60,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,61,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,64, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,66," @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,67, @version $Revision: 1.3 $ $Date: 2003/05/21 17:59:20 $
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,70,ublic final class ListUnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,71,rivate double one = 1;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,72,rivate float two = 2;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,73,rivate int three = 3;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,75,rivate double mean = 2;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,76,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,77,rivate double sum = 8;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,78,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,79,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,80,rivate double n = 4;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,81,rivate double min = 1;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,82,rivate double max = 3;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,83,rivate double skewness = 0;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,84,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,85,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,86,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,88,ublic ListUnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,89,uper(name);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,92,ublic void setUp() {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,95,ublic static Test suite() {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,96,estSuite suite = new TestSuite(ListUnivariateImplTest.class);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,97,"uite.setName(""Freq Tests"");"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,98,eturn suite;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,101,** test stats */
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,102,ublic void testStats() {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,103,ist externalList = new ArrayList();
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,105,toreUnivariate u = new ListUnivariateImpl( externalList );
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,107,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,108,.addValue(one);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,109,.addValue(two);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,110,.addValue(two);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,111,.addValue(three);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,112,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,113,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,114,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,115,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,116,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,117,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,118,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,119,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,120,.clear();
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,121,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,124,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,125,ist list = new ArrayList();
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,127,toreUnivariate u = new ListUnivariateImpl( list );
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,129,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,130,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,131,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,133,ist.add( new Double(one));
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,135,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,136,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,137,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,140,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,141,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,143,"ouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,144,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,145,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,146,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,149,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,150,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,151,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,152,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,155,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,156,istUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,157,.setWindowSize(10);
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,159,.addValue( 1.0 );
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,160,.addValue( 2.0 );
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,161,.addValue( 3.0 );
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,162,.addValue( 4.0 );
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,164,"ssertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,165,"ssertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,167,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,168,/ of a discarded element
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,169,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,170,.addValue( i + 2 );
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,172,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,174,"ssertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,175,"ssertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,20,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,54,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,61, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,63," @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,64, @version $Revision: 1.2 $ $Date: 2003/05/21 17:59:20 $
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,67,ublic final class StoreUnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,68,rivate double one = 1;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,69,rivate float two = 2;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,70,rivate int three = 3;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,71,rivate double mean = 2;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,72,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,73,rivate double sum = 8;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,74,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,75,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,76,rivate double n = 4;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,77,rivate double min = 1;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,78,rivate double max = 3;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,79,rivate double skewness = 0;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,80,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,81,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,82,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,84,ublic StoreUnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,85,uper(name);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,88,ublic void setUp() {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,91,ublic static Test suite() {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,92,estSuite suite = new TestSuite(StoreUnivariateImplTest.class);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,93,"uite.setName(""Freq Tests"");"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,94,eturn suite;
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,97,** test stats */
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,98,ublic void testStats() {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,99,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,100,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,101,.addValue(one);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,102,.addValue(two);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,103,.addValue(two);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,104,.addValue(three);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,105,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,106,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,107,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,108,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,109,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,110,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,111,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,112,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,113,.clear();
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,114,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,117,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,118,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,120,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,121,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,122,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,124,.addValue(one);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,126,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,127,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,128,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,131,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,132,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,134,"ouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,135,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,136,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,137,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,140,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,141,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,142,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,143,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,146,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,147,toreUnivariateImpl u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,148,.setWindowSize(10);
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,150,.addValue( 1.0 );
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,151,.addValue( 2.0 );
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,152,.addValue( 3.0 );
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,153,.addValue( 4.0 );
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,155,"ssertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,156,"ssertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,158,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,159,/ of a discarded element
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,160,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,161,.addValue( i + 2 );
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,163,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,165,"ssertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,166,"ssertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,20,"    any, must include the following acknowlegement:"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,54,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,61, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,63, @author Phil Steitz
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,64, @author Tim Obrien
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,65, @version $Revision: 1.4 $ $Date: 2003/05/29 19:49:18 $
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,68,ublic final class UnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,69,rivate double one = 1;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,70,rivate float twoF = 2;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,71,rivate long twoL = 2;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,72,rivate int three = 3;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,73,rivate double mean = 2;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,74,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,75,rivate double sum = 8;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,76,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,77,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,78,rivate double n = 4;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,79,rivate double min = 1;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,80,rivate double max = 3;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,81,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,83,ublic UnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,84,uper(name);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,87,ublic void setUp() {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,90,ublic static Test suite() {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,91,estSuite suite = new TestSuite(UnivariateImplTest.class);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,92,"uite.setName(""Freq Tests"");"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,93,eturn suite;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,96,** test stats */
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,97,ublic void testStats() {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,98,nivariateImpl u = new UnivariateImpl();
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,99,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,100,.addValue(one);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,101,.addValue(twoF);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,102,.addValue(twoL);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,103,.addValue(three);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,104,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,105,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,106,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,107,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,108,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,109,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,110,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,111,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,112,.clear();
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,113,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,116,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,117,nivariateImpl u = new UnivariateImpl();
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,118,"ssertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,119,ouble.isNaN( u.getMean() ) );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,120,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,121,ouble.isNaN( u.getStandardDeviation() ) );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,122,"ssertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,123,ouble.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,124,"ssertTrue(""skew of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,125,ouble.isNaN(u.getSkewness() ) );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,126,"ssertTrue(""kurtosis of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,127,ouble.isNaN(u.getKurtosis() ) );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,130,* n=1 */
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,131,.addValue(one);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,132,"ssertTrue(""mean should be one (n = 1)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,133,.getMean() == one);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,134,"ssertTrue(""geometric should be one (n = 1)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,135,.getGeometricMean() == one);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,136,"ssertTrue(""Std should be zero (n = 1)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,137,.getStandardDeviation() == 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,138,"ssertTrue(""variance should be zero (n = 1)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,139,.getVariance() == 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,140,"ssertTrue(""skew should be zero (n = 1)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,141,.getSkewness() == 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,142,"ssertTrue(""kurtosis should be zero (n = 1)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,143,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,145,* n=2 */
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,146,.addValue(twoF);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,147,"ssertTrue(""Std should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,148,.getStandardDeviation() != 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,149,"ssertTrue(""variance should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,150,.getVariance() != 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,151,"ssertTrue(""skew should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,152,.getSkewness() == 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,153,"ssertTrue(""kurtosis should be zero (n = 2)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,154,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,156,* n=3 */
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,157,.addValue(twoL);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,158,"ssertTrue(""skew should not be zero (n = 3)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,159,.getSkewness() != 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,160,"ssertTrue(""kurtosis should be zero (n = 3)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,161,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,163,* n=4 */
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,164,.addValue(three);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,165,"ssertTrue(""kurtosis should not be zero (n = 4)"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,166,.getKurtosis() != 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,170,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,171,nivariateImpl u = new UnivariateImpl(10);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,173,.addValue( 1.0 );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,174,.addValue( 2.0 );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,175,.addValue( 3.0 );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,176,.addValue( 4.0 );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,178,"ssertEquals( ""Product not expected"", 24.0, u.getProduct(),"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,179,ouble.MIN_VALUE );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,180,"ssertEquals( ""Geometric mean not expected"", 2.213364,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,181,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,183,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,184,/ of a discarded element
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,185,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,186,.addValue( i + 2 );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,188,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,190,"ssertEquals( ""Product not expected"", 39916800.0,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,191,".getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,192,"ssertEquals( ""Geometric mean not expected"", 5.755931,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,193,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,196,ublic void testRollingMinMax() {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,197,nivariateImpl u = new UnivariateImpl(3);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,198,.addValue( 1.0 );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,199,.addValue( 5.0 );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,200,.addValue( 3.0 );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,201,.addValue( 4.0 ); // discarding min
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,202,"ssertEquals( ""min not expected"", 3.0,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,203,".getMin(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,204,.addValue(1.0);  // discarding max
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,205,"ssertEquals( ""max not expected"", 4.0,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,206,".getMax(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,209,ublic void testNaNContracts() {
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,210,nivariateImpl u = new UnivariateImpl();
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,211,ouble nan = Double.NaN;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,212,"ssertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,213,"ssertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,214,"ssertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,215,"ssertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,216,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,218,.addValue(1.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,220,"ssertEquals( ""mean not expected"", 1.0,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,221,".getMean(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,222,"ssertEquals( ""variance not expected"", 0.0,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,223,".getVariance(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,224,"ssertEquals( ""geometric mean not expected"", 1.0,"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,225,".getGeometricMean(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,227,.addValue(-1.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,229,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,231,.addValue(0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,233,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,235,/FiXME: test all other NaN contract specs

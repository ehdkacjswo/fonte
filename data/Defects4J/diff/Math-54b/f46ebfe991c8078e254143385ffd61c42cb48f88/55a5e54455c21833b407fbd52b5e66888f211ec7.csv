is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,42,eturn (Object[][]) contents.clone();
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,42,return contents.clone();
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,237,esult[i - 1] = (double) i * coefficients[i];
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,237,result[i - 1] = i * coefficients[i];
False,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,306,"omplex N = new Complex((double)n, 0.0);"
False,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,307,"omplex N1 = new Complex((double)(n-1), 0.0);"
True,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,306,"Complex N = new Complex(n, 0.0);"
True,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,307,"Complex N1 = new Complex((n-1), 0.0);"
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,60,eturn (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,60,return parameters.toArray(new EstimatedParameter[parameters.size()]);
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,78,eturn (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,78,return unbound.toArray(new EstimatedParameter[unbound.size()]);
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,87,eturn (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,87,return measurements.toArray(new WeightedMeasurement[measurements.size()]);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,125,inal StepInterpolator lastInterpolator = (StepInterpolator) steps.get(index);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,125,final StepInterpolator lastInterpolator = steps.get(index);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,141,inalTime = ((StepInterpolator) steps.get(index)).getCurrentTime();
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,141,finalTime = (steps.get(index)).getCurrentTime();
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,74,1 = (double[]) interpolator.v1.clone();
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,75,2 = (double[]) interpolator.v2.clone();
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,76,3 = (double[]) interpolator.v3.clone();
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,77,4 = (double[]) interpolator.v4.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,74,v1 = interpolator.v1.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,75,v2 = interpolator.v2.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,76,v3 = interpolator.v3.clone();
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,77,v4 = interpolator.v4.clone();
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,145,urrentState            = (double[]) interpolator.currentState.clone();
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,146,nterpolatedState       = (double[]) interpolator.interpolatedState.clone();
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,147,nterpolatedDerivatives = (double[]) interpolator.interpolatedDerivatives.clone();
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,145,currentState            = interpolator.currentState.clone();
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,146,interpolatedState       = interpolator.interpolatedState.clone();
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,147,interpolatedDerivatives = interpolator.interpolatedDerivatives.clone();
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,122,eturn (RealPointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java,122,return optima.clone();
False,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,123,eturn (VectorialPointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java,123,return optima.clone();
False,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,116,eturn (RealPointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java,116,return optima.clone();
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,93,his.mean = (double[]) mean.clone();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,93,this.mean = mean.clone();
False,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,51,his.mean              = (double[]) mean.clone();
False,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,52,his.standardDeviation = (double[]) standardDeviation.clone();
True,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,51,this.mean              = mean.clone();
True,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,52,this.standardDeviation = standardDeviation.clone();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,589,"eturn sumDifference(sample1, sample2) / (double) sample1.length;"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,589,"return sumDifference(sample1, sample2) / sample1.length;"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,618,eturn (sum1 - (sum2 * sum2 / (double) n)) / (double) (n - 1);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,618,return (sum1 - (sum2 * sum2 / n)) / (n - 1);
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,428,eturn (StorelessUnivariateStatistic[]) sumImpl.clone();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,428,return sumImpl.clone();
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,455,eturn (StorelessUnivariateStatistic[]) sumSqImpl.clone();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,455,return sumSqImpl.clone();
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,482,eturn (StorelessUnivariateStatistic[]) minImpl.clone();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,482,return minImpl.clone();
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,509,eturn (StorelessUnivariateStatistic[]) maxImpl.clone();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,509,return maxImpl.clone();
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,536,eturn (StorelessUnivariateStatistic[]) sumLogImpl.clone();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,536,return sumLogImpl.clone();
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,563,eturn (StorelessUnivariateStatistic[]) geoMeanImpl.clone();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,563,return geoMeanImpl.clone();
False,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,590,eturn (StorelessUnivariateStatistic[]) meanImpl.clone();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,590,return meanImpl.clone();
False,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,102,ouble n0 = (double) n;
True,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,102,double n0 = n;
False,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,97,ouble n0 = (double) n;
True,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,97,double n0 = n;
False,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,106,eturn Math.exp(sumOfLogs.getResult() / (double) sumOfLogs.getN());
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,106,return Math.exp(sumOfLogs.getResult() / sumOfLogs.getN());
False,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,140,"umOfLogs.evaluate(values, begin, length) / (double) length);"
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,140,"sumOfLogs.evaluate(values, begin, length) / length);"
False,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,185,est.sumOfLogs = (SumOfLogs) source.sumOfLogs.copy();
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,185,dest.sumOfLogs = source.sumOfLogs.copy();
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,107,ouble variance = moment.m2 / (double) (moment.n - 1);
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,107,double variance = moment.m2 / (moment.n - 1);
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,111,ouble n = (double) moment.n;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,111,double n = moment.n;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,213,est.moment = (FourthMoment) source.moment.copy();
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,213,dest.moment = source.moment.copy();
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,156,ouble sampleSize = (double) length;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,156,double sampleSize = length;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,192,est.moment = (FirstMoment) source.moment.copy();
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,192,dest.moment = source.moment.copy();
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,106,ouble variance = moment.m2 / (double) (moment.n - 1);
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,106,double variance = moment.m2 / (moment.n - 1);
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,110,ouble n0 = (double) moment.getN();
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,110,double n0 = moment.getN();
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,170,"ouble stdDev = Math.sqrt((accum - (Math.pow(accum2, 2) / ((double) length))) /"
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,171,double) (length - 1));
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,170,"double stdDev = Math.sqrt((accum - (Math.pow(accum2, 2) / (length))) /"
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,171,(length - 1));
False,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,207,est.moment = new ThirdMoment((ThirdMoment) source.moment.copy());
True,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,207,dest.moment = new ThirdMoment(source.moment.copy());
False,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,266,est.variance = (Variance) source.variance.copy();
True,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,266,dest.variance = source.variance.copy();
False,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,93,ouble n0 = (double) n;
True,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,93,double n0 = n;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,171,eturn moment.m2 / ((double) moment.n - 1d);
True,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,171,return moment.m2 / (moment.n - 1d);
False,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,173,eturn moment.m2 / ((double) moment.n);
True,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,173,return moment.m2 / (moment.n);
False,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,300,ouble len = (double) length;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,300,double len = length;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,374,est.moment = (SecondMoment) source.moment.copy();
True,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,374,dest.moment = source.moment.copy();
False,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,207,ouble n = (double) length;
True,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,207,double n = length;
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,89,ev = ((double) observed[i] - ratio * expected[i]);
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,89,dev = (observed[i] - ratio * expected[i]);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,92,ev = ((double) observed[i] - expected[i]);
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,92,dev = (observed[i] - expected[i]);
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,158,owSum[row] += (double) counts[row][col];
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,159,olSum[col] += (double) counts[row][col];
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,160,otal += (double) counts[row][col];
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,158,rowSum[row] += counts[row][col];
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,159,colSum[col] += counts[row][col];
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,160,total += counts[row][col];
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,170,umSq += (((double) counts[row][col] - expected) *
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,171,(double) counts[row][col] - expected)) / expected;
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,170,sumSq += ((counts[row][col] - expected) *
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,171,(counts[row][col] - expected)) / expected;
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,256,bs1 = (double) observed1[i];
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,257,bs2 = (double) observed2[i];
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,256,obs1 = observed1[i];
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,257,obs2 = observed2[i];
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,85,double) sample1.length);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,85,sample1.length);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,126,double) sample1.length);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,126,sample1.length);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,259,"double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,259,"sample1.length, sample2.length);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,298,"double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,298,"sample1.length, sample2.length);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,342,"double) sampleStats1.getN(), (double) sampleStats2.getN());"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,342,"sampleStats1.getN(), sampleStats2.getN());"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,390,"double) sampleStats1.getN(), (double) sampleStats2.getN());"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,390,"sampleStats1.getN(), sampleStats2.getN());"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,597,"double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,597,"sample1.length, sample2.length);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,641,"tatUtils.variance(sample2), (double) sample1.length,"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,642,double) sample2.length);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,641,"StatUtils.variance(sample2), sample1.length,"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,642,sample2.length);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,807,"ampleStats2.getVariance(), (double) sampleStats1.getN(),"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,808,double) sampleStats2.getN());
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,807,"sampleStats2.getVariance(), sampleStats1.getN(),"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,808,sampleStats2.getN());
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,853,"ampleStats2.getVariance(), (double) sampleStats1.getN(),"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,854,double) sampleStats2.getN());
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,853,"sampleStats2.getVariance(), sampleStats1.getN(),"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,854,sampleStats2.getN());
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1046,ouble degreesOfFreedom = (double) (n1 + n2 - 2);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,1046,double degreesOfFreedom = (n1 + n2 - 2);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,127,umXX += dx * dx * (double) n / (double) (n + 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,128,umYY += dy * dy * (double) n / (double) (n + 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,129,umXY += dx * dy * (double) n / (double) (n + 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,130,bar += dx / (double) (n + 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,131,bar += dy / (double) (n + 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,127,sumXX += dx * dx * n / (n + 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,128,sumYY += dy * dy * n / (n + 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,129,sumXY += dx * dy * n / (n + 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,130,xbar += dx / (n + 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,131,ybar += dy / (n + 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,160,umXX -= dx * dx * (double) n / (double) (n - 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,161,umYY -= dy * dy * (double) n / (double) (n - 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,162,umXY -= dx * dy * (double) n / (double) (n - 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,163,bar -= dx / (double) (n - 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,164,bar -= dy / (double) (n - 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,160,sumXX -= dx * dx * n / (n - 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,161,sumYY -= dy * dy * n / (n - 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,162,sumXY -= dx * dy * n / (n - 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,163,xbar -= dx / (n - 1.0);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,164,ybar -= dy / (n - 1.0);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,413,eturn getSumSquaredErrors() / (double) (n - 2);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,413,return getSumSquaredErrors() / (n - 2);
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,471,etMeanSquareError() * ((1d / (double) n) + (xbar * xbar) / sumXX));
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,471,getMeanSquareError() * ((1d / n) + (xbar * xbar) / sumXX));
False,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,592,eturn (sumY - slope * sumX) / ((double) n);
True,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/java/org/apache/commons/math/stat/regression/SimpleRegression.java,592,return (sumY - slope * sumX) / (n);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,310,eturn Math.log((double) n);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,310,return Math.log(n);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,340,ogSum += Math.log((double) i);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,340,logSum += Math.log(i);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,345,ogSum -= Math.log((double) i);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,345,logSum -= Math.log(i);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,526,ogSum += Math.log((double)i);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,526,logSum += Math.log(i);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,82,eturn (NumberTransformer) map.get(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,82,return map.get(key);

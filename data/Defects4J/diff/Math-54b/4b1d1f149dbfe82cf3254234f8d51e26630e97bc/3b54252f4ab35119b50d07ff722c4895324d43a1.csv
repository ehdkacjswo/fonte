is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,18,ackage org.apache.commons.math.optimization;
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,20,** This interface specifies how to check if an {@link MultivariateRealOptimizer optimization
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,21, algorithm} has converged.
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,23, <p>Deciding if convergence has been reached is a problem-dependent issue. The
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,24, user should provide a class implementing this interface to allow the optimization
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,25, algorithm to stop its search according to the problem at hand.</p>
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,26," <p>For convenience, two implementations that fit simple needs are already provided:"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,27, {@link SimpleScalarValueChecker} and {@link SimpleRealPointChecker}. The first
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,28, one considers convergence is reached when the objective function value does not
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,29," change much anymore, it does not use the point set at all. The second one"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,30, considers convergence is reached when the input point set does not change
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,31," much anymore, it does not use objective function value at all.</p>"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,33, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,34, @since 2.0
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,35, @deprecated To be removed in 3.0.
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,37,Deprecated
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,38,ublic interface RealConvergenceChecker {
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,40,** Check if the optimization algorithm has converged considering the last points.
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,41, <p>
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,42, This method may be called several time from the same algorithm iteration with
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,43, different points. This can be detected by checking the iteration number at each
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,44," call if needed. Each time this method is called, the previous and current point"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,45," correspond to points with the same role at each iteration, so they can be"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,46," compared. As an example, simplex-based algorithms call this method for all"
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,47," points of the simplex, not only for the best or worst ones."
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,48, </p>
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,49, @param iteration index of current iteration
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,50, @param previous point from previous iteration
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,51, @param current point from current iteration
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,52, @return true if the algorithm is considered to have converged
False,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,54,"oolean converged(int iteration, RealPointValuePair previous, RealPointValuePair current);"

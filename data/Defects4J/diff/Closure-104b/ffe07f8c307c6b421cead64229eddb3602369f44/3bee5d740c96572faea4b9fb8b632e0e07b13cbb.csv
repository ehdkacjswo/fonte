is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,19,import com.google.common.annotations.VisibleForTesting;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,203,"@FlagSpec(altName = ""D"","
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,204,"help = ""Override the value of a variable annotated @define. "" +"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,205,"""The format is <name>[=<val>], where <name> is the name of a @define "" +"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,206,"""variable and <val> is a boolean, number, or a single-quoted string "" +"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,207,"""that contains no single quotes. If [=<val>] is omitted, "" +"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,208,"""the variable is marked true."")"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,209,public static final Flag<List<String>> FLAG_define = Flag.stringCollector();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,241,final protected void initOptionsFromFlags(CompilerOptions options) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,243,DiagnosticGroups.setWarningLevels(
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,244,"options, AbstractCompilerRunner.FLAG_jscomp_error.get(),"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,245,CheckLevel.ERROR);
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,246,DiagnosticGroups.setWarningLevels(
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,247,"options, AbstractCompilerRunner.FLAG_jscomp_warning.get(),"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,248,CheckLevel.WARNING);
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,249,DiagnosticGroups.setWarningLevels(
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,250,"options, AbstractCompilerRunner.FLAG_jscomp_off.get(),"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,251,CheckLevel.OFF);
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,253,"createDefineReplacements(FLAG_define.get(), options);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,897,* Create a map of constant names to constant values from a textual
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,898,* description of the map.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,900,* @param definitions A list of overriding definitions for defines in
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,901,"*     the form <name>[=<val>], where <val> is a number, boolean, or"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,902,*     single-quoted string without single quotes.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,904,@VisibleForTesting
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,905,"static void createDefineReplacements(List<String> definitions,"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,906,CompilerOptions options) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,907,// Parse the definitions
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,908,for (String override : definitions) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,909,"String[] assignment = override.split(""="", 2);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,910,String defName = assignment[0];
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,912,if (defName.length() > 0) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,913,if (assignment.length == 1) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,914,"options.setDefineToBooleanLiteral(defName, true);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,915,continue;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,916,} else {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,917,String defValue = assignment[1];
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,919,"if (defValue.equals(""true"")) {"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,920,"options.setDefineToBooleanLiteral(defName, true);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,921,continue;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,922,"} else if (defValue.equals(""false"")) {"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,923,"options.setDefineToBooleanLiteral(defName, false);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,924,continue;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,925,} else if (defValue.length() > 1 &&
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,926,defValue.charAt(0) == '\'' &&
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,927,defValue.charAt(defValue.length() - 1) == '\'') {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,928,"// If the value starts and ends with a single quote,"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,929,// we assume that it's a string.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,930,String maybeStringVal =
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,931,"defValue.substring(1, defValue.length() - 1);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,932,if (maybeStringVal.indexOf('\'') == -1) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,933,"options.setDefineToStringLiteral(defName, maybeStringVal);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,934,continue;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,936,} else {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,937,try {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,938,"options.setDefineToDoubleLiteral(defName,"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,939,Double.parseDouble(defValue));
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,940,continue;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,941,} catch (NumberFormatException e) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,942,"// do nothing, it will be caught at the end"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,948,throw new RuntimeException(
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,949,"""--define flag syntax invalid: "" + override);"
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,123,iagnosticGroups.setWarningLevels(
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,124,"ptions, AbstractCompilerRunner.FLAG_jscomp_error.get(),"
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,125,heckLevel.ERROR);
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,126,iagnosticGroups.setWarningLevels(
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,127,"ptions, AbstractCompilerRunner.FLAG_jscomp_warning.get(),"
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,128,heckLevel.WARNING);
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,129,iagnosticGroups.setWarningLevels(
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,130,"ptions, AbstractCompilerRunner.FLAG_jscomp_off.get(),"
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,131,heckLevel.OFF);
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,123,initOptionsFromFlags(options);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,20,import com.google.common.collect.LinkedHashMultimap;
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,22,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,240,"ultimap<String, JSModule> fileRefs = Multimaps.newLinkedHashMultimap();"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,239,"Multimap<String, JSModule> fileRefs = LinkedHashMultimap.create();"
False,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,120,f (NodeUtil.isVar(var.getParentNode())) {
False,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,121,"eachingDef.put(var, new Definition(var.scope.getRootNode()));"
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,120,// Every variable in the scope is defined once in the beginning of the
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,121,"// function: all the declared variables are undefined, all functions"
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,122,// have been assigned and all arguments has its value from the caller.
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,123,"reachingDef.put(var, new Definition(var.scope.getRootNode()));"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,64,tatic final DiagnosticType AMBIGUOUS_FUNCTION_DECL =
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,65,"iagnosticType.warning(""AMBIGUIOUS_FUNCTION_DECL"","
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,66,"Conditional named functions have inconsistent behavior. Instead of"" +"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,67," 'function f(){}' use 'var f = function(){}'."");"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,117,f (NodeUtil.isFunctionDeclaration(parent)) {
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,118,/ Warn about having conditional named function declarations as IE and
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,119,/ FireFox handle them differently.
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,120,f (!isHoistedFunction(parent)) {
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,121,".report(n, AMBIGUOUS_FUNCTION_DECL);"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,226, @return Whether the name function will be hoisted in its scope.
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,228,oolean isHoistedFunction(Node fn) {
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,229,reconditions.checkArgument(NodeUtil.isFunctionDeclaration(fn));
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,230,eturn fn.getParent().getType() == Token.SCRIPT
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,231,| fn.getParent().getParent().getType() == Token.FUNCTION;
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,70,"estSame(""x = 3; var y; var y;"");"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,70,"test(""x = 3; var y; var y;"", ""x=3; var y;"");"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,98,public void testDefineFlag() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,99,AbstractCompilerRunner.FLAG_define.setForTest(
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,100,"Lists.newArrayList(""FOO"", ""BAR=5""));"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,101,"test(""/** @define {boolean} */ var FOO = false;"" +"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,102,"""/** @define {number} */ var BAR = 3;"","
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,103,"""var FOO = true, BAR = 5;"");"
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,185,ode externs = all.getFirstChild();
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,186,"new Normalize(compiler, false)).process(externs, n);"
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,187,new MakeDeclaredNamesUnique.UndoConstantRenaming(compiler)).process(
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,188,"xterns, n);"
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,189,MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)).process(
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,190,"xterns, n);"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,288,public void testInlineArguments() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,289,"testSame(""function _func(x) { print(x) }"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,290,"testSame(""function _func(x,y) { if(y) { x = 1 }; print(x) }"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,292,"test(""function(x, y) { x = 1; print(x) }"","
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,293,"""function(x, y) { print(1) }"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,295,"test(""function(x, y) { if (y) { x = 1; print(x) }}"","
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,296,"""function(x, y) { if (y) { print(1) }}"");"
True,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,129,public void testFunctionParams1() {
True,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,130,"computeDefUse(""if (param2) { D: param1 = 1; U: param1 }"");"
True,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,131,"assertSame(def, defUse.getDef(""param1"", use));"
True,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,134,public void testFunctionParams2() {
True,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,135,"computeDefUse(""if (param2) { D: param1 = 1} U: param1"");"
True,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,136,"assertNotSame(def, defUse.getDef(""param1"", use));"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,134,ublic void testAmbiguousFunctionDeclarations() {
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,135,"estSame(""if (1) { function f(){}; }"", VarCheck.AMBIGUOUS_FUNCTION_DECL);"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,136,"estSame(""{ function f(){}; }"", VarCheck.AMBIGUOUS_FUNCTION_DECL);"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,137,"estSame(""a:function f(){};"", VarCheck.AMBIGUOUS_FUNCTION_DECL);"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,139,"estSame(""function f(){}"");"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,140,"estSame(""(function(){ function f(){} })"");"

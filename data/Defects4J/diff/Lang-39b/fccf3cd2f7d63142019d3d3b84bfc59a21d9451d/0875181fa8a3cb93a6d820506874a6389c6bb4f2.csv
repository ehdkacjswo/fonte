is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,17,package org.apache.commons.lang.concurrent;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,19,import java.util.Collections;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,20,import java.util.HashMap;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,21,import java.util.Map;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,22,import java.util.NoSuchElementException;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,23,import java.util.Set;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,24,import java.util.concurrent.ExecutorService;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,27,* <p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,28,* A specialized {@link BackgroundInitializer} implementation that can deal with
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,29,* multiple background initialization tasks.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,30,* </p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,31,* <p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,32,"* This class has a similar purpose as {@link BackgroundInitializer}. However,"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,33,* it is not limited to a single background initialization task. Rather it
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,34,"* manages an arbitrary number of {@code BackgroundInitializer} objects,"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,35,"* executes them, and waits until they are completely initialized. This is"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,36,* useful for applications that have to perform multiple initialization tasks
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,37,* that can run in parallel (i.e. that do not depend on each other). This class
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,38,* takes care about the management of an {@code ExecutorService} and shares it
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,39,* with the {@code BackgroundInitializer} objects it is responsible for; so the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,40,* using application need not bother with these details.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,41,* </p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,42,* <p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,43,* The typical usage scenario for {@code MultiBackgroundInitializer} is as
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,44,* follows:
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,45,* <ul>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,46,* <li>Create a new instance of the class. Optionally pass in a pre-configured
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,47,* {@code ExecutorService}. Alternatively {@code MultiBackgroundInitializer} can
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,48,* create a temporary {@code ExecutorService} and delete it after initialization
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,49,* is complete.</li>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,50,* <li>Create specialized {@link BackgroundInitializer} objects for the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,51,* initialization tasks to be performed and add them to the {@code
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,52,* MultiBackgroundInitializer} using the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,53,"* {@link #addInitializer(String, BackgroundInitializer)} method.</li>"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,54,"* <li>After all initializers have been added, call the {@link #start()} method."
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,55,* </li>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,56,* <li>When access to the result objects produced by the {@code
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,57,* BackgroundInitializer} objects is needed call the {@link #get()} method. The
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,58,* object returned here provides access to all result objects created during
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,59,* initialization. It also stores information about exceptions that have
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,60,* occurred.</li>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,61,* </ul>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,62,* </p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,63,* <p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,64,* {@code MultiBackgroundInitializer} starts a special controller task that
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,65,* starts all {@code BackgroundInitializer} objects added to the instance.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,66,* Before the an initializer is started it is checked whether this initializer
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,67,"* already has an {@code ExecutorService} set. If this is the case, this {@code"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,68,* ExecutorService} is used for running the background task. Otherwise the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,69,* current {@code ExecutorService} of this {@code MultiBackgroundInitializer} is
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,70,* shared with the initializer.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,71,* </p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,72,* <p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,73,* The easiest way of using this class is to let it deal with the management of
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,74,* an {@code ExecutorService} itself: If no external {@code ExecutorService} is
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,75,"* provided, the class creates a temporary {@code ExecutorService} (that is"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,76,* capable of executing all background tasks in parallel) and destroys it at the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,77,* end of background processing.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,78,* </p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,79,* <p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,80,* Alternatively an external {@code ExecutorService} can be provided - either at
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,81,* construction time or later by calling the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,82,* {@link #setExternalExecutor(ExecutorService)} method. In this case all
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,83,* background tasks are scheduled at this external {@code ExecutorService}.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,84,* <strong>Important note:</strong> When using an external {@code
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,85,* ExecutorService} be sure that the number of threads managed by the service is
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,86,* large enough. Otherwise a deadlock can happen! This is the case in the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,87,* following scenario: {@code MultiBackgroundInitializer} starts a task that
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,88,* starts all registered {@code BackgroundInitializer} objects and waits for
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,89,* their completion. If for instance a single threaded {@code ExecutorService}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,90,"* is used, none of the background tasks can be executed, and the task created"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,91,* by {@code MultiBackgroundInitializer} waits forever.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,92,* </p>
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,94,* @version $Id$
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,96,public class MultiBackgroundInitializer
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,97,extends
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,98,BackgroundInitializer<MultiBackgroundInitializer.MultiBackgroundInitializerResults> {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,99,/** A map with the child initializers. */
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,100,"private final Map<String, BackgroundInitializer<?>> childInitializers = new HashMap<String, BackgroundInitializer<?>>();"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,103,* Creates a new instance of {@code MultiBackgroundInitializer}.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,105,public MultiBackgroundInitializer() {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,106,super();
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,110,* Creates a new instance of {@code MultiBackgroundInitializer} and
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,111,* initializes it with the given external {@code ExecutorService}.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,113,* @param exec the {@code ExecutorService} for executing the background
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,114,* tasks
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,116,public MultiBackgroundInitializer(ExecutorService exec) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,117,super(exec);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,121,* Adds a new {@code BackgroundInitializer} to this object. When this
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,122,"* {@code MultiBackgroundInitializer} is started, the given initializer will"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,123,* be processed. This method must not be called after {@link #start()} has
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,124,* been invoked.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,126,* @param name the name of the initializer (must not be <b>null</b>)
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,127,* @param init the {@code BackgroundInitializer} to add (must not be
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,128,* <b>null</b>)
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,129,* @throws IllegalArgumentException if a required parameter is missing
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,130,* @throws IllegalStateException if {@code start()} has already been called
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,132,"public void addInitializer(String name, BackgroundInitializer<?> init) {"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,133,if (name == null) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,134,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,135,"""Name of child initializer must not be null!"");"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,137,if (init == null) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,138,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,139,"""Child initializer must not be null!"");"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,142,synchronized (this) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,143,if (isStarted()) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,144,throw new IllegalStateException(
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,145,"""addInitializer() must not be called after start()!"");"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,147,"childInitializers.put(name, init);"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,152,* Returns the number of tasks needed for executing all child {@code
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,153,* BackgroundInitializer} objects in parallel. This implementation sums up
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,154,* the required tasks for all child initializers (which is necessary if one
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,155,* of the child initializers is itself a {@code MultiBackgroundInitializer}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,156,* ). Then it adds 1 for the control task that waits for the completion of
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,157,* the children.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,159,* @return the number of tasks required for background processing
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,161,@Override
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,162,protected int getTaskCount() {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,163,int result = 1;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,165,for (BackgroundInitializer<?> bi : childInitializers.values()) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,166,result += bi.getTaskCount();
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,169,return result;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,173,* Creates the results object. This implementation starts all child {@code
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,174,* BackgroundInitializer} objects. Then it collects their results and
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,175,* creates a {@code MultiBackgroundInitializerResults} object with this
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,176,"* data. If a child initializer throws a checked exceptions, it is added to"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,177,* the results object. Unchecked exceptions are propagated.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,179,* @return the results object
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,180,* @throws Exception if an error occurs
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,182,@Override
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,183,protected MultiBackgroundInitializerResults initialize() throws Exception {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,184,"Map<String, BackgroundInitializer<?>> inits;"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,185,synchronized (this) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,186,// create a snapshot to operate on
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,187,"inits = new HashMap<String, BackgroundInitializer<?>>("
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,188,childInitializers);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,191,// start the child initializers
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,192,ExecutorService exec = getActiveExecutor();
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,193,for (BackgroundInitializer<?> bi : inits.values()) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,194,if (bi.getExternalExecutor() == null) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,195,// share the executor service if necessary
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,196,bi.setExternalExecutor(exec);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,198,bi.start();
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,201,// collect the results
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,202,"Map<String, Object> results = new HashMap<String, Object>();"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,203,"Map<String, ConcurrentException> excepts = new HashMap<String, ConcurrentException>();"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,204,"for (Map.Entry<String, BackgroundInitializer<?>> e : inits.entrySet()) {"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,205,try {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,206,"results.put(e.getKey(), e.getValue().get());"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,207,} catch (ConcurrentException cex) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,208,"excepts.put(e.getKey(), cex);"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,212,"return new MultiBackgroundInitializerResults(inits, results, excepts);"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,216,* A data class for storing the results of the background initialization
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,217,* performed by {@code MultiBackgroundInitializer}. Objects of this inner
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,218,* class are returned by {@link MultiBackgroundInitializer#initialize()}.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,219,* They allow access to all result objects produced by the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,220,* {@link BackgroundInitializer} objects managed by the owning instance. It
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,221,* is also possible to retrieve status information about single
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,222,"* {@link BackgroundInitializer}s, i.e. whether they completed normally or"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,223,* caused an exception.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,225,public static class MultiBackgroundInitializerResults {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,226,/** A map with the child initializers. */
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,227,"private final Map<String, BackgroundInitializer<?>> initializers;"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,229,/** A map with the result objects. */
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,230,"private final Map<String, Object> resultObjects;"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,232,/** A map with the exceptions. */
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,233,"private final Map<String, ConcurrentException> exceptions;"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,236,* Creates a new instance of {@code MultiBackgroundInitializerResults}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,237,* and initializes it with maps for the {@code BackgroundInitializer}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,238,"* objects, their result objects and the exceptions thrown by them."
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,240,* @param inits the {@code BackgroundInitializer} objects
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,241,* @param results the result objects
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,242,* @param excepts the exceptions
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,244,private MultiBackgroundInitializerResults(
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,245,"Map<String, BackgroundInitializer<?>> inits,"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,246,"Map<String, Object> results,"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,247,"Map<String, ConcurrentException> excepts) {"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,248,initializers = inits;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,249,resultObjects = results;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,250,exceptions = excepts;
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,254,* Returns the {@code BackgroundInitializer} with the given name. If the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,255,"* name cannot be resolved, an exception is thrown."
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,257,* @param name the name of the {@code BackgroundInitializer}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,258,* @return the {@code BackgroundInitializer} with this name
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,259,* @throws NoSuchElementException if the name cannot be resolved
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,261,public BackgroundInitializer<?> getInitializer(String name) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,262,return checkName(name);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,266,* Returns the result object produced by the {@code
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,267,* BackgroundInitializer} with the given name. This is the object
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,268,* returned by the initializer's {@code initialize()} method. If this
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,269,"* {@code BackgroundInitializer} caused an exception, <b>null</b> is"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,270,"* returned. If the name cannot be resolved, an exception is thrown."
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,272,* @param name the name of the {@code BackgroundInitializer}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,273,* @return the result object produced by this {@code
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,274,* BackgroundInitializer}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,275,* @throws NoSuchElementException if the name cannot be resolved
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,277,public Object getResultObject(String name) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,278,checkName(name);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,279,return resultObjects.get(name);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,283,* Returns a flag whether the {@code BackgroundInitializer} with the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,284,* given name caused an exception.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,286,* @param name the name of the {@code BackgroundInitializer}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,287,* @return a flag whether this initializer caused an exception
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,288,* @throws NoSuchElementException if the name cannot be resolved
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,290,public boolean isException(String name) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,291,checkName(name);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,292,return exceptions.containsKey(name);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,296,* Returns the {@code ConcurrentException} object that was thrown by the
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,297,* {@code BackgroundInitializer} with the given name. If this
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,298,"* initializer did not throw an exception, the return value is"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,299,"* <b>null</b>. If the name cannot be resolved, an exception is thrown."
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,301,* @param name the name of the {@code BackgroundInitializer}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,302,* @return the exception thrown by this initializer
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,303,* @throws NoSuchElementException if the name cannot be resolved
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,305,public ConcurrentException getException(String name) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,306,checkName(name);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,307,return exceptions.get(name);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,311,* Returns a set with the names of all {@code BackgroundInitializer}
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,312,* objects managed by the {@code MultiBackgroundInitializer}.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,314,* @return an (unmodifiable) set with the names of the managed {@code
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,315,* BackgroundInitializer} objects
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,317,public Set<String> initializerNames() {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,318,return Collections.unmodifiableSet(initializers.keySet());
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,322,"* Checks whether an initializer with the given name exists. If not,"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,323,"* throws an exception. If it exists, the associated child initializer"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,324,* is returned.
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,326,* @param name the name to check
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,327,* @return the initializer with this name
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,328,* @throws NoSuchElementException if the name is unknown
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,330,private BackgroundInitializer<?> checkName(String name) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,331,BackgroundInitializer<?> init = initializers.get(name);
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,332,if (init == null) {
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,333,throw new NoSuchElementException(
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,334,"""No child initializer with name "" + name);"
True,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/MultiBackgroundInitializer.java,337,return init;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,17,package org.apache.commons.lang.concurrent;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,19,import java.util.Iterator;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,20,import java.util.NoSuchElementException;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,21,import java.util.concurrent.ExecutorService;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,22,import java.util.concurrent.Executors;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,27,* Test class for {@link MultiBackgroundInitializer}.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,29,* @version $Id$
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,31,public class MultiBackgroundInitializerTest extends TestCase {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,32,/** Constant for the names of the child initializers. */
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,33,"private static final String CHILD_INIT = ""childInitializer"";"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,35,/** The initializer to be tested. */
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,36,private MultiBackgroundInitializer initializer;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,38,@Override
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,39,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,40,super.setUp();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,41,initializer = new MultiBackgroundInitializer();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,45,* Tests whether a child initializer has been executed. Optionally the
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,46,"* expected executor service can be checked, too."
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,48,* @param child the child initializer
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,49,* @param expExec the expected executor service (null if the executor should
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,50,* not be checked)
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,51,* @throws ConcurrentException if an error occurs
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,53,"private void checkChild(BackgroundInitializer<?> child,"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,54,ExecutorService expExec) throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,55,ChildBackgroundInitializer cinit = (ChildBackgroundInitializer) child;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,56,Integer result = cinit.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,57,"assertEquals(""Wrong result"", 1, result.intValue());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,58,"assertEquals(""Wrong number of executions"", 1, cinit.initializeCalls);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,59,if (expExec != null) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,60,"assertEquals(""Wrong executor service"", expExec,"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,61,cinit.currentExecutor);
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,66,* Tests addInitializer() if a null name is passed in. This should cause an
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,67,* exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,69,public void testAddInitializerNullName() {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,70,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,71,"initializer.addInitializer(null, new ChildBackgroundInitializer());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,72,"fail(""Null name not detected!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,73,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,74,// ok
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,79,* Tests addInitializer() if a null initializer is passed in. This should
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,80,* cause an exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,82,public void testAddInitializerNullInit() {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,83,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,84,"initializer.addInitializer(CHILD_INIT, null);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,85,"fail(""Could add null initializer!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,86,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,87,// ok
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,92,* Tests the background processing if there are no child initializers.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,94,public void testInitializeNoChildren() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,95,"assertTrue(""Wrong result of start()"", initializer.start());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,96,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,97,.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,98,"assertTrue(""Got child initializers"", res.initializerNames().isEmpty());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,99,"assertTrue(""Executor not shutdown"", initializer.getActiveExecutor()"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,100,.isShutdown());
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,104,* Helper method for testing the initialize() method. This method can
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,105,* operate with both an external and a temporary executor service.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,107,* @return the result object produced by the initializer
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,109,private MultiBackgroundInitializer.MultiBackgroundInitializerResults checkInitialize()
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,110,throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,111,final int count = 5;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,112,for (int i = 0; i < count; i++) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,113,"initializer.addInitializer(CHILD_INIT + i,"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,114,new ChildBackgroundInitializer());
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,116,initializer.start();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,117,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,118,.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,119,"assertEquals(""Wrong number of child initializers"", count, res"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,120,.initializerNames().size());
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,121,for (int i = 0; i < count; i++) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,122,String key = CHILD_INIT + i;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,123,"assertTrue(""Name not found: "" + key, res.initializerNames()"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,124,.contains(key));
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,125,"assertEquals(""Wrong result object"", Integer.valueOf(1), res"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,126,.getResultObject(key));
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,127,"assertFalse(""Exception flag"", res.isException(key));"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,128,"assertNull(""Got an exception"", res.getException(key));"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,129,"checkChild(res.getInitializer(key), initializer.getActiveExecutor());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,131,return res;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,135,* Tests background processing if a temporary executor is used.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,137,public void testInitializeTempExec() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,138,checkInitialize();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,139,"assertTrue(""Executor not shutdown"", initializer.getActiveExecutor()"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,140,.isShutdown());
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,144,* Tests background processing if an external executor service is provided.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,146,public void testInitializeExternalExec() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,147,ExecutorService exec = Executors.newCachedThreadPool();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,148,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,149,initializer = new MultiBackgroundInitializer(exec);
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,150,checkInitialize();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,151,"assertEquals(""Wrong executor"", exec, initializer"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,152,.getActiveExecutor());
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,153,"assertFalse(""Executor was shutdown"", exec.isShutdown());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,154,} finally {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,155,exec.shutdown();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,160,* Tests the behavior of initialize() if a child initializer has a specific
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,161,* executor service. Then this service should not be overridden.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,163,public void testInitializeChildWithExecutor() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,164,"final String initExec = ""childInitializerWithExecutor"";"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,165,ExecutorService exec = Executors.newSingleThreadExecutor();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,166,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,167,ChildBackgroundInitializer c1 = new ChildBackgroundInitializer();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,168,ChildBackgroundInitializer c2 = new ChildBackgroundInitializer();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,169,c2.setExternalExecutor(exec);
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,170,"initializer.addInitializer(CHILD_INIT, c1);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,171,"initializer.addInitializer(initExec, c2);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,172,initializer.start();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,173,initializer.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,174,"checkChild(c1, initializer.getActiveExecutor());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,175,"checkChild(c2, exec);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,176,} finally {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,177,exec.shutdown();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,182,* Tries to add another child initializer after the start() method has been
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,183,* called. This should not be allowed.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,185,public void testAddInitializerAfterStart() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,186,initializer.start();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,187,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,188,"initializer.addInitializer(CHILD_INIT,"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,189,new ChildBackgroundInitializer());
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,190,"fail(""Could add initializer after start()!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,191,} catch (IllegalStateException istex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,192,initializer.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,197,* Tries to query an unknown child initializer from the results object. This
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,198,* should cause an exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,200,public void testResultGetInitializerUnknown() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,201,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,202,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,203,"res.getInitializer(""unknown"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,204,"fail(""Could obtain unknown child initializer!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,205,} catch (NoSuchElementException nex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,206,// ok
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,211,* Tries to query the results of an unknown child initializer from the
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,212,* results object. This should cause an exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,214,public void testResultGetResultObjectUnknown() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,215,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,216,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,217,"res.getResultObject(""unknown"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,218,"fail(""Could obtain results from unknown child initializer!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,219,} catch (NoSuchElementException nex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,220,// ok
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,225,* Tries to query the exception of an unknown child initializer from the
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,226,* results object. This should cause an exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,228,public void testResultGetExceptionUnknown() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,229,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,230,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,231,"res.getException(""unknown"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,232,"fail(""Could obtain exception from unknown child initializer!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,233,} catch (NoSuchElementException nex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,234,// ok
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,239,* Tries to query the exception flag of an unknown child initializer from
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,240,* the results object. This should cause an exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,242,public void testResultIsExceptionUnknown() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,243,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,244,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,245,"res.isException(""unknown"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,246,"fail(""Could obtain exception status from unknown child initializer!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,247,} catch (NoSuchElementException nex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,248,// ok
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,253,* Tests that the set with the names of the initializers cannot be modified.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,255,public void testResultInitializerNamesModify() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,256,checkInitialize();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,257,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,258,.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,259,Iterator<String> it = res.initializerNames().iterator();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,260,it.next();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,261,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,262,it.remove();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,263,"fail(""Could modify set with initializer names!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,264,} catch (UnsupportedOperationException uex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,265,// ok
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,270,* Tests the behavior of the initializer if one of the child initializers
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,271,* throws a runtime exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,273,public void testInitializeRuntimeEx() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,274,ChildBackgroundInitializer child = new ChildBackgroundInitializer();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,275,child.ex = new RuntimeException();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,276,"initializer.addInitializer(CHILD_INIT, child);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,277,initializer.start();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,278,try {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,279,initializer.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,280,"fail(""Runtime exception not thrown!"");"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,281,} catch (Exception ex) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,282,"assertEquals(""Wrong exception"", child.ex, ex);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,287,* Tests the behavior of the initializer if one of the child initializers
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,288,* throws a checked exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,290,public void testInitializeEx() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,291,ChildBackgroundInitializer child = new ChildBackgroundInitializer();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,292,child.ex = new Exception();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,293,"initializer.addInitializer(CHILD_INIT, child);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,294,initializer.start();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,295,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,296,.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,297,"assertTrue(""No exception flag"", res.isException(CHILD_INIT));"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,298,"assertNull(""Got a results object"", res.getResultObject(CHILD_INIT));"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,299,ConcurrentException cex = res.getException(CHILD_INIT);
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,300,"assertEquals(""Wrong cause"", child.ex, cex.getCause());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,304,* Tests whether MultiBackgroundInitializers can be combined in a nested
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,305,* way.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,307,public void testInitializeNested() throws ConcurrentException {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,308,"final String nameMulti = ""multiChildInitializer"";"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,309,initializer
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,310,".addInitializer(CHILD_INIT, new ChildBackgroundInitializer());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,311,MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,312,final int count = 3;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,313,for (int i = 0; i < count; i++) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,314,mi2
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,315,".addInitializer(CHILD_INIT + i,"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,316,new ChildBackgroundInitializer());
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,318,"initializer.addInitializer(nameMulti, mi2);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,319,initializer.start();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,320,MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,321,.get();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,322,ExecutorService exec = initializer.getActiveExecutor();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,323,"checkChild(res.getInitializer(CHILD_INIT), exec);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,324,MultiBackgroundInitializer.MultiBackgroundInitializerResults res2 = (MultiBackgroundInitializer.MultiBackgroundInitializerResults) res
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,325,.getResultObject(nameMulti);
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,326,"assertEquals(""Wrong number of initializers"", count, res2"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,327,.initializerNames().size());
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,328,for (int i = 0; i < count; i++) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,329,"checkChild(res2.getInitializer(CHILD_INIT + i), exec);"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,331,"assertTrue(""Executor not shutdown"", exec.isShutdown());"
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,335,* A concrete implementation of {@code BackgroundInitializer} used for
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,336,* defining background tasks for {@code MultiBackgroundInitializer}.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,338,private static class ChildBackgroundInitializer extends
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,339,BackgroundInitializer<Integer> {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,340,/** Stores the current executor service. */
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,341,volatile ExecutorService currentExecutor;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,343,/** A counter for the invocations of initialize(). */
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,344,volatile int initializeCalls;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,346,/** An exception to be thrown by initialize(). */
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,347,Exception ex;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,350,* Records this invocation. Optionally throws an exception.
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,352,@Override
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,353,protected Integer initialize() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,354,currentExecutor = getActiveExecutor();
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,355,initializeCalls++;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,357,if (ex != null) {
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,358,throw ex;
True,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/MultiBackgroundInitializerTest.java,361,return initializeCalls;

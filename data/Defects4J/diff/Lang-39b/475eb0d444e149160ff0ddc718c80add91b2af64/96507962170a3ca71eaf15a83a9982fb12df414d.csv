is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,84,inal MutableInt mutNumA = new MutableInt(0);
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,85,inal MutableInt mutNumB = new MutableInt(0);
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,86,inal MutableInt mutNumC = new MutableInt(1);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,84,"this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,85,// Should Numbers be supported? GaryG July-21-2005.
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,86,"//this.testEquals(mutNumA, new Integer(0), mutNumC);"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,88,"ssertEquals(true, mutNumA.equals(mutNumA));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,89,"ssertEquals(true, mutNumA.equals(mutNumB));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,90,"ssertEquals(true, mutNumB.equals(mutNumA));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,91,"ssertEquals(true, mutNumB.equals(mutNumB));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,92,"ssertEquals(false, mutNumA.equals(mutNumC));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,93,"ssertEquals(false, mutNumB.equals(mutNumC));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,94,"ssertEquals(true, mutNumC.equals(mutNumC));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,95,"ssertEquals(false, mutNumA.equals(null));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,96,"ssertEquals(false, mutNumA.equals(new Integer(0)));"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,97,"ssertEquals(false, mutNumA.equals(""0""));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,90,* @param numA must not be a 0 Integer; must not equal numC.
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,91,* @param numB must equal numA; must not equal numC.
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,92,* @param numC must not equal numA; must not equal numC.
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,94,"void testEquals(final Number numA, final Number numB, final Number numC) {"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,95,"assertEquals(true, numA.equals(numA));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,96,"assertEquals(true, numA.equals(numB));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,97,"assertEquals(true, numB.equals(numA));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,98,"assertEquals(true, numB.equals(numB));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,99,"assertEquals(false, numA.equals(numC));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,100,"assertEquals(false, numB.equals(numC));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,101,"assertEquals(true, numC.equals(numC));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,102,"assertEquals(false, numA.equals(null));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,103,"assertEquals(false, numA.equals(new Integer(0)));"
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,104,"assertEquals(false, numA.equals(""0""));"

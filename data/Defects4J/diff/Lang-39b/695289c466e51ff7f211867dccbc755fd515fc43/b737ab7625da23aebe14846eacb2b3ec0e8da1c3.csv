is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,19,mport java.text.ChoiceFormat;
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,20,mport java.text.FieldPosition;
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,21,mport java.text.ParsePosition;
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,24," Stock ""choice"" MetaFormat."
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,26, @see ExtendedMessageFormat
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,27, @author Matt Benson
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,28, @since 2.4
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,29, @version $Id$
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,31,ublic class ChoiceMetaFormat extends MetaFormatSupport {
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,32,rivate static final long serialVersionUID = 3802197832963795129L;
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,35, Singleton-usable instance.
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,37,ublic static final ChoiceMetaFormat INSTANCE = new ChoiceMetaFormat();
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,40, Create a new ChoiceMetaFormat.
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,42,ublic ChoiceMetaFormat() {
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,43,uper();
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,47, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,49,"ublic StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,50,ieldPosition pos) {
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,51,f (obj instanceof ChoiceFormat) {
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,52,eturn toAppendTo.append(((ChoiceFormat) obj).toPattern());
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,54,hrow new IllegalArgumentException(String.valueOf(obj));
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,58, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,60,"ublic Object parseObject(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,61,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,62,"eekFormatElementEnd(source, pos);"
False,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,src/java/org/apache/commons/lang/text/ChoiceMetaFormat.java,63,"eturn new ChoiceFormat(source.substring(start, pos.getIndex()));"
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,19,mport java.text.DateFormat;
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,20,mport java.util.Locale;
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,23," Stock ""date"" MetaFormat."
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,25, @see ExtendedMessageFormat
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,26, @author Matt Benson
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,27, @since 2.4
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,28, @version $Id$
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,30,ublic class DateMetaFormat extends DateMetaFormatSupport {
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,31,rivate static final long serialVersionUID = -4732179430347600208L;
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,34, Create a new DateMetaFormat.
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,36,ublic DateMetaFormat() {
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,37,uper();
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,41, Create a new DateMetaFormat.
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,43, @param locale the Locale to use
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,45,ublic DateMetaFormat(Locale locale) {
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,46,uper(locale);
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,49,** {@inheritDoc} */
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,50,rotected DateFormat createSubformatInstance(int style) {
False,src/java/org/apache/commons/lang/text/DateMetaFormat.java,src/java/org/apache/commons/lang/text/DateMetaFormat.java,51,"eturn DateFormat.getDateInstance(style, getLocale());"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,19,mport java.text.DateFormat;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,20,mport java.text.DateFormatSymbols;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,21,mport java.text.FieldPosition;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,22,mport java.text.Format;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,23,mport java.text.ParsePosition;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,24,mport java.text.SimpleDateFormat;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,25,mport java.util.HashMap;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,26,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,27,mport java.util.Locale;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,28,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,31, date/time metaFormat support.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,33, @see ExtendedMessageFormat
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,34, @author Matt Benson
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,35, @since 2.4
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,36, @version $Id$
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,38,ublic abstract class DateMetaFormatSupport extends MetaFormatSupport {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,39,"** ""Default"" subformat name */"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,40,"rotected static final String DEFAULT = """";"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,42,"** ""Short"" subformat name */"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,43,"rotected static final String SHORT = ""short"";"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,45,"** ""Medium"" subformat name */"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,46,"rotected static final String MEDIUM = ""medium"";"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,48,"** ""Long"" subformat name */"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,49,"rotected static final String LONG = ""long"";"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,51,"** ""Full"" subformat name */"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,52,"rotected static final String FULL = ""full"";"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,54,rivate Locale locale;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,55,rivate boolean handlePatterns = true;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,57,rivate transient boolean initialized;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,58,rivate transient Map styleMap;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,59,rivate transient Map inverseStyleMap;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,60,rivate transient Map subformats;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,61,rivate transient Map reverseSubformats;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,62,rivate transient DateFormatSymbols dateFormatSymbols;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,65, Create a new AbstractDateMetaFormat.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,67,ublic DateMetaFormatSupport() {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,68,his(Locale.getDefault());
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,72, Create a new AbstractDateMetaFormat.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,74, @param locale Locale
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,76,ublic DateMetaFormatSupport(Locale locale) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,77,uper();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,78,his.locale = locale;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,82, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,84,"ublic StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,85,ieldPosition pos) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,86,tring subformat = getSubformatName(obj);
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,87,f (subformat != null) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,88,eturn toAppendTo.append(subformat);
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,90,f (isHandlePatterns() && obj instanceof SimpleDateFormat) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,91,impleDateFormat sdf = (SimpleDateFormat) obj;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,92,f (sdf.getDateFormatSymbols().equals(dateFormatSymbols)) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,93,eturn toAppendTo.append(sdf.toPattern());
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,96,hrow new IllegalArgumentException(String.valueOf(obj));
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,100, Get the subformat name for the given object.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,102, @param subformat Object
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,103, @return subformat name.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,105,rivate String getSubformatName(Object subformat) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,106,nitialize();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,107,f (reverseSubformats.containsKey(subformat)) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,108,eturn (String) inverseStyleMap.get(reverseSubformats
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,109,get(subformat));
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,111,eturn null;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,115, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,117,"ublic Object parseObject(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,118,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,119,"eekFormatElementEnd(source, pos);"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,120,f (pos.getErrorIndex() >= 0) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,121,eturn null;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,123,"tring subformat = source.substring(start, pos.getIndex()).trim();"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,124,bject result = getSubformat(subformat);
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,125,f (result != null) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,126,eturn result;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,128,f (isHandlePatterns()) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,129,"eturn new SimpleDateFormat(subformat, getLocale());"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,131,os.setErrorIndex(start);
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,132,eturn null;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,136, Get the named subformat.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,138, @param subformat name
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,139," @return Format designated by <code>name</code>, if any"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,141,rivate Format getSubformat(String subformat) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,142,nitialize();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,143,f (!styleMap.containsKey(subformat)) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,144,eturn null;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,146,nitialize();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,147,eturn (Format) subformats.get(styleMap.get(subformat));
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,151, Get the locale in use by this DateMetaFormatSupport.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,153, @return Locale
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,155,ublic Locale getLocale() {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,156,eturn locale;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,160, Initialize this DateMetaFormatSupport.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,162,rivate synchronized void initialize() {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,163,f (!initialized) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,164,tyleMap = createStyleMap();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,165,nverseStyleMap = createInverseStyleMap();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,166,ubformats = new HashMap();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,167,everseSubformats = new HashMap();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,168,or (Iterator iter = styleMap.values().iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,169,nteger style = (Integer) iter.next();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,170,f (subformats.containsKey(style)) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,171,ontinue;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,173,ormat sf = createSubformatInstance(style.intValue());
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,174,"ubformats.put(style, sf);"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,175,f (inverseStyleMap.containsKey(style)) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,176,"everseSubformats.put(sf, style);"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,179,ateFormatSymbols = new DateFormatSymbols(getLocale());
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,181,nitialized = true;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,185, Create a subformat for the given <code>DateFormat</code> style
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,186, constant.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,188, @param style DateFormat style constant
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,189, @return a DateFormat instance.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,191,rotected abstract DateFormat createSubformatInstance(int style);
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,194, Get whether this metaformat can parse date/time pattern formats in
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,195, addition to named formats.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,197, @return boolean.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,199,ublic boolean isHandlePatterns() {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,200,eturn handlePatterns;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,204, Set whether this metaformat can parse date/time pattern formats in
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,205, addition to named formats.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,207, @param handlePatterns the boolean handlePatterns to set.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,208, @return <code>this</code> for fluent usage.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,210,ublic DateMetaFormatSupport setHandlePatterns(boolean handlePatterns) {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,211,his.handlePatterns = handlePatterns;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,212,eturn this;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,216, Create the style map.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,218, @return Map
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,220,rotected Map createStyleMap() {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,221,ashMap result = new HashMap();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,222,"esult.put(SHORT, new Integer(DateFormat.SHORT));"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,223,"esult.put(MEDIUM, new Integer(DateFormat.MEDIUM));"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,224,"esult.put(LONG, new Integer(DateFormat.LONG));"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,225,"esult.put(FULL, new Integer(DateFormat.FULL));"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,226,"esult.put(DEFAULT, new Integer(DateFormat.DEFAULT));"
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,227,eturn result;
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,231, Create the inverse style map.
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,233, @return Map
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,235,rotected Map createInverseStyleMap() {
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,236,ap invertMe = createStyleMap();
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,237,nvertMe.remove(DEFAULT);
False,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,src/java/org/apache/commons/lang/text/DateMetaFormatSupport.java,238,eturn invert(invertMe);
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,19,mport java.text.Format;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,20,mport java.text.ParsePosition;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,21,mport java.util.Arrays;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,22,mport java.util.HashMap;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,24,mport java.util.List;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,25,mport java.util.Locale;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,26,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,28,mport org.apache.commons.lang.ArrayUtils;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,29,mport org.apache.commons.lang.Validate;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,32, Factory methods to produce metaformat instances that behave like
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,33, java.text.MessageFormat.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,35, @author Matt Benson
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,36, @since 2.4
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,37, @version $Id: DefaultMetaFormatFactory.java 592077 2007-11-05 16:47:10Z
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,38,          mbenson $
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,40,lass DefaultMetaFormatFactory {
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,42,** Number key */
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,43,"ublic static final String NUMBER_KEY = ""number"";"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,45,** Date key */
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,46,"ublic static final String DATE_KEY = ""date"";"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,48,** Time key */
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,49,"ublic static final String TIME_KEY = ""time"";"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,51,** Choice key */
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,52,"ublic static final String CHOICE_KEY = ""choice"";"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,54,rivate static final String[] NO_SUBFORMAT_KEYS = new String[] {
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,55,"UMBER_KEY, DATE_KEY, TIME_KEY };"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,57,"rivate static final String[] NO_PATTERN_KEYS = new String[] { NUMBER_KEY,"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,58,"ATE_KEY, TIME_KEY, CHOICE_KEY };"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,60,"rivate static final String[] PATTERN_KEYS = new String[] { DATE_KEY,"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,61,IME_KEY };
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,64, Ordered NameKeyedMetaFormat
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,66,rivate static class OrderedNameKeyedMetaFormat extends NameKeyedMetaFormat {
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,67,rivate static final long serialVersionUID = -7688772075239431055L;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,69,rivate List keys;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,72, Construct a new OrderedNameKeyedMetaFormat.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,74, @param names String[]
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,75, @param formats Format[]
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,77,"rivate OrderedNameKeyedMetaFormat(String[] names, Format[] formats) {"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,78,"uper(createMap(names, formats));"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,79,his.keys = Arrays.asList(names);
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,83, Create a map from the specified key/value parameters.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,85, @param names keys
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,86, @param formats values
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,87, @return Map
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,89,"rivate static Map createMap(String[] names, Format[] formats) {"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,90,"alidate.isTrue(ArrayUtils.isSameLength(names, formats));"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,91,ashMap result = new HashMap(names.length);
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,92,or (int i = 0; i < names.length; i++) {
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,93,"esult.put(names[i], formats[i]);"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,95,eturn result;
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,99, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,101,rotected Iterator iterateKeys() {
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,102,eturn keys.iterator();
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,107, Get a default metaformat for the specified Locale.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,109, @param locale the Locale for the resulting Format instance.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,110, @return Format
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,112,ublic static Format getFormat(final Locale locale) {
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,113,ormat nmf = new NumberMetaFormat(locale);
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,114,ormat dmf = new DateMetaFormat(locale).setHandlePatterns(false);
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,115,ormat tmf = new TimeMetaFormat(locale).setHandlePatterns(false);
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,117,eturn new MultiFormat(new Format[] {
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,118,"ew OrderedNameKeyedMetaFormat(NO_SUBFORMAT_KEYS, new Format[] {"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,119,"etDefaultFormat(nmf), getDefaultFormat(dmf),"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,120,"etDefaultFormat(tmf) }),"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,121,"ew OrderedNameKeyedMetaFormat(NO_PATTERN_KEYS, new Format[] {"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,122,"mf, dmf, tmf, ChoiceMetaFormat.INSTANCE }),"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,123,"ew OrderedNameKeyedMetaFormat(PATTERN_KEYS,"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,124,"ew Format[] { new DateMetaFormat(locale),"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,125,ew TimeMetaFormat(locale) }) });
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,129, Get the default format supported by a given metaformat.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,131, @param metaformat Format to handle parsing.
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,132," @return the default format, if any."
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,134,rivate static Format getDefaultFormat(Format metaformat) {
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,135,arsePosition pos = new ParsePosition(0);
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,136,"bject o = metaformat.parseObject("""", pos);"
False,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,src/java/org/apache/commons/lang/text/DefaultMetaFormatFactory.java,137,eturn pos.getErrorIndex() < 0 ? (Format) o : null;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,23,import java.util.Collection;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,24,import java.util.Iterator;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,26,import java.util.Map;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,25,mport org.apache.commons.lang.StringUtils;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,30," options for embedded format elements; requires a ""meta-format"", that is a"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,31, <code>Format</code> capable of parsing and formatting other
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,32, <code>Format</code>s.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,34, Limitations:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,35, <ul>
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,36, <li><code>toPattern()</code> results are tailored to JDK 1.4+ output and
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,37, will produce fairly drastically different results on earlier JDKs.</li>
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,38, <li>Recursive choice formats do not inherit knowledge of the extended
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,39, formatters and are limited to those available with
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,40, <code>java.text.MessageFormat</code>.</li>
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,41, </ul>
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,32,* options for embedded format elements; requires elaboration.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,34,* Note that the mutator methods for the replacement Formats are to be considered
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,35,* unnecessary and thus have been disabled (UnsupportedOperationException).
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,44,"private static final String DUMMY_PATTERN = """";"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,45,"private static final String ESCAPED_QUOTE = ""''"";"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,46,"private static final char START_FMT = ',';"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,47,private static final char END_FE = '}';
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,48,private static final char START_FE = '{';
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,49,private static final char QUOTE = '\'';
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,51,private String toPattern;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,52,private Map registry;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,51, Get a default meta-format for the default Locale. This will produce
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,52, behavior identical to a <code>java.lang.MessageFormat</code> using the
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,53, default locale.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,55,* Create a new ExtendedMessageFormat for the default locale.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,55, @return Format
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,57,* @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,58,* @throws IllegalArgumentException in case of a bad pattern.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,57,ublic static Format createDefaultMetaFormat() {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,58,eturn createDefaultMetaFormat(Locale.getDefault());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,60,public ExtendedMessageFormat(String pattern) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,61,"this(pattern, Locale.getDefault());"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,62, Get a default meta-format for the specified Locale. This will produce
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,63, behavior identical to a <code>java.lang.MessageFormat</code> using
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,64, <code>locale</code>.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,65,* Create a new ExtendedMessageFormat.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,66, @param locale the Locale for the resulting Format instance.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,67, @return Format
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,67,* @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,68,* @param locale Locale
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,69,* @throws IllegalArgumentException in case of a bad pattern.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,69,ublic static Format createDefaultMetaFormat(Locale locale) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,70,eturn DefaultMetaFormatFactory.getFormat(locale);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,71,"public ExtendedMessageFormat(String pattern, Locale locale) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,72,"this(pattern, locale, null);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,74, Conceptual demarcation of methods to parse the pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,76,* Create a new ExtendedMessageFormat for the default locale.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,78,* @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,79,"* @param registry Registry of format factories:  Map<String, FormatFactory>"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,80,* @throws IllegalArgumentException in case of a bad pattern.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,76,rivate static class Parser {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,77,"rivate static final String ESCAPED_QUOTE = ""''"";"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,78,"rivate static final char START_FMT = ',';"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,79,rivate static final char END_FE = '}';
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,80,rivate static final char START_FE = '{';
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,81,rivate static final char QUOTE = '\'';
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,84, Strip all formats from the pattern.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,86, @param pattern String to strip
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,87, @return stripped pattern
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,89,rivate String stripFormats(String pattern) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,90,tringBuffer sb = new StringBuffer(pattern.length());
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,91,arsePosition pos = new ParsePosition(0);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,92,har[] c = pattern.toCharArray();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,93,hile (pos.getIndex() < pattern.length()) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,94,witch (c[pos.getIndex()]) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,95,ase QUOTE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,96,"ppendQuotedString(pattern, pos, sb, true);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,97,reak;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,98,ase START_FE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,99,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,100,"eadArgumentIndex(pattern, next(pos));"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,101,"b.append(c, start, pos.getIndex() - start);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,102,f (c[pos.getIndex()] == START_FMT) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,103,"atFormat(pattern, next(pos));"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,105,f (c[pos.getIndex()] != END_FE) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,106,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,107,"Unreadable format element at position """
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,108, start);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,110,/ fall through
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,111,efault:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,112,b.append(c[pos.getIndex()]);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,113,ext(pos);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,116,eturn sb.toString();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,120, Insert formats back into the pattern for toPattern() support.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,122, @param pattern source
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,123, @param formats the Formats to insert
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,124, @param metaFormat Format to format the Formats
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,125, @return full pattern
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,127,"rivate String insertFormats(String pattern, Format[] formats,"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,128,ormat metaFormat) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,129,f (formats == null || formats.length == 0) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,130,eturn pattern;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,132,tringBuffer sb = new StringBuffer(pattern.length() * 2);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,133,arsePosition pos = new ParsePosition(0);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,134,nt fe = -1;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,135,hile (pos.getIndex() < pattern.length()) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,136,har c = pattern.charAt(pos.getIndex());
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,137,witch (c) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,138,ase QUOTE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,139,"ppendQuotedString(pattern, pos, sb, false);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,140,reak;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,141,ase START_FE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,142,e++;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,143,b.append(START_FE).append(
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,144,"eadArgumentIndex(pattern, next(pos)));"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,145,f (formats[fe] != null) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,146,tring formatName = metaFormat.format(formats[fe]);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,147,f (StringUtils.isNotEmpty(formatName)) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,148,b.append(START_FMT).append(formatName);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,151,reak;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,152,efault:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,153,b.append(pattern.charAt(pos.getIndex()));
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,154,ext(pos);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,157,eturn sb.toString();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,82,"public ExtendedMessageFormat(String pattern, Map registry) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,83,"this(pattern, Locale.getDefault(), registry);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,161, Parse the formats from the given pattern.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,163, @param pattern String to parse
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,164, @param metaFormat Format to parse the Formats
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,165, @return array of parsed Formats
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,167,"rivate Format[] parseFormats(String pattern, Format metaFormat) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,168,rrayList result = new ArrayList();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,169,arsePosition pos = new ParsePosition(0);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,170,hile (pos.getIndex() < pattern.length()) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,171,witch (pattern.charAt(pos.getIndex())) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,172,ase QUOTE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,173,"etQuotedString(pattern, next(pos), true);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,174,reak;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,175,ase START_FE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,176,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,177,"eadArgumentIndex(pattern, next(pos));"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,178,f (pattern.charAt(pos.getIndex()) == START_FMT) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,179,"eekNonWs(pattern, next(pos));"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,181,"esult.add(metaFormat.parseObject(pattern, pos));"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,182,"eekNonWs(pattern, pos);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,183,f (pattern.charAt(pos.getIndex()) != END_FE) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,184,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,185,"Unreadable format element at position """
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,186, start);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,188,/ fall through
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,189,efault:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,190,ext(pos);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,193,eturn (Format[]) result.toArray(new Format[result.size()]);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,87,* Create a new ExtendedMessageFormat.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,89,* @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,90,* @param locale Locale
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,91,"* @param registry Registry of format factories:  Map<String, FormatFactory>"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,92,* @throws IllegalArgumentException in case of a bad pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,94,"public ExtendedMessageFormat(String pattern, Locale locale, Map registry) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,95,"super(DUMMY_PATTERN, locale);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,96,this.registry = registry;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,97,applyPattern(pattern);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,197, Consume whitespace from the current parse position.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,199, @param pattern String to read
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,200, @param pos current position
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,202,"rivate void seekNonWs(String pattern, ParsePosition pos) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,203,nt len = 0;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,204,har[] buffer = pattern.toCharArray();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,205,o {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,206,"en = StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,207,os.setIndex(pos.getIndex() + len);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,208, while (len > 0 && pos.getIndex() < pattern.length());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,101,* {@inheritDoc}
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,103,public String toPattern() {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,104,return toPattern;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,212, Convenience method to advance parse position by 1
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,214, @param pos ParsePosition
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,215, @return <code>pos</code>
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,217,rivate ParsePosition next(ParsePosition pos) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,218,os.setIndex(pos.getIndex() + 1);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,219,eturn pos;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,108,* Apply the specified pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,110,* @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,112,public final void applyPattern(String pattern) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,113,if (registry == null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,114,super.applyPattern(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,115,toPattern = super.toPattern();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,116,return;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,118,ArrayList foundFormats = new ArrayList();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,119,ArrayList foundDescriptions = new ArrayList();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,120,StringBuffer stripCustom = new StringBuffer(pattern.length());
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,223, Read the argument index from the current format element
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,225, @param pattern pattern to parse
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,226, @param pos current parse position
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,227, @return argument index as string
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,229,"rivate String readArgumentIndex(String pattern, ParsePosition pos) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,230,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,231,or (; pos.getIndex() < pattern.length(); next(pos)) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,232,har c = pattern.charAt(pos.getIndex());
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,233,f (c == START_FMT || c == END_FE) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,234,"eturn pattern.substring(start, pos.getIndex());"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,122,ParsePosition pos = new ParsePosition(0);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,123,char[] c = pattern.toCharArray();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,124,int fmtCount = 0;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,125,while (pos.getIndex() < pattern.length()) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,126,switch (c[pos.getIndex()]) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,127,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,128,"appendQuotedString(pattern, pos, stripCustom, true);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,129,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,130,case START_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,131,fmtCount++;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,132,"seekNonWs(pattern, pos);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,133,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,134,"int index = readArgumentIndex(pattern, next(pos));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,135,stripCustom.append(START_FE).append(index);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,136,"seekNonWs(pattern, pos);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,137,Format format = null;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,138,String formatDescription = null;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,139,if (c[pos.getIndex()] == START_FMT) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,140,"formatDescription = parseFormatDescription(pattern,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,141,next(pos));
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,142,format = getFormat(formatDescription);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,143,if (format == null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,144,stripCustom.append(START_FMT).append(formatDescription);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,236,f (!Character.isDigit(c)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,147,foundFormats.add(format);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,148,foundDescriptions.add(format == null ? null : formatDescription);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,149,Validate.isTrue(foundFormats.size() == fmtCount);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,150,Validate.isTrue(foundDescriptions.size() == fmtCount);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,151,if (c[pos.getIndex()] != END_FE) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,238,"Invalid format argument index at position """
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,239, start);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,153,"""Unreadable format element at position "" + start);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,155,// fall through
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,156,default:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,157,stripCustom.append(c[pos.getIndex()]);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,158,next(pos);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,242,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,243,"Unterminated format element at position "" + start);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,247," Consume a quoted string, adding it to <code>appendTo</code> if"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,248, specified.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,250, @param pattern pattern to parse
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,251, @param pos current parse position
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,252, @param appendTo optional StringBuffer to append
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,253, @param escapingOn whether to process escaped quotes
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,254, @return <code>appendTo</code>
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,256,"rivate StringBuffer appendQuotedString(String pattern,"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,257,"arsePosition pos, StringBuffer appendTo, boolean escapingOn) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,258,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,259,har[] c = pattern.toCharArray();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,260,f (escapingOn && c[start] == QUOTE) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,261,eturn appendTo == null ? null : appendTo.append(QUOTE);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,263,nt lastHold = start;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,264,or (int i = pos.getIndex(); i < pattern.length(); i++) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,265,f (escapingOn
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,266,& pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,267,"ppendTo.append(c, lastHold, pos.getIndex() - lastHold)"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,268,append(QUOTE);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,269,os.setIndex(i + ESCAPED_QUOTE.length());
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,270,astHold = pos.getIndex();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,271,ontinue;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,273,witch (c[pos.getIndex()]) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,274,ase QUOTE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,275,ext(pos);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,276,"eturn appendTo == null ? null : appendTo.append(c,"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,277,"astHold, pos.getIndex() - lastHold);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,278,efault:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,279,ext(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,161,super.applyPattern(stripCustom.toString());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,162,"toPattern = insertFormats(super.toPattern(), foundDescriptions);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,163,if (containsElements(foundFormats)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,164,Format[] origFormats = getFormats();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,165,for (int i = 0; i < origFormats.length; i++) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,166,Format f = (Format) foundFormats.get(i);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,167,if (f != null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,168,origFormats[i] = f;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,282,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,283,"Unterminated quoted string at position "" + start);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,171,super.setFormats(origFormats);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,287, Consume quoted string only
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,289, @param pattern pattern to parse
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,290, @param pos current parse position
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,291, @param escapingOn whether to process escaped quotes
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,293,"rivate void getQuotedString(String pattern, ParsePosition pos,"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,294,oolean escapingOn) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,295,"ppendQuotedString(pattern, pos, null, escapingOn);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,176,* {@inheritDoc}
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,177,* UNSUPPORTED
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,179,"public void setFormat(int formatElementIndex, Format newFormat) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,180,throw new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,299, Consume the entire format found at the current position.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,301, @param pattern string to parse
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,302, @param pos current parse position
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,304,"rivate void eatFormat(String pattern, ParsePosition pos) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,305,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,306,nt depth = 1;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,307,or (; pos.getIndex() < pattern.length(); next(pos)) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,308,witch (pattern.charAt(pos.getIndex())) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,309,ase START_FE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,310,epth++;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,311,reak;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,312,ase END_FE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,313,epth--;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,314,f (depth == 0) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,315,eturn;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,317,reak;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,318,ase QUOTE:
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,319,"etQuotedString(pattern, pos, false);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,320,reak;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,323,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,324,"Unterminated format element at position "" + start);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,184,* {@inheritDoc}
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,185,* UNSUPPORTED
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,187,"public void setFormatByArgumentIndex(int argumentIndex, Format newFormat) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,188,throw new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,328,rivate static final Parser PARSER = new Parser();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,192,* {@inheritDoc}
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,193,* UNSUPPORTED
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,195,public void setFormats(Format[] newFormats) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,196,throw new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,330,rivate Format metaFormat;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,331,rivate String strippedPattern;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,200,* {@inheritDoc}
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,201,* UNSUPPORTED
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,203,public void setFormatsByArgumentIndex(Format[] newFormats) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,204,throw new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,334, Create a new ExtendedMessageFormat for the default locale.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,208,* Get a custom format from a format description.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,336, @param pattern String
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,337, @param metaFormat Format
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,338, @throws IllegalArgumentException if <code>metaFormat</code> is
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,339,             <code>null</code> or in case of a bad pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,210,* @param desc String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,211,* @return Format
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,341,"ublic ExtendedMessageFormat(String pattern, Format metaFormat) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,342,"his(pattern, Locale.getDefault(), metaFormat);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,213,private Format getFormat(String desc) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,214,if (registry != null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,215,String name = desc;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,216,String args = null;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,217,int i = desc.indexOf(START_FMT);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,218,if (i > 0) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,219,"name = desc.substring(0, i).trim();"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,220,args = desc.substring(i + 1).trim();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,222,FormatFactory factory = (FormatFactory) registry.get(name);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,223,if (factory != null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,224,"return factory.getFormat(name, args, getLocale());"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,227,return null;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,346, Create a new ExtendedMessageFormat.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,231,* Read the argument index from the current format element
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,348, @param pattern String
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,349, @param locale Locale
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,350, @param metaFormat Format
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,351, @throws IllegalArgumentException if <code>metaFormat</code> is
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,352,             <code>null</code> or in case of a bad pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,233,* @param pattern pattern to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,234,* @param pos current parse position
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,235,* @return argument index
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,354,"ublic ExtendedMessageFormat(String pattern, Locale locale,"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,355,ormat metaFormat) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,357, We have to do some acrobatics here: the call to the super constructor
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,358," will invoke applyPattern(), but we don't want to apply the pattern"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,359, until we've installed our custom metaformat. So we check for that in
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,360," our (final) applyPattern implementation, and re-call at the end of"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,361, this constructor.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,363,uper(pattern);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,364,etLocale(locale);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,365,etMetaFormat(metaFormat);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,366,pplyPattern(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,237,"private int readArgumentIndex(String pattern, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,238,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,239,"seekNonWs(pattern, pos);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,240,StringBuffer result = new StringBuffer();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,241,boolean error = false;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,242,for (; !error && pos.getIndex() < pattern.length(); next(pos)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,243,char c = pattern.charAt(pos.getIndex());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,244,if (Character.isWhitespace(c)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,245,"seekNonWs(pattern, pos);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,246,c = pattern.charAt(pos.getIndex());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,247,if (c != START_FMT && c != END_FE) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,248,error = true;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,249,continue;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,252,if ((c == START_FMT || c == END_FE) && result.length() > 0) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,253,try {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,254,return Integer.parseInt(result.toString());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,255,} catch (NumberFormatException e) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,256,"//we've already ensured only digits, so unless something outlandishly large was specified we should be okay."
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,259,error = !Character.isDigit(c);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,260,result.append(c);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,262,if (error) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,263,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,264,"""Invalid format argument index at position "" + start + "": """
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,265,"+ pattern.substring(start, pos.getIndex()));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,267,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,268,"""Unterminated format element at position "" + start);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,370, Apply the specified pattern.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,272,* Parse the format component of a format element.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,372, @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,274,* @param pattern string to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,275,* @param pos current parse position
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,276,* @return Format description String
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,374,ublic final void applyPattern(String pattern) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,375,f (metaFormat == null) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,376,eturn;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,278,"private String parseFormatDescription(String pattern, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,279,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,280,"seekNonWs(pattern, pos);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,281,int text = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,282,int depth = 1;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,283,for (; pos.getIndex() < pattern.length(); next(pos)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,284,switch (pattern.charAt(pos.getIndex())) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,285,case START_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,286,depth++;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,287,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,288,case END_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,289,depth--;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,290,if (depth == 0) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,291,"return pattern.substring(text, pos.getIndex());"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,293,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,294,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,295,"getQuotedString(pattern, pos, false);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,296,break;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,378,pplyPatternPre(pattern);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,379,trippedPattern = PARSER.stripFormats(pattern);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,380,uper.applyPattern(strippedPattern);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,381,"etFormats(PARSER.parseFormats(pattern, metaFormat));"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,382,pplyPatternPost(pattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,299,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,300,"""Unterminated format element at position "" + start);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,386, Pre-execution hook by means of which a subclass can customize the
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,387, behavior of the final applyPattern implementation.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,389, @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,304,* Insert formats back into the pattern for toPattern() support.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,306,* @param pattern source
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,307,* @param formats the Formats to insert
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,308,* @param metaFormat Format to format the Formats
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,309,* @return full pattern
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,391,rotected void applyPatternPre(String pattern) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,392,/ noop
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,311,"private String insertFormats(String pattern, ArrayList customPatterns) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,312,if (!containsElements(customPatterns)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,313,return pattern;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,315,StringBuffer sb = new StringBuffer(pattern.length() * 2);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,316,ParsePosition pos = new ParsePosition(0);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,317,int fe = -1;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,318,int depth = 0;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,319,while (pos.getIndex() < pattern.length()) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,320,char c = pattern.charAt(pos.getIndex());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,321,switch (c) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,322,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,323,"appendQuotedString(pattern, pos, sb, false);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,324,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,325,case START_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,326,depth++;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,327,if (depth == 1) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,328,fe++;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,329,sb.append(START_FE).append(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,330,"readArgumentIndex(pattern, next(pos)));"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,331,String customPattern = (String) customPatterns.get(fe);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,332,if (customPattern != null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,333,sb.append(START_FMT).append(customPattern);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,336,break;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,337,case END_FE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,338,depth--;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,339,//fall through:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,340,default:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,341,sb.append(c);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,342,next(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,345,return sb.toString();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,396, Post-execution hook by means of which a subclass can customize the
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,397, behavior of the final applyPattern implementation.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,349,* Consume whitespace from the current parse position.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,399, @param pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,351,* @param pattern String to read
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,352,* @param pos current position
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,401,rotected void applyPatternPost(String pattern) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,402,/ noop
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,354,"private void seekNonWs(String pattern, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,355,int len = 0;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,356,char[] buffer = pattern.toCharArray();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,357,do {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,358,"len = StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,359,pos.setIndex(pos.getIndex() + len);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,360,} while (len > 0 && pos.getIndex() < pattern.length());
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,406, Render the pattern from the current state of the
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,407, <code>ExtendedMessageFormat</code>.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,364,* Convenience method to advance parse position by 1
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,409, @return pattern String
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,366,* @param pos ParsePosition
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,367,* @return <code>pos</code>
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,411,ublic String toPattern() {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,412,"eturn PARSER.insertFormats(strippedPattern, getFormats(), metaFormat);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,369,private ParsePosition next(ParsePosition pos) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,370,pos.setIndex(pos.getIndex() + 1);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,371,return pos;
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,416, Get the meta-format currently configured.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,375,"* Consume a quoted string, adding it to <code>appendTo</code> if"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,376,* specified.
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,418, @return Format.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,378,* @param pattern pattern to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,379,* @param pos current parse position
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,380,* @param appendTo optional StringBuffer to append
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,381,* @param escapingOn whether to process escaped quotes
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,382,* @return <code>appendTo</code>
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,420,ublic synchronized Format getMetaFormat() {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,421,eturn metaFormat;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,384,"private StringBuffer appendQuotedString(String pattern, ParsePosition pos,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,385,"StringBuffer appendTo, boolean escapingOn) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,386,int start = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,387,char[] c = pattern.toCharArray();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,388,if (escapingOn && c[start] == QUOTE) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,389,return appendTo == null ? null : appendTo.append(QUOTE);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,391,int lastHold = start;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,392,for (int i = pos.getIndex(); i < pattern.length(); i++) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,393,if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,394,"appendTo.append(c, lastHold, pos.getIndex() - lastHold).append("
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,395,QUOTE);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,396,pos.setIndex(i + ESCAPED_QUOTE.length());
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,397,lastHold = pos.getIndex();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,398,continue;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,400,switch (c[pos.getIndex()]) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,401,case QUOTE:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,402,next(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,403,"return appendTo == null ? null : appendTo.append(c, lastHold,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,404,pos.getIndex() - lastHold);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,405,default:
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,406,next(pos);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,409,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,410,"""Unterminated quoted string at position "" + start);"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,425, Set the meta-format. Has no effect until a subsequent call to
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,426, {@link #applyPattern(String)}.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,414,* Consume quoted string only
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,428, @param metaFormat the Format metaFormat to set.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,416,* @param pattern pattern to parse
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,417,* @param pos current parse position
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,418,* @param escapingOn whether to process escaped quotes
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,430,ublic synchronized void setMetaFormat(Format metaFormat) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,431,"alidate.notNull(metaFormat, ""metaFormat is null"");"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,432,his.metaFormat = metaFormat;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,420,"private void getQuotedString(String pattern, ParsePosition pos,"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,421,boolean escapingOn) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,422,"appendQuotedString(pattern, pos, null, escapingOn);"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,426,* Learn whether the specified Collection contains non-null elements.
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,427,* @param coll to check
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,428,"* @return <code>true</code> if some Object was found, <code>false</code> otherwise."
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,430,private boolean containsElements(Collection coll) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,431,if (coll == null || coll.size() == 0) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,432,return false;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,434,for (Iterator iter = coll.iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,435,if (iter.next() != null) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,436,return true;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,439,return false;
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,1,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,3,import java.text.Format;
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,4,import java.util.Locale;
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,7,* Format factory.
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,8,* @since 2.4
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,9,* @author Niall Pemberton
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,10,* @version $Id$
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,12,public interface FormatFactory {
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,15,* Create or retrieve a format instance.
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,17,* @param name The format type name
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,18,* @param arguments Arguments used to create the format instance
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,19,"* @param locale The locale, may be null"
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,20,* @return The format instance
True,src/java/org/apache/commons/lang/text/FormatFactory.java,src/java/org/apache/commons/lang/text/FormatFactory.java,22,"Format getFormat(String name, String arguments, Locale locale);"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,19,mport java.text.FieldPosition;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,20,mport java.text.Format;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,21,mport java.text.ParsePosition;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,22,mport java.util.HashMap;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,24,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,27," Support class for implementing Formats that parse/format other Formats, with"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,28, specific support for interoperability with ExtendedMessageFormat.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,30, @see ExtendedMessageFormat
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,31, @author Matt Benson
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,32, @since 2.4
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,33, @version $Id$
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,35,ublic abstract class MetaFormatSupport extends Format {
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,37,rivate static final char END_FE = '}';
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,38,rivate static final char START_FE = '{';
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,39,rivate static final char QUOTE = '\'';
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,42, Invert the specified Map.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,44, @param map the Map to invert.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,45, @return a new Map instance.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,46, @throws NullPointerException if <code>map</code> is <code>null</code>.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,48,rotected Map invert(Map map) {
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,49,ap result = new HashMap(map.size());
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,50,or (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,51,ap.Entry entry = (Map.Entry) iter.next();
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,52,"esult.put(entry.getValue(), entry.getKey());"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,54,eturn result;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,58, Find the end of the subformat.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,60, @param source String
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,61, @param pos current parse position
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,63,"rotected void seekFormatElementEnd(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,64,nt depth = 1;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,65,oolean quote = false;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,66,or (; pos.getIndex() < source.length(); next(pos)) {
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,67,witch (source.charAt(pos.getIndex())) {
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,68,ase QUOTE:
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,69,uote ^= true;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,70,reak;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,71,ase START_FE:
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,72,epth += quote ? 0 : 1;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,73,reak;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,74,ase END_FE:
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,75,epth -= quote ? 0 : 1;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,76,f (depth == 0) {
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,77,eturn;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,79,reak;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,85, Advance the parse index by 1.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,87, @param pos the ParsePosition to advance.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,88, @return <code>pos</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,90,rotected ParsePosition next(ParsePosition pos) {
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,91,os.setIndex(pos.getIndex() + 1);
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,92,eturn pos;
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,95,/ provide default javadoc >;)
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,97, Parse an object from the specified String and ParsePosition. If an error
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,98," occurs <code>pos.getErrorIndex()</code> will contain a value >= zero,"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,99, indicating the index at which the parse error occurred.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,101, @param source String to parse
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,102, @param pos ParsePosition marking index into <code>source</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,103, @return Object parsed
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,105,"ublic abstract Object parseObject(String source, ParsePosition pos);"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,108," Format the specified object, appending to the given StringBuffer, and"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,109, optionally respecting the specified FieldPosition.
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,111, @param obj the object to format
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,112, @param toAppendTo the StringBuffer to which the formatted object should
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,113,            be appended
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,114, @param pos FieldPosition associated with <code>obj</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,115, @return <code>toAppendTo</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,116, @throws NullPointerException if <code>toAppendTo</code> or
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,117,             <code>pos</code> is <code>null</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,118, @throws IllegalArgumentException if unable to format <code>obj</code>
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,120,"ublic abstract StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,src/java/org/apache/commons/lang/text/MetaFormatSupport.java,121,ieldPosition pos);
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,19,mport java.text.FieldPosition;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,20,mport java.text.Format;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,21,mport java.text.ParsePosition;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,22,mport java.util.HashMap;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,24,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,26,mport org.apache.commons.lang.ObjectUtils;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,29, Basic metaFormat that requires enough configuration information to
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,30, parse/format other Formats for use by ExtendedMessageFormat.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,32, @see ExtendedMessageFormat
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,33, @author Matt Benson
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,34, @since 2.4
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,35, @version $Id$
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,37,ublic class NameKeyedMetaFormat extends MetaFormatSupport {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,38,rivate static final long serialVersionUID = 5963121202601122213L;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,40,rivate static final char TRIGGER_END = '}';
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,41,"rivate static final char TRIGGER_SUBFORMAT = ',';"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,44, Provides a builder with a fluent interface. Example:
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,45, <p>
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,46, <code>
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,47, <pre>
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,48," NameKeyedMetaFormat nkmf = new NameKeyedMetaFormat.Builder().put(&quot;foo&quot;,"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,49,"         new FooFormat()).put(&quot;bar&quot;, new BarFormat())"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,50,"         .put(&quot;baz&quot;, new BazFormat()).toNameKeyedMetaFormat();"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,51, </pre></code>
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,52, </p>
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,54,ublic static class Builder {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,55,rivate HashMap keyedFormats = new HashMap();
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,58, Add the specified format with the specified string key.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,60, @param key String
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,61, @param format Format
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,62, @return Builder reference to this object
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,64,"ublic Builder put(String key, Format format) {"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,65,"eyedFormats.put(key, format);"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,66,eturn this;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,70, Render the {@link NameKeyedMetaFormat} instance from this Builder.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,72, @return NameKeyedMetaFormat
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,74,ublic NameKeyedMetaFormat toNameKeyedMetaFormat() {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,75,eturn new NameKeyedMetaFormat(keyedFormats);
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,79,"rivate Map/* <String, Format> */keyedFormats = new HashMap();"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,82, Create a new NameKeyedMetaFormat.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,84, @param keyedFormats String->Format map.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,86,ublic NameKeyedMetaFormat(Map keyedFormats) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,87,his.keyedFormats = keyedFormats;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,91, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,93,"ublic StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,94,ieldPosition pos) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,95,nt start = toAppendTo.length();
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,96,/ first try to match a sans-subformat format:
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,97,or (Iterator iter = iterateKeys(); iter.hasNext();) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,98,bject key = iter.next();
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,99,"f (ObjectUtils.equals(keyedFormats.get(key), obj)) {"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,100,eturn toAppendTo.append(key);
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,103,/ now try again with subformats:
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,104,or (Iterator iter = iterateKeys(); iter.hasNext();) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,105,bject key = iter.next();
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,106,ry {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,107,"(Format) keyedFormats.get(key)).format(obj, toAppendTo, pos);"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,108,f (toAppendTo.length() > start) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,109,"oAppendTo.insert(start, ',');"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,111,"eturn toAppendTo.insert(start, key);"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,112, catch (Exception e) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,113,ontinue;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,116,"hrow new IllegalArgumentException(""Cannot format "" + obj);"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,120, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,122,"ublic Object parseObject(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,123,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,124,oolean subformat = false;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,125,or (; pos.getIndex() < source.length(); next(pos)) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,126,har c = source.charAt(pos.getIndex());
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,127,f (c == TRIGGER_SUBFORMAT) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,128,ubformat = true;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,129,reak;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,131,f (c == TRIGGER_END) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,132,reak;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,135,"tring key = source.substring(start, pos.getIndex());"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,136,ormat format = (Format) keyedFormats.get(key);
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,137,f (format == null) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,138,ormat = (Format) keyedFormats.get(key.trim());
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,139,f (format == null) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,140,os.setErrorIndex(start);
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,141,eturn null;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,144,f (subformat) {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,145,"eturn format.parseObject(source, next(pos));"
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,147,eturn format;
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,151, Extension point to alter the iteration order of the delegate format keys.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,153, @return Iterator.
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,155,rotected Iterator iterateKeys() {
False,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,src/java/org/apache/commons/lang/text/NameKeyedMetaFormat.java,156,eturn keyedFormats.keySet().iterator();
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,19,mport java.lang.reflect.InvocationTargetException;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,20,mport java.lang.reflect.Method;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,21,mport java.lang.reflect.Modifier;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,22,mport java.text.DecimalFormat;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,23,mport java.text.DecimalFormatSymbols;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,24,mport java.text.FieldPosition;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,25,mport java.text.NumberFormat;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,26,mport java.text.ParsePosition;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,27,mport java.util.HashMap;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,28,mport java.util.Locale;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,29,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,32," Stock ""number"" MetaFormat."
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,34, @see ExtendedMessageFormat
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,35, @author Matt Benson
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,36, @since 2.4
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,37, @version $Id$
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,39,ublic class NumberMetaFormat extends MetaFormatSupport {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,40,rivate static final long serialVersionUID = -5876397363537288952L;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,41,"rivate static final String DEFAULT = """";"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,42,"rivate static final String INTEGER = ""integer"";"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,43,"rivate static final String CURRENCY = ""currency"";"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,44,"rivate static final String PERCENT = ""percent"";"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,45,rivate static final Method GET_INTEGER_INSTANCE;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,47,tatic {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,48,ethod m = null;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,49,ry {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,50,"ethod mm = NumberFormat.class.getDeclaredMethod(""getIntegerInstance"", new Class[] { Locale.class });"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,51,f (Modifier.isStatic(mm.getModifiers())) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,52, = mm;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,54, catch (Exception e) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,55,/ leave null
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,57,ET_INTEGER_INSTANCE = m;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,60,rivate Locale locale;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,62,rivate transient Map subformats;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,63,rivate transient Map reverseSubformats;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,64,rivate transient DecimalFormatSymbols decimalFormatSymbols;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,67, Create a new NumberMetaFormat.
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,69,ublic NumberMetaFormat() {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,70,his(Locale.getDefault());
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,74, Create a new NumberMetaFormat.
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,76, @param locale Locale
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,78,ublic NumberMetaFormat(Locale locale) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,79,uper();
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,80,his.locale = locale;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,84, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,86,"ublic StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,87,ieldPosition pos) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,88,nitialize();
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,89,tring subformat = (String) reverseSubformats.get(obj);
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,90,f (subformat != null) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,91,eturn toAppendTo.append(subformat);
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,93,f (obj instanceof DecimalFormat) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,94,ecimalFormat df = (DecimalFormat) obj;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,95,f (df.getDecimalFormatSymbols().equals(decimalFormatSymbols)) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,96,eturn toAppendTo.append(df.toPattern());
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,99,hrow new IllegalArgumentException();
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,103, {@inheritDoc}
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,105,"ublic Object parseObject(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,106,nt start = pos.getIndex();
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,107,"eekFormatElementEnd(source, pos);"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,108,f (pos.getErrorIndex() >= 0) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,109,eturn null;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,111,"tring subformat = source.substring(start, pos.getIndex()).trim();"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,112,nitialize();
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,113,bject result = subformats.get(subformat);
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,114,f (result != null) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,115,eturn result;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,117,"eturn new DecimalFormat(subformat, decimalFormatSymbols);"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,121, Get the locale in use by this <code>NumberMetaFormat</code>.
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,123, @return Locale
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,125,ublic Locale getLocale() {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,126,eturn locale;
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,130, Initialize this NumberMetaFormat.
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,132,rivate synchronized void initialize() {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,133,f (subformats == null) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,134,ubformats = new HashMap();
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,135,"ubformats.put(DEFAULT, NumberFormat.getInstance(getLocale()));"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,136,"ubformats.put(INTEGER, createIntegerInstance(getLocale()));"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,137,"ubformats.put(CURRENCY, NumberFormat"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,138,getCurrencyInstance(getLocale()));
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,139,"ubformats.put(PERCENT, NumberFormat"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,140,getPercentInstance(getLocale()));
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,142,everseSubformats = invert(subformats);
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,143,ecimalFormatSymbols = new DecimalFormatSymbols(getLocale());
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,148," Create the ""integer"" NumberFormat instance for the specified Locale."
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,150, @param locale the Locale to use
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,151, @return integer NumberFormat
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,153,rivate static NumberFormat createIntegerInstance(Locale locale) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,154,f (GET_INTEGER_INSTANCE != null) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,155,ry {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,156,"eturn (NumberFormat) GET_INTEGER_INSTANCE.invoke(null, new Object[] { locale });"
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,157, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,158,/fall through
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,159, catch (InvocationTargetException e) {
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,160,/fall through
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,163,umberFormat result = NumberFormat.getInstance(locale);
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,164,esult.setMaximumFractionDigits(0);
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,165,esult.setParseIntegerOnly(true);
False,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,src/java/org/apache/commons/lang/text/NumberMetaFormat.java,166,eturn result;
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,19,mport java.text.DateFormat;
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,20,mport java.util.Locale;
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,21,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,24," Stock ""time"" MetaFormat."
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,26, @see ExtendedMessageFormat
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,27, @author Matt Benson
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,28, @since 2.4
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,29, @version $Id$
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,31,ublic class TimeMetaFormat extends DateMetaFormatSupport {
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,32,rivate static final long serialVersionUID = -4959095416302142342L;
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,35, Create a new TimeMetaFormat.
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,37,ublic TimeMetaFormat() {
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,38,uper();
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,42, Create a new NumberMetaFormat.
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,44, @param locale Locale
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,46,ublic TimeMetaFormat(Locale locale) {
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,47,uper(locale);
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,50,** {@inheritDoc} */
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,51,rotected DateFormat createSubformatInstance(int style) {
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,52,"eturn DateFormat.getTimeInstance(style, getLocale());"
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,55,** {@inheritDoc} */
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,56,rotected Map createInverseStyleMap() {
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,57,ap invertMe = createStyleMap();
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,58,nvertMe.remove(DEFAULT);
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,59,"ateFormat longDf = DateFormat.getTimeInstance(DateFormat.LONG,"
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,60,etLocale());
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,61,"ateFormat fullDf = DateFormat.getTimeInstance(DateFormat.FULL,"
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,62,etLocale());
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,63,f (fullDf.equals(longDf)) {
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,64,nvertMe.remove(FULL);
False,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,src/java/org/apache/commons/lang/text/TimeMetaFormat.java,66,eturn invert(invertMe);
False,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,176,"eturn new ExtendedMessageFormat(pattern, locale, ExtendedMessageFormat"
False,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,177,createDefaultMetaFormat(locale));
True,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,src/test/org/apache/commons/lang/text/ExtendedMessageFormatBaselineTest.java,176,"return new ExtendedMessageFormat(pattern, locale);"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,27,import java.util.HashMap;
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,240,"eturn new ExtendedMessageFormat(pattern, locale,"
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,241,ew MultiFormat.Builder().add(
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,242,"ew NameKeyedMetaFormat.Builder().put(""properName"","
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,243,ew ProperNameCapitalizationFormat())
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,244,toNameKeyedMetaFormat()).add(
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,245,xtendedMessageFormat.createDefaultMetaFormat(locale))
False,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,246,toMultiFormat());
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,241,final ProperNameCapitalizationFormat properNameCapitalizationFormat = new ProperNameCapitalizationFormat();
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,242,final FormatFactory ff = new FormatFactory() {
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,243,"public Format getFormat(String name, String arguments, Locale locale) {"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,244,"return ""properName"".equals(name) ? properNameCapitalizationFormat : null;"
True,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,src/test/org/apache/commons/lang/text/MessageFormatExtensionTest.java,247,"return new ExtendedMessageFormat(pattern, locale, new HashMap() { { put(""properName"", ff); }});"

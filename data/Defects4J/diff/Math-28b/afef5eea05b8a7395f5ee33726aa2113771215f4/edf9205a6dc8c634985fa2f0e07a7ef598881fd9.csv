is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,25,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,75,"f (MathUtils.compareTo(entry, minValue, getEpsilon(entry)) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,74,"if (MathUtils.compareTo(entry, minValue, maxUlps) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,97,"f (MathUtils.compareTo(entry, 0d, getEpsilon(entry)) > 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,96,"if (MathUtils.compareTo(entry, 0d, maxUlps) > 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,99,"inal int cmp = MathUtils.compareTo(ratio, minRatio, getEpsilon(ratio));"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,98,"final int cmp = MathUtils.compareTo(ratio, minRatio, maxUlps);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,119,"f (MathUtils.equals(entry, 1d, getEpsilon(entry)) &&"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,118,"if (MathUtils.equals(entry, 1d, maxUlps) &&"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,200, Get an epsilon that is adjusted to the magnitude of the given value.
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,201, @param value the value for which to get the epsilon
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,202, @return magnitude-adjusted epsilon using {@link FastMath.ulp}
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,204,rivate double getEpsilon(double value) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,205,eturn FastMath.ulp(value) * (double) maxUlps;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,22,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,27, Generates a random string of hex characters of length
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,28, <code>len</code>.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,30,* Generates a random string of hex characters of length {@code len}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,32, <code>nextSecureHexString</code></p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,33, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,34, <strong>Preconditions</strong>:<ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,35, <li><code>len > 0</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,36,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,37, </ul></p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,34,* {@link #nextSecureHexString(int)}.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,35,* </p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,40, @return random string of hex characters of length <code>len</code>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,38,* @return a random string of hex characters of length {@code len}
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,39,* @throws NotStrictlyPositiveException if {@code len <= 0}
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,42,tring nextHexString(int len);
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,41,String nextHexString(int len) throws NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,45, Generates a uniformly distributed random integer between
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,46, <code>lower</code> and <code>upper</code> (endpoints included).
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,44,* Generates a uniformly distributed random integer between {@code lower}
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,45,* and {@code upper} (endpoints included).
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,50, <code>nextSecureInt</code>.</p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,51, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,52, <strong>Preconditions</strong>:<ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,53, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,54,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,55, </ul></p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,49,"* {@link #nextSecureInt(int, int)}."
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,50,* </p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,59, @return a random integer greater than or equal to <code>lower</code>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,60, and less than or equal to <code>upper</code>.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,54,* @return a random integer greater than or equal to {@code lower}
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,55,* and less than or equal to {@code upper}
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,56,* @throws NumberIsTooLargeException if {@code lower >= upper}
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,62,"nt nextInt(int lower, int upper);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,58,"int nextInt(int lower, int upper) throws NumberIsTooLargeException;"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,66, <code>lower</code> and <code>upper</code> (endpoints included).
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,62,* {@code lower} and {@code upper} (endpoints included).
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,69, cryptographically secure.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,70," To generate cryptographically secure sequences of longs, use"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,71, <code>nextSecureLong</code></p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,72, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,73, <strong>Preconditions</strong>:<ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,74, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,75,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,76, </ul></p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,65,* cryptographically secure. To generate cryptographically secure sequences
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,66,"* of longs, use {@link #nextSecureLong(long, long)}."
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,67,* </p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,78, @param lower lower bound for generated integer
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,79, @param upper upper bound for generated integer
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,80, @return a random integer greater than or equal to <code>lower</code>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,81, and less than or equal to <code>upper</code>.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,69,* @param lower lower bound for generated long integer
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,70,* @param upper upper bound for generated long integer
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,71,* @return a random long integer greater than or equal to {@code lower} and
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,72,* less than or equal to {@code upper}
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,73,* @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,83,"ong nextLong(long lower, long upper);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,75,"long nextLong(long lower, long upper) throws NumberIsTooLargeException;"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,89," If cryptographic security is not required,"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,90, use <code>nextHexString()</code>.</p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,91, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,92, <strong>Preconditions</strong>:<ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,93, <li><code>len > 0</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,94,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,95, </ul></p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,96, @param len length of return string
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,97, @return the random hex string
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,81,"* If cryptographic security is not required, use"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,82,* {@link #nextHexString(int)}.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,83,* </p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,85,* @param len the length of the string to be generated
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,86,* @return a random string of hex characters of length {@code len}
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,87,* @throws NotStrictlyPositiveException if {@code len <= 0}
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,99,tring nextSecureHexString(int len);
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,89,String nextSecureHexString(int len) throws NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,102, Generates a uniformly distributed random integer between
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,103, <code>lower</code> and <code>upper</code> (endpoints included)
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,104, from a secure random sequence.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,92,* Generates a uniformly distributed random integer between {@code lower}
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,93,* and {@code upper} (endpoints included) from a secure random sequence.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,108, <code>nextInt</code> should be used instead of this method.</p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,97,"* {@link #nextInt(int, int)} should be used instead of this method.</p>"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,113, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,114, <strong>Preconditions</strong>:<ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,115, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,116,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,117, </ul></p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,121, @return a random integer greater than or equal to <code>lower</code>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,122, and less than or equal to <code>upper</code>.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,105,* @return a random integer greater than or equal to {@code lower} and less
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,106,* than or equal to {@code upper}.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,107,* @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,124,"nt nextSecureInt(int lower, int upper);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,109,"int nextSecureInt(int lower, int upper) throws NumberIsTooLargeException;"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,127, Generates a random long integer between <code>lower</code>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,128, and <code>upper</code> (endpoints included).
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,112,* Generates a uniformly distributed random long integer between
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,113,* {@code lower} and {@code upper} (endpoints included) from a secure random
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,114,* sequence.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,132, <code>nextLong</code> should be used instead of this method.</p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,118,"* {@link #nextLong(long, long)} should be used instead of this method.</p>"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,137, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,138, <strong>Preconditions</strong>:<ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,139, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,140,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,141, </ul></p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,145, @return a long integer greater than or equal to <code>lower</code>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,146, and less than or equal to <code>upper</code>.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,126,* @return a random long integer greater than or equal to {@code lower} and
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,127,* less than or equal to {@code upper}.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,128,* @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,148,"ong nextSecureLong(long lower, long upper);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,130,"long nextSecureLong(long lower, long upper)"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,131,throws NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,151, Generates a random value from the Poisson distribution with
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,152, the given mean.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,134,* Generates a random value from the Poisson distribution with the given
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,135,* mean.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,157, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,158, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,159, <li>The specified mean <i>must</i> be positive (otherwise an
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,160,     IllegalArgumentException is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,161, </ul></p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,162, @param mean Mean of the distribution
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,163, @return poisson deviate with the specified mean
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,141,* @param mean the mean of the Poisson distribution
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,142,* @return a random value following the specified Poisson distribution
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,143,* @throws NotStrictlyPositiveException if {@code mean <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,165,ong nextPoisson(double mean);
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,145,long nextPoisson(double mean) throws NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,168, Generates a random value from the
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,169, Normal (or Gaussian) distribution with the given mean
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,170, and standard deviation.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,148,* Generates a random value from the Normal (or Gaussian) distribution with
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,149,* specified mean and standard deviation.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,175, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,176, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,177, <li><code>sigma > 0</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,178,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,179, </ul></p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,180, @param mu Mean of the distribution
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,181, @param sigma Standard deviation of the distribution
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,182," @return random value from Gaussian distribution with mean = mu,"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,183, standard deviation = sigma
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,155,* @param mu the mean of the distribution
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,156,* @param sigma the standard deviation of the distribution
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,157,* @return a random value following the specified Gaussian distribution
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,158,* @throws NotStrictlyPositiveException if {@code sigma <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,185,"ouble nextGaussian(double mu, double sigma);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,160,"double nextGaussian(double mu, double sigma)"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,161,throws NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,189, with expected value = <code>mean</code>.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,165,* with specified mean.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,194, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,195, <strong>Preconditions</strong>: <ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,196, <li><code>mu >= 0</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,197,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,198, </ul></p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,199, @param mean Mean of the distribution
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,200, @return random value from exponential distribution
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,171,* @param mean the mean of the distribution
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,172,* @return a random value following the specified exponential distribution
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,173,* @throws NotStrictlyPositiveException if {@code mean <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,202,ouble nextExponential(double mean);
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,175,double nextExponential(double mean) throws NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,210, Uniform Distribution</a> <code>lower</code> and
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,211, <code>upper - lower</code> are the
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,183,* Uniform Distribution</a> {@code lower} and {@code upper - lower} are the
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,215, @param lower lower endpoint of the interval of support
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,216, @param upper upper endpoint of the interval of support
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,217, @return uniformly distributed random value between lower
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,218, and upper (exclusive)
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,187,* @param lower the exclusive lower bound of the support
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,188,* @param upper the exclusive upper bound of the support
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,189,* @return a uniformly distributed random value between lower and upper
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,190,* (exclusive)
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,191,* @throws NumberIsTooLargeException if {@code lower >= upper}
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,220,"ouble nextUniform(double lower, double upper);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,193,"double nextUniform(double lower, double upper)"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,194,throws NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,230, Uniform Distribution</a> <code>lower</code> and
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,231, <code>upper - lower</code> are the
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,204,* Uniform Distribution</a> {@code lower} and {@code upper - lower} are the
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,235, @param lower lower endpoint of the interval of support
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,236, @param upper upper endpoint of the interval of support
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,237, @param lowerInclusive {@code true} if the lower bound is included in the
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,238, interval
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,208,* @param lower the lower bound of the support
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,209,* @param upper the exclusive upper bound of the support
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,210,* @param lowerInclusive {@code true} if the lower bound is inclusive
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,214,* @throws NumberIsTooLargeException if {@code lower >= upper}
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,243,"ouble nextUniform(double lower, double upper, boolean lowerInclusive);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,216,"double nextUniform(double lower, double upper, boolean lowerInclusive)"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,217,throws NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,246, Generates an integer array of length <code>k</code> whose entries
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,247," are selected randomly, without repetition, from the integers <code>"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,248, 0 through n-1</code> (inclusive).
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,220,* Generates an integer array of length {@code k} whose entries are selected
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,221,"* randomly, without repetition, from the integers {@code 0, ..., n - 1}"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,222,* (inclusive).
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,250, Generated arrays represent permutations
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,251, of <code>n</code> taken <code>k</code> at a time.</p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,252, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,253, <strong>Preconditions:</strong><ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,254, <li> <code>k <= n</code></li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,255, <li> <code>n > 0</code> </li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,256, </ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,257," If the preconditions are not met, an IllegalArgumentException is"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,258, thrown.</p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,224,* Generated arrays represent permutations of {@code n} taken {@code k} at a
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,225,* time.</p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,260, @param n domain of the permutation
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,261, @param k size of the permutation
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,262, @return random k-permutation of n
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,227,* @param n the domain of the permutation
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,228,* @param k the size of the permutation
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,229,"* @return a random {@code k}-permutation of {@code n}, as an array of"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,230,* integers
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,231,* @throws NumberIsTooLargeException if {@code k > n}.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,232,* @throws NotStrictlyPositiveException if {@code k <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,264,"nt[] nextPermutation(int n, int k);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,234,"int[] nextPermutation(int n, int k)"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,235,"throws NumberIsTooLargeException, NotStrictlyPositiveException;"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,267, Returns an array of <code>k</code> objects selected randomly
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,268, from the Collection <code>c</code>.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,238,* Returns an array of {@code k} objects selected randomly from the
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,239,* Collection {@code c}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,270, Sampling from <code>c</code>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,271, is without replacement; but if <code>c</code> contains identical
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,272," objects, the sample may include repeats.  If all elements of <code>"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,273," c</code> are distinct, the resulting object array represents a"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,241,* Sampling from {@code c} is without replacement; but if {@code c} contains
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,242,"* identical objects, the sample may include repeats.  If all elements of"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,243,"* {@code c} are distinct, the resulting object array represents a"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,275, Simple Random Sample</a> of size
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,276, <code>k</code> from the elements of <code>c</code>.</p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,277, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,278, <strong>Preconditions:</strong><ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,279, <li> k must be less than or equal to the size of c </li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,280, <li> c must not be empty </li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,281, </ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,282," If the preconditions are not met, an IllegalArgumentException is"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,283, thrown.</p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,245,* Simple Random Sample</a> of size {@code k} from the elements of
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,246,* {@code c}.</p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,285, @param c collection to be sampled
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,286, @param k size of the sample
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,287, @return random sample of k elements from c
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,248,* @param c the collection to be sampled
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,249,* @param k the size of the sample
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,250,* @return a random sample of {@code k} elements from {@code c}
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,251,* @throws NumberIsTooLargeException if {@code k > c.size()}.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,252,* @throws NotStrictlyPositiveException if {@code k <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,289,"bject[] nextSample(Collection<?> c, int k);"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,254,"Object[] nextSample(Collection<?> c, int k)"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,255,"throws NumberIsTooLargeException, NotStrictlyPositiveException;"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,190, <li>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,191, len/2+1 binary bytes are generated using the underlying Random</li>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,192, <li>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,193, Each binary byte is translated into 2 hex digits</li>
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,190,* <li>{@code len / 2 + 1} binary bytes are generated using the underlying
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,191,* Random</li>
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,192,* <li>Each binary byte is translated into 2 hex digits</li>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,197, @param len
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,198,            the desired string length.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,196,* @param len the desired string length.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,202,ublic String nextHexString(int len) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,200,public String nextHexString(int len) throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,238, Generate a random int value uniformly distributed between
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,239," <code>lower</code> and <code>upper</code>, inclusive."
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,241, @param lower
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,242,            the lower bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,243, @param upper
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,244,            the upper bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,245, @return the random integer.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,246, @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,248,"ublic int nextInt(int lower, int upper) {"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,235,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,236,"public int nextInt(int lower, int upper) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,255,eturn (int)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,243,return (int) FastMath.floor(scaled);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,259, Generate a random long value uniformly distributed between
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,260," <code>lower</code> and <code>upper</code>, inclusive."
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,262, @param lower
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,263,            the lower bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,264, @param upper
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,265,            the upper bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,266, @return the random integer.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,267, @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,246,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,295, @param len
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,296,            the length of the generated string
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,297, @return the random string
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,298, @throws NotStrictlyPositiveException if {@code len <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,300,ublic String nextSecureHexString(int len) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,273,public String nextSecureHexString(int len) throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,326,yte hash[] = alg.digest();
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,299,byte[] hash = alg.digest();
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,350, Generate a random int value uniformly distributed between
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,351," <code>lower</code> and <code>upper</code>, inclusive. This algorithm uses"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,352, a secure random number generator.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,354, @param lower
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,355,            the lower bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,356, @param upper
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,357,            the upper bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,358, @return the random integer.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,359, @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,322,/**  {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,373, Generate a random long value uniformly distributed between
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,374," <code>lower</code> and <code>upper</code>, inclusive. This algorithm uses"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,375, a secure random number generator.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,377, @param lower
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,378,            the lower bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,379, @param upper
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,380,            the upper bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,381, @return the random integer.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,382, @throws NumberIsTooLargeException if {@code lower >= upper}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,384,"ublic long nextSecureLong(long lower, long upper) {"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,334,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,335,"public long nextSecureLong(long lower, long upper)"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,336,throws NumberIsTooLargeException {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,408, @param mean mean of the Poisson distribution.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,409, @return the random Poisson value.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,410, @throws NotStrictlyPositiveException if {@code mean <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,412,ublic long nextPoisson(double mean) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,361,public long nextPoisson(double mean) throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,504, Generate a random value from a Normal (a.k.a. Gaussian) distribution with
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,505," the given mean, <code>mu</code> and the given standard deviation,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,506, <code>sigma</code>.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,508, @param mu
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,509,            the mean of the distribution
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,510, @param sigma
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,511,            the standard deviation of the distribution
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,512, @return the random Normal value
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,513, @throws NotStrictlyPositiveException if {@code sigma <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,515,"ublic double nextGaussian(double mu, double sigma) {"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,452,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,453,"public double nextGaussian(double mu, double sigma)"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,454,throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,523, Returns a random value from an Exponential distribution with the given
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,524, mean.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,463,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,533, @param mean the mean of the distribution
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,534, @return the random Exponential value
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,535, @throws NotStrictlyPositiveException if {@code mean <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,537,ublic double nextExponential(double mean) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,473,public double nextExponential(double mean)
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,474,throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,589, @param lower the lower bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,590, @param upper the upper bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,591," @return a uniformly distributed random value from the interval (lower, upper)"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,592, @throws NumberIsTooLargeException if {@code lower >= upper}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,594, {@code NaN}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,595, or either bound is infinite or NaN
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,529,* {@code NaN} or either bound is infinite or NaN
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,597,"ublic double nextUniform(double lower, double upper) {"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,531,"public double nextUniform(double lower, double upper)"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,532,"throws NumberIsTooLargeException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,611, @param lower
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,612,            the lower bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,613, @param upper
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,614,            the upper bound.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,615, @param lowerInclusive
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,616,            whether the lower bound is included in the interval
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,617," @return a uniformly distributed random value from the interval (lower,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,618,         upper)
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,619, @throws NumberIsTooLargeException if {@code lower >= upper}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,624,"ublic double nextUniform(double lower, double upper, boolean lowerInclusive) {"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,552,"public double nextUniform(double lower, double upper,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,553,boolean lowerInclusive)
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,554,"throws NumberIsTooLargeException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1000, Generates an integer array of length <code>k</code> whose entries are
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1001," selected randomly, without repetition, from the integers"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1002, <code>0 through n-1</code> (inclusive).
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1003, <p>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1004, Generated arrays represent permutations of <code>n</code> taken
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1005, <code>k</code> at a time.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1006, </p>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1007, <p>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1008, <strong>Preconditions:</strong>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1009, <ul>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1010, <li> <code>k <= n</code></li>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1011, <li> <code>n > 0</code></li>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1012, </ul>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1013," If the preconditions are not met, an IllegalArgumentException is thrown."
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1014, </p>
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,931,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1021, @param n
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1022,            domain of the permutation (must be positive)
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1023, @param k
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1024,            size of the permutation (must satisfy 0 < k <= n).
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1025, @return the random permutation as an int array
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1026, @throws NumberIsTooLargeException if {@code k > n}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1027, @throws NotStrictlyPositiveException if {@code k <= 0}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1034,f (k == 0) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,944,if (k <= 0) {
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1050, Uses a 2-cycle permutation shuffle to generate a random permutation.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,960,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,962,* <p>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1055," generate random samples, <a"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,967,* generate random samples <a
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1059, @param c
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1060,            Collection to sample from.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1061, @param k
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1062,            sample size.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1063, @return the random sample.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1064, @throws NumberIsTooLargeException if {@code k > c.size()}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1065, @throws NotStrictlyPositiveException if {@code k <= 0}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,970,* </p>
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1067,"ublic Object[] nextSample(Collection<?> c, int k) {"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,972,"public Object[] nextSample(Collection<?> c, int k)"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,973,"throws NumberIsTooLargeException, NotStrictlyPositiveException {"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,17,    distribution.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,17,*    distribution.
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,61, @version $Revision: 1.1 $ $Date: 2003/06/04 02:31:13 $
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,61,* @version $Revision: 1.2 $ $Date: 2003/06/06 03:07:39 $
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,66, Returns an exact representation of the
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,67," <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,68," Binomial Coefficient</a>,  ""<code>n choose k</code>"","
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,69, the number of <code>k</code>-element subsets that can be selected from
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,70, an <code>n</code>-element set.
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,71, <p>
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,72, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,73, <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,74,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,75, <li> The result is small enough to fit into a <code>long</code>.  The
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,76,      largest value of <code>n</code> for which all coefficients are
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,77,      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,78,      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,79,      </code> is thrown.</li>
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,80, </ul>
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,82, @param n the size of the set
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,83, @param k the size of the subsets to be counted
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,84, @return <code>n choose k</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,66,"* For a double precision value x, this method returns +1.0 if x >= 0"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,67,* and -1.0 if x < 0.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,69,* @author Albert Davidson Chou
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,70,"* @param x the value, a double"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,71,"* @return +1.0 or -1.0, depending on the the sign of x"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,73,public static double sign( double x ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,74,if ( x >= 0.0 ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,75,return 1.0 ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,76,} else {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,77,return -1.0 ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,82,"* For a float value x, this method returns +1.0F if x >= 0"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,83,* and -1.0F if x < 0.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,85,* @author Albert Davidson Chou
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,86,"* @param x the value, a float"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,87,"* @return +1.0F or -1.0F, depending on the the sign of x"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,89,public static float sign( float x ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,90,if ( x >= 0.0F ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,91,return 1.0F ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,92,} else {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,93,return -1.0F ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,98,"* For a byte value x, this method returns (byte)(+1) if x >= 0"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,99,* and (byte)(-1) if x < 0.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,101,* @author Albert Davidson Chou
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,102,"* @param x the value, a byte"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,103,"* @return (byte)(+1) or (byte)(-1), depending on the the sign of x"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,105,public static byte sign( byte x ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,106,if ( x >= (byte)0 ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,107,return (byte)1 ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,108,} else {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,109,return (byte)(-1) ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,114,"* For a short value x, this method returns (short)(+1) if x >= 0"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,115,* and (short)(-1) if x < 0.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,117,* @author Albert Davidson Chou
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,118,"* @param x the value, a short"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,119,"* @return (short)(+1) or (short)(-1), depending on the the sign of x"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,121,public static short sign( short x ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,122,if ( x >= (short)0 ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,123,return (short)1 ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,124,} else {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,125,return (short)(-1) ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,130,"* For an int value x, this method returns +1 if x >= 0"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,131,* and -1 if x < 0.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,133,* @author Albert Davidson Chou
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,134,"* @param x the value, an int"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,135,"* @return +1 or -1, depending on the the sign of x"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,137,public static int sign( int x ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,138,if ( x >= 0 ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,139,return 1 ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,140,} else {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,141,return -1 ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,146,"* For a long value x, this method returns +1L if x >= 0"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,147,* and -1L if x < 0.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,149,* @author Albert Davidson Chou
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,150,"* @param x the value, a long"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,151,"* @return +1L or -1L, depending on the the sign of x"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,153,public static long sign( long x ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,154,if ( x >= 0L ) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,155,return 1L ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,156,} else {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,157,return -1L ;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,161,* Returns an exact representation of the
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,162,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,163,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,164,* the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,165,* an <code>n</code>-element set.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,166,* <p>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,167,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,168,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,169,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,170,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,171,* <li> The result is small enough to fit into a <code>long</code>.  The
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,172,*      largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,173,*      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,174,* <li> The result is small enough to fit into a <code>long</code>.  The
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,175,*      largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,176,*      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,177,*      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,178,*      </code> is thrown.</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,179,* </ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,182,* @param n the size of the set
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,183,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,184,* @return <code>n choose k</code>
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,107,eturn result;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,207,return result;
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,111, Returns a <code>double</code> representation of the
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,112," <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,113," Binomial Coefficient</a>,  ""<code>n choose k</code>"","
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,114, the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,211,* Returns a <code>double</code> representation of the
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,212,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,213,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,214,* the number of <code>k</code>-element subsets that can be selected from
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,118, <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,218,* <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,120, <li> The result is small enough to fit into a <code>double</code>.
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,121,      The largest value of <code>n</code> for which all coefficients are
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,122,      < Double.MAX_VALUE is 1029.  If the computed value exceeds
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,220,* <li> The result is small enough to fit into a <code>double</code>.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,221,*      The largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,222,*      < Double.MAX_VALUE is 1029.  If the computed value exceeds
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,130,"ublic static double binomialCoefficientDouble(int n, int k) {"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,131,"eturn Math.floor(Math.exp(binomialCoefficientLog(n, k)) + .5);"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,230,"public static double binomialCoefficientDouble(int n, int k) {"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,231,"return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + .5);"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,136," <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,137," Binomial Coefficient</a>,  ""<code>n choose k</code>"","
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,138, the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,236,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,237,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,238,* the number of <code>k</code>-element subsets that can be selected from
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,142, <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,242,* <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,165,ouble logSum = 0;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,265,double logSum = 0;
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,182," <a href=""http://mathworld.wolfram.com/Factorial.html"">"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,183," Factorial</a>, or <code>n!</code>,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,282,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,283,"* Factorial</a>, or <code>n!</code>,"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,187, <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,287,* <li> <code>n > 0</code> (otherwise
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,189, <li> The result is small enough to fit into a <code>long</code>.  The
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,190,      largest value of <code>n</code> for which <code>n!</code>
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,191,      < Long.MAX_VALUE</code> is 20.  If the computed value
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,289,* <li> The result is small enough to fit into a <code>long</code>.  The
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,290,*      largest value of <code>n</code> for which <code>n!</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,291,*      < Long.MAX_VALUE</code> is 20.  If the computed value
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,205,eturn result;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,305,return result;
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,210," <a href=""http://mathworld.wolfram.com/Factorial.html"">"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,211," Factorial</a>, or <code>n!</code>,"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,212," the product of the numbers <code>1,...,n</code>, as as"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,310,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,311,"* Factorial</a>, or <code>n!</code>,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,312,"* the product of the numbers <code>1,...,n</code>, as as"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,216, <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,316,* <li> <code>n > 0</code> (otherwise
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,218, <li> The result is small enough to fit into a <code>double</code>.  The
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,219,      largest value of <code>n</code> for which <code>n!</code>
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,220,      < Double.MAX_VALUE</code> is 170.  If the computed value exceeds
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,318,* <li> The result is small enough to fit into a <code>double</code>.  The
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,319,*      largest value of <code>n</code> for which <code>n!</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,320,*      < Double.MAX_VALUE</code> is 170.  If the computed value exceeds
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,232,eturn Math.floor(Math.exp(factorialLog(n)) + 0.5);
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,332,return Math.floor(Math.exp(factorialLog(n)) + 0.5);
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,237," <a href=""http://mathworld.wolfram.com/Factorial.html"">"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,238," Factorial</a>, or <code>n!</code>,"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,239," the product of the numbers <code>1,...,n</code>, as as"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,337,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,338,"* Factorial</a>, or <code>n!</code>,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,339,"* the product of the numbers <code>1,...,n</code>, as as"
False,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,243, <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,343,* <li> <code>n > 0</code> (otherwise
False,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,17,    distribution.
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,17,*    distribution.
False,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,65, @version $Revision: 1.1 $ $Date: 2003/06/04 02:31:14 $
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,65,* @version $Revision: 1.2 $ $Date: 2003/06/06 03:07:39 $
False,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,74,ublic void setUp() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,74,public void setUp() {
False,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,160,"ssertTrue(""expecting infinite binomial coefficient"","
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,160,"assertTrue(""expecting infinite binomial coefficient"","
False,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,199,"ssertTrue(""expecting infinite factorial value"","
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,199,"assertTrue(""expecting infinite factorial value"","
False,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,208,"rivate long binomialCoefficient(int n, int k) {"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,208,"private long binomialCoefficient(int n, int k) {"
False,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,215,"eturn binomialCoefficient(n - 1, k - 1) +"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,215,"return binomialCoefficient(n - 1, k - 1) +"
False,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,309,rivate long factorial(int n) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,309,private long factorial(int n) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,318,public void testSignDouble() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,319,double delta = 0.0 ;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,320,"assertEquals( 1.0, MathUtils.sign( 2.0 ), delta ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,321,"assertEquals( -1.0, MathUtils.sign( -2.0 ), delta ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,325,public void testSignFloat() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,326,float delta = 0.0F ;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,327,"assertEquals( 1.0F, MathUtils.sign( 2.0F ), delta ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,328,"assertEquals( -1.0F, MathUtils.sign( -2.0F ), delta ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,332,public void testSignByte() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,333,"assertEquals( (byte)1, MathUtils.sign( (byte)2 ) ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,334,"assertEquals( (byte)(-1), MathUtils.sign( (byte)(-2) ) ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,338,public void testSignShort() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,339,"assertEquals( (short)1, MathUtils.sign( (short)2 ) ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,340,"assertEquals( (short)(-1), MathUtils.sign( (short)(-2) ) ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,344,public void testSignInt() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,345,"assertEquals( (int)1, MathUtils.sign( (int)(2) ) ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,346,"assertEquals( (int)(-1), MathUtils.sign( (int)(-2) ) ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,350,public void testSignLong() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,351,"assertEquals( 1L, MathUtils.sign( 2L ) ) ;"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,352,"assertEquals( -1L, MathUtils.sign( -2L ) ) ;"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,101, Adds 1 to the frequency count for v.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,102, <p>
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,103," If other objects have already been added to this Frequency, v must"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,104, be comparable to those that have already been added.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,105, </p>
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,107, @param v the value to add.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,108," @throws IllegalArgumentException if <code>v</code> is not Comparable,"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,109,         or is not comparable with previous entries
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,110, @deprecated use {@link #addValue(Comparable)} instead
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,112,Deprecated
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,113,ublic void addValue(Object v) {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,114,f (v instanceof Comparable<?>){
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,115,ddValue((Comparable<?>) v);
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,116, else {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,117,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,118,"ocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE,"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,119,.getClass().getName());
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,163, Adds 1 to the frequency count for v.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,165, @param v the value to add.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,166, @deprecated to be removed in math 3.0
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,168,Deprecated
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,169,ublic void addValue(Integer v) {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,170,ddValue(Long.valueOf(v.longValue()));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,226, Returns the number of values = v.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,227, Returns 0 if the value is not comparable.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,229, @param v the value to lookup.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,230, @return the frequency of v.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,231, @deprecated replaced by {@link #getCount(Comparable)} as of 2.0
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,233,Deprecated
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,234,ublic long getCount(Object v) {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,235,eturn getCount((Comparable<?>) v);
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,294, Returns the percentage of values that are equal to v
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,295, (as a proportion between 0 and 1).
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,296, <p>
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,297, Returns <code>Double.NaN</code> if no values have been added.</p>
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,299, @param v the value to lookup
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,300, @return the proportion of values equal to v
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,301, @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,303,Deprecated
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,304,ublic double getPct(Object v) {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,305,eturn getPct((Comparable<?>) v);
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,361, Returns the cumulative frequency of values less than or equal to v.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,362, <p>
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,363, Returns 0 if v is not comparable to the values set.</p>
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,365, @param v the value to lookup.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,366, @return the proportion of values equal to v
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,367, @deprecated replaced by {@link #getCumFreq(Comparable)} as of 2.0
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,369,Deprecated
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,370,ublic long getCumFreq(Object v) {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,371,eturn getCumFreq((Comparable<?>) v);
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,464, Returns the cumulative percentage of values less than or equal to v
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,465, (as a proportion between 0 and 1).
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,466, <p>
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,467, Returns <code>Double.NaN</code> if no values have been added.
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,468," Returns 0 if at least one value has been added, but v is not comparable"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,469, to the values set.</p>
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,471, @param v the value to lookup
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,472, @return the proportion of values less than or equal to v
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,473, @deprecated replaced by {@link #getCumPct(Comparable)} as of 2.0
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,475,Deprecated
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,476,ublic double getCumPct(Object v) {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,477,eturn getCumPct((Comparable<?>) v);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,54,"SuppressWarnings(""deprecation"")"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,128,"SuppressWarnings(""deprecation"")"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,141,/ MATH-329
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,142,"ssertEquals(""three (Object) pct"",0.5,f.getPct((Object) (Integer.valueOf(3))),tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,155,"SuppressWarnings(""deprecation"")"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,189,/ Check what happens when non-Comparable objects are added
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,190,"SuppressWarnings(""deprecation"")"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,191,ublic void testAddNonComparable(){
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,192,ry {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,193,.addValue(new Object()); // This was previously OK
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,194,"ail(""Expected IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,195, catch (IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,197,.clear();
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,198,.addValue(1);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,199,ry {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,200,.addValue(new Object());
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,201,"ail(""Expected IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,202, catch (IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,248,"SuppressWarnings(""deprecation"")"

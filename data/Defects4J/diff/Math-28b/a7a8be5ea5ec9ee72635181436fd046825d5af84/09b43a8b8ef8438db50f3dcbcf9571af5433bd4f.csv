is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,24,import org.apache.commons.math3.util.Precision;
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,271,@Test
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,272,public void testMath644() {
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,273,int N = 14761461;  // population
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,274,int m = 1035;      // successes in population
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,275,int n = 1841;      // number of trials
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,277,int k = 0;
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,278,"final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);"
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,280,"Assert.assertTrue(Precision.compareTo(1.0, dist.upperCumulativeProbability(k), 1) == 0);"
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,281,"Assert.assertTrue(Precision.compareTo(dist.cumulativeProbability(k), 0.0, 1) > 0);"
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,283,// another way to calculate the upper cumulative probability
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,284,double upper = 1.0 - dist.cumulativeProbability(k) + dist.probability(k);
True,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,285,"Assert.assertTrue(Precision.compareTo(1.0, upper, 1) == 0);"

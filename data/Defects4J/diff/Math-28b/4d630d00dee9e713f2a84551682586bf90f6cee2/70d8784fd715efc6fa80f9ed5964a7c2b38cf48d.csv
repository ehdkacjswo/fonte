is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,22,import java.util.Arrays;
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,27, Represents a Polynomial function.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,28, Spline functions map a certain interval of real numbers to real numbers.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,29," A cubic spline consists of segments of cubic functions. For this class,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,30, polynominal coefficents are used.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,31, Arguments outside of the domain cause an IllegalArgumentException.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,27,* Represents a polynomial function with real coefficients.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,33, @version $Revision: 1.5 $ $Date: 2004/02/18 03:24:19 $
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,29,* @version $Revision: 1.6 $ $Date: 2004/02/20 06:17:54 $
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,38, The polynominal coefficients.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,39," The index represents the coefficients of the polynomail, with"
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,40, index 0 being the absolute coefficient and index N the coefficient
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,41, for the Nth power.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,34,"* The coefficients of the polynomial, ordered by degree -- i.e.,  c[0] is the constant term"
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,35,* and c[n] is the coefficient of x^n where n is the degree of the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,46, Construct a function with the given segment delimiters and polynomial
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,47, coefficients.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,40,* Construct a polynomial with the given coefficients
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,52,"/ TODO: should copy the arguments here, for safety. This could be a major overhead."
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,53,his.c = c;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,46,this.c = new double[c.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,47,"System.arraycopy(c, 0, this.c, 0, c.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,57, Compute the value for the function.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,51,* Compute the value of the function for the given argument.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,63, @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,57,* @param x the argument for which the function value should be computed
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,69,ublic double value(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,63,public double value(double x)  {
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,91, @throws MathException if the derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,93,ublic double firstDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,85,public double firstDerivative(double x)  {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,87,if (this.degree() == 0) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,88,return 0;
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,115, @throws MathException if the second derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,117,ublic double secondDerivative(double x) throws MathException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,111,public double secondDerivative(double x)  {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,113,if (this.degree() < 2) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,114,return 0;
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,132, local power function using integer powers.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,133," <p>The Math.pow() function always returns absolute value,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,134,   and is a bit 'heavier' since it can handle double values
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,135,   for the exponential value.</p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,136, @param x any double value
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,137, @param n must be 0 or greater
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,138, @return x^n (or 0 if n < 0 ).
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,139, @throws MathException if n < 0.
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,128,*  Returns the degree of the polynomial
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,130,* @return the degree of the polynomial
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,141,"/     private double pow( double x, int n ) throws MathException {"
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,142,/         double value = x;
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,143,/         if ( n < 0 ) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,144,"/             throw new MathException( ""power n must be 0 or greater"" );"
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,145,/         } else if ( n == 0 ) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,146,/             // x^0 = 1 always.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,147,/             value = 1.0;
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,148,/         } else {
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,149,/             // only multiply for powers > 1.
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,150,/             for (int i=1; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,151,/                 value *= x;
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,155,"/         System.out.println(""pow:""+x+""^""+n+""=""+value);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,156,/         return value;
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,132,public int degree() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,133,return c.length - 1;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,29, @version $Revision: 1.4 $
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,29,* @version $Revision: 1.5 $
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,44,nivariateRealFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,44,PolynomialFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,53,"assertEquals(f.degree(), 0);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,54,"assertEquals(f.firstDerivative(0), 0, error);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,56,"assertEquals(f.secondDerivative(0), 0, error);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,67,nivariateRealFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,70,PolynomialFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,82,"assertEquals(f.degree(), 1);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,84,"assertEquals(f.secondDerivative(0), 0, error);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,89,nivariateRealFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,96,PolynomialFunction f = new PolynomialFunction( c );
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,111,nivariateRealFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,118,PolynomialFunction f = new PolynomialFunction( c );
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,130,"assertEquals(f.degree(), 5);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,127, tests the derivative function by comparision
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,136,* tests the firstDerivative function by comparision
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,133,ublic void testDerivativeComparision() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,142,public void testfirstDerivativeComparision() throws MathException {

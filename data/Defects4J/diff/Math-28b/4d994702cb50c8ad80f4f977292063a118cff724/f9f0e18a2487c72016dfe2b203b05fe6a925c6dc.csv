is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1393,"* Computes the <a href=""http://mathworld.wolfram.com/Logarithm.html"">"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1394,* logarithm</a> in a given base.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1396,* Returns {@code NaN} if either argument is negative.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1397,"* If {@code base} is 0 and {@code x} is positive, 0 is returned."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1398,"* If {@code base} is positive and {@code x} is 0,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1399,* {@code Double.NEGATIVE_INFINITY} is returned.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1400,"* If both arguments are 0, the result is {@code NaN}."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1402,"* @param base Base of the logarithm, must be greater than 0."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1403,"* @param x Argument, must be greater than 0."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1404,"* @return the value of the logarithm, i.e. the number {@code y} such that"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1405,* <code>base<sup>y</sup> = x</code>.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1406,"* @since 1.2 (previously in {@code MathUtils}, moved as of version 3.0)"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1408,"public static double log(double base, double x) {"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,1409,return log(x) / log(base);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,169, <p>Returns the
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,170," <a href=""http://mathworld.wolfram.com/Logarithm.html"">logarithm</a>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,171, for base {@code b} of {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,172, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,173, <p>Returns {@code NaN} if either argument is negative. If
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,174," {@code base} is 0 and {@code x} is positive, 0 is returned."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,175," If {@code base} is positive and {@code x} is 0,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,176, {@code Double.NEGATIVE_INFINITY} is returned.  If both arguments
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,177," are 0, the result is {@code NaN}.</p>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,179," @param base the base of the logarithm, must be greater than 0"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,180," @param x argument, must be greater than 0"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,181, @return the value of the logarithm - the number y such that base^y = x.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,182, @since 1.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,184,"ublic static double log(double base, double x) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,185,eturn FastMath.log(x)/FastMath.log(base);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1082,@Test
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1083,public void testLogWithBase() {
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1084,"Assert.assertEquals(2.0, FastMath.log(2, 4), 0);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1085,"Assert.assertEquals(3.0, FastMath.log(2, 8), 0);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1086,"Assert.assertTrue(Double.isNaN(FastMath.log(-1, 1)));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1087,"Assert.assertTrue(Double.isNaN(FastMath.log(1, -1)));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1088,"Assert.assertTrue(Double.isNaN(FastMath.log(0, 0)));"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1089,"Assert.assertEquals(0, FastMath.log(0, 10), 0);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,1090,"Assert.assertEquals(Double.NEGATIVE_INFINITY, FastMath.log(10, 0), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,153,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,154,ublic void testLog() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,155,"ssert.assertEquals(2.0, MathUtils.log(2, 4), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,156,"ssert.assertEquals(3.0, MathUtils.log(2, 8), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,157,"ssert.assertTrue(Double.isNaN(MathUtils.log(-1, 1)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,158,"ssert.assertTrue(Double.isNaN(MathUtils.log(1, -1)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,159,"ssert.assertTrue(Double.isNaN(MathUtils.log(0, 0)));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,160,"ssert.assertEquals(0, MathUtils.log(0, 10), 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,161,"ssert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);"

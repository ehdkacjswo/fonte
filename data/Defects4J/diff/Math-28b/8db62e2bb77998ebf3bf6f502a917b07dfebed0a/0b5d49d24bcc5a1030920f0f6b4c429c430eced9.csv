is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,21,mport org.apache.commons.math.fraction.Fraction;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,21,import org.apache.commons.math.fraction.BigFraction;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,32,rivate static final ArrayList<Fraction> CHEBYSHEV_COEFFICIENTS;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,32,private static final ArrayList<BigFraction> CHEBYSHEV_COEFFICIENTS;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,35,rivate static final ArrayList<Fraction> HERMITE_COEFFICIENTS;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,35,private static final ArrayList<BigFraction> HERMITE_COEFFICIENTS;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,38,rivate static final ArrayList<Fraction> LAGUERRE_COEFFICIENTS;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,38,private static final ArrayList<BigFraction> LAGUERRE_COEFFICIENTS;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,41,rivate static final ArrayList<Fraction> LEGENDRE_COEFFICIENTS;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,41,private static final ArrayList<BigFraction> LEGENDRE_COEFFICIENTS;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,47,HEBYSHEV_COEFFICIENTS = new ArrayList<Fraction>();
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,48,HEBYSHEV_COEFFICIENTS.add(Fraction.ONE);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,49,HEBYSHEV_COEFFICIENTS.add(Fraction.ZERO);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,50,HEBYSHEV_COEFFICIENTS.add(Fraction.ONE);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,47,CHEBYSHEV_COEFFICIENTS = new ArrayList<BigFraction>();
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,48,CHEBYSHEV_COEFFICIENTS.add(BigFraction.ONE);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,49,CHEBYSHEV_COEFFICIENTS.add(BigFraction.ZERO);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,50,CHEBYSHEV_COEFFICIENTS.add(BigFraction.ONE);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,54,ERMITE_COEFFICIENTS = new ArrayList<Fraction>();
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,55,ERMITE_COEFFICIENTS.add(Fraction.ONE);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,56,ERMITE_COEFFICIENTS.add(Fraction.ZERO);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,57,ERMITE_COEFFICIENTS.add(Fraction.TWO);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,54,HERMITE_COEFFICIENTS = new ArrayList<BigFraction>();
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,55,HERMITE_COEFFICIENTS.add(BigFraction.ONE);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,56,HERMITE_COEFFICIENTS.add(BigFraction.ZERO);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,57,HERMITE_COEFFICIENTS.add(BigFraction.TWO);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,61,AGUERRE_COEFFICIENTS = new ArrayList<Fraction>();
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,62,AGUERRE_COEFFICIENTS.add(Fraction.ONE);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,63,AGUERRE_COEFFICIENTS.add(Fraction.ONE);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,64,AGUERRE_COEFFICIENTS.add(Fraction.MINUS_ONE);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,61,LAGUERRE_COEFFICIENTS = new ArrayList<BigFraction>();
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,62,LAGUERRE_COEFFICIENTS.add(BigFraction.ONE);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,63,LAGUERRE_COEFFICIENTS.add(BigFraction.ONE);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,64,LAGUERRE_COEFFICIENTS.add(BigFraction.MINUS_ONE);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,68,EGENDRE_COEFFICIENTS = new ArrayList<Fraction>();
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,69,EGENDRE_COEFFICIENTS.add(Fraction.ONE);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,70,EGENDRE_COEFFICIENTS.add(Fraction.ZERO);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,71,EGENDRE_COEFFICIENTS.add(Fraction.ONE);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,68,LEGENDRE_COEFFICIENTS = new ArrayList<BigFraction>();
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,69,LEGENDRE_COEFFICIENTS.add(BigFraction.ONE);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,70,LEGENDRE_COEFFICIENTS.add(BigFraction.ZERO);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,71,LEGENDRE_COEFFICIENTS.add(BigFraction.ONE);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,97,"rivate final Fraction[] coeffs = { Fraction.ZERO, Fraction.TWO, Fraction.ONE};"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,97,"private final BigFraction[] coeffs = { BigFraction.ZERO, BigFraction.TWO, BigFraction.ONE };"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,99,ublic Fraction[] generate(int k) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,99,public BigFraction[] generate(int k) {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,123,ublic Fraction[] generate(int k) {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,124,eturn new Fraction[] {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,125,"raction.ZERO,"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,126,"raction.TWO,"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,127,"ew Fraction(2 * k, 1)};"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,123,public BigFraction[] generate(int k) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,124,return new BigFraction[] {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,125,"BigFraction.ZERO,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,126,"BigFraction.TWO,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,127,new BigFraction(2 * k)};
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,149,ublic Fraction[] generate(int k) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,149,public BigFraction[] generate(int k) {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,151,eturn new Fraction[] {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,152,"ew Fraction(2 * k + 1, kP1),"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,153,"ew Fraction(-1, kP1),"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,154,"ew Fraction(k, kP1)};"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,151,return new BigFraction[] {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,152,"new BigFraction(2 * k + 1, kP1),"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,153,"new BigFraction(-1, kP1),"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,154,"new BigFraction(k, kP1)};"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,176,ublic Fraction[] generate(int k) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,176,public BigFraction[] generate(int k) {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,178,eturn new Fraction[] {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,179,"raction.ZERO,"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,180,"ew Fraction(k + kP1, kP1),"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,181,"ew Fraction(k, kP1)};"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,178,return new BigFraction[] {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,179,"BigFraction.ZERO,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,180,"new BigFraction(k + kP1, kP1),"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,181,"new BigFraction(k, kP1)};"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,193,"inal ArrayList<Fraction> coefficients,"
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,193,"final ArrayList<BigFraction> coefficients,"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,231,inal ArrayList<Fraction> coefficients) {
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,231,final ArrayList<BigFraction> coefficients) {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,241,raction[] ai = generator.generate(k);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,241,BigFraction[] ai = generator.generate(k);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,243,raction ck     = coefficients.get(startK);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,244,raction ckm1   = coefficients.get(startKm1);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,243,BigFraction ck     = coefficients.get(startK);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,244,BigFraction ckm1   = coefficients.get(startKm1);
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,251,inal Fraction ckPrev = ck;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,251,final BigFraction ckPrev = ck;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,258,inal Fraction ckPrev = ck;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,258,final BigFraction ckPrev = ck;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,277,raction[] generate(int k);
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,277,BigFraction[] generate(int k);
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,180,ry {
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,181,olynomialsUtils.createLegendrePolynomial(40);
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,182,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,183, catch (ArithmeticException ae) {
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,184,/ expected
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,180,PolynomialsUtils.createLegendrePolynomial(40);
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,181,double[] l40 = PolynomialsUtils.createLegendrePolynomial(40).getCoefficients();
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,182,double denominator = 274877906944.0;
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,183,double[] numerators = new double[] {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,184,"+34461632205.0,            -28258538408100.0,          +3847870979902950.0,        -207785032914759300.0,"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,185,"+5929294332103310025.0,     -103301483474866556880.0,    +1197358103913226000200.0,    -9763073770369381232400.0,"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,186,"+58171647881784229843050.0,  -260061484647976556945400.0,  +888315281771246239250340.0, -2345767627188139419665400.0,"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,187,"+4819022625419112503443050.0, -7710436200670580005508880.0, +9566652323054238154983240.0, -9104813935044723209570256.0,"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,188,"+6516550296251767619752905.0, -3391858621221953912598660.0, +1211378079007840683070950.0,  -265365894974690562152100.0,"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,189,+26876802183334044115405.0
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,191,for (int i = 0; i < l40.length; ++i) {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,192,if (i % 2 == 0) {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,193,double ci = numerators[i / 2] / denominator;
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,194,"assertEquals(ci, l40[i], ci * 1.0e-15);"
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,195,} else {
True,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,196,"assertEquals(0.0, l40[i], 0.0);"
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,186,"/        checkPolynomial(PolynomialsUtils.createLegendrePolynomial(40), 274877906944l,"
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,187,"/                        ""34461632205.0"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,188,"/                      + "" - 28258538408100.0 x^2"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,189,"/                      + "" + 3847870979902950.0 x^4"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,190,"/                      + "" - 207785032914759300.0 x^6"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,191,"/                      + "" + 5929294332103310025.0 x^8"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,192,"/                      + "" - 103301483474866556880.0 x^10"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,193,"/                      + "" + 1197358103913226000200.0 x^12"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,194,"/                      + "" - 9763073770369381232400.0 x^14"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,195,"/                      + "" + 58171647881784229843050.0 x^16"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,196,"/                      + "" - 260061484647976556945400.0 x^18"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,197,"/                      + "" + 888315281771246239250340.0 x^20"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,198,"/                      + "" - 2345767627188139419665400.0 x^22"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,199,"/                      + "" + 4819022625419112503443050.0 x^24"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,200,"/                      + "" - 7710436200670580005508880.0 x^26"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,201,"/                      + "" + 9566652323054238154983240.0 x^28"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,202,"/                      + "" - 9104813935044723209570256.0 x^30"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,203,"/                      + "" + 6516550296251767619752905.0 x^32"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,204,"/                      + "" - 3391858621221953912598660.0 x^34"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,205,"/                      + "" + 1211378079007840683070950.0 x^36"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,206,"/                      + "" - 265365894974690562152100.0 x^38"""
False,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,207,"/                      + "" + 26876802183334044115405.0 x^40"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,135,f ((Boolean) getTree(false).getAttribute()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,135,final BSPTree<Euclidean2D> tree = getTree(false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,136,if (tree.getCut() == null && (Boolean) tree.getAttribute()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java,137,// the instance covers the whole space
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,19,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,21,import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,23,import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,30,import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,236,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,237,public void testIssue780() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,238,float[] coords = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,239,"1.000000f, -1.000000f, -1.000000f,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,240,"1.000000f, -1.000000f, 1.000000f,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,241,"-1.000000f, -1.000000f, 1.000000f,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,242,"-1.000000f, -1.000000f, -1.000000f,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,243,"1.000000f, 1.000000f, -1f,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,244,"0.999999f, 1.000000f, 1.000000f,   // 1.000000f, 1.000000f, 1.000000f,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,245,"-1.000000f, 1.000000f, 1.000000f,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,246,"-1.000000f, 1.000000f, -1.000000f};"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,247,int[] indices = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,248,"0, 1, 2, 0, 2, 3,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,249,"4, 7, 6, 4, 6, 5,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,250,"0, 4, 5, 0, 5, 1,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,251,"1, 5, 6, 1, 6, 2,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,252,"2, 6, 7, 2, 7, 3,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,253,"4, 0, 3, 4, 3, 7};"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,254,ArrayList<SubHyperplane<Euclidean3D>> subHyperplaneList = new ArrayList<SubHyperplane<Euclidean3D>>();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,255,for (int idx = 0; idx < indices.length; idx += 3) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,256,int idxA = indices[idx] * 3;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,257,int idxB = indices[idx + 1] * 3;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,258,int idxC = indices[idx + 2] * 3;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,259,"Vector3D v_1 = new Vector3D(coords[idxA], coords[idxA + 1], coords[idxA + 2]);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,260,"Vector3D v_2 = new Vector3D(coords[idxB], coords[idxB + 1], coords[idxB + 2]);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,261,"Vector3D v_3 = new Vector3D(coords[idxC], coords[idxC + 1], coords[idxC + 2]);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,262,"Vector3D[] vertices = {v_1, v_2, v_3};"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,263,"Plane polyPlane = new Plane(v_1, v_2, v_3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,264,ArrayList<SubHyperplane<Euclidean2D>> lines = new ArrayList<SubHyperplane<Euclidean2D>>();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,266,Vector2D[] projPts = new Vector2D[vertices.length];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,267,for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,268,projPts[ptIdx] = polyPlane.toSubSpace(vertices[ptIdx]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,271,SubLine lineInPlane = null;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,272,for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,273,"lineInPlane = new SubLine(projPts[ptIdx], projPts[(ptIdx + 1) % projPts.length]);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,274,lines.add(lineInPlane);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,276,Region<Euclidean2D> polyRegion = new PolygonsSet(lines);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,277,"SubPlane polygon = new SubPlane(polyPlane, polyRegion);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,278,subHyperplaneList.add(polygon);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,280,PolyhedronsSet polyhedronsSet = new PolyhedronsSet(subHyperplaneList);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,281,"Assert.assertEquals( 8.0, polyhedronsSet.getSize(), 3.0e-6);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,282,"Assert.assertEquals(24.0, polyhedronsSet.getBoundarySize(), 5.0e-6);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,81,** Record whether this complex number is zero. */
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,82,rivate final transient boolean isZero;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,106,sZero = real == 0 && imaginary == 0;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,228,"  <li>If {@code this} and {@code divisor} are both {@link #ZERO},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,229,   {@link #NaN} is returned.
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,230,  </li>
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,231,"  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned."
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,225,"*  <li>If {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned."
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,258,f (divisor.isZero) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,259,/ return isZero ? NaN : INF; // See MATH-657
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,252,final double c = divisor.getReal();
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,253,final double d = divisor.getImaginary();
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,254,if (c == 0.0 && d == 0.0) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,267,inal double c = divisor.getReal();
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,268,inal double d = divisor.getImaginary();
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,296,/ return isZero ? NaN : INF; // See MATH-657
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,232,"/ Assert.assertEquals(z, Complex.INF); // See MATH-657"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,233,"ssert.assertEquals(z, Complex.NaN);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,236,Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,237,ublic void testDivideZeroZero() {
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,238,"omplex x = new Complex(0.0, 0.0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,239,omplex z = x.divide(Complex.ZERO);
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,360,"omplex x = new Complex(1, 1);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,352,"Complex x = new Complex(1,1);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,366,Complex = new Complex(yDouble);
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,358,yComplex = new Complex(yDouble);
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,575,Test
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,576,ublic void testAtanI() {
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,577,ssert.assertTrue(Complex.I.atan().isNaN());
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,570,Assert.assertTrue(Complex.I.atan().isNaN());

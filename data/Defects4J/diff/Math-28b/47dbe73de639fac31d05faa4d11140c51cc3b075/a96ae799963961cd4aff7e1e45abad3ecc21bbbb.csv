is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,286,// org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,299,// org.apache.commons.math.analysis.integration.UnivariateRealIntegratorImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,300,"{ ""invalid iteration limits: min={0}, max={1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,301,"""limites d''it\u00e9rations invalides : min = {0}, max = {1}"" },"
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,29, Romberg integration employs k successvie refinements of the trapezoid
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,30,* Romberg integration employs k successive refinements of the trapezoid
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,51, Integrate the function in the given interval.
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,53, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,54, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,55, @return the value of integral
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,56, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,57, or the integrator detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,58, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,59, function
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,60, @throws IllegalArgumentException if any parameters are invalid
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,62,"ublic double integrate(double min, double max) throws MaxIterationsExceededException,"
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,51,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,52,"public double integrate(double min, double max) throws MaxIterationsExceededException,"
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,66,/ Array strcture here can be improved for better space
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,56,// Array structure here can be improved for better space
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,86,f (Math.abs(s - olds) <= Math.abs(relativeAccuracy * olds)) {
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,76,final double delta = Math.abs(s - olds);
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,77,final double rLimit =
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,78,relativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,79,if ((delta <= rLimit) || (delta <= absoluteAccuracy)) {
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,98, Verifies that the iteration limits are valid and within the range.
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,100, @throws IllegalArgumentException if not
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,90,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,106,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,107,"""Iteration upper limit out of [0, 32] range: "" +"
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,108,aximalIterationCount);
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,95,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,96,"""invalid iteration limits: min={0}, max={1}"","
True,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,97,"new Object[] { 0, 32 });"
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,50, Integrate the function in the given interval.
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,52, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,53, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,54, @return the value of integral
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,55, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,56, or the integrator detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,57, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,58, function
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,59, @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,50,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,84,f (Math.abs(s - olds) <= Math.abs(relativeAccuracy * olds)) {
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,74,final double delta = Math.abs(s - olds);
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,75,final double rLimit =
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,76,relativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,77,if ((delta <= rLimit) || (delta <= absoluteAccuracy)) {
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,97, Verifies that the iteration limits are valid and within the range.
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,99, @throws IllegalArgumentException if not
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,89,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,105,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,106,"""Iteration upper limit out of [0, 64] range: "" +"
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,107,aximalIterationCount);
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,94,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,95,"""invalid iteration limits: min={0}, max={1}"","
True,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,96,"new Object[] { 0, 64 });"
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,20,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,91, Integrate the function in the given interval.
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,93, @param min the lower bound for the interval
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,94, @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,95, @return the value of integral
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,96, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,97, or the integrator detects convergence problems otherwise
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,98, @throws FunctionEvaluationException if an error occurs evaluating the
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,99, function
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,100, @throws IllegalArgumentException if any parameters are invalid
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,91,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,116,f (Math.abs(t - oldt) <= Math.abs(relativeAccuracy * oldt)) {
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,106,final double delta = Math.abs(t - oldt);
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,107,final double rLimit =
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,108,relativeAccuracy * (Math.abs(oldt) + Math.abs(t)) * 0.5;
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,109,if ((delta <= rLimit) || (delta <= absoluteAccuracy)) {
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,128, Verifies that the iteration limits are valid and within the range.
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,130, @throws IllegalArgumentException if not
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,120,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,136,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,137,"""Iteration upper limit out of [0, 64] range: "" +"
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,138,aximalIterationCount);
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,125,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,126,"""invalid iteration limits: min={0}, max={1}"","
True,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,127,"new Object[] { 0, 64 });"
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,20,import org.apache.commons.math.ConvergingAlgorithm;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,28,ublic interface UnivariateRealIntegrator {
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,29,public interface UnivariateRealIntegrator extends ConvergingAlgorithm {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,31, Set the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,32, <p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,33," Usually a high iteration count indicates convergence problem. However,"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,34," the ""reasonable value"" varies widely for different cases.  Users are"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,35, advised to use the default value.</p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,36, <p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,37, A <code>ConvergenceException</code> will be thrown if this number
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,38, is exceeded.</p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,40, @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,42,oid setMaximalIterationCount(int count);
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,45, Get the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,47, @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,49,nt getMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,52, Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,53, <p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,54, The default value is supplied by the implementation.</p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,56, @see #setMaximalIterationCount(int)
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,58,oid resetMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,91, Set the relative accuracy.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,92, <p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,93, This is used to stop iterations.</p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,95, @param accuracy the relative accuracy
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,96, @throws IllegalArgumentException if the accuracy can't be achieved
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,97, or is otherwise deemed unreasonable
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,99,oid setRelativeAccuracy(double accuracy);
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,102, Get the actual relative accuracy.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,104, @return the accuracy
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,106,ouble getRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,109, Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,110, <p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,111, The default value is provided by the implementation.</p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,113, @see #setRelativeAccuracy(double)
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,115,oid resetRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,143, Get the number of iterations in the last run of the integrator.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,144, <p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,145, This is mainly meant for testing purposes. It may occasionally
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,146, help track down performance problems: if the iteration count
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,147," is notoriously high, check whether the function is evaluated"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,148," properly, and whether another integrator is more amenable to the"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,149, problem.</p>
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,151, @return the last iteration count
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,152," @throws IllegalStateException if there is no result available, either"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,153, because no result was yet computed or the last attempt failed
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,155,nt getIterationCount() throws IllegalStateException;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,19,mport java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,19,import org.apache.commons.math.ConvergingAlgorithmImpl;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,30,ublic abstract class UnivariateRealIntegratorImpl implements
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,31,"nivariateRealIntegrator, Serializable {"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,33,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,34,tatic final long serialVersionUID = -3365294665201465048L;
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,29,public abstract class UnivariateRealIntegratorImpl
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,30,extends ConvergingAlgorithmImpl implements UnivariateRealIntegrator {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,36,** maximum relative error */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,37,rotected double relativeAccuracy;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,39,** maximum number of iterations */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,40,rotected int maximalIterationCount;
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,33,private static final long serialVersionUID = 6248808456637441533L;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,45,** default maximum relative error */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,46,rotected double defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,48,** default maximum number of iterations */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,49,rotected int defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,60,** the last iteration count */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,61,rotected int iterationCount;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,74,rotected UnivariateRealIntegratorImpl(
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,75,"nivariateRealFunction f,"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,76,nt defaultMaximalIterationCount) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,58,"protected UnivariateRealIntegratorImpl(final UnivariateRealFunction f,"
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,59,final int defaultMaximalIterationCount)
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,60,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,61,"super(defaultMaximalIterationCount, 1.0e-15);"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,83,/ parameters that may depend on algorithm
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,84,his.defaultMaximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,85,his.maximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,87,his.defaultRelativeAccuracy = 1E-6;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,88,his.relativeAccuracy = defaultRelativeAccuracy;
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,69,setRelativeAccuracy(1.0e-6);
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,110, Access the last iteration count.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,112, @return the last iteration count
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,113, @throws IllegalStateException if no integral has been computed
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,115,ublic int getIterationCount() throws IllegalStateException {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,116,f (resultComputed) {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,117,eturn iterationCount;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,118, else {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,119,"hrow MathRuntimeException.createIllegalStateException(""no result available"", null);"
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,106,this.iterationCount = 0;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,143, Set the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,145, @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,147,ublic void setMaximalIterationCount(int count) {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,148,aximalIterationCount = count;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,152, Get the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,154, @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,156,ublic int getMaximalIterationCount() {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,157,eturn maximalIterationCount;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,161, Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,163,ublic void resetMaximalIterationCount() {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,164,aximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,168, Set the lower limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,170, @param count minimum number of iterations
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,110,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,177, Get the lower limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,179, @return the actual lower limit
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,115,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,186, Reset the lower limit for the number of iterations to the default.
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,120,/** {@inheritDoc} */
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,193, Set the relative accuracy.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,195, @param accuracy the relative accuracy
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,196, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,197, the integrator or is otherwise deemed unreasonable
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,199,ublic void setRelativeAccuracy(double accuracy) {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,200,elativeAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,204, Get the actual relative accuracy.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,206, @return the accuracy
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,208,ublic double getRelativeAccuracy() {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,209,eturn relativeAccuracy;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,213, Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,215,ublic void resetRelativeAccuracy() {
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,216,elativeAccuracy = defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,220, Returns true if the arguments form a (strictly) increasing sequence
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,222, @param start first number
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,223, @param mid second number
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,224, @param end third number
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,225, @return true if the arguments form an increasing sequence
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,227,"rotected boolean isSequence(double start, double mid, double end) {"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,228,eturn (start < mid) && (mid < end);
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,241,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,242,"""Endpoints do not specify an interval: ["" + lower +"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,243,", "" + upper + ""]"");"
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,135,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,136,"""endpoints do not specify an interval: [{0}, {1}]"","
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,137,"new Object[] { lower, upper });"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,253,"f (!isSequence(0, minimalIterationCount, maximalIterationCount+1)) {"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,254,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,255,"""Invalid iteration limits: min="" + minimalIterationCount +"
False,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,256," max="" + maximalIterationCount);"
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,147,if ((minimalIterationCount <= 0) || (maximalIterationCount <= minimalIterationCount)) {
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,148,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,149,"""invalid iteration limits: min={0}, max={1}"","
True,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,150,"new Object[] { minimalIterationCount, maximalIterationCount });"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,23,import java.util.List;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,24,import java.util.SortedSet;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,25,import java.util.TreeSet;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,27,import org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,27,mport org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,31,import org.apache.commons.math.ode.events.EventException;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,34,import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,37,import org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,49,** Events handlers manager. */
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,50,rotected CombinedEventsManager eventsHandlersManager;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,55,/** Indicator for last step. */
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,56,protected boolean isLastStep;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,58,/** Indicator that a state or derivative reset was triggered by some event. */
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,59,protected boolean resetOccurred;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,61,/** Events states. */
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,62,protected Collection<EventState> eventsStates;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,64,/** Initialization indicator of events states. */
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,65,protected boolean statesInitialized;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,72,ventsHandlersManager = new CombinedEventsManager();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,87,eventsStates = new ArrayList<EventState>();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,88,statesInitialized = false;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,104,"ublic void addEventHandler(final EventHandler function,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,120,"public void addEventHandler(final EventHandler handler,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,108,"ventsHandlersManager.addEventHandler(function, maxCheckInterval,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,109,"onvergence, maxIterationCount);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,124,"eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount));"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,114,eturn eventsHandlersManager.getEventsHandlers();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,129,final List<EventHandler> list = new ArrayList<EventHandler>();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,130,for (EventState state : eventsStates) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,131,list.add(state.getEventHandler());
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,133,return Collections.unmodifiableCollection(list);
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,119,ventsHandlersManager.clearEventsHandlers();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,138,eventsStates.clear();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,207,"/** Accept a step, triggering events and step handlers."
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,208,* @param interpolator step interpolator
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,209,* @param handlers step handlers
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,210,"* @param y state vector at step end time, must be reset if an event"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,211,* asks for resetting or if an events stops integration during the step
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,212,* @param yDot placeholder array where to put the time derivative of the state vector
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,213,* @param tEnd final integration time
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,214,* @return time at end of step
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,215,* @exception IntegratorException if the value of one event state cannot be evaluated
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,217,"protected double acceptStep(final AbstractStepInterpolator interpolator,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,218,"final Collection<StepHandler> handlers,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,219,"final double[] y,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,220,"final double[] yDot, final double tEnd)"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,221,throws IntegratorException {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,223,try {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,224,double previousT = interpolator.getGlobalPreviousTime();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,225,final double currentT = interpolator.getGlobalCurrentTime();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,226,resetOccurred = false;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,228,// initialize the events states if needed
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,229,if (! statesInitialized) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,230,for (EventState state : eventsStates) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,231,state.reinitializeBegin(interpolator);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,233,statesInitialized = true;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,236,// find all events that occur during the step
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,237,SortedSet<EventState> occuringEvents = new TreeSet<EventState>();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,238,for (final EventState state : eventsStates) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,239,if (state.evaluateStep(interpolator)) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,240,// the event occurs during the current step
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,241,occuringEvents.add(state);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,245,// handle the events chronologically
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,246,for (final EventState state : occuringEvents) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,248,"// restrict the interpolator to the first part of the step, up to the event"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,249,final double eventT = state.getEventTime();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,250,"interpolator.setSoftBounds(previousT, eventT);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,252,// trigger the event
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,253,interpolator.setInterpolatedTime(eventT);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,254,final double[] eventY = interpolator.getInterpolatedState();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,255,"state.stepAccepted(eventT, eventY);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,256,isLastStep = state.stop();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,258,"// handle the first part of the step, up to the event"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,259,for (final StepHandler handler : stepHandlers) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,260,"handler.handleStep(interpolator, isLastStep);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,263,if (isLastStep) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,264,// the event asked to stop integration
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,265,"System.arraycopy(eventY, 0, y, 0, y.length);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,266,return eventT;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,269,"if (state.reset(eventT, eventY)) {"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,270,// some event handler has triggered changes that
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,271,"// invalidate the derivatives, we need to recompute them"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,272,"System.arraycopy(eventY, 0, y, 0, y.length);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,273,"computeDerivatives(eventT, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,274,resetOccurred = true;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,275,return eventT;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,278,// prepare handling of the remaining part of the step
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,279,previousT = eventT;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,280,"interpolator.setSoftBounds(eventT, currentT);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,284,interpolator.setInterpolatedTime(currentT);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,285,final double[] currentY = interpolator.getInterpolatedState();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,286,for (final EventState state : eventsStates) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,287,"state.stepAccepted(currentT, currentY);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,288,isLastStep = isLastStep || state.stop();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,290,"isLastStep = isLastStep || MathUtils.equals(currentT, tEnd, 1);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,292,"// handle the remaining part of the step, after all events if any"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,293,for (StepHandler handler : stepHandlers) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,294,"handler.handleStep(interpolator, isLastStep);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,297,return currentT;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,298,} catch (EventException se) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,299,final Throwable cause = se.getCause();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,300,if ((cause != null) && (cause instanceof MathUserException)) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,301,throw (MathUserException) cause;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,303,throw new IntegratorException(se);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,304,} catch (ConvergenceException ce) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,305,throw new IntegratorException(ce);
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,219,** Add an event handler for end time checking.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,220, <p>This method can be used to simplify handling of integration end time.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,221, It leverages the nominal stop condition with the exceptional stop
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,222, conditions.</p>
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,223, @param startTime integration start time
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,224, @param endTime desired end time
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,225, @param manager manager containing the user-defined handlers
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,226, @return a new manager containing all the user-defined handlers plus a
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,227, dedicated manager triggering a stop event at entTime
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,229,"rotected CombinedEventsManager addEndTimeChecker(final double startTime,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,230,"inal double endTime,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,231,inal CombinedEventsManager manager) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,232,ombinedEventsManager newManager = new CombinedEventsManager();
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,233,or (final EventState state : manager.getEventsStates()) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,234,"ewManager.addEventHandler(state.getEventHandler(),"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,235,"tate.getMaxCheckInterval(),"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,236,"tate.getConvergence(),"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,237,tate.getMaxIterationCount());
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,239,"ewManager.addEventHandler(new EndTimeChecker(endTime),"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,240,"ouble.POSITIVE_INFINITY,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,241,"astMath.ulp(FastMath.max(FastMath.abs(startTime), FastMath.abs(endTime))),"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,242,00);
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,243,eturn newManager;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,246,** Specialized event handler to stop integration. */
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,247,rivate static class EndTimeChecker implements EventHandler {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,249,** Desired end time. */
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,250,rivate final double endTime;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,252,** Build an instance.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,253, @param endTime desired time
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,255,ublic EndTimeChecker(final double endTime) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,256,his.endTime = endTime;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,259,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,260,"ublic int eventOccurred(double t, double[] y, boolean increasing) {"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,261,eturn STOP;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,264,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,265,"ublic double g(double t, double[] y) {"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,266,eturn t - endTime;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,269,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,270,"ublic void resetState(double t, double[] y) {"
False,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,76,"oid addEventHandler(EventHandler handler,"
False,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,77,"ouble maxCheckInterval,"
False,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,78,"ouble convergence,"
False,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,79,nt maxIterationCount);
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,76,"void addEventHandler(EventHandler handler, double maxCheckInterval,"
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,77,"double convergence, int maxIterationCount);"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,18,ackage org.apache.commons.math.ode.events;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,20,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,21,mport java.util.Collection;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,22,mport java.util.Collections;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,23,mport java.util.List;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,25,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,26,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,27,mport org.apache.commons.math.ode.IntegratorException;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,28,mport org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,30,** This class manages several {@link EventHandler event handlers} during integration.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,32, @see EventHandler
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,33, @see EventState
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,34, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,35, @since 1.2
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,38,ublic class CombinedEventsManager {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,40,** Events states. */
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,41,rivate final List<EventState> states;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,43,** First active event. */
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,44,rivate EventState first;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,46,** Initialization indicator. */
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,47,rivate boolean initialized;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,49,** Simple constructor.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,50, Create an empty manager
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,52,ublic CombinedEventsManager() {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,53,tates      = new ArrayList<EventState>();
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,54,irst       = null;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,55,nitialized = false;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,58,** Add an events handler.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,59, @param handler event handler
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,60, @param maxCheckInterval maximal time interval between events
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,61, checks (this interval prevents missing sign changes in
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,62, case the integration steps becomes very large)
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,63, @param convergence convergence threshold in the event time search
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,64, @param maxIterationCount upper limit of the iteration count in
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,65, the event time search
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,66, @see #getEventsHandlers()
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,67, @see #clearEventsHandlers()
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,69,"ublic void addEventHandler(final EventHandler handler, final double maxCheckInterval,"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,70,"inal double convergence, final int maxIterationCount) {"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,71,"tates.add(new EventState(handler, maxCheckInterval,"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,72,"onvergence, maxIterationCount));"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,75,** Get all the events handlers that have been added to the manager.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,76, @return an unmodifiable collection of the added event handlers
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,77," @see #addEventHandler(EventHandler, double, double, int)"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,78, @see #clearEventsHandlers()
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,79, @see #getEventsStates()
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,81,ublic Collection<EventHandler> getEventsHandlers() {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,82,inal List<EventHandler> list = new ArrayList<EventHandler>();
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,83,or (EventState state : states) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,84,ist.add(state.getEventHandler());
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,86,eturn Collections.unmodifiableCollection(list);
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,89,** Remove all the events handlers that have been added to the manager.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,90," @see #addEventHandler(EventHandler, double, double, int)"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,91, @see #getEventsHandlers()
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,93,ublic void clearEventsHandlers() {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,94,tates.clear();
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,97,** Get all the events state wrapping the handlers that have been added to the manager.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,98, @return a collection of the events states
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,99, @see #getEventsHandlers()
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,101,ublic Collection<EventState> getEventsStates() {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,102,eturn states;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,105,** Check if the manager does not manage any event handlers.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,106, @return true if manager is empty
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,108,ublic boolean isEmpty() {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,109,eturn states.isEmpty();
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,112,** Evaluate the impact of the proposed step on all managed
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,113, event handlers.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,114, @param interpolator step interpolator for the proposed step
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,115, @return true if at least one event handler triggers an event
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,116, before the end of the proposed step (this implies the step should
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,117, be rejected)
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,118, @exception MathUserException if the interpolator fails to
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,119, compute the function somewhere within the step
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,120, @exception IntegratorException if an event cannot be located
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,122,ublic boolean evaluateStep(final StepInterpolator interpolator)
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,123,"hrows MathUserException, IntegratorException {"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,125,ry {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,127,irst = null;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,128,f (states.isEmpty()) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,129,"/ there is nothing to do, return now to avoid setting the"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,130,/ interpolator time (and hence avoid unneeded calls to the
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,131,/ user function due to interpolator finalization)
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,132,eturn false;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,135,f (! initialized) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,137,/ initialize the events states
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,138,or (EventState state : states) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,139,tate.reinitializeBegin(interpolator);
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,142,nitialized = true;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,146,/ check events occurrence
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,147,or (EventState state : states) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,149,f (state.evaluateStep(interpolator)) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,150,f (first == null) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,151,irst = state;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,152, else {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,153,f (interpolator.isForward()) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,154,f (state.getEventTime() < first.getEventTime()) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,155,irst = state;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,157, else {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,158,f (state.getEventTime() > first.getEventTime()) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,159,irst = state;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,167,eturn first != null;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,169, catch (EventException se) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,170,hrow new IntegratorException(se);
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,171, catch (ConvergenceException ce) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,172,hrow new IntegratorException(ce);
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,177,** Get the occurrence time of the first event triggered in the
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,178, last evaluated step.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,179, @return occurrence time of the first event triggered in the last
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,180," evaluated step, or </code>Double.NaN</code> if no event is"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,181, triggered
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,183,ublic double getEventTime() {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,184,eturn (first == null) ? Double.NaN : first.getEventTime();
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,187,** Inform the event handlers that the step has been accepted
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,188, by the integrator.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,189, @param t value of the independent <i>time</i> variable at the
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,190, end of the step
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,191, @param y array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,192, at the end of the step
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,193, @exception IntegratorException if the value of one of the
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,194, events states cannot be evaluated
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,196,"ublic void stepAccepted(final double t, final double[] y)"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,197,hrows IntegratorException {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,198,ry {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,199,or (EventState state : states) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,200,"tate.stepAccepted(t, y);"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,202, catch (EventException se) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,203,hrow new IntegratorException(se);
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,207,** Check if the integration should be stopped at the end of the
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,208, current step.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,209, @return true if the integration should be stopped
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,211,ublic boolean stop() {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,212,or (EventState state : states) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,213,f (state.stop()) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,214,eturn true;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,217,eturn false;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,220,** Let the event handlers reset the state if they want.
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,221, @param t value of the independent <i>time</i> variable at the
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,222, beginning of the next step
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,223, @param y array were to put the desired state vector at the beginning
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,224, of the next step
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,225, @return true if the integrator should reset the derivatives too
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,226, @exception IntegratorException if one of the events states
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,227, that should reset the state fails to do it
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,229,"ublic boolean reset(final double t, final double[] y)"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,230,hrows IntegratorException {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,231,ry {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,232,oolean resetDerivatives = false;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,233,or (EventState state : states) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,234,"f (state.reset(t, y)) {"
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,235,esetDerivatives = true;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,238,eturn resetDerivatives;
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,239, catch (EventException se) {
False,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,src/main/java/org/apache/commons/math/ode/events/CombinedEventsManager.java,240,hrow new IntegratorException(se);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,21,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,23,import org.apache.commons.math.exception.MathInternalError;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,24,import org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,36, proposed step (and hence the step should be reduced to ensure the
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,37, event occurs at a bound rather than inside the step).</p>
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,36,* proposed step.</p>
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,42,ublic class EventState {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,41,public class EventState implements Comparable<EventState> {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,190, the end of the proposed step (this implies the step should be
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,191, rejected)
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,189,* the end of the proposed step
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,205,"inal int    n  = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(t1 - t0) / maxCheckInterval));"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,206,inal double h  = (t1 - t0) / n;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,203,if (FastMath.abs(t1 - t0) < convergence) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,204,"// we cannot do anything on such a small step, don't trigger any events"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,205,return false;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,207,final double start = forward ? (t0 + convergence) : t0 - convergence;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,208,final double dt    = t1 - start;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,209,"final int    n     = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,210,final double h     = dt / n;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,210,ouble tb = t0 + (interpolator.isForward() ? convergence : -convergence);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,214,b += h;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,217,final double tb = start + (i + 1) * h;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,222,f (ga * gb > 0) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,225,"// variation direction, with respect to the integration direction"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,226,increasing = gb >= ga;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,228,final UnivariateRealFunction f = new UnivariateRealFunction() {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,229,public double value(final double t) throws MathUserException {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,230,try {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,231,interpolator.setInterpolatedTime(t);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,232,"return handler.g(t, interpolator.getInterpolatedState());"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,233,} catch (EventException e) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,234,throw new MathUserException(e);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,238,final BrentSolver solver = new BrentSolver(convergence);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,240,if (ga * gb >= 0) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,233,nterpolator.setInterpolatedTime(ta);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,234,"a = handler.g(ta, interpolator.getInterpolatedState());"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,251,ga = f.value(ta);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,238,hrow MathRuntimeException.createInternalError(null);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,255,throw new MathInternalError();
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,242,"/ variation direction, with respect to the integration direction"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,243,ncreasing = gb >= ga;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,245,inal UnivariateRealFunction f = new UnivariateRealFunction() {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,246,ublic double value(final double t) throws MathUserException {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,247,ry {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,248,nterpolator.setInterpolatedTime(t);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,249,"eturn handler.g(t, interpolator.getInterpolatedState());"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,250, catch (EventException e) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,251,hrow new MathUserException(e);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,255,inal BrentSolver solver = new BrentSolver(convergence);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,257,"olver.solve(maxIterationCount, f, ta, tb) :"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,258,"olver.solve(maxIterationCount, f, tb, ta);"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,259,f ((FastMath.abs(root - ta) <= convergence) &&
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,260,FastMath.abs(root - previousEventTime) <= convergence)) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,260,"solver.solve(maxIterationCount, f, ta, tb) :"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,261,"solver.solve(maxIterationCount, f, tb, ta);"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,263,if ((!Double.isNaN(previousEventTime)) &&
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,264,(FastMath.abs(root - ta) <= convergence) &&
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,265,(FastMath.abs(root - previousEventTime) <= convergence)) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,267,f (pendingEvent && (FastMath.abs(t1 - pendingEventTime) <= convergence)) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,268,/ we were already waiting for this event which was
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,269,/ found during a previous call for a step that was
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,270,"/ rejected, this step must now be accepted since it"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,271,/ properly ends exactly at the event occurrence
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,272,eturn false;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,274,/ either we were not waiting for the event or it has
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,275,/ moved in such a way the step cannot be accepted
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,274,} else {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,275,// no sign change: there is no event for now
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,276,ta = tb;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,277,ga = gb;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,326,f (pendingEvent) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,326,if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,357,f (! pendingEvent) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,357,if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,372,/** Compare the instance with another event state.
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,373,* <p>
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,374,* Event state ordering is based on occurrence time within the last
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,375,"* evaluated step. If no event occurs during the step, a time arbitrarily"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,376,* set to positive infinity is used.
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,377,* </p>
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,378,* @param state other event state to compare the instance to
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,379,"* @return a negative integer, zero, or a positive integer as the event"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,380,"* occurs before, simultaneous, or after the specified event of the"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,381,* specified state.
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,383,public int compareTo(final EventState state) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,384,final double instanceTime = pendingEvent ? pendingEventTime : Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,385,final double otherTime = state.pendingEvent ? state.pendingEventTime : Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,386,"return Double.compare(instanceTime, otherTime);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,24,mport org.apache.commons.math.ode.events.CombinedEventsManager;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,205,inal double[] yTmp = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,210,inal NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,211,"nterpolatorTmp.reinitialize(yTmp, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,217,"ombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,213,statesInitialized = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,229,oolean lastStep = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,230,hile (!lastStep) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,225,// main integration loop
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,226,isLastStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,227,do {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,232,/ shift all data
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,233,nterpolator.shift();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,235,ouble error = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,236,or (boolean loop = true; loop;) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,229,double error = 10;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,230,while (error >= 1.0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,252,f (error <= 1.0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,254,/ predict a first estimate of the state at step end
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,255,inal double stepEnd = stepStart + stepSize;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,256,nterpolator.setInterpolatedTime(stepEnd);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,257,"ystem.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,259,/ evaluate the derivative
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,260,"omputeDerivatives(stepEnd, yTmp, yDot);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,262,/ update Nordsieck vector
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,263,inal double[] predictedScaled = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,264,or (int j = 0; j < y0.length; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,265,redictedScaled[j] = stepSize * yDot[j];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,267,inal Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,268,"pdateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,270,/ discrete events handling
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,271,"nterpolatorTmp.reinitialize(stepEnd, stepSize, predictedScaled, nordsieckTmp);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,272,nterpolatorTmp.storeTime(stepStart);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,273,nterpolatorTmp.shift();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,274,nterpolatorTmp.storeTime(stepEnd);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,275,f (manager.evaluateStep(interpolatorTmp)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,276,inal double dt = manager.getEventTime() - stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,277,f (FastMath.abs(dt) <= FastMath.ulp(stepStart)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,278,"/ we cannot simply truncate the step, reject the current computation"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,279,/ and let the loop compute another state with the truncated step.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,280,/ it is so small (much probably exactly 0 due to limited accuracy)
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,281,/ that the code above would fail handling it.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,282,/ So we set up an artificial 0 size step by copying states
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,283,nterpolator.storeTime(stepStart);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,284,"ystem.arraycopy(y, 0, yTmp, 0, y0.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,285,New     = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,286,tepSize = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,287,oop     = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,288, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,289,/ reject the step to match exactly the next switch time
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,290,New = dt;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,291,nterpolator.rescale(hNew);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,293, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,294,/ accept the step
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,295,caled    = predictedScaled;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,296,ordsieck = nordsieckTmp;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,297,"nterpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,298,oop = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,301, else {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,246,if (error >= 1.0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,310,/ the step has been accepted (may have been truncated)
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,311,inal double nextStep = stepStart + stepSize;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,312,"ystem.arraycopy(yTmp, 0, y, 0, n);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,313,nterpolator.storeTime(nextStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,314,"anager.stepAccepted(nextStep, y);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,315,astStep = manager.stop();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,317,/ provide the step data to the step handler
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,318,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,319,nterpolator.setInterpolatedTime(nextStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,320,"andler.handleStep(interpolator, lastStep);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,322,tepStart = nextStep;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,324,"f (!lastStep && manager.reset(stepStart, y)) {"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,255,// predict a first estimate of the state at step end
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,256,final double stepEnd = stepStart + stepSize;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,257,interpolator.shift();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,258,interpolator.setInterpolatedTime(stepEnd);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,259,"System.arraycopy(interpolator.getInterpolatedState(), 0, y, 0, y0.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,326,/ some events handler has triggered changes that
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,327,"/ invalidate the derivatives, we need to restart from scratch"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,328,"tart(stepStart, y, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,329,"nterpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,261,// evaluate the derivative
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,262,"computeDerivatives(stepEnd, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,264,// update Nordsieck vector
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,265,final double[] predictedScaled = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,266,for (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,267,predictedScaled[j] = stepSize * yDot[j];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,333,f (! lastStep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,334,"/ in some rare cases we may get here with stepSize = 0, for example"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,335,"/ when an event occurs at integration start, reducing the first step"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,336,/ to zero; we have to reset the step to some safe non zero value
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,337,"tepSize = filterStep(stepSize, forward, true);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,269,final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,270,"updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,271,"interpolator.reinitialize(stepEnd, stepSize, predictedScaled, nordsieckTmp);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,273,// discrete events handling
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,274,interpolator.storeTime(stepEnd);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,275,"stepStart = acceptStep(interpolator, stepHandlers, y, yDot, t);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,276,scaled    = predictedScaled;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,277,nordsieck = nordsieckTmp;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,278,"interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,280,if (!isLastStep) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,282,// prepare next step
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,283,interpolator.storeTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,285,if (resetOccurred) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,286,// some events handler has triggered changes that
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,287,"// invalidate the derivatives, we need to restart from scratch"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,288,"start(stepStart, y, t);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,289,"interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,299,final double  filteredNextT      = stepStart + hNew;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,300,final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,301,if (filteredNextIsLast) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,302,hNew = t - stepStart;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,309,} while (!isLastStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,350,inal double stopTime  = stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,351,tepStart = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,352,tepSize  = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,311,final double stopTime = stepStart;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,312,resetInternalState();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,27,mport org.apache.commons.math.ode.events.CombinedEventsManager;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,222,final double[] predictedScaled = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,223,Array2DRowRealMatrix nordsieckTmp = null;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,227,inal NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,228,"nterpolatorTmp.reinitialize(yTmp, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,234,"ombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,233,statesInitialized = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,245,oolean lastStep = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,246,hile (!lastStep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,248,/ shift all data
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,249,nterpolator.shift();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,243,isLastStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,244,do {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,251,ouble error = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,252,or (boolean loop = true; loop;) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,246,double error = 10;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,247,while (error >= 1.0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,265,inal double[] predictedScaled = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,269,inal Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,263,nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,275,f (error <= 1.0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,277,/ evaluate a final estimate of the derivative (second E in the PECE sequence)
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,278,"omputeDerivatives(stepEnd, yTmp, yDot);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,280,/ update Nordsieck vector
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,281,inal double[] correctedScaled = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,282,or (int j = 0; j < y0.length; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,283,orrectedScaled[j] = stepSize * yDot[j];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,285,"pdateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,287,/ discrete events handling
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,288,"nterpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,289,nterpolatorTmp.storeTime(stepStart);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,290,nterpolatorTmp.shift();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,291,nterpolatorTmp.storeTime(stepEnd);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,292,f (manager.evaluateStep(interpolatorTmp)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,293,inal double dt = manager.getEventTime() - stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,294,f (FastMath.abs(dt) <= FastMath.ulp(stepStart)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,295,"/ we cannot simply truncate the step, reject the current computation"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,296,/ and let the loop compute another state with the truncated step.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,297,/ it is so small (much probably exactly 0 due to limited accuracy)
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,298,/ that the code above would fail handling it.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,299,/ So we set up an artificial 0 size step by copying states
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,300,nterpolator.storeTime(stepStart);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,301,"ystem.arraycopy(y, 0, yTmp, 0, y0.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,302,New     = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,303,tepSize = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,304,oop     = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,305, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,306,/ reject the step to match exactly the next switch time
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,307,New = dt;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,308,nterpolator.rescale(hNew);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,310, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,311,/ accept the step
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,312,caled    = correctedScaled;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,313,ordsieck = nordsieckTmp;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,314,"nterpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,315,oop = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,318, else {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,269,if (error >= 1.0) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,277,// evaluate a final estimate of the derivative (second E in the PECE sequence)
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,278,final double stepEnd = stepStart + stepSize;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,279,"computeDerivatives(stepEnd, yTmp, yDot);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,281,// update Nordsieck vector
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,282,final double[] correctedScaled = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,283,for (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,284,correctedScaled[j] = stepSize * yDot[j];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,286,"updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,327,/ the step has been accepted (may have been truncated)
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,328,inal double nextStep = stepStart + stepSize;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,288,// discrete events handling
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,330,nterpolator.storeTime(nextStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,331,"anager.stepAccepted(nextStep, y);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,332,astStep = manager.stop();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,334,/ provide the step data to the step handler
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,335,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,336,nterpolator.setInterpolatedTime(nextStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,337,"andler.handleStep(interpolator, lastStep);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,339,tepStart = nextStep;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,290,"interpolator.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,291,interpolator.storeTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,292,interpolator.shift();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,293,interpolator.storeTime(stepEnd);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,294,"stepStart = acceptStep(interpolator, stepHandlers, y, yDot, t);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,295,scaled    = correctedScaled;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,296,nordsieck = nordsieckTmp;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,341,"f (!lastStep && manager.reset(stepStart, y)) {"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,298,if (!isLastStep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,343,/ some events handler has triggered changes that
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,344,"/ invalidate the derivatives, we need to restart from scratch"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,345,"tart(stepStart, y, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,346,"nterpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,300,// prepare next step
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,301,interpolator.storeTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,303,if (resetOccurred) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,304,// some events handler has triggered changes that
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,305,"// invalidate the derivatives, we need to restart from scratch"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,306,"start(stepStart, y, t);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,307,"interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,350,f (! lastStep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,351,"/ in some rare cases we may get here with stepSize = 0, for example"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,352,"/ when an event occurs at integration start, reducing the first step"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,353,/ to zero; we have to reset the step to some safe non zero value
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,354,"tepSize = filterStep(stepSize, forward, true);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,318,final double  filteredNextT      = stepStart + hNew;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,319,final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,320,if (filteredNextIsLast) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,321,hNew = t - stepStart;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,327,} while (!isLastStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,24,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,398,final double pT = getGlobalPreviousTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,407,"ntegrator.computeDerivatives(previousTime + C14 * h, yTmp, yDotKLast[0]);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,407,"integrator.computeDerivatives(pT + C14 * h, yTmp, yDotKLast[0]);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,417,"ntegrator.computeDerivatives(previousTime + C15 * h, yTmp, yDotKLast[1]);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,417,"integrator.computeDerivatives(pT + C15 * h, yTmp, yDotKLast[1]);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,427,"ntegrator.computeDerivatives(previousTime + C16 * h, yTmp, yDotKLast[2]);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,427,"integrator.computeDerivatives(pT + C16 * h, yTmp, yDotKLast[2]);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,440,hrow MathRuntimeException.createIOException(e);
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,440,IOException ioe = new IOException(e.getLocalizedMessage());
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,441,ioe.initCause(e);
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,442,throw ioe;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,23,mport org.apache.commons.math.ode.events.CombinedEventsManager;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,209,inal double[] yTmp = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,208,final double[] yTmp    = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,209,final double[] yDotTmp = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,213,f (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,213,if (requiresDenseOutput() || (! eventsStates.isEmpty())) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,229,"ombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,230,oolean lastStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,229,statesInitialized = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,233,hile (!lastStep) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,232,isLastStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,233,do {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,237,ouble error = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,238,or (boolean loop = true; loop;) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,237,"// iterate over step size, ensuring local normalized error is smaller than 1"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,238,double error = 10;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,239,while (error >= 1.0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,251, else {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,252,} else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,289,f (error <= 1.0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,291,/ discrete events handling
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,292,nterpolator.storeTime(stepStart + stepSize);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,293,f (manager.evaluateStep(interpolator)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,294,inal double dt = manager.getEventTime() - stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,295,f (FastMath.abs(dt) <= FastMath.ulp(stepStart)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,296,"/ we cannot simply truncate the step, reject the current computation"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,297,/ and let the loop compute another state with the truncated step.
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,298,/ it is so small (much probably exactly 0 due to limited accuracy)
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,299,/ that the code above would fail handling it.
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,300,/ So we set up an artificial 0 size step by copying states
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,301,nterpolator.storeTime(stepStart);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,302,"ystem.arraycopy(y, 0, yTmp, 0, y0.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,303,New     = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,304,tepSize = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,305,oop     = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,306, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,307,/ reject the step to match exactly the next switch time
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,308,New = dt;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,310, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,311,/ accept the step
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,312,oop = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,315, else {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,290,if (error >= 1.0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,319,"astMath.max(minReduction, safety * FastMath.pow(error, exp)));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,294,"FastMath.max(minReduction, safety * FastMath.pow(error, exp)));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,325,/ the step has been accepted
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,326,inal double nextStep = stepStart + stepSize;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,300,"// local error is small enough: accept the step, trigger events and step handlers"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,301,interpolator.storeTime(stepStart + stepSize);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,328,"anager.stepAccepted(nextStep, y);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,329,astStep = manager.stop();
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,303,"System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,304,"stepStart = acceptStep(interpolator, stepHandlers, y, yDotTmp, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,331,/ provide the step data to the step handler
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,332,nterpolator.storeTime(nextStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,333,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,334,"andler.handleStep(interpolator, lastStep);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,336,tepStart = nextStep;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,306,if (!isLastStep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,338,f (fsal) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,339,/ save the last evaluation for the next step
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,340,"ystem.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,308,// prepare next step
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,309,interpolator.storeTime(stepStart);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,343,"f (manager.reset(stepStart, y) && ! lastStep) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,344,/ some event handler has triggered changes that
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,345,"/ invalidate the derivatives, we need to recompute them"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,346,"omputeDerivatives(stepStart, y, yDotK[0]);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,311,if (fsal) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,312,// save the last evaluation for the next step
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,313,"System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,316,// stepsize control for next step
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,317,final double factor =
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,318,"FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,319,final double  scaledH    = stepSize * factor;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,320,final double  nextT      = stepStart + scaledH;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,321,final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,322,"hNew = filterStep(scaledH, forward, nextIsLast);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,324,final double  filteredNextT      = stepStart + hNew;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,325,final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,326,if (filteredNextIsLast) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,327,hNew = t - stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,349,f (! lastStep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,350,"/ in some rare cases we may get here with stepSize = 0, for example"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,351,"/ when an event occurs at integration start, reducing the first step"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,352,/ to zero; we have to reset the step to some safe non zero value
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,353,"tepSize = filterStep(stepSize, forward, true);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,355,/ stepsize control for next step
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,356,"inal double factor = FastMath.min(maxGrowth,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,357,"astMath.max(minReduction,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,358,"afety * FastMath.pow(error, exp)));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,359,inal double  scaledH    = stepSize * factor;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,360,inal double  nextT      = stepStart + scaledH;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,361,inal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,362,"New = filterStep(scaledH, forward, nextIsLast);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,332,} while (!isLastStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,173,enseOutput = requiresDenseOutput() || (! eventsHandlersManager.isEmpty());
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,173,denseOutput = requiresDenseOutput() || (! eventsStates.isEmpty());
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,196,enseOutput = requiresDenseOutput() || (! eventsHandlersManager.isEmpty());
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,196,denseOutput = requiresDenseOutput() || (! eventsStates.isEmpty());
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,342,enseOutput = requiresDenseOutput() || (! eventsHandlersManager.isEmpty());
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,342,denseOutput = requiresDenseOutput() || (! eventsStates.isEmpty());
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,356,enseOutput = requiresDenseOutput() || (! eventsHandlersManager.isEmpty());
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,356,denseOutput = requiresDenseOutput() || (! eventsStates.isEmpty());
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,559,"hrows MathUserException, IntegratorException {"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,559,"throws MathUserException, IntegratorException {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,597,ouble[] yDot1      = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,597,double[] yDot1      = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,600,Dot1    = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,617,"inal double log10R = FastMath.log(FastMath.max(1.0e-10, tol)) / FastMath.log(10.0);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,616,"final double log10R = FastMath.log10(FastMath.max(1.0e-10, tol));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,623,f (denseOutput || (! eventsHandlersManager.isEmpty())) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,622,if (denseOutput || (! eventsStates.isEmpty())) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,638,oolean lastStep         = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,641,statesInitialized = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,644,hile (! lastStep) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,643,isLastStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,644,do {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,664,f (! forward) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,665,New = -hNew;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,682,astStep = forward ? (nextT >= t) : (nextT <= t);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,676,isLastStep = forward ? (nextT >= t) : (nextT <= t);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,807,f ((firstTime || lastStep) && (error <= 1.0)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,801,if ((firstTime || isLastStep) && (error <= 1.0)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,813,if (! reject) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,814,// derivatives at end of step
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,815,"computeDerivatives(stepStart + stepSize, y1, yDot1);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,828,/ derivative at end of step
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,829,"omputeDerivatives(stepStart + stepSize, y1, yDot1);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,883,/ Discrete events handling
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,884,f (!reject) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,885,nterpolator.storeTime(stepStart + stepSize);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,886,f (eventsHandlersManager.evaluateStep(interpolator)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,887,inal double dt = eventsHandlersManager.getEventTime() - stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,888,f (FastMath.abs(dt) > FastMath.ulp(stepStart)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,889,/ reject the step to match exactly the next switch time
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,890,New = FastMath.abs(dt);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,891,eject = true;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,898,f (!reject) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,899,/ we will reuse the slope for the beginning of next step
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,900,irstStepAlreadyComputed = true;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,901,"ystem.arraycopy(yDot1, 0, yDot0, 0, y0.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,908,/ store end of step state
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,909,inal double nextStep = stepStart + stepSize;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,910,"ystem.arraycopy(y1, 0, y, 0, y0.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,912,"ventsHandlersManager.stepAccepted(nextStep, y);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,913,f (eventsHandlersManager.stop()) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,914,astStep = true;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,885,// Discrete events handling
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,886,interpolator.storeTime(stepStart + stepSize);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,887,"stepStart = acceptStep(interpolator, stepHandlers, y1, yDot1, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,917,/ provide the step data to the step handler
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,918,nterpolator.storeTime(nextStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,919,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,920,"andler.handleStep(interpolator, lastStep);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,922,tepStart = nextStep;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,924,"f (eventsHandlersManager.reset(stepStart, y) && ! lastStep) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,925,/ some switching function has triggered changes that
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,926,"/ invalidate the derivatives, we need to recompute them"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,927,irstStepAlreadyComputed = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,889,// prepare next step
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,890,interpolator.storeTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,891,"System.arraycopy(y1, 0, y, 0, y0.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,892,"System.arraycopy(yDot1, 0, yDot0, 0, y0.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,893,firstStepAlreadyComputed = true;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,990,astStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,955,isLastStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,961,} while (!isLastStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,998,eturn stepStart;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,963,final double stopTime = stepStart;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,964,resetInternalState();
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,965,return stopTime;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,24,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,313,inal double oneMinusThetaH)
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,314,hrows MathUserException {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,312,final double oneMinusThetaH) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,25,mport org.apache.commons.math.ode.events.CombinedEventsManager;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,115,inal double[] yTmp = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,114,final double[] yTmp    = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,115,final double[] yDotTmp = new double[y0.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,119,f (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,119,if (requiresDenseOutput() || (! eventsStates.isEmpty())) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,134,"ombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,135,oolean lastStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,134,statesInitialized = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,138,hile (!lastStep) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,137,isLastStep = false;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,138,do {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,142,or (boolean loop = true; loop;) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,142,// first stage
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,143,"computeDerivatives(stepStart, y, yDotK[0]);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,144,/ first stage
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,145,"omputeDerivatives(stepStart, y, yDotK[0]);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,147,/ next stages
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,148,or (int k = 1; k < stages; ++k) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,145,// next stages
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,146,for (int k = 1; k < stages; ++k) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,151,ouble sum = a[k-1][0] * yDotK[0][j];
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,152,or (int l = 1; l < k; ++l) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,153,um += a[k-1][l] * yDotK[l][j];
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,155,Tmp[j] = y[j] + stepSize * sum;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,149,double sum = a[k-1][0] * yDotK[0][j];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,150,for (int l = 1; l < k; ++l) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,151,sum += a[k-1][l] * yDotK[l][j];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,153,yTmp[j] = y[j] + stepSize * sum;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,162,/ estimate the state at the end of the step
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,163,or (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,160,// estimate the state at the end of the step
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,161,for (int j = 0; j < y0.length; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,166,um    += b[l] * yDotK[l][j];
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,164,sum    += b[l] * yDotK[l][j];
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,171,/ discrete events handling
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,172,nterpolator.storeTime(stepStart + stepSize);
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,173,f (manager.evaluateStep(interpolator)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,174,inal double dt = manager.getEventTime() - stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,175,f (FastMath.abs(dt) <= FastMath.ulp(stepStart)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,176,"/ we cannot simply truncate the step, reject the current computation"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,177,/ and let the loop compute another state with the truncated step.
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,178,/ it is so small (much probably exactly 0 due to limited accuracy)
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,179,/ that the code above would fail handling it.
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,180,/ So we set up an artificial 0 size step by copying states
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,181,nterpolator.storeTime(stepStart);
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,182,"ystem.arraycopy(y, 0, yTmp, 0, y0.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,183,tepSize = 0;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,184,oop     = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,185, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,186,/ reject the step to match exactly the next switch time
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,187,tepSize = dt;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,189, else {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,190,oop = false;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,195,/ the step has been accepted
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,196,inal double nextStep = stepStart + stepSize;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,169,// discrete events handling
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,170,interpolator.storeTime(stepStart + stepSize);
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,198,"anager.stepAccepted(nextStep, y);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,199,astStep = manager.stop();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,172,"System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,173,"stepStart = acceptStep(interpolator, stepHandlers, y, yDotTmp, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,201,/ provide the step data to the step handler
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,202,nterpolator.storeTime(nextStep);
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,203,or (StepHandler handler : stepHandlers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,204,"andler.handleStep(interpolator, lastStep);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,206,tepStart = nextStep;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,175,if (!isLastStep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,208,"f (manager.reset(stepStart, y) && ! lastStep) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,209,/ some events handler has triggered changes that
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,210,"/ invalidate the derivatives, we need to recompute them"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,211,"omputeDerivatives(stepStart, y, yDotK[0]);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,177,// prepare next step
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,178,interpolator.storeTime(stepStart);
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,214,/ make sure step size is set to default before next step
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,215,tepSize = forward ? step : -step;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,180,// stepsize control for next step
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,181,final double  nextT      = stepStart + stepSize;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,182,final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,183,if (nextIsLast) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,184,stepSize = t - stepStart;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,188,} while (!isLastStep);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,24,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,47,** previous time */
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,48,rotected double previousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,46,/** global previous time */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,47,private double globalPreviousTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,50,** current time */
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,51,rotected double currentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,49,/** global current time */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,50,private double globalCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,52,/** soft previous time */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,53,private double softPreviousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,55,/** soft current time */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,56,private double softCurrentTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,90,reviousTime            = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,91,urrentTime             = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,95,globalPreviousTime      = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,96,globalCurrentTime       = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,97,softPreviousTime        = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,98,softCurrentTime         = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,109,reviousTime      = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,110,urrentTime       = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,111,                 = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,112,nterpolatedTime  = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,116,globalPreviousTime = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,117,globalCurrentTime  = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,118,softPreviousTime   = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,119,softCurrentTime    = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,120,h                  = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,121,interpolatedTime   = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,143,reviousTime      = interpolator.previousTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,144,urrentTime       = interpolator.currentTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,145,                 = interpolator.h;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,146,nterpolatedTime  = interpolator.interpolatedTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,152,globalPreviousTime = interpolator.globalPreviousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,153,globalCurrentTime  = interpolator.globalCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,154,softPreviousTime   = interpolator.softPreviousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,155,softCurrentTime    = interpolator.softCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,156,h                  = interpolator.h;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,157,interpolatedTime   = interpolator.interpolatedTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,171,reviousTime      = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,172,urrentTime       = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,173,                 = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,174,nterpolatedTime  = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,182,globalPreviousTime = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,183,globalCurrentTime  = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,184,softPreviousTime   = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,185,softCurrentTime    = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,186,h                  = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,187,interpolatedTime   = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,211,reviousTime = currentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,224,globalPreviousTime = globalCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,225,softPreviousTime   = globalPreviousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,226,softCurrentTime    = globalCurrentTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,219,urrentTime = t;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,220,           = currentTime - previousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,234,globalCurrentTime = t;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,235,softCurrentTime   = globalCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,236,h                 = globalCurrentTime - globalPreviousTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,228,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,244,/** Restrict step range to a limited part of the global step.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,245,* <p>
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,246,* This method can be used to restrict a step and make it appear
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,247,* as if the original step was smaller. Calling this method
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,248,* <em>only</em> changes the value returned by {@link #getPreviousTime()}
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,249,"* and {@link #getCurrentTime()}, it does not change any"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,250,* </p>
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,251,* @param softPreviousTime start of the restricted step
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,252,* @param softCurrentTime end of the restricted step
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,254,"public void setSoftBounds(final double softPreviousTime, final double softCurrentTime) {"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,255,this.softPreviousTime = softPreviousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,256,this.softCurrentTime  = softCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,260,* Get the previous global grid point time.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,261,* @return previous global grid point time
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,263,public double getGlobalPreviousTime() {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,264,return globalPreviousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,268,* Get the current global grid point time.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,269,* @return current global grid point time
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,271,public double getGlobalCurrentTime() {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,272,return globalCurrentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,276,* Get the previous soft grid point time.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,277,* @return previous soft grid point time
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,278,"* @see #setSoftBounds(double, double)"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,230,eturn previousTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,281,return softPreviousTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,233,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,285,* Get the current soft grid point time.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,286,* @return current soft grid point time
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,287,"* @see #setSoftBounds(double, double)"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,235,eturn currentTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,290,return softCurrentTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,273,inal double oneMinusThetaH = currentTime - interpolatedTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,328,final double oneMinusThetaH = globalCurrentTime - interpolatedTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,288,inal double oneMinusThetaH = currentTime - interpolatedTime;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,343,final double oneMinusThetaH = globalCurrentTime - interpolatedTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,379,ut.writeDouble(previousTime);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,380,ut.writeDouble(currentTime);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,434,out.writeDouble(globalPreviousTime);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,435,out.writeDouble(globalCurrentTime);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,436,out.writeDouble(softPreviousTime);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,437,out.writeDouble(softCurrentTime);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,399,hrow MathRuntimeException.createIOException(e);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,456,IOException ioe = new IOException(e.getLocalizedMessage());
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,457,ioe.initCause(e);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,458,throw ioe;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,417,reviousTime  = in.readDouble();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,418,urrentTime   = in.readDouble();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,419,             = in.readDouble();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,420,orward       = in.readBoolean();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,421,irtyState    = true;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,476,globalPreviousTime  = in.readDouble();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,477,globalCurrentTime   = in.readDouble();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,478,softPreviousTime    = in.readDouble();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,479,softCurrentTime     = in.readDouble();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,480,h                   = in.readDouble();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,481,forward             = in.readBoolean();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,482,dirtyState          = true;
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,84,* Get the theoretical events times.
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,85,* @return theoretical events times
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,87,public double[] getTheoreticalEventsTimes() {
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,88,return new double[] {
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,89,"1 * FastMath.PI - a,"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,90,"2 * FastMath.PI - a,"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,91,"3 * FastMath.PI - a,"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,92,"4 * FastMath.PI - a,"
True,src/test/java/org/apache/commons/math/ode/TestProblem4.java,src/test/java/org/apache/commons/math/ode/TestProblem4.java,93,12.0
True,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,162,* Get the theoretical events times.
True,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,163,* @return theoretical events times
True,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,165,public double[] getTheoreticalEventsTimes() {
True,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,166,return new double[0];
False,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,83,"axTimeError = FastMath.max(maxTimeError, FastMath.abs(start - expectedStepStart));"
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,83,// the step should either start at the end of the integrator step
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,84,// or at an event if the step is split into several substeps
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,85,"double stepError = FastMath.max(maxTimeError, FastMath.abs(start - expectedStepStart));"
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,86,for (double eventTime : problem.getTheoreticalEventsTimes()) {
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,87,"stepError = FastMath.min(stepError, FastMath.abs(start - eventTime));"
True,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,src/test/java/org/apache/commons/math/ode/TestProblemHandler.java,89,"maxTimeError = FastMath.max(maxTimeError, stepError);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,149,ssertTrue(integ.getEvaluations() > 160);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,149,assertTrue(integ.getEvaluations() > 150);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,151,ssertTrue(integ.getEvaluations() < 80);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,151,assertTrue(integ.getEvaluations() < 70);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,137,ouble previousError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,137,double previousValueError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,138,double previousTimeError = Double.NaN;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,160,ssertTrue(error < FastMath.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,161,assertTrue(error < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,162,reviousError = error;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,163,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,163,previousValueError = error;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,165,double timeError = handler.getMaximalTimeError();
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,166,if (i > 4) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,167,assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,169,previousTimeError = timeError;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,67,ssertTrue(bos.size () > 700000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,68,ssertTrue(bos.size () < 701000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,67,assertTrue(bos.size () > 753000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java,68,assertTrue(bos.size () < 754000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,220,double convergence = 1.0e-8 * maxStep;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,222,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,223,"Double.POSITIVE_INFINITY, convergence, 1000);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,230,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,231,"ssertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,231,"assertEquals(0, handler.getMaximalTimeError(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java,232,"assertEquals(12.0, handler.getLastTime(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,80,ssertTrue(bos.size () > 119500);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,81,ssertTrue(bos.size () < 120500);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,80,assertTrue(bos.size () > 126000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java,81,assertTrue(bos.size () < 127000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,208,ssertTrue(handler.getLastError() < 8.1e-8);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,208,assertTrue(handler.getLastError() < 1.1e-7);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,229,double convergence = 1.0e-8 * maxStep;
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,231,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,232,"Double.POSITIVE_INFINITY, convergence, 1000);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,239,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,240,"ssertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,240,"assertEquals(0, handler.getMaximalTimeError(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,241,"assertEquals(12.0, handler.getLastTime(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,80,ssertTrue(bos.size () > 86000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,81,ssertTrue(bos.size () < 87000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,80,assertTrue(bos.size () > 88000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java,81,assertTrue(bos.size () < 89000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,63,ouble previousError = Double.NaN;
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,64,or (int i = 4; i < 10; ++i) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,63,double previousValueError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,64,double previousTimeError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,65,for (int i = 4; i < 8; ++i) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,67,ouble step = (pb.getFinalTime() - pb.getInitialTime())
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,68," FastMath.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,68,"double step = (pb.getFinalTime() - pb.getInitialTime()) * FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,84,ouble error = handler.getMaximalValueError();
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,84,double valueError = handler.getMaximalValueError();
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,86,ssertTrue(error < FastMath.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,86,assertTrue(valueError < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,88,reviousError = error;
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,89,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,88,previousValueError = valueError;
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,90,double timeError = handler.getMaximalTimeError();
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,91,if (i > 4) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,92,assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,94,previousTimeError = timeError;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,64,ouble previousError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,64,double previousValueError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,65,double previousTimeError = Double.NaN;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,68,ouble step = (pb.getFinalTime() - pb.getInitialTime())
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,69," FastMath.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,69,"double step = (pb.getFinalTime() - pb.getInitialTime()) * FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,85,ouble error = handler.getMaximalValueError();
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,85,double valueError = handler.getMaximalValueError();
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,87,ssertTrue(error < FastMath.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,87,assertTrue(valueError < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,89,reviousError = error;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,90,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,89,previousValueError = valueError;
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,91,double timeError = handler.getMaximalTimeError();
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,92,if (i > 5) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,93,assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,95,previousTimeError = timeError;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,68,ssertTrue(bos.size () > 700000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,69,ssertTrue(bos.size () < 701000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,68,assertTrue(bos.size () > 753000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolatorTest.java,69,assertTrue(bos.size () < 754000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,116,ssertTrue(handler.getLastError() < 9.0e-10);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,117,ssertTrue(handler.getMaximalValueError() < 9.0e-10);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,116,assertTrue(handler.getLastError() < 7.5e-9);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,117,assertTrue(handler.getMaximalValueError() < 8.1e-9);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,213,double convergence = 1.0e-8 * maxStep;
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,214,"nteg.addEventHandler(functions[l],"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,215,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,215,"integ.addEventHandler(functions[l], Double.POSITIVE_INFINITY, convergence, 1000);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,223,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,224,"ssertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,223,"assertEquals(0, handler.getMaximalTimeError(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java,224,"assertEquals(12.0, handler.getLastTime(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,82,ssertTrue(bos.size () > 33000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,83,ssertTrue(bos.size () < 34000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,82,assertTrue(bos.size () > 34000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java,83,assertTrue(bos.size () < 35000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,35,mport org.apache.commons.math.ode.sampling.StepHandler;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,36,mport org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,177,double convergence = 1.0e-8 * maxStep;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,181,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,180,"Double.POSITIVE_INFINITY, convergence, 1000);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,189,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,190,"ssertEquals(12.0, handler.getLastTime(), 1.0e-8 * maxStep);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,188,"assertEquals(0, handler.getMaximalTimeError(), convergence);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,189,"assertEquals(12.0, handler.getLastTime(), convergence);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,346,nteg.addStepHandler(new KeplerHandler(pb));
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,345,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,346,integ.addStepHandler(handler);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,350,"assertEquals(0.0, handler.getMaximalValueError(), 1.5e-4);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,353,rivate static class KeplerHandler implements StepHandler {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,354,ublic KeplerHandler(TestProblem3 pb) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,355,his.pb = pb;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,356,bSteps = 0;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,357,axError = 0;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,359,ublic boolean requiresDenseOutput() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,360,eturn false;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,362,ublic void reset() {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,363,bSteps = 0;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,364,axError = 0;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,366,"ublic void handleStep(StepInterpolator interpolator,"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,367,oolean isLast) throws MathUserException {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,369,+nbSteps;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,370,ouble[] interpolatedY = interpolator.getInterpolatedState();
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,371,ouble[] theoreticalY  = pb.computeTheoreticalState(interpolator.getCurrentTime());
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,372,ouble dx = interpolatedY[0] - theoreticalY[0];
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,373,ouble dy = interpolatedY[1] - theoreticalY[1];
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,374,ouble error = dx * dx + dy * dy;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,375,f (error > maxError) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,376,axError = error;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,378,f (isLast) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,379,ssertTrue(maxError < 4.2e-11);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,380,ssertTrue(nbSteps < 670);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,383,rivate TestProblem3 pb;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,384,rivate int nbSteps;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,385,rivate double maxError;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,80,ssertTrue(bos.size () > 158000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,81,ssertTrue(bos.size () < 159000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,80,assertTrue(bos.size () > 167000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java,81,assertTrue(bos.size () < 168000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,63,ouble previousError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,63,double previousValueError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,64,double previousTimeError = Double.NaN;
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,67,ouble step = (pb.getFinalTime() - pb.getInitialTime())
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,68," FastMath.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,68,"double step = (pb.getFinalTime() - pb.getInitialTime()) * FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,84,ouble error = handler.getMaximalValueError();
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,84,double valueError = handler.getMaximalValueError();
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,86,ssertTrue(error < FastMath.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,86,assertTrue(valueError < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,88,reviousError = error;
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,89,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,88,previousValueError = valueError;
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,90,double timeError = handler.getMaximalTimeError();
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,91,if (i > 4) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,92,assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,94,previousTimeError = timeError;
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,68,ssertTrue(bos.size () > 98000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,69,ssertTrue(bos.size () < 99000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,68,assertTrue(bos.size () > 114000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolatorTest.java,69,assertTrue(bos.size () < 115000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,64,ouble previousError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,64,double previousValueError = Double.NaN;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,65,double previousTimeError = Double.NaN;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,68,ouble step = (pb.getFinalTime() - pb.getInitialTime())
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,69," FastMath.pow(2.0, -i);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,69,"double step = (pb.getFinalTime() - pb.getInitialTime()) * FastMath.pow(2.0, -i);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,87,ssertTrue(error < FastMath.abs(previousError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,87,assertTrue(error < FastMath.abs(previousValueError));
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,89,reviousError = error;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,90,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,89,previousValueError = error;
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,91,double timeError = handler.getMaximalTimeError();
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,92,if (i > 4) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,93,assertTrue(timeError <= FastMath.abs(previousTimeError));
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,95,previousTimeError = timeError;
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,67,ssertTrue(bos.size () > 700000);
False,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,68,ssertTrue(bos.size () < 701000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,67,assertTrue(bos.size () > 753000);
True,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java,68,assertTrue(bos.size () < 754000);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,94,ssertTrue(bos.size () > 150);
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,95,ssertTrue(bos.size () < 250);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,94,assertTrue(bos.size () > 200);
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,95,assertTrue(bos.size () < 300);
False,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,44,"tepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 7e-10);"
True,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,44,"StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 5e-9);"
False,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,65,ssertTrue(bos.size () >  20000);
False,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,66,ssertTrue(bos.size () <  25000);
True,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,65,assertTrue(bos.size () >  25500);
True,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,66,assertTrue(bos.size () <  26500);

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,65, @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:22 $
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,65,* @version $Revision: 1.4 $ $Date: 2003/11/15 18:52:31 $
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,110,"multiply(new Complex(2.0, 0.0));"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,111,".divide(new Complex(2.0, 0.0));"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,222,ouble s = (b > 0.0 ? 1.0 : (b < 0.0 ? -1.0 : 0.0));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,223,"eturn new Complex(Math.abs(z.getImaginary()) / (2.0 * t), s * t);"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,223,"return new Complex(Math.abs(z.getImaginary()) / (2.0 * t),"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,224,MathUtils.sign(b) * t);
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,247,"eturn new Complex(Math.sin(a2) / d, MathUtils.sinh(b2) / 2);"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,248,"return new Complex(Math.sin(a2) / d, MathUtils.sinh(b2) / d);"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,262,"eturn new Complex(MathUtils.sinh(a2) / d, Math.sin(b2) / 2);"
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,263,"return new Complex(MathUtils.sinh(a2) / d, Math.sin(b2) / d);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,61,import org.apache.commons.math.stat.univariate.rank.Percentile;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,70, @version $Revision: 1.21 $ $Date: 2003/11/14 22:22:18 $
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,71,* @version $Revision: 1.22 $ $Date: 2003/11/15 18:52:31 $
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,74,** sum */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,75,rivate static UnivariateStatistic sum = new Sum();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,77,** sumSq */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,78,rivate static UnivariateStatistic sumSq = new SumOfSquares();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,80,** prod */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,81,rivate static UnivariateStatistic prod = new Product();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,83,** sumLog */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,84,rivate static UnivariateStatistic sumLog = new SumOfLogs();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,86,** min */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,87,rivate static UnivariateStatistic min = new Min();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,89,** max */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,90,rivate static UnivariateStatistic max = new Max();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,92,** mean */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,93,rivate static UnivariateStatistic mean = new Mean();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,95,** variance */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,96,rivate static UnivariateStatistic variance = new Variance();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,75,/** sum */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,76,private static UnivariateStatistic sum = new Sum();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,78,/** sumSq */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,79,private static UnivariateStatistic sumSq = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,81,/** prod */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,82,private static UnivariateStatistic prod = new Product();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,84,/** sumLog */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,85,private static UnivariateStatistic sumLog = new SumOfLogs();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,87,/** min */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,88,private static UnivariateStatistic min = new Min();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,90,/** max */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,91,private static UnivariateStatistic max = new Max();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,93,/** mean */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,94,private static UnivariateStatistic mean = new Mean();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,96,/** variance */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,97,private static UnivariateStatistic variance = new Variance();
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,99,/** variance */
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,100,private static Percentile percentile = new Percentile();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,110,eturn sum.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,114,return sum.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,133,eturn sumSq.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,137,return sumSq.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,179,eturn sumLog.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,183,return sumLog.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,193,"eturn sumLog.evaluate(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,197,"return sumLog.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,203,eturn mean.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,207,return mean.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,235,eturn variance.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,239,return variance.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,266,eturn max.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,270,return max.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,289,eturn min.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,293,return min.evaluate(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,311,* Returns an estimate for the pth percentile of the stored values.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,312,* This estimate follows the interpolation-adjusted defintion presented
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,313,"* <a href=""http://www.utdallas.edu/~ammann/stat5311/node8.html"">here</a>"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,314,* <p/>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,315,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,316,* <li><code>0 &lt; p &lt; 100</code> (otherwise an
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,317,* <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,318,* <li>at least one value must be stored (returns <code>Double.NaN
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,319,*     </code> otherwise)</li>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,320,* </ul>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,322,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,323,* @param p the requested percentile (scaled from 0 - 100)
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,324,* @return An estimate for the pth percentile of the data values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,326,"public static double percentile(final double[] values, final double p) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,327,"return percentile.evaluate(values,p);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,331,* Returns an estimate for the pth percentile of the stored values.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,332,* This estimate follows the interpolation-adjusted defintion presented
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,333,"* <a href=""http://www.utdallas.edu/~ammann/stat5311/node8.html"">here</a>"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,334,* <p/>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,335,* <strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,336,* <li><code>0 &lt; p &lt; 100</code> (otherwise an
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,337,* <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,338,* <li>at least one value must be stored (returns <code>Double.NaN
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,339,*     </code> otherwise)</li>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,340,* </ul>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,342,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,343,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,344,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,345,* @param p the requested percentile (scaled from 0 - 100)
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,346,* @return An estimate for the pth percentile of the data values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,348,public static double percentile(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,349,"final double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,350,"final int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,351,"final int length,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,352,final double p) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,353,"return percentile.evaluate(values, begin, length, p);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,57,import org.apache.commons.math.complex.Complex;
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,60, @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,62,* @version $Revision: 1.7 $ $Date: 2003/11/15 18:52:31 $
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,84,"public static void assertEquals(Complex expected, Complex actual, double delta) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,85,"assertEquals(expected.getReal(), actual.getReal(), delta);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,86,"assertEquals(expected.getImaginary(), actual.getImaginary(), delta);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,5,* reserved.
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,9,* are met:
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,55,package org.apache.commons.math.complex;
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,57,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,62,* @version $Revision: 1.1 $ $Date: 2003/11/15 18:52:31 $
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,64,public class ComplexMathTest extends TestCase {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,66,public void testAcos() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,67,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,68,"Complex expected = new Complex(0.936812, -2.30551);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,69,"TestUtils.assertEquals(expected, ComplexMath.acos(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,72,public void testAcosNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,73,assertTrue(ComplexMath.acos(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,76,public void testAsin() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,77,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,78,"Complex expected = new Complex(0.633984, 2.30551);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,79,"TestUtils.assertEquals(expected, ComplexMath.asin(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,82,public void testAsinNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,83,assertTrue(ComplexMath.asin(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,86,public void testAtan() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,87,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,88,"Complex expected = new Complex(1.44831, 0.158997);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,89,"TestUtils.assertEquals(expected, ComplexMath.atan(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,92,public void testAtanNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,93,assertTrue(ComplexMath.atan(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,96,public void testCos() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,97,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,98,"Complex expected = new Complex(-27.03495, -3.851153);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,99,"TestUtils.assertEquals(expected, ComplexMath.cos(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,102,public void testCosh() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,103,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,104,"Complex expected = new Complex(-6.58066, -7.58155);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,105,"TestUtils.assertEquals(expected, ComplexMath.cosh(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,108,public void testCoshNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,109,assertTrue(ComplexMath.cosh(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,112,public void testCosNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,113,assertTrue(ComplexMath.cos(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,116,public void testExp() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,117,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,118,"Complex expected = new Complex(-13.12878, -15.20078);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,119,"TestUtils.assertEquals(expected, ComplexMath.exp(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,122,public void testExpNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,123,assertTrue(ComplexMath.exp(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,126,public void testLog() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,127,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,128,"Complex expected = new Complex(1.60944, 0.927295);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,129,"TestUtils.assertEquals(expected, ComplexMath.log(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,132,public void testLogNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,133,assertTrue(ComplexMath.log(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,136,public void testPow() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,137,"Complex x = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,138,"Complex y = new Complex(5, 6);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,139,"Complex expected = new Complex(-1.860893, 11.83677);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,140,"TestUtils.assertEquals(expected, ComplexMath.pow(x, y), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,143,public void testPowNaNBase() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,144,"Complex x = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,145,"assertTrue(ComplexMath.pow(Complex.NaN, x).isNaN());"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,148,public void testPowNaNExponent() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,149,"Complex x = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,150,"assertTrue(ComplexMath.pow(x, Complex.NaN).isNaN());"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,153,public void testSin() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,154,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,155,"Complex expected = new Complex(3.853738, -27.01681);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,156,"TestUtils.assertEquals(expected, ComplexMath.sin(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,159,public void testSinh() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,160,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,161,"Complex expected = new Complex(-6.54812, -7.61923);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,162,"TestUtils.assertEquals(expected, ComplexMath.sinh(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,165,public void testSinhNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,166,assertTrue(ComplexMath.sinh(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,169,public void testSinNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,170,assertTrue(ComplexMath.sin(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,173,public void testSqrtRealPositive() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,174,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,175,"Complex expected = new Complex(2, 1);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,176,"TestUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,179,public void testSqrtRealZero() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,180,"Complex z = new Complex(0.0, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,181,"Complex expected = new Complex(1.41421, 1.41421);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,182,"TestUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,185,public void testSqrtRealNegative() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,186,"Complex z = new Complex(-3.0, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,187,"Complex expected = new Complex(1, 2);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,188,"TestUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,191,public void testSqrtImaginaryZero() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,192,"Complex z = new Complex(-3.0, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,193,"Complex expected = new Complex(0.0, 1.73205);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,194,"TestUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,197,public void testSqrtImaginaryNegative() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,198,"Complex z = new Complex(-3.0, -4.0);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,199,"Complex expected = new Complex(1.0, -2.0);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,200,"TestUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,203,public void testSqrt1z() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,204,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,205,"Complex expected = new Complex(4.08033, -2.94094);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,206,"TestUtils.assertEquals(expected, ComplexMath.sqrt1z(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,209,public void testSqrt1zNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,210,assertTrue(ComplexMath.sqrt1z(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,213,public void testSqrtNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,214,assertTrue(ComplexMath.sqrt(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,217,public void testTan() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,218,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,219,"Complex expected = new Complex(-0.000187346, 0.999356);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,220,"TestUtils.assertEquals(expected, ComplexMath.tan(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,223,public void testTanh() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,224,"Complex z = new Complex(3, 4);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,225,"Complex expected = new Complex(1.00071, 0.00490826);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,226,"TestUtils.assertEquals(expected, ComplexMath.tanh(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,229,public void testTanhNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,230,assertTrue(ComplexMath.tanh(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,233,public void testTanNaN() {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexMathTest.java,234,assertTrue(ComplexMath.tan(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,62, @version $Revision: 1.3 $ $Date: 2003/11/14 22:22:24 $
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,62,* @version $Revision: 1.4 $ $Date: 2003/11/15 18:52:31 $
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,88,public void testAbsNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,89,assertTrue(Double.isNaN(Complex.NaN.abs()));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,172,public void testEqualsNull() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,173,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,174,assertFalse(x.equals(null));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,177,public void testEqualsClass() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,178,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,179,assertFalse(x.equals(this));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,182,public void testEqualsSame() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,183,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,184,assertTrue(x.equals(x));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,187,public void testEqualsTrue() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,188,"Complex x = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,189,"Complex y = new Complex(3.0, 4.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,190,assertTrue(x.equals(y));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,193,public void testEqualsRealDifference() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,194,"Complex x = new Complex(0.0, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,195,"Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,196,assertFalse(x.equals(y));
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,199,public void testEqualsImaginaryDifference() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,200,"Complex x = new Complex(0.0, 0.0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,201,"Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,202,assertFalse(x.equals(y));
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,56,import org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,63, @version $Revision: 1.6 $ $Date: 2003/11/14 22:22:23 $
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,65,* @version $Revision: 1.7 $ $Date: 2003/11/15 18:52:31 $
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,355,public void testCosh() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,356,double x = 3.0;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,357,double expected = 10.06766;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,358,"assertEquals(expected, MathUtils.cosh(x), 1.0e-5);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,361,public void testSinh() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,362,double x = 3.0;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,363,double expected = 10.01787;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,364,"assertEquals(expected, MathUtils.sinh(x), 1.0e-5);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,367,public void testCoshNaN() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,368,assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,371,public void testSinhNaN() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,372,assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));

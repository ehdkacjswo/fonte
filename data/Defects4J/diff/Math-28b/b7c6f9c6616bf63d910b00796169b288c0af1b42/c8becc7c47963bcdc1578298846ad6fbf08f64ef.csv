is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,21,mport org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,22,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,25, Base class for probability distributions.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,27, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,29,ublic abstract class AbstractDistribution
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,30,"mplements Distribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,32,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,33,rivate static final long serialVersionUID = -38038050983108802L;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,35,** Cached numerical mean */
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,36,rivate double numericalMean = Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,38,** Whether or not the numerical mean has been calculated */
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,39,rivate boolean numericalMeanIsCalculated = false;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,41,** Cached numerical variance */
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,42,rivate double numericalVariance = Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,44,** Whether or not the numerical variance has been calculated */
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,45,rivate boolean numericalVarianceIsCalculated = false;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,48, Default constructor.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,50,rotected AbstractDistribution() {
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,51,uper();
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,55, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,57, The default implementation uses the identity
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,58, <p>{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</p>
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,60,"ublic double cumulativeProbability(double x0, double x1) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,61,f (x0 > x1) {
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,62,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,63,"0, x1, true);"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,65,eturn cumulativeProbability(x1) - cumulativeProbability(x0);
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,69, Use this method to actually calculate the mean for the
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,70, specific distribution. Use {@link #getNumericalMean()}
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,71, (which implements caching) to actually get the mean.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,73, @return the mean or Double.NaN if it's not defined
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,75,rotected abstract double calculateNumericalMean();
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,78, Use this method to get the numerical value of the mean of this
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,79, distribution.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,81, @return the mean or Double.NaN if it's not defined
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,83,ublic double getNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,84,f (!numericalMeanIsCalculated) {
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,85,umericalMean = calculateNumericalMean();
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,86,umericalMeanIsCalculated = true;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,89,eturn numericalMean;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,93, Use this method to actually calculate the variance for the
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,94, specific distribution.  Use {@link #getNumericalVariance()}
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,95, (which implements caching) to actually get the variance.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,97, @return the variance or Double.NaN if it's not defined
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,99,rotected abstract double calculateNumericalVariance();
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,102, Use this method to get the numerical value of the variance of this
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,103, distribution.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,105, @return the variance (possibly Double.POSITIVE_INFINITY as
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,106, for certain cases in {@link TDistribution}) or
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,107, Double.NaN if it's not defined
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,109,ublic double getNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,110,f (!numericalVarianceIsCalculated) {
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,111,umericalVariance = calculateNumericalVariance();
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,112,umericalVarianceIsCalculated = true;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,115,eturn numericalVariance;
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,119, Use this method to get information about whether the lower bound
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,120, of the support is inclusive or not.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,122, @return whether the lower bound of the support is inclusive or not
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,124,ublic abstract boolean isSupportLowerBoundInclusive();
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,127, Use this method to get information about whether the upper bound
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,128, of the support is inclusive or not.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,130, @return whether the upper bound of the support is inclusive or not
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,132,ublic abstract boolean isSupportUpperBoundInclusive();
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,135," Use this method to get information about whether the support is connected,"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,136, i.e. whether all values between the lower and upper bound of the support
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,137, is included in the support.
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,139," For {@link AbstractIntegerDistribution} the support is discrete, so"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,140," if this is true, then the support is"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,141," {lower bound, lower bound + 1, ..., upper bound}."
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,143," For {@link AbstractContinuousDistribution} the support is continuous, so"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,144," if this is true, then the support is the interval"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,145," [lower bound, upper bound]"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,146, where the limits are inclusive or not according to
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,147, {@link #isSupportLowerBoundInclusive()} and {@link #isSupportUpperBoundInclusive()}
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,148," (in the example both are true). If both are false, then the support is the interval"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,149," (lower bound, upper bound)"
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,151, @return whether the support limits given by subclassed methods are connected or not
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,153,ublic boolean isSupportConnected() {
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,154,eturn true;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,27,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,37,ublic abstract class AbstractIntegerDistribution extends AbstractDistribution
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,38,"mplements IntegerDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,39,** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,35,public abstract class AbstractIntegerDistribution
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,36,"implements IntegerDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,37,/** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,43, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,48, Default constructor.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,45,/** Default constructor. */
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,53, For a random variable {@code X} whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,54," to this distribution, this method returns {@code P(X <= x)}.  In other"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,55," words, this method represents the (cumulative) distribution function,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,56," or CDF, for this distribution."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,57," If {@code x} does not represent an integer value, the CDF is"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,58, evaluated at the greatest integer less than {@code x}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,60, @param x Value at which the distribution function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,61, @return the cumulative probability that a random variable with this
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,62, distribution takes a value less than or equal to {@code x}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,64,ublic double cumulativeProbability(double x) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,65,eturn cumulativeProbability((int) FastMath.floor(x));
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,69, For a random variable {@code X} whose values are distributed
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,70," according to this distribution, this method returns"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,71, {@code P(x0 <= X <= x1)}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,73, @param x0 Inclusive lower bound.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,74, @param x1 Inclusive upper bound.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,75, @return the probability that a random variable with this distribution
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,76," will take a value between {@code x0} and {@code x1},"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,77, including the endpoints.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,78, @throws NumberIsTooSmallException if {@code x1 > x0}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,80,Override
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,81,"ublic double cumulativeProbability(double x0, double x1) {"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,82,f (x1 < x0) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,83,"hrow new NumberIsTooSmallException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,84,"1, x0, true);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,86,f (FastMath.floor(x0) < x0) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,87,"eturn cumulativeProbability(((int) FastMath.floor(x0)) + 1,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,88,int) FastMath.floor(x1)); // don't want to count mass below x0
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,89," else { // x0 is mathematical integer, so use as is"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,90,"eturn cumulativeProbability((int) FastMath.floor(x0),"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,91,int) FastMath.floor(x1));
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,96, For a random variable {@code X} whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,97," to this distribution, this method returns {@code P(X <= x)}. In other"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,98," words, this method represents the probability distribution function,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,99," or PDF, for this distribution."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,101, @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,102, @return PDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,104,ublic abstract double cumulativeProbability(int x);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,107, For a random variable {@code X} whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,108," to this distribution, this method returns {@code P(X = x)}. In other"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,109," words, this method represents the probability mass function, or PMF,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,110, for the distribution.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,111," If {@code x} does not represent an integer value, 0 is returned."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,113, @param x Value at which the probability density function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,114, @return the value of the probability density function at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,116,ublic double probability(double x) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,117,ouble fl = FastMath.floor(x);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,118,f (fl == x) {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,119,eturn this.probability((int) x);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,120, else {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,121,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,126, For a random variable {@code X} whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,127," to this distribution, this method returns {@code P(x0 < X < x1)}."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,129, @param x0 Inclusive lower bound.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,130, @param x1 Inclusive upper bound.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,131, @return the cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,132, @throws NumberIsTooSmallException {@code if x0 > x1}.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,49,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,51,* The default implementation uses the identity
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,52,* <p>{@code P(x0 <= X <= x1) = P(X <= x1) - P(X <= x0 - 1)}</p>
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,136,"hrow new NumberIsTooSmallException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,137,"1, x0, true);"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,56,throw new NumberIsTooSmallException(
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,57,"LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,58,"x1, x0, true);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,143, For a random variable {@code X} whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,144," to this distribution, this method returns the largest {@code x}, such"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,145, that {@code P(X <= x) <= p}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,147, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,148, @return the largest {@code x} such that {@code P(X < x) <= p}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,149, @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,63,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,198, {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,111,"* Access the domain value lower bound, based on {@code p}, used to"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,112,* bracket a CDF root. This method is used by
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,113,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,115,* @param p the desired probability for the critical value ({@code 0 < p < 1})
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,116,"* @return a domain value lower bound, i.e. a value {@code x} such that"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,117,* {@code P(X <= x) < p}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,119,protected abstract int getDomainLowerBound(double p);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,122,"* Access the domain value upper bound, based on {@code p}, used to"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,123,* bracket a CDF root. This method is used by
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,124,* {@link #inverseCumulativeProbability(double)} to find critical values.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,126,* @param p the desired probability for the critical value ({@code 0 < p < 1})
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,127,"* @return a domain value upper bound, i.e. a value {@code x} such that"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,128,* {@code P(X <= x) >= p}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,130,protected abstract int getDomainUpperBound(double p);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,132,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,205, Generates a random value sampled from this distribution. The default
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,206, implementation uses the
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,138,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,140,* The default implementation uses the
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,208,  inversion method.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,209, </a>
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,211, @return a random value.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,212, @since 2.2
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,142,* inversion method</a>.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,219, Generates a random sample from the distribution.  The default
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,220, implementation generates the sample by calling {@link #sample()}
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,221, in a loop.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,223, @param sampleSize number of random values to generate.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,224, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,225, @return an array representing the random sample.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,226, @throws NotStrictlyPositiveException if {@code sampleSize <= 0}.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,149,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,151,* The default implementation generates the sample by calling
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,152,* {@link #sample()} in a loop.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,230,"hrow new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,231,ampleSize);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,156,throw new NotStrictlyPositiveException(
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,157,"LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,241, Computes the cumulative probability function and checks for NaN
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,242, values returned.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,243, Throws MathInternalError if the value is NaN. Rethrows any Exception encountered
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,244, evaluating the cumulative probability function. Throws
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,245, MathInternalError if the cumulative probability function returns NaN.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,167,* Computes the cumulative probability function and checks for {@code NaN}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,168,* values returned. Throws {@code MathInternalError} if the value is
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,169,* {@code NaN}. Rethrows any exception encountered evaluating the cumulative
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,170,* probability function. Throws {@code MathInternalError} if the cumulative
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,171,* probability function returns {@code NaN}.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,247, @param argument Input value.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,248, @return the cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,249, @throws MathInternalError if the cumulative probability is NaN
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,173,* @param argument input value
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,174,* @return the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,175,* @throws MathInternalError if the cumulative probability is {@code NaN}
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,254,esult = cumulativeProbability(argument);
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,180,result = cumulativeProbability(argument);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,256,hrow new MathInternalError(
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,257,"ocalizedFormats.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, argument);"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,182,throw new MathInternalError(LocalizedFormats
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,183,".DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, argument);"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,263," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,264, bracket a PDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,265, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,267, @param p Desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,268," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,270,rotected abstract int getDomainLowerBound(double p);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,273," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,274, bracket a PDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,275, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,277, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,278," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,280,rotected abstract int getDomainUpperBound(double p);
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,283, Access the lower bound of the support.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,285, @return lower bound of the support (Integer.MIN_VALUE for negative infinity)
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,287,ublic abstract int getSupportLowerBound();
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,290, Access the upper bound of the support.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,292, @return upper bound of the support (Integer.MAX_VALUE for positive infinity)
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,294,ublic abstract int getSupportUpperBound();
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,297, Use this method to get information about whether the lower bound
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,298," of the support is inclusive or not. For discrete support,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,299, only true here is meaningful.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,301, @return true (always but at Integer.MIN_VALUE because of the nature of discrete support)
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,303,Override
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,304,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,305,eturn true;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,309, Use this method to get information about whether the upper bound
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,310," of the support is inclusive or not. For discrete support,"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,311, only true here is meaningful.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,313, @return true (always but at Integer.MAX_VALUE because of the nature of discrete support)
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,315,Override
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,316,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,317,eturn true;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,25,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,27,mport org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,32, Base class for continuous distributions.  Default implementations are
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,33, provided for some of the methods that do not vary from distribution to
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,34, distribution.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,32,* Base class for probability distributions on the reals.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,33,* Default implementations are provided for some of the methods
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,34,* that do not vary from distribution to distribution.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,37,* @since 3.0
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,38,ublic abstract class AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,39,xtends AbstractDistribution
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,40,"mplements ContinuousDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,39,public abstract class AbstractRealDistribution
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,40,"implements RealDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,41,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,42,private static final long serialVersionUID = -38038050983108802L;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,44,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,45,rivate static final long serialVersionUID = -38038050983108802L;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,47, RandomData instance used to generate samples from the distribution
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,48, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,50,rotected final RandomDataImpl randomData = new RandomDataImpl();
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,52, Solver absolute accuracy for inverse cumulative computation.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,53, @since 2.1
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,47,/** Solver absolute accuracy for inverse cumulative computation */
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,57, Default constructor.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,59,rotected AbstractContinuousDistribution() {}
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,50,/** RandomData instance used to generate samples from the distribution. */
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,51,protected final RandomDataImpl randomData = new RandomDataImpl();
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,53,/** Default constructor. */
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,54,protected AbstractRealDistribution() {}
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,64, For continuous distributions {@code P(X = x)} always evaluates to 0.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,66, @return 0
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,59,* The default implementation uses the identity
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,60,* <p>{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</p>
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,68,ublic final double probability(double x) {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,69,eturn 0.0;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,62,"public double cumulativeProbability(double x0, double x1) throws NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,63,if (x0 > x1) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,64,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,65,"x0, x1, true);"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,67,return cumulativeProbability(x1) - cumulativeProbability(x0);
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,73, {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,70,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,123, Reseed the random generator used to generate samples.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,125, @param seed New seed.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,126, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,128,ublic void reseedRandomGenerator(long seed) {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,129,andomData.reSeed(seed);
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,133, Generate a random value sampled from this distribution. The default
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,134, implementation uses the
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,135," <a href=""http://en.wikipedia.org/wiki/Inverse_transform_sampling"">"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,136,  inversion method.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,137, </a>
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,139, @return a random value.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,140, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,142,ublic double sample() {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,143,eturn randomData.nextInversionDeviate(this);
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,147, Generate a random sample from the distribution.  The default implementation
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,148, generates the sample by calling {@link #sample()} in a loop.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,150, @param sampleSize Number of random values to generate.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,151, @return an array representing the random sample.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,152, @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,153, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,155,ublic double[] sample(int sampleSize) {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,156,f (sampleSize <= 0) {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,157,"hrow new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,158,ampleSize);
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,160,ouble[] out = new double[sampleSize];
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,161,or (int i = 0; i < sampleSize; i++) {
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,162,ut[i] = sample();
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,164,eturn out;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,125,* TODO to be deleted when applying MATH-699
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,136,* TODO to be deleted when applying MATH-699
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,147,* TODO to be deleted when applying MATH-699
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,203, @since 2.1
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,162,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,163,public void reseedRandomGenerator(long seed) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,164,randomData.reSeed(seed);
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,210, Access the lower bound of the support.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,212, @return lower bound of the support (might be Double.NEGATIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,168,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,170,* The default implementation uses the
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,171,"* <a href=""http://en.wikipedia.org/wiki/Inverse_transform_sampling"">"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,172,* inversion method.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,173,* </a>
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,214,ublic abstract double getSupportLowerBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,175,public double sample() {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,176,return randomData.nextInversionDeviate(this);
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,217, Access the upper bound of the support.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,219, @return upper bound of the support (might be Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,180,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,182,* The default implementation generates the sample by calling
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,183,* {@link #sample()} in a loop.
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,221,ublic abstract double getSupportUpperBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,185,public double[] sample(int sampleSize) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,186,if (sampleSize <= 0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,187,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,188,sampleSize);
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,190,double[] out = new double[sampleSize];
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,191,for (int i = 0; i < sampleSize; i++) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,192,out[i] = sample();
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,194,return out;
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,32,ublic class BetaDistribution extends AbstractContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,32,public class BetaDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,104,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,106,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,108,* @return 0
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,110,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,111,return 0.0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,181, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,183, @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,192,* For first shape parameter {@code alpha} and second shape parameter
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,193,"* {@code beta}, the mean is {@code alpha / (alpha + beta)}."
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,185,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,186,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,187,eturn 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,195,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,196,final double a = getAlpha();
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,197,return a / (a + getBeta());
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,193, The upper bound of the support is always 1 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,195, @return upper bound of the support (always 1)
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,203,* For first shape parameter {@code alpha} and second shape parameter
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,204,"* {@code beta}, the variance is"
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,205,* {@code (alpha * beta) / [(alpha + beta)^2 * (alpha + beta + 1)]}.
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,197,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,198,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,199,eturn 1;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,207,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,208,final double a = getAlpha();
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,209,final double b = getBeta();
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,210,final double alphabetasum = a + b;
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,211,return (a * b) / ((alphabetasum * alphabetasum) * (alphabetasum + 1));
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,205," For first shape parameter {@code alpha} and second shape parameter {@code beta}, the"
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,206, mean is {@code alpha / (alpha + beta)}.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,217,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,219,* @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,208,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,209,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,210,inal double a = getAlpha();
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,211,eturn a / (a + getBeta());
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,221,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,222,return 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,217, For first shape parameter {@code alpha} and second shape parameter
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,218," {@code beta}, the variance is"
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,219, {@code (alpha * beta) / [(alpha + beta)^2 * (alpha + beta + 1)]}.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,228,* The upper bound of the support is always 1 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,230,* @return upper bound of the support (always 1)
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,221,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,222,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,223,inal double a = getAlpha();
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,224,inal double b = getBeta();
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,225,inal double alphabetasum = a + b;
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,226,eturn (a * b) / ((alphabetasum * alphabetasum) * (alphabetasum + 1));
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,232,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,233,return 1;
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,230,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,236,Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,247,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,249,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,251,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,253,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,254,return true;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,34,ublic class BinomialDistribution extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,35,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,32,public class BinomialDistribution extends AbstractIntegerDistribution {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,84,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,85,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,86,eturn -1;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,89,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,90,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,91,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,92,eturn numberOfTrials;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,81,public double probability(int x) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,82,double ret;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,83,if (x < 0 || x > numberOfTrials) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,84,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,85,} else {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,86,"ret = FastMath.exp(SaddlePointExpansion.logBinomialProbability(x,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,87,"numberOfTrials, probabilityOfSuccess,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,88,1.0 - probabilityOfSuccess));
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,90,return ret;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,96,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,110,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,111,ublic double probability(int x) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,112,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,113,f (x < 0 || x > numberOfTrials) {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,114,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,115, else {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,116,"et = FastMath.exp(SaddlePointExpansion.logBinomialProbability(x,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,117,"umberOfTrials, probabilityOfSuccess,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,118,.0 - probabilityOfSuccess));
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,120,eturn ret;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,127,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,128,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,129,protected int getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,130,return -1;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,133,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,134,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,135,protected int getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,136,return numberOfTrials;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,140,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,142,"* For {@code n} trials and probability parameter {@code p}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,143,* {@code n * p}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,145,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,146,return getNumberOfTrials() * getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,150,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,152,"* For {@code n} trials and probability parameter {@code p}, the variance is"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,153,* {@code n * p * (1 - p)}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,155,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,156,final double p = getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,157,return getNumberOfTrials() * p * (1 - p);
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,151,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,163,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,171," For {@code n} trials and probability parameter {@code p}, the mean is"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,172, {@code n * p}.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,174,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,175,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,176,eturn getNumberOfTrials() * getProbabilityOfSuccess();
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,180, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,182," For {@code n} trials and probability parameter {@code p}, the variance is"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,183, {@code n * p * (1 - p)}.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,186,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,188,* @return {@code true}
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,185,Override
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,186,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,187,inal double p = getProbabilityOfSuccess();
False,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,188,eturn getNumberOfTrials() * p * (1 - p);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,190,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/main/java/org/apache/commons/math/distribution/BinomialDistribution.java,191,return true;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,35,ublic class CauchyDistribution extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,36,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,32,public class CauchyDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,110,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,112,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,114,* @return 0
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,116,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,117,return 0.0;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,193, The lower bound of the support is always negative infinity no matter
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,194, the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,200,* The mean is always undefined no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,196, @return lower bound of the support (always Double.NEGATIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,202,* @return mean (always Double.NaN)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,198,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,199,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,200,eturn Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,204,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,205,return Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,206, The upper bound of the support is always positive infinity no matter
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,207, the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,211,* The variance is always undefined no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,209, @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,213,* @return variance (always Double.NaN)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,211,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,212,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,213,eturn Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,215,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,216,return Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,219, The mean is always undefined no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,222,* The lower bound of the support is always negative infinity no matter
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,223,* the parameters.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,221, @return mean (always Double.NaN)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,225,* @return lower bound of the support (always Double.NEGATIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,223,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,224,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,225,eturn Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,227,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,228,return Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,231, The variance is always undefined no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,234,* The upper bound of the support is always positive infinity no matter
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,235,* the parameters.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,233, @return variance (always Double.NaN)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,237,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,235,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,236,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,237,eturn Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,239,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,240,return Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,241,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,247,Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,254,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,256,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,258,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,260,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,261,return true;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23, Implementation of the chi-squared distribution.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,25," @see <a href=""http://en.wikipedia.org/wiki/Chi-squared_distribution"">Chi-squared distribution (Wikipedia)</a>"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,26," @see <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">Chi-squared Distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,27, @version $Id: ChiSquaredDistribution.java 1206060 2011-11-25 05:16:56Z celestin $
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,29,ublic class ChiSquaredDistribution
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,30,xtends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,31,mplements Serializable {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,33, Default inverse cumulative probability accuracy
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,34, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,36,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,37,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,38,rivate static final long serialVersionUID = -8352658048349159782L;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,39,** Internal Gamma distribution. */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,40,rivate final GammaDistribution gamma;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,41,** Inverse cumulative probability accuracy */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,42,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,45, Create a Chi-Squared distribution with the given degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,47, @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,49,ublic ChiSquaredDistribution(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,50,"his(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54, Create a Chi-Squared distribution with the given degrees of freedom and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,55, inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,57, @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,58, @param inverseCumAccuracy the maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,59, cumulative probability estimates (defaults to
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,60, {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,61, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,63,"ublic ChiSquaredDistribution(double degreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,64,ouble inverseCumAccuracy) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,65,"amma = new GammaDistribution(degreesOfFreedom / 2, 2);"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,66,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,70, Access the number of degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,72, @return the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,74,ublic double getDegreesOfFreedom() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,75,eturn gamma.getAlpha() * 2.0;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,78,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,79,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,80,eturn gamma.density(x);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,83,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,84,ublic double cumulativeProbability(double x)  {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,85,eturn gamma.cumulativeProbability(x);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,89, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,91, Returns {@code 0} when {@code p == 0} and
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,92, {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,94,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,95,ublic double inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,96,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,97,eturn 0d;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,99,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,100,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,102,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,105,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,106,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,107,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,108,eturn Double.MIN_VALUE * gamma.getBeta();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,112,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,113,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,114,/ NOTE: chi squared is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,115,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,117,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,119,f (p < .5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,120,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,121,et = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,122, else {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,123,/ use max
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,124,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,127,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,130,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,131,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,132,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,133,/ NOTE: chi squared is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,134,"/ NOTE: therefore, P(X < &mu;) > 0.5"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,136,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,138,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,139,/ use 1/2 mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,140,et = getDegreesOfFreedom() * 0.5;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,141, else {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,142,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,143,et = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,146,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,149,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,150,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,151,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,152,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,156, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,158, The lower bound of the support is always 0 no matter the
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,159, degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,161, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,163,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,164,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,165,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,169, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,171, The upper bound of the support is always positive infinity no matter the
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,172, degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,174, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,176,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,177,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,178,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,182, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,184," For {@code k} degrees of freedom, the mean is {@code k}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,186,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,187,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,188,eturn getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,192, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,194," For {@code k} degrees of freedom, the variance is {@code 2 * k}."
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,196, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,198,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,199,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,200,eturn 2*getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,203,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,204,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,205,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,206,eturn true;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,209,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,210,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,211,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,212,eturn false;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,17,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,20,* Implementation of the chi-squared distribution.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,22,"* @see <a href=""http://en.wikipedia.org/wiki/Chi-squared_distribution"">Chi-squared distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23,"* @see <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">Chi-squared Distribution (MathWorld)</a>"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,26,public class ChiSquaredDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,28,* Default inverse cumulative probability accuracy
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,29,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,31,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,33,private static final long serialVersionUID = -8352658048349159782L;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,34,/** Internal Gamma distribution. */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,35,private final GammaDistribution gamma;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,36,/** Inverse cumulative probability accuracy */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,37,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,40,* Create a Chi-Squared distribution with the given degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,42,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,44,public ChiSquaredDistribution(double degreesOfFreedom) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,45,"this(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,49,* Create a Chi-Squared distribution with the given degrees of freedom and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,50,* inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,52,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,53,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54,* cumulative probability estimates (defaults to
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,55,* {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,56,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,58,"public ChiSquaredDistribution(double degreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,59,double inverseCumAccuracy) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,60,"gamma = new GammaDistribution(degreesOfFreedom / 2, 2);"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,61,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,65,* Access the number of degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,67,* @return the degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,69,public double getDegreesOfFreedom() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,70,return gamma.getAlpha() * 2.0;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,74,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,76,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,78,* @return 0
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,80,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,81,return 0.0;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,84,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,85,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,86,return gamma.density(x);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,89,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,90,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,91,return gamma.cumulativeProbability(x);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,95,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,97,* Returns {@code 0} when {@code p == 0} and
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,98,* {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,100,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,101,public double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,102,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,103,return 0d;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,105,if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,106,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,108,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,111,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,112,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,113,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,114,return Double.MIN_VALUE * gamma.getBeta();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,117,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,118,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,119,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,120,// NOTE: chi squared is skewed to the left
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,121,"// NOTE: therefore, P(X < &mu;) > .5"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,123,double ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,125,if (p < .5) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,126,// use mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,127,ret = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,128,} else {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,129,// use max
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,130,ret = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,133,return ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,136,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,137,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,138,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,139,// NOTE: chi squared is skewed to the left
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,140,"// NOTE: therefore, P(X < &mu;) > 0.5"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,142,double ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,144,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,145,// use 1/2 mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,146,ret = getDegreesOfFreedom() * 0.5;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,147,} else {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,148,// use mean
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,149,ret = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,152,return ret;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,155,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,156,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,157,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,158,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,162,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,164,"* For {@code k} degrees of freedom, the mean is {@code k}."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,166,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,167,return getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,171,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,173,"* For {@code k} degrees of freedom, the variance is {@code 2 * k}."
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,175,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,177,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,178,return 2*getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,182,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,184,* The lower bound of the support is always 0 no matter the
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,185,* degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,187,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,189,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,190,return 0;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,194,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,196,* The upper bound of the support is always positive infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,197,* degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,199,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,201,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,202,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,205,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,206,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,207,return true;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,210,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,211,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,212,return false;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,216,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,218,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,220,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,222,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,223,return true;
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,19,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,22, Base interface for continuous distributions.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,24, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,26,ublic interface ContinuousDistribution extends Distribution {
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,28, Computes the quantile function of this distribution. For a random
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,29," variable {@code X} distributed according to this distribution, the"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,30, returned value is
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,31, <ul>
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,32," <li><code>inf{x in R | P(X<=x) >= p}</code> for {@code 0 < p <= 1},</li>"
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,33, <li><code>inf{x in R | P(X<=x) > 0}</code> for {@code p = 0}.</li>
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,34, </ul>
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,36, @param p the cumulative probability
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,37, @return the smallest {@code p}-quantile of this distribution
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,38, (largest 0-quantile for {@code p = 0})
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,39, @throws OutOfRangeException if {@code p < 0} or {@code p > 1}
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,41,ouble inverseCumulativeProbability(double p) throws OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,44, Returns the probability density function (PDF) of this distribution
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,45, evaluated at the specified point.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,47, @param x the point at which the PDF should be evaluated
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,48, @return the PDF at point {@code x}
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,50,ouble density(double x);
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,53, Reseed the random generator used to generate samples.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,55, @param seed New seed.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,56, @since 3.0
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,58,oid reseedRandomGenerator(long seed);
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,61, Generate a random value sampled from this distribution.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,63, @return a random value.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,64, @since 3.0
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,66,ouble sample();
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,69, Generate a random sample from the distribution.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,71, @param sampleSize number of random values to generate.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,72, @return an array representing the random sample.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,73, @throws org.apache.commons.math.exception.NotStrictlyPositiveException
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,74, if {@code sampleSize} is not positive.
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,75, @since 3.0
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,77,ouble[] sample(int sampleSize);
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,21, Base interface for discrete distributions.
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,23, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,25,ublic interface DiscreteDistribution extends Distribution {
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,27, For a random variable X whose values are distributed according
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,28," to this distribution, this method returns P(X = x). In other words, this"
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,29," method represents the probability mass function, or PMF for the distribution."
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,31, @param x the value at which the probability mass function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,32, @return the value of the probability mass function at x
False,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/main/java/org/apache/commons/math/distribution/DiscreteDistribution.java,34,ouble probability(double x);
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,33,ublic class ExponentialDistribution extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,34,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,31,public class ExponentialDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,81,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,83,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,85,* @return 0
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,87,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,88,return 0.0;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,195, The lower bound of the support is always 0 no matter the mean parameter.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,197, @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,203,"* For mean parameter {@code k}, the mean is {@code k}."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,199,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,200,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,201,eturn 0;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,205,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,206,return getMean();
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,207, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,208, no matter the mean parameter.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,210, @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,212,"* For mean parameter {@code k}, the variance is {@code k^2}."
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,212,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,213,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,214,eturn Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,214,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,215,final double m = getMean();
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,216,return m * m;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,220," For mean parameter {@code k}, the mean is {@code k}."
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,222,* The lower bound of the support is always 0 no matter the mean parameter.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,224,* @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,222,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,223,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,224,eturn getMean();
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,226,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,227,return 0;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,230," For mean parameter {@code k}, the variance is {@code k^2}."
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,233,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,234,* no matter the mean parameter.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,236,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,232,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,233,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,234,inal double m = getMean();
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,235,eturn m * m;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,238,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,239,return Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,239,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,245,Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,253,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,255,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,257,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,259,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,260,return true;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,35,ublic class FDistribution
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,36,xtends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,37,mplements Serializable  {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,33,public class FDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,34,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,35,private static final long serialVersionUID = -8516354193418641566L;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,43,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,44,rivate static final long serialVersionUID = -8516354193418641566L;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,52,/** Cached numerical variance */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,53,private double numericalVariance = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,55,/** Whether or not the numerical variance has been calculated */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,56,private boolean numericalVarianceIsCalculated = false;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,104,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,106,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,108,* @return 0
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,110,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,111,return 0.0;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,207, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,209, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,211, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,213,Override
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,214,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,215,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,219, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,221, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,222, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,224, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,226,Override
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,227,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,228,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,240,Override
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,241,rotected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,232,public double getNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,264,Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,255,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,256,if (!numericalVarianceIsCalculated) {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,257,numericalVariance = calculateNumericalVariance();
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,258,numericalVarianceIsCalculated = true;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,260,return numericalVariance;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,264,* used by {@link #getNumericalVariance()}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,266,* @return the variance of this distribution
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,283,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,285,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,287,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,289,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,290,return 0;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,294,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,296,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,297,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,299,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,301,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,302,return Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,280,Override
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,286,Override
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,316,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,318,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,320,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,322,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,323,return true;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,33,ublic class GammaDistribution extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,34,mplements Serializable  {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,31,public class GammaDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,84,* Access the {@code alpha} shape parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,86,* @return {@code alpha}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,88,public double getAlpha() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,89,return alpha;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,93,* Access the {@code beta} scale parameter.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,95,* @return {@code beta}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,97,public double getBeta() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,98,return beta;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,102,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,104,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,106,* @return 0
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,108,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,109,return 0.0;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,112,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,113,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,114,if (x < 0) {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,115,return 0;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,117,"return FastMath.pow(x / beta, alpha - 1) / beta *"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,118,FastMath.exp(-x / beta) / FastMath.exp(Gamma.logGamma(alpha));
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,130, Access the {@code alpha} shape parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,132, @return {@code alpha}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,134,ublic double getAlpha() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,135,eturn alpha;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,139, Access the {@code beta} scale parameter.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,141, @return {@code beta}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,143,ublic double getBeta() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,144,eturn beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,147,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,148,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,149,f (x < 0) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,150,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,152,"eturn FastMath.pow(x / beta, alpha - 1) / beta *"
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,153,astMath.exp(-x / beta) / FastMath.exp(Gamma.logGamma(alpha));
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,211, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,213, @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,219,"* For shape parameter {@code alpha} and scale parameter {@code beta}, the"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,220,* mean is {@code alpha * beta}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,215,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,216,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,217,eturn 0;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,222,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,223,return getAlpha() * getBeta();
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,223, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,224, no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,229,"* For shape parameter {@code alpha} and scale parameter {@code beta}, the"
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,230,* variance is {@code alpha * beta^2}.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,226, @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,232,* @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,228,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,229,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,230,eturn Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,234,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,235,final double b = getBeta();
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,236,return getAlpha() * b * b;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,236," For shape parameter {@code alpha} and scale parameter {@code beta}, the"
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,237, mean is {@code alpha * beta}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,242,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,244,* @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,239,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,240,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,241,eturn getAlpha() * getBeta();
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,246,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,247,return 0;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,247," For shape parameter {@code alpha} and scale parameter {@code beta}, the"
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,248, variance is {@code alpha * beta^2}.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,253,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,254,* no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,250, @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,256,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,252,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,253,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,254,inal double b = getBeta();
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,255,eturn getAlpha() * b * b;
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,258,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,259,return Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,259,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,265,Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,273,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,275,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,277,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,279,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,280,return true;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,36,ublic class HypergeometricDistribution extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,37,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,34,public class HypergeometricDistribution extends AbstractIntegerDistribution {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,47,/** Cached numerical variance */
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,48,private double numericalVariance = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,50,/** Whether or not the numerical variance has been calculated */
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,51,private boolean numericalVarianceIsCalculated = false;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,54," @throws NotPositiveException if {@code numberOfSuccesses < 0},"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,55, or {@code populationSize < 0}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,60,* @throws NotPositiveException if {@code numberOfSuccesses < 0}.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,60,"ublic HypergeometricDistribution(int populationSize,"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,61,"nt numberOfSuccesses,"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,62,nt sampleSize)
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,63,"hrows NotPositiveException,"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,64,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,65,umberIsTooLargeException {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,65,"public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize)"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,66,"throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,94,Override
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,277,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,279,"* For population size {@code N}, number of successes {@code m}, and sample"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,280,"* size {@code n}, the mean is {@code n * m / N}."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,282,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,283,return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,287,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,289,"* For population size {@code N}, number of successes {@code m}, and sample"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,290,"* size {@code n}, the variance is"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,291,* {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,293,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,294,if (!numericalVarianceIsCalculated) {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,295,numericalVariance = calculateNumericalVariance();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,296,numericalVarianceIsCalculated = true;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,298,return numericalVariance;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,302,* Used by {@link #getNumericalVariance()}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,304,* @return the variance of this distribution
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,306,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,307,final double N = getPopulationSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,308,final double m = getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,309,final double n = getSampleSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,310,return ( n * m * (N - n) * (N - m) ) / ( (N*N * (N - 1)) );
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,285,Override
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,299,Override
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,307," For population size {@code N}, number of successes {@code m}, and sample"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,308," size {@code n}, the mean is {@code n * m / N}."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,310,Override
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,311,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,312,eturn (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,316, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,318," For population size {@code N}, number of successes {@code m}, and sample"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,319," size {@code n}, the variance is"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,320, {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,342,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,344,* @return {@code true}
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,322,Override
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,323,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,324,inal double N = getPopulationSize();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,325,inal double m = getNumberOfSuccesses();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,326,inal double n = getSampleSize();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,327,eturn ( n * m * (N - n) * (N - m) ) / ( (N*N * (N - 1)) );
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,346,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,347,return true;
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,20, Interface for discrete distributions of integer-valued random variables.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,20,* Interface for distributions on the integers.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,24,ublic interface IntegerDistribution extends DiscreteDistribution {
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,24,public interface IntegerDistribution {
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,31, @param x Value at which the probability density function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,32, @return the value of the probability density function at {@code x}.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,31,* @param x the point at which the probability density function is evaluated.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,32,* @return the value of the probability density function at {@code x}
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,42, @param x Value at which the PDF is evaluated.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,42,* @param x the point at which the PDF is evaluated
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,48," For this distribution, {@code X}, this method returns"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,49, {@code P(x0 <= X <= x1)}.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,48,* For a random variable {@code X} whose values are distributed according
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,49,"* to this distribution, this method returns {@code P(x0 <= X <= x1)}."
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,51," @param x0 the inclusive, lower bound"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,52," @param x1 the inclusive, upper bound"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,53, @return the cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,54, @throws IllegalArgumentException if {@code x0 > x1}.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,51,* @param x0 the inclusive lower bound
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,52,* @param x1 the inclusive upper bound
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,53,* @return the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,54,* @throws IllegalArgumentException if {@code x0 > x1}
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,77, @param p Cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,78, @return the largest {@code x} such that {@code P(X < x) <= p}.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,77,* @param p the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,78,* @return the largest {@code x} such that {@code P(X < x) <= p}
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,80, (inclusive).
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,80,* (inclusive)
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,85,* Use this method to get the numerical value of the mean of this
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,86,* distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,88,* @return the mean or {@code Double.NaN} if it is not defined
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,90,double getNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,93,* Use this method to get the numerical value of the variance of this
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,94,* distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,96,* @return the variance (possibly {@code Double.POSITIVE_INFINITY} as
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,97,* for certain cases in {@link TDistributionImpl}) or
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,98,* {@code Double.NaN} if it is not defined
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,100,double getNumericalVariance();
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,103,* Access the lower bound of the support.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,105,* @return lower bound of the support ({@code Integer.MIN_VALUE}
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,106,* for negative infinity)
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,108,int getSupportLowerBound();
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,111,* Access the upper bound of the support.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,113,* @return upper bound of the support ({@code Integer.MAX_VALUE}
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,114,* for positive infinity)
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,116,int getSupportUpperBound();
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,119,* Use this method to get information about whether the support is
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,120,"* connected, i.e. whether all integers between the lower and upper bound of"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,121,* the support are included in the support.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,123,* @return whether the support is connected or not
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,125,boolean isSupportConnected();
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,87, @param seed New seed.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,130,* @param seed the new seed
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,95, @return a random value.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,138,* @return a random value
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,103, @param sampleSize number of random values to generate.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,104, @return an array representing the random sample.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,146,* @param sampleSize the number of random values to generate
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,147,* @return an array representing the random sample
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,106, if {@code sampleSize} is not positive.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,149,* if {@code sampleSize} is not positive
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,35,ublic class NormalDistribution extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,36,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,33,public class NormalDistribution extends AbstractRealDistribution {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,77,"ublic NormalDistribution(double mean, double sd, double inverseCumAccuracy) {"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,74,"public NormalDistribution(double mean, double sd, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,75,throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,91,ublic NormalDistribution(){
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,89,public NormalDistribution() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,112,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,114,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,116,* @return 0
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,118,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,119,return 0.0;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,149,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,150,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,151,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,152,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,172,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,173,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,174,ublic double sample()  {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,175,"eturn randomData.nextGaussian(mean, standardDeviation);"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,219,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,220,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,221,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,222,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,226,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,228,"* For mean parameter {@code mu}, the mean is {@code mu}."
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,230,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,231,return getMean();
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,235,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,237,"* For standard deviation parameter {@code s}, the variance is {@code s^2}."
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,239,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,240,final double s = getStandardDeviation();
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,241,return s * s;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,231,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,245,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,251, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,253," For mean parameter {@code mu}, the mean is {@code mu}."
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,255,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,256,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,257,eturn getMean();
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,270,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,271,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,272,return false;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,275,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,276,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,277,return false;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,263," For standard deviation parameter {@code s}, the variance is {@code s^2}."
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,283,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,285,* @return {@code true}
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,265,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,266,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,267,inal double s = getStandardDeviation();
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,268,eturn s * s;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,287,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,288,return true;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,273,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,274,eturn false;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,277,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,278,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,279,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,280,eturn false;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,293,public double sample()  {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,294,"return randomData.nextGaussian(mean, standardDeviation);"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,49,ublic class PascalDistribution extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,50,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,47,public class PascalDistribution extends AbstractIntegerDistribution {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,101,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,102,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,103,eturn -1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,106,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,107,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,108,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,109,/ use MAX - 1 because MAX causes loop
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,110,eturn Integer.MAX_VALUE - 1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,113,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,114,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,115,ublic double cumulativeProbability(int x) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,98,public double probability(int x) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,120,"et = Beta.regularizedBeta(probabilityOfSuccess,"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,121,"umberOfSuccesses, x + 1);"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,103,ret = ArithmeticUtils.binomialCoefficientDouble(x +
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,104,"numberOfSuccesses - 1, numberOfSuccesses - 1) *"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,105,"FastMath.pow(probabilityOfSuccess, numberOfSuccesses) *"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,106,"FastMath.pow(1.0 - probabilityOfSuccess, x);"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,127,ublic double probability(int x) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,112,public double cumulativeProbability(int x) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,132,et = ArithmeticUtils.binomialCoefficientDouble(x +
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,133,"umberOfSuccesses - 1, numberOfSuccesses - 1) *"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,134,"astMath.pow(probabilityOfSuccess, numberOfSuccesses) *"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,135,"astMath.pow(1.0 - probabilityOfSuccess, x);"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,117,"ret = Beta.regularizedBeta(probabilityOfSuccess,"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,118,"numberOfSuccesses, x + 1);"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,163, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,165, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,167, @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,145,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,170,ublic int getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,171,eturn 0;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,147,protected int getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,148,return -1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,175, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,177, The upper bound of the support is always positive infinity no matter the
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,178, parameters. Positive infinity is symbolised by {@code Integer.MAX_VALUE}
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,179, together with {@link #isSupportUpperBoundInclusive()} being
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,180, {@code false}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,182, @return upper bound of the support (always {@code Integer.MAX_VALUE}
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,183, for positive infinity)
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,151,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,186,ublic int getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,187,eturn Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,153,protected int getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,154,// use MAX - 1 because MAX causes loop
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,155,return Integer.MAX_VALUE - 1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,196,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,197,rotected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,164,public double getNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,207, the mean is {@code (r * p) / (1 - p)^2}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,174,* the variance is {@code (r * p) / (1 - p)^2}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,209,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,210,rotected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,176,public double getNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,220, Always returns {@code false}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,186,* The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,222, @see PascalDistribution#getSupportUpperBound() getSupportUpperBound()
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,188,* @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,224,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,225,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,226,eturn false;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,190,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,191,return 0;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,195,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,197,* The upper bound of the support is always positive infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,198,* parameters. Positive infinity is symbolised by {@code Integer.MAX_VALUE}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,200,* @return upper bound of the support (always {@code Integer.MAX_VALUE}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,201,* for positive infinity)
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,203,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,204,return Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,208,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,210,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,212,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,214,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,215,return true;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,34,ublic class PoissonDistribution extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,35,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,32,public class PoissonDistribution extends AbstractIntegerDistribution {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,75,ublic PoissonDistribution(double p) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,72,public PoissonDistribution(double p) throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,84,* @throws NotStrictlyPositiveException if {@code p <= 0}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,89,"ublic PoissonDistribution(double p, double epsilon, int maxIterations) {"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,87,"public PoissonDistribution(double p, double epsilon, int maxIterations)"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,88,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,104,* @throws NotStrictlyPositiveException if {@code p <= 0}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,107,"ublic PoissonDistribution(double p, double epsilon) {"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,107,"public PoissonDistribution(double p, double epsilon)"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,108,throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,149,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,178, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,179, <p>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,180, <strong>Algorithm Description</strong>:
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,181, <ul>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,182,"  <li>For small means, uses simulation of a Poisson process"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,183,"   using Uniform deviates, as described"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,184,"   <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here</a>."
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,185,   The Poisson process (and hence value returned) is bounded by 1000 * mean.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,186,  </li>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,187,"  <li>For large means, uses the rejection algorithm described in"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,188,   <quote>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,189,"    Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,190,    <strong>Computing</strong> vol. 26 pp. 197-207.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,191,   </quote>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,192,  </li>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,193, </ul>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,194, </p>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,196, @return a random value.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,197, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,199,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,200,ublic int sample()  {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,201,"eturn (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,210,** {@inheritDoc} */    @Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,183,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,184,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,190,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,192,"* For mean parameter {@code p}, the mean is {@code p}."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,194,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,195,return getMean();
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,199,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,201,"* For mean parameter {@code p}, the variance is {@code p}."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,203,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,204,return getMean();
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,222,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,238,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,246," For mean parameter {@code p}, the mean is {@code p}."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,236,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,238,* @return {@code true}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,248,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,249,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,250,eturn getMean();
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,240,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,241,return true;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,246,* <p>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,247,* <strong>Algorithm Description</strong>:
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,248,* <ul>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,249,"*  <li>For small means, uses simulation of a Poisson process"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,250,"*   using Uniform deviates, as described"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,251,"*   <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here</a>."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,252,*   The Poisson process (and hence value returned) is bounded by 1000 * mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,253,*  </li>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,254,"*  <li>For large means, uses the rejection algorithm described in"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,255,*   <quote>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,256,"*    Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,257,*    <strong>Computing</strong> vol. 26 pp. 197-207.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,258,*   </quote>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,259,*  </li>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,260,* </ul>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,261,* </p>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,256," For mean parameter {@code p}, the variance is {@code p}."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,263,* @return a random value.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,264,* @since 2.2
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,259,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,260,eturn getMean();
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,263,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,264,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,265,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,266,eturn true;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,267,public int sample() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,268,"return (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,20,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,22, Base interface for probability distributions.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,23,* Base interface for distributions on the reals.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,26,* @since 3.0
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,26,ublic interface Distribution {
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,28,public interface RealDistribution {
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,33, @param x the value at which the PMF is evaluated
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,34, @return the value of the probability mass function at {@code x}
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,35,* @param x the point at which the PMF is evaluated
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,36,* @return the value of the probability mass function at point {@code x}
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,41,* Returns the probability density function (PDF) of this distribution
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,42,"* evaluated at the specified point {@code x}. In general, the PDF is"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,43,* the derivative of the {@link #cumulativeProbability(double) CDF}.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,44,"* If the derivative does not exist at {@code x}, then an appropriate"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,45,"* replacement should be returned, e.g. {@code Double.POSITIVE_INFINITY},"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,46,"* {@code Double.NaN}, or  the limit inferior or limit superior of the"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,47,* difference quotient.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,49,* @param x the point at which the PDF is evaluated
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,50,* @return the value of the probability density function at point {@code x}
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,52,double density(double x);
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,44, @param x the value at which the CDF is evaluated
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,60,* @param x the point at which the CDF is evaluated
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,80,* Computes the quantile function of this distribution. For a random
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,81,"* variable {@code X} distributed according to this distribution, the"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,82,* returned value is
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,83,* <ul>
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,84,"* <li><code>inf{x in R | P(X<=x) >= p}</code> for {@code 0 < p <= 1},</li>"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,85,* <li><code>inf{x in R | P(X<=x) > 0}</code> for {@code p = 0}.</li>
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,86,* </ul>
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,88,* @param p the cumulative probability
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,89,* @return the smallest {@code p}-quantile of this distribution
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,90,* (largest 0-quantile for {@code p = 0})
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,91,* @throws OutOfRangeException if {@code p < 0} or {@code p > 1}
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,93,double inverseCumulativeProbability(double p) throws OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,67, @return the mean or Double.NaN if it's not defined
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,99,* @return the mean or {@code Double.NaN} if it is not defined
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,75, @return the variance (possibly Double.POSITIVE_INFINITY as
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,76, for certain cases in {@link TDistribution}) or
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,77, Double.NaN if it's not defined
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,107,* @return the variance (possibly {@code Double.POSITIVE_INFINITY} as
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,108,* for certain cases in {@link TDistributionImpl}) or
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,109,* {@code Double.NaN} if it is not defined
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,114,* Access the lower bound of the support.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,116,* @return lower bound of the support (might be
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,117,* {@code Double.NEGATIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,119,double getSupportLowerBound();
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,122,* Access the upper bound of the support.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,124,* @return upper bound of the support (might be
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,125,* {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,127,double getSupportUpperBound();
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,100, is included in the support.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,148,* are included in the support.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,150,* @return whether the support is connected or not
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,152,boolean isSupportConnected();
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,155,* Reseed the random generator used to generate samples.
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,102," For {@link AbstractIntegerDistribution} the support is discrete, so"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,103," if this is true, then the support is"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,104," {lower bound, lower bound + 1, ..., upper bound}."
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,157,* @param seed the new seed
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,159,void reseedRandomGenerator(long seed);
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,162,* Generate a random value sampled from this distribution.
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,106," For {@link AbstractContinuousDistribution} the support is continuous, so"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,107," if this is true, then the support is the interval"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,108," [lower bound, upper bound]"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,109, where the limits are inclusive or not according to
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,110, {@link #isSupportLowerBoundInclusive()} and {@link #isSupportUpperBoundInclusive()}
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,111," (in the example both are true). If both are false, then the support is the interval"
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,112," (lower bound, upper bound)"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,164,* @return a random value.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,166,double sample();
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,169,* Generate a random sample from the distribution.
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,114, @return whether the support limits given by subclassed methods are connected or not
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,171,* @param sampleSize the number of random values to generate
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,172,* @return an array representing the random sample
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,173,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,174,* if {@code sampleSize} is not positive
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,116,oolean isSupportConnected();
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,176,double[] sample(int sampleSize);
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,169, Compute the PMF for a binomial distribution using the saddle point
False,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,170, expansion.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,169,* Compute the logarithm of the PMF for a binomial distribution
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,170,* using the saddle point expansion.
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,34,ublic class TDistribution extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,35,mplements Serializable  {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,32,public class TDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,87,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,89,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,91,* @return 0
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,93,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,94,return 0.0;
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,163, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,165, The lower bound of the support is always negative infinity no matter the
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,166, parameters.
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,168, @return lower bound of the support (always
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,169, {@code Double.NEGATIVE_INFINITY})
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,171,Override
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,172,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,173,eturn Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,177, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,179, The upper bound of the support is always positive infinity no matter the
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,180, parameters.
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,182, @return upper bound of the support (always
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,183, {@code Double.POSITIVE_INFINITY})
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,185,Override
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,186,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,187,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,199,Override
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,200,rotected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,179,public double getNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,221,Override
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,222,rotected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,200,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,215,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,217,* The lower bound of the support is always negative infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,218,* parameters.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,220,* @return lower bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,221,* {@code Double.NEGATIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,223,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,224,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,228,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,230,* The upper bound of the support is always positive infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,231,* parameters.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,233,* @return upper bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,234,* {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,236,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,237,return Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,237,Override
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,243,Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,251,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,253,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,255,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,257,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,258,return true;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,39,ublic class WeibullDistribution extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,40,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,37,public class WeibullDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,38,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,39,private static final long serialVersionUID = 8589540077390120676L;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,46,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,47,rivate static final long serialVersionUID = 8589540077390120676L;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,56,/** Cached numerical mean */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,57,private double numericalMean = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,59,/** Whether or not the numerical mean has been calculated */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,60,private boolean numericalMeanIsCalculated = false;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,62,/** Cached numerical variance */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,63,private double numericalVariance = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,65,/** Whether or not the numerical variance has been calculated */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,66,private boolean numericalVarianceIsCalculated = false;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,98,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,99,ublic double cumulativeProbability(double x) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,100,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,101,f (x <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,102,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,103, else {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,104,"et = 1.0 - FastMath.exp(-FastMath.pow(x / scale, shape));"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,106,eturn ret;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,130,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,132,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,134,* @return 0
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,136,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,137,return 0.0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,159,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,160,public double cumulativeProbability(double x) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,161,double ret;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,162,if (x <= 0.0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,163,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,164,} else {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,165,"ret = 1.0 - FastMath.exp(-FastMath.pow(x / scale, shape));"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,167,return ret;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,173,** {@inheritDoc} */    @Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,197,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,198,@Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,178,** {@inheritDoc} */    @Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,203,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,204,@Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,199, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,201, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,203,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,204,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,205,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,209, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,211, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,212, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,214, @return upper bound of the support (always
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,215, {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,225,"* The mean is {@code scale * Gamma(1 + (1 / shape))}, where {@code Gamma()}"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,226,* is the Gamma-function.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,217,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,218,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,219,eturn Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,228,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,229,if (!numericalMeanIsCalculated) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,230,numericalMean = calculateNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,231,numericalMeanIsCalculated = true;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,233,return numericalMean;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,223, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,225," The mean is {@code scale * Gamma(1 + (1 / shape))}, where {@code Gamma()}"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,226, is the Gamma-function.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,237,* used by {@link #getNumericalMean()}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,239,* @return the mean of this distribution
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,228,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,242,Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,254,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,255,if (!numericalVarianceIsCalculated) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,256,numericalVariance = calculateNumericalVariance();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,257,numericalVarianceIsCalculated = true;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,259,return numericalVariance;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,263,* used by {@link #getNumericalVariance()}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,265,* @return the variance of this distribution
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,248,eturn (sc * sc) *
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,249,astMath.exp(Gamma.logGamma(1 + (2 / sh))) -
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,250,mn * mn);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,272,return (sc * sc) * FastMath.exp(Gamma.logGamma(1 + (2 / sh)))
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,273,- (mn * mn);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,277,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,279,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,281,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,283,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,284,return 0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,288,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,290,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,291,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,293,* @return upper bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,294,* {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,296,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,297,return Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,254,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,260,Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,311,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,313,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,315,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,317,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,318,return true;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,32,ublic class ZipfDistribution extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,33,mplements Serializable {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,30,public class ZipfDistribution extends AbstractIntegerDistribution {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,40,/** Cached numerical mean */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,41,private double numericalMean = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,43,/** Whether or not the numerical mean has been calculated */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,44,private boolean numericalMeanIsCalculated = false;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,46,/** Cached numerical variance */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,47,private double numericalVariance = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,49,/** Whether or not the numerical variance has been calculated */
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,50,private boolean numericalVarianceIsCalculated = false;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,93,Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,127,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,129,"* For number of elements {@code N} and exponent {@code s}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,130,"* {@code Hs1 / Hs}, where"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,131,* <ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,132,"*  <li>{@code Hs1 = generalizedHarmonic(N, s - 1)},</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,133,"*  <li>{@code Hs = generalizedHarmonic(N, s)}.</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,134,* </ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,136,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,137,if (!numericalMeanIsCalculated) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,138,numericalMean = calculateNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,139,numericalMeanIsCalculated = true;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,141,return numericalMean;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,145,* Used by {@link #getNumericalMean()}.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,147,* @return the mean of this distribution
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,149,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,150,final int N = getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,151,final double s = getExponent();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,153,"final double Hs1 = generalizedHarmonic(N, s - 1);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,154,"final double Hs = generalizedHarmonic(N, s);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,156,return Hs1 / Hs;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,160,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,162,"* For number of elements {@code N} and exponent {@code s}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,163,"* {@code (Hs2 / Hs) - (Hs1^2 / Hs^2)}, where"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,164,* <ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,165,"*  <li>{@code Hs2 = generalizedHarmonic(N, s - 2)},</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,166,"*  <li>{@code Hs1 = generalizedHarmonic(N, s - 1)},</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,167,"*  <li>{@code Hs = generalizedHarmonic(N, s)}.</li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,168,* </ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,170,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,171,if (!numericalVarianceIsCalculated) {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,172,numericalVariance = calculateNumericalVariance();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,173,numericalVarianceIsCalculated = true;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,175,return numericalVariance;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,179,* used by {@link #getNumericalVariance()}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,181,* @return the variance of this distribution
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,183,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,184,final int N = getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,185,final double s = getExponent();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,187,"final double Hs2 = generalizedHarmonic(N, s - 2);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,188,"final double Hs1 = generalizedHarmonic(N, s - 1);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,189,"final double Hs = generalizedHarmonic(N, s);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,191,return (Hs2 / Hs) - ((Hs1 * Hs1) / (Hs * Hs));
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,140,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,152,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,160," For number of elements {@code N} and exponent {@code s}, the mean is"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,161," {@code Hs1 / Hs}, where"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,162, <ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,163,"  <li>{@code Hs1 = generalizedHarmonic(N, s - 1)},</li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,164,"  <li>{@code Hs = generalizedHarmonic(N, s)}.</li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,165, </ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,167,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,168,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,169,inal int N = getNumberOfElements();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,170,inal double s = getExponent();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,172,"inal double Hs1 = generalizedHarmonic(N, s - 1);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,173,"inal double Hs = generalizedHarmonic(N, s);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,175,eturn Hs1 / Hs;
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,179, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,181," For number of elements {@code N} and exponent {@code s}, the mean is"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,182," {@code (Hs2 / Hs) - (Hs1^2 / Hs^2)}, where"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,183, <ul>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,184,"  <li>{@code Hs2 = generalizedHarmonic(N, s - 2)},</li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,185,"  <li>{@code Hs1 = generalizedHarmonic(N, s - 1)},</li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,186,"  <li>{@code Hs = generalizedHarmonic(N, s)}.</li>"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,187, </ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,236,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,238,* @return {@code true}
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,189,Override
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,190,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,191,inal int N = getNumberOfElements();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,192,inal double s = getExponent();
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,194,"inal double Hs2 = generalizedHarmonic(N, s - 2);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,195,"inal double Hs1 = generalizedHarmonic(N, s - 1);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,196,"inal double Hs = generalizedHarmonic(N, s);"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,198,eturn (Hs2 / Hs) - ((Hs1 * Hs1) / (Hs * Hs));
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,240,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,241,return true;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,31,mport org.apache.commons.math.distribution.ContinuousDistribution;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,31,import org.apache.commons.math.distribution.RealDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,603, This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,603,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,617, This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,617,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,631, This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,631,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,645, This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,645,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,658, This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,658,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,788, This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,788,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,801, This implementation uses {@link #nextInversionDeviate(ContinuousDistribution) inversion}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,801,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1038,ublic double nextInversionDeviate(ContinuousDistribution distribution) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,1038,public double nextInversionDeviate(RealDistribution distribution) {
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,30,mport org.apache.commons.math.distribution.ContinuousDistribution;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,30,import org.apache.commons.math.distribution.RealDistribution;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,442,ublic static double[] getDistributionQuartiles(ContinuousDistribution distribution) throws Exception {
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,442,public static double[] getDistributionQuartiles(RealDistribution distribution) throws Exception {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,48,ublic void testCumulativeProbabilitiesSingleDoubleArguments() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,49,nt lower = 1;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,50,ouble arg = 0;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,51,or (int i = 1; i < 7; i++) {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,52,/ Exact integer
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,53,rg = lower;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,54,"ssert.assertEquals(p * i,"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,55,"iceDistribution.cumulativeProbability(arg), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,57,/ Add a fraction
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,58,rg = lower + Math.random();
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,59,"ssert.assertEquals(p * i,"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,60,"iceDistribution.cumulativeProbability(arg), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,61,ower++;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,65,Test
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,66,ublic void testCumulativeProbabilitiesRangeIntegerArguments() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,47,public void testCumulativeProbabilitiesRangeArguments() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,81,Test
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,82,ublic void testCumulativeProbabilitiesRangeDoubleArguments() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,83,nt lower = 1;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,84,nt upper = 6;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,85,ouble dlower = lower;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,86,ouble dupper = upper;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,87,or (int i = 0; i < 2; i++) {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,88,"/ cum(1,6) = p(1 <= X <= 6) = 1, cum(2,5) = 4/6, cum(3,4) = 2/6"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,89,/ Exact integers
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,90,"ssert.assertEquals(1 - p * 2 * i,"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,91,"iceDistribution.cumulativeProbability(dlower, dupper), 1E-12);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,92,"/ Subtract a fraction from lower, add to upper.  Should be no change."
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,93,lower -= Math.random();
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,94,upper += Math.random();
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,95,"ssert.assertEquals(1 - p * 2 * i,"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,96,"iceDistribution.cumulativeProbability(dlower, dupper), 1E-12);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,97,ower++;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,98,pper--;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,99,lower = lower;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,100,upper = upper;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,102,or (int i = 1; i < 7; i++) {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,103,ower = i;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,104,"ssert.assertEquals(p, diceDistribution.cumulativeProbability("
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,105,"ower, lower), 1E-12);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,106,"ssert.assertEquals(p, diceDistribution.cumulativeProbability("
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,107,"ower, lower + Math.random()), 1E-12);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,108,"ssert.assertEquals(p, diceDistribution.cumulativeProbability("
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,109,"ower - Math.random(), lower), 1E-12);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,110,"ssert.assertEquals(p, diceDistribution.cumulativeProbability("
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,111,"ower - Math.random(), lower + Math.random()), 1E-12);"
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,129,Override
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,150,Override
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,98,public double getNumericalMean() {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,99,return 3.5;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,102,public double getNumericalVariance() {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,103,return 12.5 - 3.5 * 3.5;  // E(X^2) - E(X)^2
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,155,Override
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,160,Override
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,161,rotected double calculateNumericalMean() {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,162,eturn 3.5;
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,165,Override
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,166,rotected double calculateNumericalVariance() {
False,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,167,eturn 12.5 - 3.5 * 3.5;  // E(X^2) - E(X)^2
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,114,public final boolean isSupportConnected() {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,115,return true;
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,31,ublic class CauchyDistributionTest extends ContinuousDistributionAbstractTest  {
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,31,public class CauchyDistributionTest extends RealDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java,26, @see ContinuousDistributionAbstractTest
True,src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java,26,* @see RealDistributionAbstractTest
False,src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java,29,ublic class ChiSquaredDistributionTest extends ContinuousDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquaredDistributionTest.java,29,public class ChiSquaredDistributionTest extends RealDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,32,ublic class ExponentialDistributionTest extends ContinuousDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,32,public class ExponentialDistributionTest extends RealDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,30,ublic class FDistributionTest extends ContinuousDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,30,public class FDistributionTest extends RealDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,31,ublic class GammaDistributionTest extends ContinuousDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,31,public class GammaDistributionTest extends RealDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,20,mport org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,190, Verifies that floating point arguments are correctly handled by
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,191," cumulativeProbablility(-,-)"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,192, JIRA: MATH-184
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,194,Test
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,195,ublic void testFloatingPointArguments() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,196,or (int i = 0; i < cumulativeTestPoints.length; i++) {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,197,ouble arg = cumulativeTestPoints[i];
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,198,ssert.assertEquals(
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,199,"Incorrect cumulative probability value returned for "" +"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,200,"umulativeTestPoints[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,201,"umulativeTestValues[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,202,"istribution.cumulativeProbability(arg), tolerance);"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,203,f (i < cumulativeTestPoints.length - 1) {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,204,ouble arg2 = cumulativeTestPoints[i + 1];
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,205,"ssert.assertEquals(""Inconsistent probability for discrete range "" +"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,206,"[ "" + arg + "","" + arg2 + "" ]"","
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,207,istribution.cumulativeProbability(
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,208,"umulativeTestPoints[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,209,"umulativeTestPoints[i + 1]),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,210,"istribution.cumulativeProbability(arg, arg2), tolerance);"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,211,rg = arg - FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,212,rg2 = arg2 + FastMath.random();
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,213,"ssert.assertEquals(""Inconsistent probability for discrete range "" +"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,214,"[ "" + arg + "","" + arg2 + "" ]"","
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,215,istribution.cumulativeProbability(
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,216,"umulativeTestPoints[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,217,"umulativeTestPoints[i + 1]),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,218,"istribution.cumulativeProbability(arg, arg2), tolerance);"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,221,nt one = 1;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,222,nt ten = 10;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,223,nt two = 2;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,224,ouble oned = one;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,225,ouble twod = two;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,226,ouble tend = ten;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,227,"ssert.assertEquals(distribution.cumulativeProbability(one, two),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,228,"istribution.cumulativeProbability(oned, twod), tolerance);"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,229,"ssert.assertEquals(distribution.cumulativeProbability(one, two),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,230,"istribution.cumulativeProbability(oned - tolerance,"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,231,"wod + 0.9), tolerance);"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,232,"ssert.assertEquals(distribution.cumulativeProbability(two, ten),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,233,"istribution.cumulativeProbability(twod, tend), tolerance);"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,234,"ssert.assertEquals(distribution.cumulativeProbability(two, ten),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,235,"istribution.cumulativeProbability(twod - tolerance,"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,236,"end + 0.9), tolerance);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,31,ublic class NormalDistributionTest extends ContinuousDistributionAbstractTest  {
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,31,public class NormalDistributionTest extends RealDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,161, = dist.cumulativeProbability(x);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,161,p = dist.cumulativeProbability((int) x);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,193,"rivate void checkProbability(PoissonDistribution dist, double x) throws Exception {"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,193,"private void checkProbability(PoissonDistribution dist, int x) throws Exception {"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,209,ouble ret = Double.NaN;
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,211,et = dist.inverseCumulativeProbability(p);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,210,int ret = dist.inverseCumulativeProbability(p);
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,30, Abstract base class for {@link ContinuousDistribution} tests.
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,30,* Abstract base class for {@link RealDistribution} tests.
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,63,ublic abstract class ContinuousDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,63,public abstract class RealDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,67,rivate ContinuousDistribution distribution;
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,67,private RealDistribution distribution;
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,90,ublic abstract ContinuousDistribution makeDistribution();
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,90,public abstract RealDistribution makeDistribution();
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,194,/TODO: remove cast when density(double) is added to ContinuousDistribution
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,195,"(AbstractContinuousDistribution) distribution).density(cumulativeTestPoints[i]),"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,194,"distribution.density(cumulativeTestPoints[i]),"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,282,bstractContinuousDistribution dist = (AbstractContinuousDistribution) makeDistribution();
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,284,ist.reseedRandomGenerator(1000);  // Use fixed seed
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,285,ouble[] sample = dist.sample(sampleSize);
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,286,ouble[] quartiles = TestUtils.getDistributionQuartiles(dist);
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,282,distribution.reseedRandomGenerator(1000); // Use fixed seed
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,283,double[] sample = distribution.sample(sampleSize);
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,284,double[] quartiles = TestUtils.getDistributionQuartiles(distribution);
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,335,rotected ContinuousDistribution getDistribution() {
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,333,protected RealDistribution getDistribution() {
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,342,rotected void setDistribution(AbstractContinuousDistribution distribution) {
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/RealDistributionAbstractTest.java,340,protected void setDistribution(RealDistribution distribution) {
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,30,ublic class TDistributionTest extends ContinuousDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,30,public class TDistributionTest extends RealDistributionAbstractTest {
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,33,ublic class WeibullDistributionTest extends ContinuousDistributionAbstractTest  {
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,33,public class WeibullDistributionTest extends RealDistributionAbstractTest {

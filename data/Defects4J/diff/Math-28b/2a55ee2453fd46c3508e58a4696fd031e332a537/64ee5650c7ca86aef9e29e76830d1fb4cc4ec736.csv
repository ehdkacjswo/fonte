is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,156,hift.w = matrixT[idx][idx-1] * matrixT[idx-1][idx];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,157,ouble p = (matrixT[idx-1][idx-1] - matrixT[idx][idx]) / 2.0;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,156,shift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,157,double p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,161,atrixT[idx-1][idx-1] = matrixT[idx-1][idx-1] + shift.exShift;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,161,matrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,170,hift.x = matrixT[idx][idx-1];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,170,shift.x = matrixT[idx][idx - 1];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,179,or (int j = idx-1; j < n; j++) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,180, = matrixT[idx-1][j];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,181,atrixT[idx-1][j] = q * z + p * matrixT[idx][j];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,179,for (int j = idx - 1; j < n; j++) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,180,z = matrixT[idx - 1][j];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,181,matrixT[idx - 1][j] = q * z + p * matrixT[idx][j];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,187, = matrixT[i][idx-1];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,188,atrixT[i][idx-1] = q * z + p * matrixT[i][idx];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,187,z = matrixT[i][idx - 1];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,188,matrixT[i][idx - 1] = q * z + p * matrixT[i][idx];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,194, = matrixP[i][idx-1];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,195,atrixP[i][idx-1] = q * z + p * matrixP[i][idx];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,194,z = matrixP[i][idx - 1];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,195,matrixP[i][idx - 1] = q * z + p * matrixP[i][idx];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,437,** TODO: document */
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,437,/** TODO: describe */
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,439,** TODO: document */
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,439,/** TODO: describe */
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,441,** TODO: document */
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,441,/** TODO: describe */

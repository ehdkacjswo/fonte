is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,18,package org.apache.commons.math.optimization.general;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,20,import org.apache.commons.math.ConvergenceException;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,21,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,22,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,23,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,24,import org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,25,import org.apache.commons.math.optimization.univariate.BrentOptimizer;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,26,import org.apache.commons.math.optimization.univariate.BracketFinder;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,27,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,28,import org.apache.commons.math.optimization.MultivariateRealOptimizer;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,29,import org.apache.commons.math.optimization.OptimizationException;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,30,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,31,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,34,* Powell algorithm.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,35,* This code is translated and adapted from the Python version of this
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,36,* algorithm (as implemented in module {@code optimize.py} v0.5 of
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,37,* <em>SciPy</em>).
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,39,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,40,* @since 2.2
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,42,public class PowellOptimizer
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,43,extends AbstractScalarOptimizer {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,45,* Defautl line search tolerance ({@value}).
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,47,public static final double DEFAULT_LINE_SEARCH_TOLERANCE = 1e-7;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,49,* Line search.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,51,private final LineSearch line;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,54,* Constructor using the default line search tolerance (see the
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,55,* {@link #PowellOptimizer(double) other constructor}).
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,57,public PowellOptimizer() {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,58,this(DEFAULT_LINE_SEARCH_TOLERANCE);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,62,* @param lineSearchTolerance Relative error tolerance for the line search
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,63,* algorithm ({@link BrentOptimizer}).
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,65,public PowellOptimizer(double lineSearchTolerance) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,66,line = new LineSearch(lineSearchTolerance);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,69,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,70,@Override
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,71,protected RealPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,72,"throws FunctionEvaluationException,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,73,OptimizationException {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,74,final GoalType goal = getGoalType();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,75,final double[] guess = getStartPoint();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,76,final int n = guess.length;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,78,final double[][] direc = new double[n][n];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,79,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,80,direc[i][i] = 1;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,83,double[] x = guess;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,84,double fVal = computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,85,double[] x1 = x.clone();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,86,while (true) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,87,incrementIterationsCounter();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,89,double fX = fVal;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,90,double fX2 = 0;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,91,double delta = 0;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,92,int bigInd = 0;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,93,double alphaMin = 0;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,95,double[] direc1 = new double[n];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,96,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,97,direc1 = direc[i];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,99,fX2 = fVal;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,101,"line.search(x, direc1);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,102,fVal = line.getValueAtOptimum();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,103,alphaMin = line.getOptimum();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,104,"setNewPointAndDirection(x, direc1, alphaMin);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,106,if ((fX2 - fVal) > delta) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,107,delta = fX2 - fVal;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,108,bigInd = i;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,112,"final RealPointValuePair previous = new RealPointValuePair(x1, fX);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,113,"final RealPointValuePair current = new RealPointValuePair(x, fVal);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,114,"if (getConvergenceChecker().converged(getIterations(), previous, current)) {"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,115,switch (goal) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,116,case MINIMIZE:
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,117,return (fVal < fX ? current : previous);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,118,case MAXIMIZE:
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,119,return (fVal > fX ? current : previous);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,123,double[] x2 = new double[n];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,124,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,125,direc1[i] = x[i] - x1[i];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,126,x2[i] = 2 * x[i] - x1[i];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,129,x1 = x.clone();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,130,fX2 = computeObjectiveValue(x2);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,132,if (fX > fX2) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,133,double t = 2 * (fX + fX2 - 2 * fVal);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,134,double temp = fX - fVal - delta;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,135,t *= temp * temp;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,136,temp = fX - fX2;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,137,t -= delta * temp * temp;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,139,if (t < 0.0) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,140,"line.search(x, direc1);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,141,fVal = line.getValueAtOptimum();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,142,alphaMin = line.getOptimum();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,143,"setNewPointAndDirection(x, direc1, alphaMin);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,145,final int lastInd = n - 1;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,146,direc[bigInd] = direc[lastInd];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,147,direc[lastInd] = direc1;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,154,* Compute a new point (in the original space) and a new direction
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,155,"* vector, resulting from the line search."
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,156,* The parameters {@code p} and {@code d} will be changed in-place.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,158,* @param p Point used in the line search.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,159,* @param d Direction used in the line search.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,160,* @param optimum Optimum found by the line search.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,162,"private void setNewPointAndDirection(double[] p,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,163,"double[] d,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,164,double optimum) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,165,final int n = p.length;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,166,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,167,d[i] *= optimum;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,168,p[i] += d[i];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,173,* Class for finding the minimum of the objective function along a given
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,174,* direction.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,176,private class LineSearch {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,178,* Optimizer.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,180,private final AbstractUnivariateRealOptimizer optim = new BrentOptimizer();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,182,* Automatic bracketing.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,184,private final BracketFinder bracket = new BracketFinder();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,186,* Value of the optimum.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,188,private double optimum = Double.NaN;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,190,* Value of the objective function at the optimum.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,192,private double valueAtOptimum = Double.NaN;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,195,* @param tolerance Relative tolerance.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,197,public LineSearch(double tolerance) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,198,optim.setRelativeAccuracy(tolerance);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,199,optim.setAbsoluteAccuracy(Math.ulp(1d));
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,203,* Find the minimum of the function {@code f(p + alpha * d)}.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,205,* @param p Starting point.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,206,* @param d Search direction.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,208,"public void search(final double[] p,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,209,final double[] d)
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,210,throws OptimizationException {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,211,try {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,212,final int n = p.length;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,213,final UnivariateRealFunction f = new UnivariateRealFunction() {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,214,public double value(double alpha)
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,215,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,217,final double[] x = new double[n];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,218,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,219,x[i] = p[i] + alpha * d[i];
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,221,return computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,225,final GoalType goal = getGoalType();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,226,"bracket.search(f, goal, 0, 1);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,227,"optimum = optim.optimize(f, goal,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,228,"bracket.getLo(),"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,229,"bracket.getHi(),"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,230,bracket.getMid());
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,231,valueAtOptimum = f.value(optimum);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,232,} catch (Exception e) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,233,throw new OptimizationException(e);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,238,* @return the optimum.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,240,public double getOptimum() {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,241,return optimum;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,244,* @return the value of the function at the optimum.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,246,public double getValueAtOptimum() {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,247,return valueAtOptimum;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,17,package org.apache.commons.math.optimization.univariate;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,19,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,21,import org.apache.commons.math.MaxIterationsExceededException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,22,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,23,import org.apache.commons.math.optimization.GoalType;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,26,* Provide an interval that brackets a local optimum of a function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,27,"* This code is based on a Python implementation (from <em>SciPy</em>,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,28,* module {@code optimize.py} v0.5).
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,30,public class BracketFinder {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,31,private static final double EPS_MIN = 1e-21;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,33,* Golden section.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,35,private static final double GOLD = 1.618034;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,37,* Factor for expanding the interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,39,private final double growLimit;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,41,* Maximum number of iterations.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,43,private final int maxIterations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,45,* Number of iterations.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,47,private int iterations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,49,* Number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,51,private int evaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,53,* Lower bound of the bracket.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,55,private double lo;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,57,* Higher bound of the bracket.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,59,private double hi;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,61,* Point inside the bracket.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,63,private double mid;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,65,* Function value at {@link #lo}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,67,private double fLo;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,69,* Function value at {@link #hi}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,71,private double fHi;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,73,* Function value at {@link #mid}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,75,private double fMid;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,78,"* Constructor with default values {@code 100, 50} (see the"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,79,"* {@link #BracketFinder(double,int) other constructor})."
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,81,public BracketFinder() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,82,"this(100, 50);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,86,* Create a bracketing interval finder.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,88,* @param growLimit Expanding factor.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,89,* @param maxIterations Maximum number of iterations allowed for finding
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,90,* a bracketing interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,92,"public BracketFinder(double growLimit,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,93,int maxIterations) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,94,if (growLimit <= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,95,throw new NotStrictlyPositiveException(growLimit);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,97,if (maxIterations <= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,98,throw new NotStrictlyPositiveException(maxIterations);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,101,this.growLimit = growLimit;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,102,this.maxIterations = maxIterations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,106,* Search new points that bracket a local optimum of the function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,108,* @param func Function whose optimum should be bracketted.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,109,* @param goal {@link GoalType Goal type}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,110,* @param xA Initial point.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,111,* @param xB Initial point.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,113,"public void search(UnivariateRealFunction func,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,114,"GoalType goal,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,115,"double xA,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,116,double xB)
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,117,"throws MaxIterationsExceededException,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,118,FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,119,reset();
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,120,final boolean isMinim = (goal == GoalType.MINIMIZE);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,122,"double fA = eval(func, xA);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,123,"double fB = eval(func, xB);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,124,if (isMinim ?
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,125,fA < fB :
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,126,fA > fB) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,127,double tmp = xA;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,128,xA = xB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,129,xB = tmp;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,131,tmp = fA;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,132,fA = fB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,133,fB = tmp;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,136,double xC = xB + GOLD * (xB - xA);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,137,"double fC = eval(func, xC);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,139,while (isMinim ? fC < fB : fC > fB) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,140,if (++iterations > maxIterations) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,141,throw new MaxIterationsExceededException(maxIterations);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,144,double tmp1 = (xB - xA) * (fB - fC);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,145,double tmp2 = (xB - xC) * (fB - fA);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,147,double val = tmp2 - tmp1;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,148,double denom = Math.abs(val) < EPS_MIN ? 2 * EPS_MIN : 2 * val;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,150,double w = xB - ((xB - xC) * tmp2 - (xB -xA) * tmp1) / denom;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,151,double wLim = xB + growLimit * (xC - xB);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,153,double fW;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,154,if ((w - xC) * (xB - w) > 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,155,"fW = eval(func, w);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,156,if (isMinim ?
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,157,fW < fC :
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,158,fW > fC) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,159,xA = xB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,160,xB = w;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,161,fA = fB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,162,fB = fW;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,163,break;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,164,} else if (isMinim ?
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,165,fW > fB :
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,166,fW < fB) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,167,xC = w;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,168,fC = fW;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,169,break;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,171,w = xC + GOLD * (xC - xB);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,172,"fW = eval(func, w);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,173,} else if ((w - wLim) * (wLim - xC) >= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,174,w = wLim;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,175,"fW = eval(func, w);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,176,} else if ((w - wLim) * (xC - w) > 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,177,"fW = eval(func, w);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,178,if (isMinim ?
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,179,fW < fC :
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,180,fW > fC) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,181,xB = xC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,182,xC = w;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,183,w = xC + GOLD * (xC -xB);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,184,fB = fC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,185,fC =fW;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,186,"fW = eval(func, w);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,188,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,189,w = xC + GOLD * (xC - xB);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,190,"fW = eval(func, w);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,193,xA = xB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,194,xB = xC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,195,xC = w;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,196,fA = fB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,197,fB = fC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,198,fC = fW;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,201,lo = xA;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,202,mid = xB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,203,hi = xC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,204,fLo = fA;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,205,fMid = fB;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,206,fHi = fC;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,210,* @return the number of iterations.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,212,public int getIterations() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,213,return iterations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,216,* @return the number of evalutations.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,218,public int getEvaluations() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,219,return evaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,223,* @return the lower bound of the bracket.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,225,public double getLo() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,226,return lo;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,229,* @return the higher bound of the bracket.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,231,public double getHi() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,232,return hi;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,235,* @return a point in the middle of the bracket.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,237,public double getMid() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,238,return mid;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,242,* @param func Function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,243,* @param x Argument.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,244,* @return {@code f(x)}
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,246,"private double eval(UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,247,double x)
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,248,throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,250,++evaluations;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,251,return f.value(x);
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,255,* Reset internal state.
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,257,private void reset() {
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,258,iterations = 0;
True,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java,259,evaluations = 0;
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,17,package org.apache.commons.math.analysis;
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,22,* Auxiliary class for testing optimizers.
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,24,* @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,26,public class SincFunction implements DifferentiableUnivariateRealFunction {
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,27,private static final double EPS = 1e-12;
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,30,* @param x Argument.
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,31,* @return the value of this function at point {@code x}.
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,33,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,34,return (Math.abs(x) < EPS ?
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,35,1 :
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,36,Math.sin(x) / x);
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,40,* {@inheritDoc}
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,42,public UnivariateRealFunction derivative() {
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,43,return new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,44,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,45,return (Math.abs(x) < EPS ?
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,46,0 :
True,src/test/java/org/apache/commons/math/analysis/SincFunction.java,src/test/java/org/apache/commons/math/analysis/SincFunction.java,47,(x * Math.cos(x) - Math.sin(x)) / (x * x));
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,17,package org.apache.commons.math.analysis;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,22,* Auxiliary class for testing optimizers.
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,24,* @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,26,public class SumSincFunction implements DifferentiableMultivariateRealFunction {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,27,private static final DifferentiableUnivariateRealFunction sinc = new SincFunction();
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,28,private static final UnivariateRealFunction sincDeriv = sinc.derivative();
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,31,* Factor that will multiply each term of the sum.
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,33,private final double factor;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,36,* @param factor Factor that will multiply each term of the sum.
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,38,public SumSincFunction(double factor) {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,39,this.factor = factor;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,43,* @param point Argument.
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,44,* @return the value of this function at point {@code x}.
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,46,public double value(double[] point) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,47,double sum = 0;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,48,"for (int i = 0, max = point.length; i < max; i++) {"
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,49,final double x = point[i];
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,50,final double v = sinc.value(x);
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,51,sum += v;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,53,return factor * sum;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,57,* {@inheritDoc}
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,59,public MultivariateRealFunction partialDerivative(final int k) {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,60,return new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,61,public double value(double[] point) throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,62,return sincDeriv.value(point[k]);
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,68,* {@inheritDoc}
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,70,public MultivariateVectorialFunction gradient() {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,71,return new MultivariateVectorialFunction() {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,72,public double[] value(double[] point)
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,73,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,74,final int n = point.length;
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,75,final double[] r = new double[n];
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,76,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,77,final double x = point[i];
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,78,r[i] = factor * sincDeriv.value(x);
True,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,src/test/java/org/apache/commons/math/analysis/SumSincFunction.java,80,return r;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,17,package org.apache.commons.math.optimization.general;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,19,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,21,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,23,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,24,import org.apache.commons.math.analysis.SumSincFunction;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,25,import org.apache.commons.math.optimization.GoalType;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,26,import org.apache.commons.math.optimization.MultivariateRealOptimizer;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,27,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,28,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,30,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,31,import org.junit.Test;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,34,* Test for {@link PowellOptimizer}.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,36,public class PowellOptimizerTest {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,38,@Test
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,39,public void testSumSinc() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,40,final MultivariateRealFunction func = new SumSincFunction(-1);
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,42,int dim = 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,43,final double[] minPoint = new double[dim];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,44,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,45,minPoint[i] = 0;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,48,double[] init = new double[dim];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,50,// Initial is minimum.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,51,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,52,init[i] = minPoint[i];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,54,"doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-15, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,56,// Initial is far from minimum.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,57,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,58,init[i] = minPoint[i] + 4;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,60,"doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-15, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,63,@Test
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,64,public void testQuadratic() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,65,final MultivariateRealFunction func = new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,66,public double value(double[] x)
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,67,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,68,final double a = x[0] - 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,69,final double b = x[1] - 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,70,return a * a + b * b + 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,74,int dim = 2;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,75,final double[] minPoint = new double[dim];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,76,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,77,minPoint[i] = 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,80,double[] init = new double[dim];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,82,// Initial is minimum.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,83,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,84,init[i] = minPoint[i];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,86,"doTest(func, minPoint, init,  GoalType.MINIMIZE, 1e-15, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,88,// Initial is far from minimum.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,89,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,90,init[i] = minPoint[i] - 20;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,92,"doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-15, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,95,@Test
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,96,public void testMaximizeQuadratic() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,97,final MultivariateRealFunction func = new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,98,public double value(double[] x)
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,99,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,100,final double a = x[0] - 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,101,final double b = x[1] - 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,102,return -a * a - b * b + 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,106,int dim = 2;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,107,final double[] maxPoint = new double[dim];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,108,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,109,maxPoint[i] = 1;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,112,double[] init = new double[dim];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,114,// Initial is minimum.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,115,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,116,init[i] = maxPoint[i];
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,118,"doTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-15, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,120,// Initial is far from minimum.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,121,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,122,init[i] = maxPoint[i] - 20;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,124,"doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-15, 1e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,128,* @param func Function to optimize.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,129,* @param optimum Expected optimum.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,130,* @param init Starting point.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,131,* @param goal Minimization or maximization.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,132,* @param objTol Tolerance (relative error on the objective function).
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,133,* @param pointTol Tolerance on the position of the optimum.
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,135,"private void doTest(MultivariateRealFunction func,"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,136,"double[] optimum,"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,137,"double[] init,"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,138,"GoalType goal,"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,139,"double objTol,"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,140,double pointTol)
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,141,throws MathException {
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,142,final MultivariateRealOptimizer optim = new PowellOptimizer();
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,143,final double relTol = 1e-10;
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,144,"optim.setConvergenceChecker(new SimpleScalarValueChecker(objTol, -1));"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,146,"final RealPointValuePair result = optim.optimize(func, goal, init);"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,147,final double[] found = result.getPoint();
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,149,"for (int i = 0, dim = optimum.length; i < dim; i++) {"
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,150,"Assert.assertEquals(optimum[i], found[i], pointTol);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,17,package org.apache.commons.math.optimization.univariate;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,19,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,20,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,22,import org.apache.commons.math.optimization.GoalType;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,27,public class BracketFinderTest {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,29,@Test
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,30,public void testCubicMin() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,31,final BracketFinder bFind = new BracketFinder();
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,32,final UnivariateRealFunction func = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,33,public double value(double x)
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,34,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,35,if (x < -2) {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,36,return value(-2);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,38,else  {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,39,return (x - 1) * (x + 2) * (x + 3);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,44,"bFind.search(func, GoalType.MINIMIZE, -2 , -1);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,45,final double tol = 1e-15;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,46,// Comparing with results computed in Python.
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,47,"Assert.assertEquals(-2, bFind.getLo(), tol);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,48,"Assert.assertEquals(-1, bFind.getMid(), tol);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,49,"Assert.assertEquals(0.61803399999999997, bFind.getHi(), tol);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,52,@Test
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,53,public void testCubicMax() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,54,final BracketFinder bFind = new BracketFinder();
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,55,final UnivariateRealFunction func = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,56,public double value(double x)
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,57,throws FunctionEvaluationException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,58,if (x < -2) {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,59,return value(-2);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,61,else  {
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,62,return -(x - 1) * (x + 2) * (x + 3);
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,67,"bFind.search(func, GoalType.MAXIMIZE, -2 , -1);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,68,final double tol = 1e-15;
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,69,"Assert.assertEquals(-2, bFind.getLo(), tol);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,70,"Assert.assertEquals(-1, bFind.getMid(), tol);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java,71,"Assert.assertEquals(0.61803399999999997, bFind.getHi(), tol);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,189,bscissa * sin + originOffset * cos);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,189,abscissa * sin + originOffset * cos);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,23,import org.apache.commons.math.geometry.euclidean.oned.Interval;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,50,/** Create a sub-line from two endpoints.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,51,* @param start start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,52,* @param end end point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,54,"public SubLine(final Vector2D start, final Vector2D end) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,55,"super(new Line(start, end), buildIntervalSet(start, end));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,58,/** Get the endpoints of the sub-line.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,59,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,60,"* A subline may be any arbitrary number of disjoints segments, so the endpoints"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,61,* are provided as a list of endpoint pairs. Each element of the list represents
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,62,"* one segment, and each segment contains a start point at index 0 and an end point"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,63,"* at index 1. If the sub-line is unbounded in the negative infinity direction,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,64,* the start point of the first segment will have infinite coordinates. If the
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,65,"* sub-line is unbounded in the positive infinity direction, the end point of the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,66,* last segment will have infinite coordinates. So a sub-line covering the whole
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,67,* line will contain just one row and both elements of this row will have infinite
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,68,"* coordinates. If the sub-line is empty, the returned list will contain 0 segments."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,69,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,70,* @return list of segments endpoints
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,72,public List<Vector2D[]> getSegments() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,74,final Line line = (Line) getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,75,final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,76,final List<Vector2D[]> segments = new ArrayList<Vector2D[]>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,78,for (final Interval interval : list) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,79,final Vector2D start = line.toSpace(new Vector1D(interval.getLower()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,80,final Vector2D end   = line.toSpace(new Vector1D(interval.getUpper()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,81,"segments.add(new Vector2D[] { start, end });"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,84,return segments;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,88,/** Build an interval set from two points.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,89,* @param start start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,90,* @param end end point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,91,* @return an interval set
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,93,"private static IntervalsSet buildIntervalSet(final Vector2D start, final Vector2D end) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,94,"final Line line = new Line(start, end);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,95,"return new IntervalsSet(line.toSubSpace(start).getX(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,96,line.toSubSpace(end).getX());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,17,package org.apache.commons.math.geometry.euclidean.twod;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,19,import java.util.List;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,21,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,22,import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,23,import org.apache.commons.math.geometry.partitioning.RegionFactory;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,27,public class SubLineTest {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,29,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,30,public void testEndPoints() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,31,"SubLine sub = new SubLine(new Vector2D(-1, -7), new Vector2D(7, -1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,32,List<Vector2D[]> segments = sub.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,33,"Assert.assertEquals(1, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,34,"Assert.assertEquals(-1, segments.get(0)[0].getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,35,"Assert.assertEquals(-7, segments.get(0)[0].getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,36,"Assert.assertEquals( 7, segments.get(0)[1].getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,37,"Assert.assertEquals(-1, segments.get(0)[1].getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,40,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,41,public void testNoEndPoints() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,42,"SubLine wholeLine = new Line(new Vector2D(-1, 7), new Vector2D(7, 1)).wholeHyperplane();"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,43,List<Vector2D[]> segments = wholeLine.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,44,"Assert.assertEquals(1, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,45,Assert.assertTrue(Double.isInfinite(segments.get(0)[0].getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,46,segments.get(0)[0].getX() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,47,Assert.assertTrue(Double.isInfinite(segments.get(0)[0].getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,48,segments.get(0)[0].getY() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,49,Assert.assertTrue(Double.isInfinite(segments.get(0)[1].getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,50,segments.get(0)[1].getX() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,51,Assert.assertTrue(Double.isInfinite(segments.get(0)[1].getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,52,segments.get(0)[1].getY() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,55,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,56,public void testNoSegments() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,57,"SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,58,new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,59,List<Vector2D[]> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,60,"Assert.assertEquals(0, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,63,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,64,public void testSeveralSegments() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,65,"SubLine twoSubs = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,66,"new RegionFactory<Euclidean1D>().union(new IntervalsSet(1, 2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,67,"new IntervalsSet(3, 4)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,68,List<Vector2D[]> segments = twoSubs.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,69,"Assert.assertEquals(2, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,72,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,73,public void testHalfInfiniteNeg() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,74,"SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,75,"new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,76,List<Vector2D[]> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,77,"Assert.assertEquals(1, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,78,Assert.assertTrue(Double.isInfinite(segments.get(0)[0].getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,79,segments.get(0)[0].getX() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,80,Assert.assertTrue(Double.isInfinite(segments.get(0)[0].getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,81,segments.get(0)[0].getY() < 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,82,"Assert.assertEquals( 3, segments.get(0)[1].getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,83,"Assert.assertEquals(-4, segments.get(0)[1].getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,86,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,87,public void testHalfInfinitePos() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,88,"SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,89,"new IntervalsSet(0.0, Double.POSITIVE_INFINITY));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,90,List<Vector2D[]> segments = empty.getSegments();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,91,"Assert.assertEquals(1, segments.size());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,92,"Assert.assertEquals( 3, segments.get(0)[0].getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,93,"Assert.assertEquals(-4, segments.get(0)[0].getY(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,94,Assert.assertTrue(Double.isInfinite(segments.get(0)[1].getX()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,95,segments.get(0)[1].getX() > 0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,96,Assert.assertTrue(Double.isInfinite(segments.get(0)[1].getY()) &&
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/SubLineTest.java,97,segments.get(0)[1].getY() > 0);

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,2,* Copyright 2006 The Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,16,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,21,import org.apache.commons.math.special.Beta;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,22,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,25,* The default implementation of {@link PascalDistribution}.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,27,* @version $Revision:$
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,29,public class PascalDistributionImpl
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,30,extends AbstractIntegerDistribution
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,31,"implements PascalDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,33,/** Serializable version identifier */
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,34,private static final long serialVersionUID = 6751309484392813623L;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,36,/** The number of trials */
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,37,private int numberOfSuccesses;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,39,/** The probability of success */
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,40,private double probabilityOfSuccess;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,43,* Create a binomial distribution with the given number of trials and
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,44,* probability of success.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,46,* @param r the number of successes
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,47,* @param p the probability of success
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,49,"public PascalDistributionImpl(int r, double p) {"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,50,super();
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,51,setNumberOfSuccesses(r);
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,52,setProbabilityOfSuccess(p);
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,56,* Access the number of trials for this distribution.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,58,* @return the number of trials
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,60,public int getNumberOfSuccesses() {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,61,return numberOfSuccesses;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,65,* Access the probability of success for this distribution.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,67,* @return the probability of success
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,69,public double getProbabilityOfSuccess() {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,70,return probabilityOfSuccess;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,74,* Change the number of trials for this distribution.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,76,* @param successes the new number of trials
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,77,* @throws IllegalArgumentException if <code>trials</code> is not positive.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,79,public void setNumberOfSuccesses(int successes) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,80,if (successes < 0) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,81,"throw new IllegalArgumentException(""number of trials must be non-negative."");"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,83,numberOfSuccesses = successes;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,87,* Change the probability of success for this distribution.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,89,* @param p the new probability of success
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,90,* @throws IllegalArgumentException if <code>p</code> is not a valid
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,91,*         probability.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,93,public void setProbabilityOfSuccess(double p) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,94,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,95,"throw new IllegalArgumentException(""probability of success must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,97,probabilityOfSuccess = p;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,101,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,102,* bracket a PDF root.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,104,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,105,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,106,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,108,protected int getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,109,return -1;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,113,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,114,* bracket a PDF root.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,116,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,117,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,118,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,120,protected int getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,121,// use MAX - 1 because MAX causes loop
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,122,return Integer.MAX_VALUE - 1;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,126,"* For this distribution, X, this method returns P(X &le; x)."
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,128,* @param x the value at which the PDF is evaluated
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,129,* @return PDF for this distribution
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,130,* @throws MathException if the cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,131,*            computed due to convergence or other numerical errors
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,133,public double cumulativeProbability(int x) throws MathException {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,134,double ret;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,135,if (x < 0) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,136,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,137,} else {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,138,ret = Beta.regularizedBeta(
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,139,"getProbabilityOfSuccess(),"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,140,"getNumberOfSuccesses(),"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,141,x + 1);
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,143,return ret;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,147,"* For this distribution, X, this method returns P(X = x)."
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,149,* @param x the value at which the PMF is evaluated
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,150,* @return PMF for this distribution
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,152,public double probability(int x) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,153,double ret;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,154,if (x < 0) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,155,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,156,} else {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,157,"ret = MathUtils.binomialCoefficientDouble(x + getNumberOfSuccesses() - 1,"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,158,getNumberOfSuccesses() - 1) *
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,159,"Math.pow(getProbabilityOfSuccess(), getNumberOfSuccesses()) *"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,160,"Math.pow(1.0 - getProbabilityOfSuccess(),"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,161,x);
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,163,return ret;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,167,"* For this distribution, X, this method returns the largest x, such"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,168,* that P(X &le; x) &le; <code>p</code>.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,169,* <p>
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,170,* Returns <code>-1</code> for p=0 and <code>Integer.MAX_VALUE</code> for
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,171,* p=1.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,173,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,174,* @return the largest x such that P(X &le; x) <= p
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,175,* @throws MathException if the inverse cumulative probability can not be
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,176,*            computed due to convergence or other numerical errors.
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,177,* @throws IllegalArgumentException if p < 0 or p > 1
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,179,public int inverseCumulativeProbability(final double p) throws MathException {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,180,// handle extreme values explicitly
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,181,if (p == 0) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,182,return -1;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,184,if (p == 1) {
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,185,return Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,188,// use default bisection impl
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,189,return super.inverseCumulativeProbability(p);

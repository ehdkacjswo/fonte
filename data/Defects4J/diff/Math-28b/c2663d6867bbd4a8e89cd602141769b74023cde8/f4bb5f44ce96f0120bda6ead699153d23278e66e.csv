is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,5,* reserved.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,9,* are met:
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,17,*    distribution.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,55,package org.apache.commons.math;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,58,* Some useful additions to the built-in functions in lang.Math<p>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,60,* @author Phil Steitz
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,61,* @version $Revision: 1.1 $ $Date: 2003/06/04 02:31:13 $
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,63,public class MathUtils {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,66,* Returns an exact representation of the
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,67,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,68,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,69,* the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,70,* an <code>n</code>-element set.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,71,* <p>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,72,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,73,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,74,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,75,* <li> The result is small enough to fit into a <code>long</code>.  The
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,76,*      largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,77,*      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,78,*      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,79,*      </code> is thrown.</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,80,* </ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,82,* @param n the size of the set
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,83,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,84,* @return <code>n choose k</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,86,"public static long binomialCoefficient(int n, int k) {"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,87,if (n < k) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,88,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,89,"(""must have n >= k for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,91,if (n <= 0)  {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,92,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,93,"(""must have n > 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,95,if ((n == k) || (k == 0)) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,96,return 1;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,98,if ((k == 1) || (k == n - 1)) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,99,return n;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,102,"long result = Math.round(binomialCoefficientDouble(n, k));"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,103,if (result == Long.MAX_VALUE) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,104,throw new ArithmeticException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,105,"(""result too large to represent in a long integer"");"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,107,return result;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,111,* Returns a <code>double</code> representation of the
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,112,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,113,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,114,* the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,115,* an <code>n</code>-element set.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,116,* <p>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,117,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,118,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,119,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,120,* <li> The result is small enough to fit into a <code>double</code>.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,121,*      The largest value of <code>n</code> for which all coefficients are
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,122,*      < Double.MAX_VALUE is 1029.  If the computed value exceeds
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,123,"*      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,124,* </ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,126,* @param n the size of the set
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,127,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,128,* @return <code>n choose k</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,130,"public static double binomialCoefficientDouble(int n, int k) {"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,131,"return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + .5);"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,135,* Returns the natural <code>log</code> of the
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,136,"* <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,137,"* Binomial Coefficient</a>,  ""<code>n choose k</code>"","
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,138,* the number of <code>k</code>-element subsets that can be selected from
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,139,* an <code>n</code>-element set.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,140,* <p>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,141,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,142,* <li> <code>0 < k <= n </code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,143,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,144,* </ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,146,* @param n the size of the set
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,147,* @param k the size of the subsets to be counted
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,148,* @return <code>n choose k</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,150,"public static double binomialCoefficientLog(int n, int k) {"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,151,if (n < k) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,152,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,153,"(""must have n >= k for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,155,if (n <= 0)  {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,156,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,157,"(""must have n > 0 for binomial coefficient (n,k)"");"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,159,if ((n == k) || (k == 0)) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,160,return 0;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,162,if ((k == 1) || (k == n - 1)) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,163,return Math.log((double) n);
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,165,double logSum = 0;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,167,// n!/k!
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,168,for (int i = k + 1; i <= n; i++) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,169,logSum += Math.log((double) i);
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,172,// divide by (n-k)!
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,173,for (int i = 2; i <= n - k; i++) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,174,logSum -= Math.log((double) i);
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,177,return logSum;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,181,* Returns <code>n</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,182,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,183,"* Factorial</a>, or <code>n!</code>,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,184,"* the product of the numbers <code>1,...,n</code>."
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,185,* <p>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,186,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,187,* <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,188,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,189,* <li> The result is small enough to fit into a <code>long</code>.  The
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,190,*      largest value of <code>n</code> for which <code>n!</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,191,*      < Long.MAX_VALUE</code> is 20.  If the computed value
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,192,*      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,193,*      </code> is thrown.</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,194,* </ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,196,* @param n argument
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,197,* @return <code>n!</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,199,public static long factorial(int n) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,200,long result = Math.round(factorialDouble(n));
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,201,if (result == Long.MAX_VALUE) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,202,throw new ArithmeticException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,203,"(""result too large to represent in a long integer"");"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,205,return result;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,209,* Returns <code>n</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,210,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,211,"* Factorial</a>, or <code>n!</code>,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,212,"* the product of the numbers <code>1,...,n</code>, as as"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,213,* <code>double</code>.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,214,* <p>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,215,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,216,* <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,217,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,218,* <li> The result is small enough to fit into a <code>double</code>.  The
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,219,*      largest value of <code>n</code> for which <code>n!</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,220,*      < Double.MAX_VALUE</code> is 170.  If the computed value exceeds
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,221,"*      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,222,* </ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,224,* @param n argument
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,225,* @return <code>n!</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,227,public static double factorialDouble(int n) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,228,if (n <= 0)  {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,229,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,230,"(""must have n > 0 for n!"");"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,232,return Math.floor(Math.exp(factorialLog(n)) + 0.5);
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,236,* Returns the natural <code>log</code> of <code>n</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,237,"* <a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,238,"* Factorial</a>, or <code>n!</code>,"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,239,"* the product of the numbers <code>1,...,n</code>, as as"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,240,* <code>double</code>.
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,241,* <p>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,242,* <Strong>Preconditions</strong>:<ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,243,* <li> <code>n > 0</code> (otherwise
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,244,*      <code>IllegalArgumentException</code> is thrown)</li>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,245,* </ul>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,247,* @param n argument
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,248,* @return <code>n!</code>
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,250,public static double factorialLog(int n) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,251,if (n <= 0)  {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,252,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,253,"(""must have n > 0 for n!"");"
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,255,double logSum = 0;
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,256,for (int i = 2; i <= n; i++) {
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,257,logSum += Math.log((double) i);
True,src/java/org/apache/commons/math/MathUtils.java,src/java/org/apache/commons/math/MathUtils.java,259,return logSum;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,5,* reserved.
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,9,* are met:
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,59,import junit.framework.AssertionFailedError;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,62,* Test cases for the MathUtils class.
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,64,* @author Phil Steitz
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,65,* @version $Revision: 1.1 $ $Date: 2003/06/04 02:31:14 $
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,68,public final class MathUtilsTest extends TestCase {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,70,public MathUtilsTest(String name) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,71,super(name);
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,74,public void setUp() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,77,public static Test suite() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,78,TestSuite suite = new TestSuite(MathUtilsTest.class);
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,79,"suite.setName(""MathUtils Tests"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,80,return suite;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,83,public void testBinomialCoefficient() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,84,"long[] bcoef5 = {1,5,10,10,5,1};"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,85,"long[] bcoef6 = {1,6,15,20,15,6,1};"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,86,for (int i = 0; i < 6; i++) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,87,"assertEquals(""5 choose "" + i, bcoef5[i],"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,88,"MathUtils.binomialCoefficient(5,i));"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,90,for (int i = 0; i < 7; i++) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,91,"assertEquals(""6 choose "" + i, bcoef6[i],"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,92,"MathUtils.binomialCoefficient(6,i));"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,95,for (int n = 1; n < 10; n++) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,96,for (int k = 0; k <= n; k++) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,97,"assertEquals(n + "" choose "" + k, binomialCoefficient(n, k),"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,98,"MathUtils.binomialCoefficient(n, k));"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,99,"assertEquals(n + "" choose "" + k,(double) binomialCoefficient(n, k),"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,100,"MathUtils.binomialCoefficientDouble(n, k),Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,101,"assertEquals(n + "" choose "" + k,"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,102,"Math.log((double) binomialCoefficient(n, k)),"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,103,"MathUtils.binomialCoefficientLog(n, k),10E-12);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,108,"* Takes a long time for recursion to unwind, but succeeds"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,109,"* and yields exact value = 2,333,606,220"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,111,"assertEquals(MathUtils.binomialCoefficient(34,17),"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,112,"binomialCoefficient(34,17));"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,116,public void testBinomialCoefficientFail() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,117,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,118,"long x = MathUtils.binomialCoefficient(0,0);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,119,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,120,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,123,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,124,"long x = MathUtils.binomialCoefficient(4,5);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,125,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,126,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,129,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,130,"double x = MathUtils.binomialCoefficientDouble(0,0);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,131,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,132,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,135,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,136,"double x = MathUtils.binomialCoefficientDouble(4,5);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,137,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,138,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,141,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,142,"double x = MathUtils.binomialCoefficientLog(0,0);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,143,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,144,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,147,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,148,"double x = MathUtils.binomialCoefficientLog(4,5);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,149,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,150,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,153,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,154,"long x = MathUtils.binomialCoefficient(67,34);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,155,"fail (""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,156,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,159,"double x = MathUtils.binomialCoefficientDouble(1030,515);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,160,"assertTrue(""expecting infinite binomial coefficient"","
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,161,Double.isInfinite(x));
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,164,public void testFactorial() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,165,for (int i = 1; i < 10; i++) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,166,"assertEquals(i + ""! "",factorial(i),MathUtils.factorial(i));"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,167,"assertEquals(i + ""! "",(double)factorial(i),"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,168,"MathUtils.factorialDouble(i),Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,169,"assertEquals(i + ""! "",Math.log((double)factorial(i)),"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,170,"MathUtils.factorialLog(i),10E-12);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,174,public void testFactorialFail() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,175,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,176,long x = MathUtils.factorial(0);
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,177,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,178,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,181,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,182,double x = MathUtils.factorialDouble(0);
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,183,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,184,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,187,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,188,double x = MathUtils.factorialLog(0);
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,189,"fail (""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,190,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,193,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,194,double x = MathUtils.factorial(21);
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,195,"fail (""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,196,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,199,"assertTrue(""expecting infinite factorial value"","
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,200,Double.isInfinite(MathUtils.factorialDouble(171)));
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,206,* Exact recursive implementation to test against
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,208,"private long binomialCoefficient(int n, int k) {"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,209,if ((n == k) || (k == 0)) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,210,return 1;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,212,if ((k == 1) || (k == n - 1)) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,213,return n;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,215,"return binomialCoefficient(n - 1, k - 1) +"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,216,"binomialCoefficient(n - 1, k);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,220,* Finds the largest values of n for which binomialCoefficient and
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,221,"* binomialCoefficientDouble will return values that fit in a long, double,"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,222,* resp.  Remove comments around test below to get this in test-report
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,224,public void testLimits() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,225,findBinomialLimits();
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,229,private void findBinomialLimits() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,231,* will kick out 66 as the limit for long
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,233,boolean foundLimit = false;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,234,int test = 10;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,235,while (!foundLimit) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,236,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,237,"double x = MathUtils.binomialCoefficient(test, test / 2);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,238,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,239,foundLimit = true;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,240,System.out.println
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,241,"(""largest n for binomialCoefficient = "" + (test - 1) );"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,243,test++;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,247,* will kick out 1029 as the limit for double
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,249,foundLimit = false;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,250,test = 10;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,251,while (!foundLimit) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,252,"double x = MathUtils.binomialCoefficientDouble(test, test / 2);"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,253,if (Double.isInfinite(x)) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,254,foundLimit = true;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,255,System.out.println
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,256,"(""largest n for binomialCoefficientD = "" + (test - 1) );"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,258,test++;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,263,* Finds the largest values of n for which factiorial and
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,264,"* factorialDouble will return values that fit in a long, double,"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,265,* resp.  Remove comments around test below to get this in test-report
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,267,public void testFactiorialLimits() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,268,findFactorialLimits();
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,272,private void findFactorialLimits() {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,274,* will kick out 20 as the limit for long
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,276,boolean foundLimit = false;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,277,int test = 10;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,278,while (!foundLimit) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,279,try {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,280,double x = MathUtils.factorial(test);
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,281,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,282,foundLimit = true;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,283,System.out.println
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,284,"(""largest n for factorial = "" + (test - 1) );"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,286,test++;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,290,* will kick out 170 as the limit for double
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,292,foundLimit = false;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,293,test = 10;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,294,while (!foundLimit) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,295,double x = MathUtils.factorialDouble(test);
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,296,if (Double.isInfinite(x)) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,297,foundLimit = true;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,298,System.out.println
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,299,"(""largest n for factorialDouble = "" + (test - 1) );"
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,301,test++;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,307,* Exact direct multiplication implementation to test against
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,309,private long factorial(int n) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,310,long result = 1;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,311,for (int i = 2; i <= n; i++) {
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,312,result *= i;
True,src/test/org/apache/commons/math/MathUtilsTest.java,src/test/org/apache/commons/math/MathUtilsTest.java,314,return result;

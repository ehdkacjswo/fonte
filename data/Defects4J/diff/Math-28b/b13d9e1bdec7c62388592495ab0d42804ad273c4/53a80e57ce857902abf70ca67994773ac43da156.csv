is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,33,* <p>Note: This class is package private as it is only used internally in
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,34,* the {@link StorelessCovariance} class.</p>
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,36,ublic class StorelessBivariateCovariance {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,39,class StorelessBivariateCovariance {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,37,"* <p>Note: the underlying covariance matrix is symmetric, thus only the"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,38,* upper triangular part of the matrix is stored and updated each increment.</p>
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,42,** the two-dimensional covariance matrix */
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,43,rivate StorelessBivariateCovariance[][] covMatrix;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,45,** row dimension of the covariance matrix */
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,46,rivate int rowDimension;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,48,** column dimension of the covariance matrix */
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,49,rivate int colDimension;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,45,/** the square covariance matrix (upper triangular part) */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,46,private StorelessBivariateCovariance[] covMatrix;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,51,** flag for bias correction */
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,52,rivate boolean biasCorrected;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,48,/** dimension of the square covariance matrix */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,49,private int dimension;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,55, Create a bias corrected covariance matrix with a given number of rows and columns.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,52,* Create a bias corrected covariance matrix with a given dimension.
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,57, @param rows number of rows
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,58, @param cols number of columns
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,54,* @param dim the dimension of the square covariance matrix
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,60,"ublic StorelessCovariance(final int rows, final int cols) {"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,61,"his(rows, cols, true);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,56,public StorelessCovariance(final int dim) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,57,"this(dim, true);"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,68, @param rows number of variables in the rows
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,69, @param cols number of variables in the columns
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,70, @param biasCorrection if <code>true</code> the covariance estimate is corrected
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,64,* @param dim the dimension of the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,65,* @param biasCorrected if <code>true</code> the covariance estimate is corrected
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,74,"ublic StorelessCovariance(final int rows, final int cols,"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,75,inal boolean biasCorrection) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,76,owDimension = rows;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,77,olDimension = cols;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,78,iasCorrected = biasCorrection;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,79,ovMatrix = new StorelessBivariateCovariance[rowDimension][colDimension];
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,80,nitializeMatrix();
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,69,"public StorelessCovariance(final int dim, final boolean biasCorrected) {"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,70,dimension = dim;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,71,covMatrix = new StorelessBivariateCovariance[dimension * (dimension + 1) / 2];
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,72,initializeMatrix(biasCorrected);
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,79,* @param biasCorrected if the covariance estimate shall be corrected for bias
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,87,rivate void initializeMatrix() {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,88,or(int i=0;i<rowDimension;i++){
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,89,or(int j=0;j<colDimension;j++){
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,90,ovMatrix[i][j] = new StorelessBivariateCovariance(biasCorrected);
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,81,private void initializeMatrix(final boolean biasCorrected) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,82,for(int i = 0; i < dimension; i++){
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,83,for(int j = 0; j < dimension; j++){
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,84,"setElement(i, j, new StorelessBivariateCovariance(biasCorrected));"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,96, Get the covariance for an individual element of the covariance matrix.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,90,"* Returns the index (i, j) translated into the one-dimensional"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,91,* array used to store the upper triangular part of the symmetric
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,92,* covariance matrix.
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,98, @param xIndex row index in the covariance matrix
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,99, @param yIndex column index in the covariance matrix
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,100, @return the covariance of the given element
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,94,* @param i the row index
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,95,* @param j the column index
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,96,* @return the corresponding index in the matrix array
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,102,"ublic StorelessBivariateCovariance getCovariance(final int xIndex,"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,103,inal int yIndex) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,104,eturn covMatrix[xIndex][yIndex];
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,98,"private int indexOf(final int i, final int j) {"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,99,return j < i ? i * (i + 1) / 2 + j : j * (j + 1) / 2 + i;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,108, Set the covariance for an individual element of the covariance matrix.
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,110, @param xIndex row index in the covariance matrix
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,111, @param yIndex column index in the covariance matrix
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,112, @param cov the covariance to be set
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,103,"* Gets the element at index (i, j) from the covariance matrix"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,104,* @param i the row index
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,105,* @param j the column index
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,106,* @return the {@link StorelessBivariateCovariance} element at the given index
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,114,"ublic void setCovariance(final int xIndex, final int yIndex,"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,115,inal StorelessBivariateCovariance cov) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,116,ovMatrix[xIndex][yIndex] = cov;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,108,"private StorelessBivariateCovariance getElement(final int i, final int j) {"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,109,"return covMatrix[indexOf(i, j)];"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,120, Increment one individual element of the covariance matrix.
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,122, <p>The element is specified by the xIndex and yIndex and incremented with the
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,123, corresponding values of x and y.</p>
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,113,"* Sets the covariance element at index (i, j) in the covariance matrix"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,114,* @param i the row index
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,115,* @param j the column index
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,116,* @param cov the {@link StorelessBivariateCovariance} element to be set
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,118,"private void setElement(final int i, final int j,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,119,final StorelessBivariateCovariance cov) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,120,"covMatrix[indexOf(i, j)] = cov;"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,124,* Get the covariance for an individual element of the covariance matrix.
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,127, @param x value of x
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,128, @param y value of y
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,128,* @return the covariance of the given element
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,129,* @throws NumberIsTooSmallException if the number of observations
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,130,* in the cell is &lt; 2
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,130,"ublic void incrementCovariance(final int xIndex, final int yIndex,"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,131,"inal double x, final double y) {"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,132,"ovMatrix[xIndex][yIndex].increment(x, y);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,132,"public double getCovariance(final int xIndex,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,133,final int yIndex)
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,134,throws NumberIsTooSmallException {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,136,"return getElement(xIndex, yIndex).getResult();"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,138, @param rowData array representing one row of data.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,143,* @param data array representing one row of data.
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,142,ublic void incrementRow(final double[] rowData)
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,147,public void increment(final double[] data)
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,145,nt length = rowData.length;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,146,f (length != colDimension) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,147,"hrow new DimensionMismatchException(length, colDimension);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,150,int length = data.length;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,151,if (length != dimension) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,152,"throw new DimensionMismatchException(length, dimension);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,155,// only update the upper triangular part of the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,156,// as only these parts are actually stored
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,150,or (int j = 0; j < length; j++){
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,151,"ovMatrix[i][j].increment(rowData[i], rowData[j]);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,158,for (int j = i; j < length; j++){
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,159,"getElement(i, j).increment(data[i], data[j]);"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,174,inal double[][] data = new double[rowDimension][rowDimension];
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,175,or (int i = 0; i < rowDimension; i++) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,176,or (int j = 0; j < colDimension; j++) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,177,ata[i][j] = covMatrix[i][j].getResult();
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,182,final double[][] data = new double[dimension][dimension];
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,183,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,184,for (int j = 0; j < dimension; j++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,185,"data[i][j] = getElement(i, j).getResult();"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,22,import org.junit.Assert;
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,166,"torelessCovariance covMatrix = new StorelessCovariance(7, 7);"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,166,StorelessCovariance covMatrix = new StorelessCovariance(7);
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,168,ovMatrix.incrementRow(matrix.getRow(i));
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,168,covMatrix.increment(matrix.getRow(i));
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,195,"torelessCovariance covMatrix = new StorelessCovariance(5, 5);"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,193,StorelessCovariance covMatrix = new StorelessCovariance(5);
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,197,ovMatrix.incrementRow(matrix.getRow(i));
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,195,covMatrix.increment(matrix.getRow(i));
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,206, Test Longley dataset against R.
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,207," Data Source: J. Longley (1967) ""An Appraisal of Least Squares"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,208," Programs for the Electronic Computer from the Point of View of the User"""
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,209," Journal of the American Statistical Association, vol. 62. September,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,210, pp. 819-841.
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,212, Data are from NIST:
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,213, http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,204,* Test symmetry of the covariance matrix
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,216,ublic void testLonglyByEntry() {
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,217,"ealMatrix matrix = createRealMatrix(longleyData, 16, 7);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,219,ouble[] rData = new double[] {
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,220,"2333921.73333333246, 3.679666000000000e+04, 343330206.333333313,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,221,"649102.666666666744, 1117681.066666666651, 23461965.733333334, 16240.93333333333248,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,222,"6796.66000000000, 1.164576250000000e+02, 1063604.115416667,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,223,"258.666250000000, 3490.253750000000, 73503.000000000, 50.92333333333334,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,224,"43330206.33333331347, 1.063604115416667e+06, 9879353659.329166412,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,225,"6124369.854166664183, 30880428.345833335072, 685240944.600000024, 470977.90000000002328,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,226,"649102.66666666674, 6.258666250000000e+03, 56124369.854166664,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,227,"73223.429166666698, -115378.762499999997, 4462741.533333333, 2973.03333333333330,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,228,"117681.06666666665, 3.490253750000000e+03, 30880428.345833335,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,229,"115378.762499999997, 484304.095833333326, 1764098.133333333, 1382.43333333333339,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,230,"3461965.73333333433, 7.350300000000000e+04, 685240944.600000024,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,231,"462741.533333333209, 1764098.133333333302, 48387348.933333330, 32917.40000000000146,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,232,"6240.93333333333, 5.092333333333334e+01, 470977.900000000,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,233,"973.033333333333, 1382.433333333333, 32917.40000000, 22.66666666666667"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,207,public void testSymmetry() {
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,208,"RealMatrix matrix = createRealMatrix(swissData, 47, 5);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,236,nt row = matrix.getRowDimension();
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,237,nt col = matrix.getColumnDimension();
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,238,ouble x = 0.0;
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,239,ouble y = 0.0;
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,240,"torelessCovariance covMatrix = new StorelessCovariance(7, 7);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,241,or(int i=0;i<row;i++){
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,242,or(int j=0;j<col;j++){
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,243," = matrix.getEntry(i, j);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,244,or(int k=0;k<col;k++){
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,245," = matrix.getEntry(i, k);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,246,"ovMatrix.incrementCovariance(j, k, x, y);"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,210,final int dimension = 5;
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,211,StorelessCovariance storelessCov = new StorelessCovariance(dimension);
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,212,for(int i=0;i<matrix.getRowDimension();i++){
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,213,storelessCov.increment(matrix.getRow(i));
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,251,ealMatrix covarianceMatrix = covMatrix.getCovarianceMatrix();
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,253,"estUtils.assertEquals(""covariance matrix"", createRealMatrix(rData, 7, 7), covarianceMatrix, 10E-7);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,258, Test R Swiss fertility dataset against R.
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,259, Data Source: R datasets package
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,261,Test
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,262,ublic void testSwissFertilityByEntry() {
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,263,"ealMatrix matrix = createRealMatrix(swissData, 47, 5);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,265,ouble[] rData = new double[] {
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,266,"56.0424976873265, 100.1691489361702, -64.36692876965772, -79.7295097132285, 241.5632030527289,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,267,"00.169148936170251, 515.7994172062905, -124.39283071230344, -139.6574005550416, 379.9043755781684,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,268,"64.3669287696577, -124.3928307123034, 63.64662349676226, 53.5758556891767, -190.5606105457909,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,269,"79.7295097132285, -139.6574005550416, 53.57585568917669, 92.4560592044403, -61.6988297872340,"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,270,"41.5632030527289, 379.9043755781684, -190.56061054579092, -61.6988297872340, 1739.2945371877890"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,273,nt row = matrix.getRowDimension();
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,274,nt col = matrix.getColumnDimension();
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,275,ouble x = 0.0;
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,276,ouble y = 0.0;
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,277,"torelessCovariance covMatrix = new StorelessCovariance(5, 5);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,278,or(int i=0;i<row;i++){
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,279,or(int j=0;j<col;j++){
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,280," = matrix.getEntry(i, j);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,281,or(int k=0;k<col;k++){
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,282," = matrix.getEntry(i, k);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,283,"ovMatrix.incrementCovariance(j, k, x, y);"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,216,double[][] covMatrix = storelessCov.getData();
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,217,for (int i = 0; i < dimension; i++) {
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,218,for (int j = i; j < dimension; j++) {
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,219,"Assert.assertEquals(covMatrix[i][j], covMatrix[j][i], 10e-9);"
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,288,ealMatrix covarianceMatrix = covMatrix.getCovarianceMatrix();
False,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,290,"estUtils.assertEquals(""covariance matrix"", createRealMatrix(rData, 5, 5), covarianceMatrix, 10E-13);"

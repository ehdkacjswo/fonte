is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,19,import org.apache.commons.math.linear.RealVectorImpl;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,30,rivate static final long serialVersionUID = -7267500407292949362L;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,32,private static final long serialVersionUID = -4305020489115478365L;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,33,rivate double argument = Double.NaN;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,35,private double[] argument;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,42,"uper(""Evaluation failed for argument = {0}"", Double.valueOf(argument));"
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,43,his.argument = argument;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,44,"super(""evaluation failed for argument = {0}"", argument);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,45,this.argument = new double[] { argument };
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,49,* Construct an exception indicating the argument value
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,50,* that caused the function evaluation to fail.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,52,* @param argument  the failing function argument
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,53,* @since 2.0
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,55,public FunctionEvaluationException(double[] argument) {
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,56,"super(""evaluation failed for argument = {0}"", new RealVectorImpl(argument));"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,57,this.argument = argument.clone();
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,57,his.argument = argument;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,71,this.argument = new double[] { argument };
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,75,* Constructs an exception with specified formatted detail message.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,76,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,77,* @param argument  the failing function argument
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,78,* @param pattern format specifier
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,79,* @param arguments format arguments
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,80,* @since 2.0
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,82,"public FunctionEvaluationException(double[] argument,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,83,"String pattern, Object ... arguments) {"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,84,"super(pattern, arguments);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,85,this.argument = argument.clone();
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,69,his.argument = argument;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,97,this.argument = new double[] { argument };
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,101,* Constructs an exception with specified root cause.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,102,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,103,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,104,* @param argument  the failing function argument
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,105,* @since 2.0
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,107,"public FunctionEvaluationException(Throwable cause, double[] argument) {"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,108,super(cause);
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,109,this.argument = argument.clone();
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,85,his.argument = argument;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,125,this.argument = new double[] { argument };
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,129,* Constructs an exception with specified formatted detail message and root cause.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,130,* Message formatting is delegated to {@link java.text.MessageFormat}.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,131,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,132,* @param argument  the failing function argument
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,133,* @param pattern format specifier
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,134,* @param arguments format arguments
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,135,* @since 2.0
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,137,"public FunctionEvaluationException(Throwable cause,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,138,"double[] argument, String pattern,"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,139,Object ... arguments) {
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,140,"super(cause, pattern, arguments);"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,141,this.argument = argument.clone();
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,93,ublic double getArgument() {
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,94,eturn this.argument;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,149,public double[] getArgument() {
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,150,return argument.clone();
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,52," ""Evaluation failed for argument = {0}"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,53,"Erreur d''\u00e9valuation pour l''argument {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,52,"{ ""evaluation failed for argument = {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,53,"""erreur d''\u00e9valuation pour l''argument {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,145,// org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,146,"{ ""unable to bracket optimum in line search"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,147,"""impossible d''encadrer l''optimum lors de la recherche lin\u00e9aire"" },"
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,18,ackage org.apache.commons.math.optimization;
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,20,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,23, This class represents exceptions thrown by obective functions.
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,25, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,26, @since 1.2
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,29,ublic class ObjectiveException
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,30,xtends MathException {
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,32,** Serializable version identifier. */
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,33,rivate static final long serialVersionUID = 8738657724051397417L;
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,36, Constructs a new <code>ObjectiveException</code> with specified
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,37, formatted detail message.
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,38, Message formatting is delegated to {@link java.text.MessageFormat}.
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,39, @param pattern format specifier
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,40, @param arguments format arguments
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,42,"ublic ObjectiveException(String pattern, Object ... arguments) {"
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,43,"uper(pattern, arguments);"
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,47, Constructs a new <code>ObjectiveException</code> with specified
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,48, nested <code>Throwable</code> root cause.
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,50, @param rootCause  the exception or error that caused this exception
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,51,                   to be thrown.
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,53,ublic ObjectiveException(Throwable rootCause) {
False,src/java/org/apache/commons/math/optimization/ObjectiveException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,54,uper(rootCause);

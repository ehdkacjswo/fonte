is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,60, {@code true} if {@link #computeOmega(int)} was called with a positive
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,60,* {@code true} if {@link #computeRoots(int)} was called with a positive
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,79, Returns {@code true} if {@link #computeOmega(int)} was called with a
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,79,* Returns {@code true} if {@link #computeRoots(int)} was called with a
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,117,ublic synchronized void computeOmega(int n) throws ZeroException {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,117,public synchronized void computeRoots(int n) throws ZeroException {
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,162,ublic synchronized double getOmegaReal(int k)
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,162,public synchronized double getReal(int k)
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,189,ublic synchronized double getOmegaImaginary(int k)
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,189,public synchronized double getImaginary(int k)
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,209,* Returns the number of roots of unity currently stored. If
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,210,"* {@link #computeRoots(int)} was called with {@code n}, then this method"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,211,"* returns {@code abs(n)}. If no roots of unity have been computed yet, this"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,212,* method returns 0.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,214,* @return the number of roots of unity currently stored
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,216,public synchronized int getNumberOfRoots() {
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,217,return omegaCount;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,192,oots.computeOmega(-f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,192,roots.computeRoots(-f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,245,oots.computeOmega(f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,245,roots.computeRoots(f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,280,oots.computeOmega(isInverse ? n : -n);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,280,roots.computeRoots(isInverse ? n : -n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,284,oots.computeOmega(isInverse ? 2 * n : -2 * n);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,284,roots.computeRoots(isInverse ? 2 * n : -2 * n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,292,"omplex d = new Complex(-roots.getOmegaImaginary(i),"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,293,oots.getOmegaReal(i));
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,292,"Complex d = new Complex(-roots.getImaginary(i),"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,293,roots.getReal(i));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,365,inal double omegaKmReal = roots.getOmegaReal(km);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,366,inal double omegaKmImag = roots.getOmegaImaginary(km);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,365,final double omegaKmReal = roots.getReal(km);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,366,final double omegaKmImag = roots.getImaginary(km);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,17,package org.apache.commons.math.complex;
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,19,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,20,import org.apache.commons.math.exception.ZeroException;
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,21,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,27,* Unit tests for the {@link RootsOfUnity} class.
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,29,* @version $Id$
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,31,public class RootsOfUnityTest {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,33,@Test(expected = MathIllegalStateException.class)
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,34,public void testMathIllegalState1() {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,35,final RootsOfUnity roots = new RootsOfUnity();
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,36,roots.getReal(0);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,39,@Test(expected = MathIllegalStateException.class)
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,40,public void testMathIllegalState2() {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,41,final RootsOfUnity roots = new RootsOfUnity();
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,42,roots.getImaginary(0);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,45,@Test(expected = MathIllegalStateException.class)
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,46,public void testMathIllegalState3() {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,47,final RootsOfUnity roots = new RootsOfUnity();
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,48,roots.isCounterClockWise();
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,51,@Test(expected = ZeroException.class)
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,52,public void testZeroNumberOfRoots() {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,53,final RootsOfUnity roots = new RootsOfUnity();
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,54,roots.computeRoots(0);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,57,@Test
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,58,public void testGetNumberOfRoots() {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,59,final RootsOfUnity roots = new RootsOfUnity();
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,60,"Assert.assertEquals("""", 0, roots.getNumberOfRoots());"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,61,roots.computeRoots(5);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,62,"Assert.assertEquals("""", 5, roots.getNumberOfRoots());"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,64,"* Testing -5 right after 5 is important, as the roots in this case are"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,65,* not recomputed.
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,67,roots.computeRoots(-5);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,68,"Assert.assertEquals("""", 5, roots.getNumberOfRoots());"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,69,roots.computeRoots(6);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,70,"Assert.assertEquals("""", 6, roots.getNumberOfRoots());"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,73,@Test
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,74,public void testComputeRoots() {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,75,final RootsOfUnity roots = new RootsOfUnity();
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,76,for (int n = -10; n < 11; n++) {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,78,"* Testing -n right after n is important, as the roots in this case"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,79,* are not recomputed.
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,81,if (n != 0) {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,82,roots.computeRoots(n);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,83,doTestComputeRoots(roots);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,84,roots.computeRoots(-n);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,85,doTestComputeRoots(roots);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,90,private void doTestComputeRoots(final RootsOfUnity roots) {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,91,final int n = roots.isCounterClockWise() ? roots.getNumberOfRoots() :
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,92,-roots.getNumberOfRoots();
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,93,final double tol = 10 * Math.ulp(1.0);
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,94,for (int k = 0; k < n; k++) {
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,95,final double t = 2.0 * FastMath.PI * k / n;
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,96,"final String msg = String.format(""n = %d, k = %d"", n, k);"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,97,"Assert.assertEquals(msg, FastMath.cos(t), roots.getReal(k), tol);"
True,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,src/test/java/org/apache/commons/math/complex/RootsOfUnityTest.java,98,"Assert.assertEquals(msg, FastMath.sin(t), roots.getImaginary(k), tol);"

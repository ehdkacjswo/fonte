is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,224,* Access the lower bound of the support.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,226,* @return lower bound of the support (might be Double.NEGATIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,228,public abstract double getSupportLowerBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,231,* Access the upper bound of the support.
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,233,* @return upper bound of the support (might be Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,235,public abstract double getSupportUpperBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,36,private double numericalMean = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,37,private boolean numericalMeanIsCalculated = false;
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,39,private double numericalVariance = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,40,private boolean numericalVarianceIsCalculated = false;
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,76,* Use this method to actually calculate the mean for the
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,77,* specific distribution. Use {@link #getNumericalMean()}
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,78,* (which implements caching) to actually get the mean.
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,80,* @return the mean or Double.NaN if it's not defined
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,82,protected abstract double calculateNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,85,* Use this method to get the numerical value of the mean of this
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,86,* distribution.
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,88,* @return the mean or Double.NaN if it's not defined
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,90,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,91,if (!numericalMeanIsCalculated) {
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,92,numericalMean = calculateNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,93,numericalMeanIsCalculated = true;
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,96,return numericalMean;
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,100,* Use this method to actually calculate the variance for the
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,101,* specific distribution.  Use {@link #getNumericalVariance()}
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,102,* (which implements caching) to actually get the variance.
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,104,* @return the variance or Double.NaN if it's not defined
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,106,protected abstract double calculateNumericalVariance();
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,109,* Use this method to get the numerical value of the variance of this
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,110,* distribution.
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,112,* @return the variance (possibly Double.POSITIVE_INFINITY as
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,113,* for certain cases in {@link TDistributionImpl}) or
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,114,* Double.NaN if it's not defined
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,116,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,117,if (!numericalVarianceIsCalculated) {
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,118,numericalVariance = calculateNumericalVariance();
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,119,numericalVarianceIsCalculated = true;
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,122,return numericalVariance;
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,126,* Use this method to get information about whether the lower bound
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,127,* of the support is inclusive or not.
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,129,* @return whether the lower bound of the support is inclusive or not
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,131,public abstract boolean isSupportLowerBoundInclusive();
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,134,* Use this method to get information about whether the upper bound
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,135,* of the support is inclusive or not.
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,137,* @return whether the upper bound of the support is inclusive or not
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,139,public abstract boolean isSupportUpperBoundInclusive();
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,142,"* Use this method to get information about whether the support is connected,"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,143,* i.e. whether all values between the lower and upper bound of the support
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,144,* is included in the support.
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,146,"* For {@link AbstractIntegerDistribution} the support is discrete, so"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,147,"* if this is true, then the support is"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,148,"* {lower bound, lower bound + 1, ..., upper bound}."
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,150,"* For {@link AbstractContinuousDistribution} the support is continuous, so"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,151,"* if this is true, then the support is the interval"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,152,"* [lower bound, upper bound]"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,153,* where the limits are inclusive or not according to
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,154,* {@link #isSupportLowerBoundInclusive()} and {@link #isSupportUpperBoundInclusive()}
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,155,"* (in the example both are true). If both are false, then the support is the interval"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,156,"* (lower bound, upper bound)"
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,158,* @return whether the support limits given by subclassed methods are connected or not
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,160,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,161,return true;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,294,* Access the lower bound of the support.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,296,* @return lower bound of the support (Integer.MIN_VALUE for negative infinity)
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,298,public abstract int getSupportLowerBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,301,* Access the upper bound of the support.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,303,* @return upper bound of the support (Integer.MAX_VALUE for positive infinity)
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,305,public abstract int getSupportUpperBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,308,* Use this method to get information about whether the lower bound
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,309,"* of the support is inclusive or not. For discrete support,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,310,* only true here is meaningful.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,312,* @return true (always but at Integer.MIN_VALUE because of the nature of discrete support)
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,314,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,315,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,316,return true;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,320,* Use this method to get information about whether the upper bound
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,321,"* of the support is inclusive or not. For discrete support,"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,322,* only true here is meaningful.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,324,* @return true (always but at Integer.MAX_VALUE because of the nature of discrete support)
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,326,@Override
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,327,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,328,return true;
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,189,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,191,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,193,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,195,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,196,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,197,return 0;
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,201,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,203,* The upper bound of the support is always 1 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,205,* @return upper bound of the support (always 1)
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,207,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,208,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,209,return 1;
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,213,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,215,* For first shape parameter <code>s1</code> and
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,216,"* second shape parameter <code>s2</code>, the mean is"
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,217,* <code>s1 / (s1 + s2)</code>
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,219,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,221,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,222,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,223,final double alpha = getAlpha();
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,224,return alpha / (alpha + getBeta());
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,228,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,230,* For first shape parameter <code>s1</code> and
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,231,"* second shape parameter <code>s2</code>,"
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,232,* the variance is
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,233,* <code>[ s1 * s2 ] / [ (s1 + s2)^2 * (s1 + s2 + 1) ]</code>
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,235,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,237,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,238,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,239,final double alpha = getAlpha();
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,240,final double beta = getBeta();
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,241,final double alphabetasum = alpha + beta;
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,242,return (alpha * beta) / ((alphabetasum * alphabetasum) * (alphabetasum + 1));
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,245,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,246,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,247,return false;
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,250,@Override
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,251,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java,252,return false;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,169,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,171,* The lower bound of the support is always 0 no matter the number of trials
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,172,* and probability parameter.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,174,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,176,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,177,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,178,return 0;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,182,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,184,* The upper bound of the support is the number of trials.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,186,* @return upper bound of the support (equal to number of trials)
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,188,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,189,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,190,return getNumberOfTrials();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,194,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,196,* For <code>n</code> number of trials and
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,197,"* probability parameter <code>p</code>, the mean is"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,198,* <code>n * p</code>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,200,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,202,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,203,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,204,return (double)getNumberOfTrials() * getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,208,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,210,* For <code>n</code> number of trials and
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,211,"* probability parameter <code>p</code>, the variance is"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,212,* <code>n * p * (1 - p)</code>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,214,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,216,@Override
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,217,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,218,final double p = getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,219,return (double)getNumberOfTrials() * p * (1 - p);
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,225,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,227,* The lower bound of the support is always negative infinity no matter
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,228,* the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,230,* @return lower bound of the support (always Double.NEGATIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,232,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,233,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,234,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,238,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,240,* The upper bound of the support is always positive infinity no matter
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,241,* the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,243,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,245,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,246,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,247,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,251,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,253,* The mean is always undefined no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,255,* @return mean (always Double.NaN)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,257,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,258,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,259,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,263,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,265,* The variance is always undefined no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,267,* @return variance (always Double.NaN)
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,269,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,270,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,271,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,274,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,275,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,276,return false;
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,279,@Override
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,280,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,281,return false;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,198,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,200,* The lower bound of the support is always 0 no matter the
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,201,* degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,203,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,205,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,206,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,207,return 0;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,211,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,213,* The upper bound of the support is always positive infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,214,* degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,216,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,218,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,219,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,220,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,224,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,226,"* For <code>k</code> degrees of freedom, the mean is"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,227,* <code>k</code>
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,229,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,231,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,232,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,233,return getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,237,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,239,"* For <code>k</code> degrees of freedom, the variance is"
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,240,* <code>2 * k</code>
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,242,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,244,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,245,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,246,return 2*getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,249,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,250,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,251,return true;
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,254,@Override
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,255,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,256,return false;
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,57,* Use this method to get the numerical value of the mean of this
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,58,* distribution.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,60,* @return the mean or Double.NaN if it's not defined
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,62,double getNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,65,* Use this method to get the numerical value of the variance of this
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,66,* distribution.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,68,* @return the variance (possibly Double.POSITIVE_INFINITY as
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,69,* for certain cases in {@link TDistributionImpl}) or
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,70,* Double.NaN if it's not defined
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,72,double getNumericalVariance();
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,75,* Use this method to get information about whether the lower bound
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,76,* of the support is inclusive or not.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,78,* @return whether the lower bound of the support is inclusive or not
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,80,boolean isSupportLowerBoundInclusive();
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,83,* Use this method to get information about whether the upper bound
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,84,* of the support is inclusive or not.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,86,* @return whether the upper bound of the support is inclusive or not
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,88,boolean isSupportUpperBoundInclusive();
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,91,"* Use this method to get information about whether the support is connected,"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,92,* i.e. whether all values between the lower and upper bound of the support
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,93,* is included in the support.
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,95,"* For {@link AbstractIntegerDistribution} the support is discrete, so"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,96,"* if this is true, then the support is"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,97,"* {lower bound, lower bound + 1, ..., upper bound}."
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,99,"* For {@link AbstractContinuousDistribution} the support is continuous, so"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,100,"* if this is true, then the support is the interval"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,101,"* [lower bound, upper bound]"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,102,* where the limits are inclusive or not according to
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,103,* {@link #isSupportLowerBoundInclusive()} and {@link #isSupportUpperBoundInclusive()}
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,104,"* (in the example both are true). If both are false, then the support is the interval"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,105,"* (lower bound, upper bound)"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,107,* @return whether the support limits given by subclassed methods are connected or not
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,109,boolean isSupportConnected();
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,227,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,229,* The lower bound of the support is always 0 no matter the mean parameter.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,231,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,233,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,234,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,235,return 0;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,239,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,241,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,242,* no matter the mean parameter.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,244,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,246,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,247,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,248,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,252,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,254,"* For mean parameter <code>k</code>, the mean is"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,255,* <code>k</code>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,257,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,259,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,260,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,261,return getMean();
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,265,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,267,"* For mean parameter <code>k</code>, the variance is"
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,268,* <code>k^2</code>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,270,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,272,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,273,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,274,final double mean = getMean();
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,275,return mean * mean;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,278,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,279,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,280,return true;
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,283,@Override
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,284,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,285,return false;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,240,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,242,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,244,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,246,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,247,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,248,return 0;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,252,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,254,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,255,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,257,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,259,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,260,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,261,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,265,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,267,"* For denominator degrees of freedom parameter <code>b</code>,"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,268,* the mean is
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,269,* <ul>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,270,*  <li>if <code>b &gt; 2</code> then <code>b / (b - 2)</code></li>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,271,*  <li>else <code>undefined</code>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,272,* </ul>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,274,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,276,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,277,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,278,final double denominatorDF = getDenominatorDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,280,if (denominatorDF > 2) {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,281,return denominatorDF / (denominatorDF - 2);
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,284,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,288,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,290,* For numerator degrees of freedom parameter <code>a</code>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,291,"* and denominator degrees of freedom parameter <code>b</code>,"
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,292,* the variance is
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,293,* <ul>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,294,*  <li>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,295,*    if <code>b &gt; 4</code> then
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,296,*    <code>[ 2 * b^2 * (a + b - 2) ] / [ a * (b - 2)^2 * (b - 4) ]</code>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,297,*  </li>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,298,*  <li>else <code>undefined</code>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,299,* </ul>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,301,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,303,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,304,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,305,final double denominatorDF = getDenominatorDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,307,if (denominatorDF > 4) {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,308,final double numeratorDF = getNumeratorDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,309,final double denomDFMinusTwo = denominatorDF - 2;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,311,return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) )
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,312,/ ( (numeratorDF * (denomDFMinusTwo * denomDFMinusTwo) * (denominatorDF - 4)) );
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,315,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,318,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,319,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,320,return true;
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,323,@Override
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,324,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,325,return false;
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,242,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,244,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,246,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,248,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,249,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,250,return 0;
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,254,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,256,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,257,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,259,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,261,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,262,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,263,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,267,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,269,* For shape parameter <code>alpha</code> and scale
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,270,"* parameter <code>beta</code>, the mean is"
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,271,* <code>alpha * beta</code>
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,273,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,275,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,276,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,277,return getAlpha() * getBeta();
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,281,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,283,* For shape parameter <code>alpha</code> and scale
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,284,"* parameter <code>beta</code>, the variance is"
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,285,* <code>alpha * beta^2</code>
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,287,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,289,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,290,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,291,final double beta = getBeta();
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,292,return getAlpha() * beta * beta;
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,295,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,296,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,297,return true;
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,300,@Override
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,301,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,302,return false;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,289,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,291,"* For population size <code>N</code>,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,292,"* number of successes <code>m</code>, and"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,293,"* sample size <code>n</code>,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,294,* the lower bound of the support is
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,295,"* <code>max(0, n + m - N)</code>"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,297,* @return lower bound of the support
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,299,@Override
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,300,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,301,"return FastMath.max(0,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,302,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,306,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,308,* For number of successes <code>m</code> and
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,309,"* sample size <code>n</code>,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,310,* the upper bound of the support is
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,311,"* <code>min(m, n)</code>"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,313,* @return upper bound of the support
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,315,@Override
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,316,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,317,"return FastMath.min(getNumberOfSuccesses(), getSampleSize());"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,321,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,323,"* For population size <code>N</code>,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,324,"* number of successes <code>m</code>, and"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,325,"* sample size <code>n</code>, the mean is"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,326,* <code>n * m / N</code>
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,328,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,330,@Override
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,331,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,332,return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,336,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,338,"* For population size <code>N</code>,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,339,"* number of successes <code>m</code>, and"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,340,"* sample size <code>n</code>, the variance is"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,341,* <code>[ n * m * (N - n) * (N - m) ] / [ N^2 * (N - 1) ]</code>
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,343,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,345,@Override
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,346,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,347,final double N = getPopulationSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,348,final double m = getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,349,final double n = getSampleSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,350,return ( n * m * (N - n) * (N - m) ) / ( (N*N * (N - 1)) );
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,246,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,248,* The lower bound of the support is always negative infinity
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,249,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,251,* @return lower bound of the support (always Double.NEGATIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,253,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,254,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,255,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,259,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,261,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,262,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,264,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,266,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,267,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,268,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,272,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,274,"* For mean parameter <code>mu</code>, the mean is <code>mu</code>"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,276,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,278,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,279,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,280,return getMean();
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,284,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,286,"* For standard deviation parameter <code>s</code>,"
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,287,* the variance is <code>s^2</code>
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,289,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,291,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,292,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,293,final double s = getStandardDeviation();
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,294,return s * s;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,297,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,298,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,299,return false;
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,302,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,303,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,304,return false;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,170,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,172,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,174,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,176,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,177,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,178,return 0;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,182,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,184,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,185,* no matter the parameters. Positive infinity is symbolised
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,186,* by <code>Integer.MAX_VALUE</code> together with
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,187,* {@link #isSupportUpperBoundInclusive()} being <code>false</code>
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,189,* @return upper bound of the support (always <code>Integer.MAX_VALUE</code> for positive infinity)
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,191,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,192,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,193,return Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,197,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,199,* For number of successes <code>r</code> and
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,200,"* probability of success <code>p</code>, the mean is"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,201,* <code>( r * p ) / ( 1 - p )</code>
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,203,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,205,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,206,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,207,final double p = getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,208,final double r = getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,209,return ( r * p ) / ( 1 - p );
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,213,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,215,* For number of successes <code>r</code> and
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,216,"* probability of success <code>p</code>, the mean is"
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,217,* <code>( r * p ) / ( 1 - p )^2</code>
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,219,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,221,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,222,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,223,final double p = getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,224,final double r = getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,225,final double pInv = 1 - p;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,226,return ( r * p ) / (pInv * pInv);
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,229,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,230,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,231,return false;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,235,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,237,* The lower bound of the support is always 0 no matter the mean parameter.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,239,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,241,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,242,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,243,return 0;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,247,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,249,"* The upper bound of the support is positive infinity,"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,250,"* regardless of the parameter values. There is no integer infinity,"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,251,* so this method returns <code>Integer.MAX_VALUE</code> and
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,252,* {@link #isSupportUpperBoundInclusive()} returns <code>true</code>.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,254,* @return upper bound of the support (always <code>Integer.MAX_VALUE</code> for positive infinity)
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,256,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,257,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,258,return Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,262,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,264,"* For mean parameter <code>p</code>, the mean is <code>p</code>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,266,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,268,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,269,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,270,return getMean();
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,274,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,276,"* For mean parameter <code>p</code>, the variance is <code>p</code>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,278,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,280,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,281,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,282,return getMean();
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,285,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,286,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,287,return true;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,204,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,206,* The lower bound of the support is always negative infinity
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,207,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,209,* @return lower bound of the support (always Double.NEGATIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,211,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,212,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,213,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,217,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,219,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,220,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,222,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,224,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,225,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,226,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,230,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,232,"* For degrees of freedom parameter df, the mean is"
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,233,* <ul>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,234,*  <li>if <code>df &gt; 1</code> then <code>0</code></li>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,235,* <li>else <code>undefined</code></li>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,236,* </ul>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,238,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,240,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,241,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,242,final double df = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,244,if (df > 1) {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,245,return 0;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,248,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,252,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,254,"* For degrees of freedom parameter df, the variance is"
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,255,* <ul>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,256,*  <li>if <code>df &gt; 2</code> then <code>df / (df - 2)</code> </li>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,257,*  <li>if <code>1 &lt; df &lt;= 2</code> then <code>positive infinity</code></li>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,258,*  <li>else <code>undefined</code></li>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,259,* </ul>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,261,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,263,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,264,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,265,final double df = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,267,if (df > 2) {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,268,return df / (df - 2);
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,271,if (df > 1 && df <= 2) {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,272,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,275,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,278,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,279,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,280,return false;
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,283,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,284,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,285,return false;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,25,import org.apache.commons.math.special.Gamma;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,221,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,223,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,225,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,227,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,228,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,229,return 0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,233,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,235,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,236,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,238,* @return upper bound of the support (always Double.POSITIVE_INFINITY)
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,240,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,241,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,242,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,246,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,248,* The mean is <code>scale * Gamma(1 + (1 / shape))</code>
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,249,* where <code>Gamma(...)</code> is the Gamma-function
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,251,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,253,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,254,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,255,final double shape = getShape();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,256,final double scale = getScale();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,258,return scale * FastMath.exp(Gamma.logGamma(1 + (1 / shape)));
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,262,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,264,* The variance is
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,265,* <code>scale^2 * Gamma(1 + (2 / shape)) - mean^2</code>
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,266,* where <code>Gamma(...)</code> is the Gamma-function
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,268,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,270,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,271,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,272,final double shape = getShape();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,273,final double scale = getScale();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,274,final double mean = getNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,276,return (scale * scale) *
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,277,FastMath.exp(Gamma.logGamma(1 + (2 / shape))) -
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,278,(mean * mean);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,281,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,282,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,283,return true;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,286,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,287,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,288,return false;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,152,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,154,* The lower bound of the support is always 1 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,156,* @return lower bound of the support (always 1)
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,158,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,159,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,160,return 1;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,164,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,166,* The upper bound of the support is the number of elements
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,168,* @return upper bound of the support
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,170,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,171,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,172,return getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,176,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,178,"* For number of elements N and exponent s, the mean is"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,179,* <code>Hs1 / Hs</code> where
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,180,* <ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,181,"*  <li><code>Hs1 = generalizedHarmonic(N, s - 1)</code></li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,182,"*  <li><code>Hs = generalizedHarmonic(N, s)</code></li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,183,* </ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,185,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,187,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,188,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,189,final int N = getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,190,final double s = getExponent();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,192,"final double Hs1 = generalizedHarmonic(N, s - 1);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,193,"final double Hs = generalizedHarmonic(N, s);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,195,return Hs1 / Hs;
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,199,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,201,"* For number of elements N and exponent s, the mean is"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,202,* <code>(Hs2 / Hs) - (Hs1^2 / Hs^2)</code> where
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,203,* <ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,204,"*  <li><code>Hs2 = generalizedHarmonic(N, s - 2)</code></li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,205,"*  <li><code>Hs1 = generalizedHarmonic(N, s - 1)</code></li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,206,"*  <li><code>Hs = generalizedHarmonic(N, s)</code></li>"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,207,* </ul>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,209,* @return {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,211,@Override
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,212,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,213,final int N = getNumberOfElements();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,214,final double s = getExponent();
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,216,"final double Hs2 = generalizedHarmonic(N, s - 2);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,217,"final double Hs1 = generalizedHarmonic(N, s - 1);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,218,"final double Hs = generalizedHarmonic(N, s);"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,220,return (Hs2 / Hs) - ((Hs1 * Hs1) / (Hs * Hs));
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,21,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,291,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,292,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,293,BetaDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,295,"dist = new BetaDistributionImpl(1, 1);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,296,"assertEquals(dist.getNumericalMean(), 0.5, tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,297,"assertEquals(dist.getNumericalVariance(), 1.0 / 12.0, tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,299,"dist = new BetaDistributionImpl(2, 5);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,300,"assertEquals(dist.getNumericalMean(), 2.0 / 7.0, tol);"
True,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BetaDistributionTest.java,301,"assertEquals(dist.getNumericalVariance(), 10.0 / (49.0 * 8.0), tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,116,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,117,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,118,BinomialDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,120,"dist = new BinomialDistributionImpl(10, 0.5);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,121,"assertEquals(dist.getNumericalMean(), 10d * 0.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,122,"assertEquals(dist.getNumericalVariance(), 10d * 0.5d * 0.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,124,"dist = new BinomialDistributionImpl(30, 0.3);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,125,"assertEquals(dist.getNumericalMean(), 30d * 0.3d, tol);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,126,"assertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,111,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,112,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,113,CauchyDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,115,"dist = new CauchyDistributionImpl(10.2, 0.15);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,116,"assertEquals(dist.getNumericalMean(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,117,"assertEquals(dist.getNumericalVariance(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,119,"dist = new CauchyDistributionImpl(23.12, 2.12);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,120,"assertEquals(dist.getNumericalMean(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,121,"assertEquals(dist.getNumericalVariance(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,127,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,128,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,129,ChiSquaredDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,131,dist = new ChiSquaredDistributionImpl(1500);
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,132,"assertEquals(dist.getNumericalMean(), 1500, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,133,"assertEquals(dist.getNumericalVariance(), 3000, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,135,dist = new ChiSquaredDistributionImpl(1.12);
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,136,"assertEquals(dist.getNumericalMean(), 1.12, tol);"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,137,"assertEquals(dist.getNumericalVariance(), 2.24, tol);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,126,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,127,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,128,ExponentialDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,130,dist = new ExponentialDistributionImpl(11d);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,131,"assertEquals(dist.getNumericalMean(), 11d, tol);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,132,"assertEquals(dist.getNumericalVariance(), 11d * 11d, tol);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,134,dist = new ExponentialDistributionImpl(10.5d);
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,135,"assertEquals(dist.getNumericalMean(), 10.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,136,"assertEquals(dist.getNumericalVariance(), 10.5d * 10.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,128,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,129,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,130,FDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,132,"dist = new FDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,133,"assertEquals(dist.getNumericalMean(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,134,"assertEquals(dist.getNumericalVariance(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,136,"dist = new FDistributionImpl(1, 3);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,137,"assertEquals(dist.getNumericalMean(), 3d / (3d - 2d), tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,138,"assertEquals(dist.getNumericalVariance(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,140,"dist = new FDistributionImpl(1, 5);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,141,"assertEquals(dist.getNumericalMean(), 5d / (5d - 2d), tol);"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,142,"assertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,157,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,158,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,159,GammaDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,161,"dist = new GammaDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,162,"assertEquals(dist.getNumericalMean(), 2, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,163,"assertEquals(dist.getNumericalVariance(), 4, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,165,"dist = new GammaDistributionImpl(1.1, 4.2);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,166,"assertEquals(dist.getNumericalMean(), 1.1d * 4.2d, tol);"
True,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/java/org/apache/commons/math/distribution/GammaDistributionTest.java,167,"assertEquals(dist.getNumericalVariance(), 1.1d * 4.2d * 4.2d, tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,246,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,247,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,248,HypergeometricDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,250,"dist = new HypergeometricDistributionImpl(1500, 40, 100);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,251,"assertEquals(dist.getNumericalMean(), 40d * 100d / 1500d, tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,252,"assertEquals(dist.getNumericalVariance(), ( 100d * 40d * (1500d - 100d) * (1500d - 40d) ) / ( (1500d * 1500d * 1499d) ), tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,254,"dist = new HypergeometricDistributionImpl(3000, 55, 200);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,255,"assertEquals(dist.getNumericalMean(), 55d * 200d / 3000d, tol);"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,256,"assertEquals(dist.getNumericalVariance(), ( 200d * 55d * (3000d - 200d) * (3000d - 55d) ) / ( (3000d * 3000d * 2999d) ), tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,193,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,194,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,195,NormalDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,197,"dist = new NormalDistributionImpl(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,198,"assertEquals(dist.getNumericalMean(), 0, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,199,"assertEquals(dist.getNumericalVariance(), 1, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,201,"dist = new NormalDistributionImpl(2.2, 1.4);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,202,"assertEquals(dist.getNumericalMean(), 2.2, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,203,"assertEquals(dist.getNumericalVariance(), 1.4 * 1.4, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,205,"dist = new NormalDistributionImpl(-2000.9, 10.4);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,206,"assertEquals(dist.getNumericalMean(), -2000.9, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,207,"assertEquals(dist.getNumericalVariance(), 10.4 * 10.4, tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,123,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,124,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,125,PascalDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,127,"dist = new PascalDistributionImpl(10, 0.5);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,128,"assertEquals(dist.getNumericalMean(), ( 10d * 0.5d ) / 0.5d, tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,129,"assertEquals(dist.getNumericalVariance(), ( 10d * 0.5d ) / (0.5d * 0.5d), tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,131,"dist = new PascalDistributionImpl(25, 0.3);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,132,"assertEquals(dist.getNumericalMean(), ( 25d * 0.3d ) / 0.7d, tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,133,"assertEquals(dist.getNumericalVariance(), ( 25d * 0.3d ) / (0.7d * 0.7d), tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,222,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,223,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,224,PoissonDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,226,dist = new PoissonDistributionImpl(1);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,227,"assertEquals(dist.getNumericalMean(), 1, tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,228,"assertEquals(dist.getNumericalVariance(), 1, tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,230,dist = new PoissonDistributionImpl(11.23);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,231,"assertEquals(dist.getNumericalMean(), 11.23, tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,232,"assertEquals(dist.getNumericalVariance(), 11.23, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,122,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,123,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,124,TDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,126,dist = new TDistributionImpl(1);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,127,"assertEquals(dist.getNumericalMean(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,128,"assertEquals(dist.getNumericalVariance(), Double.NaN, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,130,dist = new TDistributionImpl(1.5);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,131,"assertEquals(dist.getNumericalMean(), 0, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,132,"assertEquals(dist.getNumericalVariance(), Double.POSITIVE_INFINITY, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,134,dist = new TDistributionImpl(5);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,135,"assertEquals(dist.getNumericalMean(), 0, tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,136,"assertEquals(dist.getNumericalVariance(), 5d / (5d - 2d), tol);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,20,import org.apache.commons.math.special.Gamma;
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,21,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,101,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,102,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,103,WeibullDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,105,"dist = new WeibullDistributionImpl(2.5, 3.5);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,106,"// In R: 3.5*gamma(1+(1/2.5)) (or emperically: mean(rweibull(10000, 2.5, 3.5)))"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,107,"assertEquals(dist.getNumericalMean(), 3.5 * FastMath.exp(Gamma.logGamma(1 + (1 / 2.5))), tol);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,108,"assertEquals(dist.getNumericalVariance(), (3.5 * 3.5) *"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,109,FastMath.exp(Gamma.logGamma(1 + (2 / 2.5))) -
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,110,"(dist.getNumericalMean() * dist.getNumericalMean()), tol);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,112,"dist = new WeibullDistributionImpl(10.4, 2.222);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,113,"assertEquals(dist.getNumericalMean(), 2.222 * FastMath.exp(Gamma.logGamma(1 + (1 / 10.4))), tol);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,114,"assertEquals(dist.getNumericalVariance(), (2.222 * 2.222) *"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,115,FastMath.exp(Gamma.logGamma(1 + (2 / 10.4))) -
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,116,"(dist.getNumericalMean() * dist.getNumericalMean()), tol);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,22,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,98,public void testMomonts() {
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,99,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,100,ZipfDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,102,"dist = new ZipfDistributionImpl(2, 0.5);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,103,"assertEquals(dist.getNumericalMean(), FastMath.sqrt(2), tol);"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,104,"assertEquals(dist.getNumericalVariance(), 0.24264068711928521, tol);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,18,package org.apache.commons.math3.linear;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,20,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,21,import org.apache.commons.math3.util.Precision;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,24,* Class transforming a general real matrix to Hessenberg form.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,25,* <p>A m &times; m matrix A can be written as the product of three matrices: A = P
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,26,* &times; H &times; P<sup>T</sup> with P an unitary matrix and H a Hessenberg
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,27,* matrix. Both P and H are m &times; m matrices.</p>
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,28,"* <p>Transformation to Hessenberg form is often not a goal by itself, but it is an"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,29,* intermediate step in more general decomposition algorithms like
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,30,* {@link EigenDecomposition eigen decomposition}. This class is therefore
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,31,* intended for internal use by the library and is not public. As a consequence
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,32,"* of this explicitly limited scope, many methods directly returns references to"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,33,"* internal arrays, not copies.</p>"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,34,* <p>This class is based on the method orthes in class EigenvalueDecomposition
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,35,"* from the <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library.</p>"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,37,"* @see <a href=""http://mathworld.wolfram.com/HessenbergDecomposition.html"">MathWorld</a>"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,38,"* @see <a href=""http://en.wikipedia.org/wiki/Householder_transformation"">Householder Transformations</a>"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,39,* @version $Id$
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,40,* @since 3.1
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,42,class HessenbergTransformer {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,43,/** Householder vectors. */
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,44,private final double householderVectors[][];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,45,/** Temporary storage vector. */
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,46,private final double ort[];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,47,/** Cached value of P. */
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,48,private RealMatrix cachedP;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,49,/** Cached value of Pt. */
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,50,private RealMatrix cachedPt;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,51,/** Cached value of H. */
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,52,private RealMatrix cachedH;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,55,* Build the transformation to Hessenberg form of a general matrix.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,57,* @param matrix matrix to transform.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,58,* @throws NonSquareMatrixException if the matrix is not square.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,60,public HessenbergTransformer(RealMatrix matrix) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,61,if (!matrix.isSquare()) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,62,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,63,matrix.getColumnDimension());
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,66,final int m = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,67,householderVectors = matrix.getData();
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,68,ort = new double[m];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,69,cachedP = null;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,70,cachedPt = null;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,71,cachedH = null;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,73,// transform matrix
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,74,transform();
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,78,* Returns the matrix P of the transform.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,79,"* <p>P is an unitary matrix, i.e. its inverse is also its transpose.</p>"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,81,* @return the P matrix
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,83,public RealMatrix getP() {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,84,if (cachedP == null) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,85,final int n = householderVectors.length;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,86,final int high = n - 1;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,87,final double[][] pa = new double[n][n];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,89,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,90,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,91,pa[i][j] = (i == j) ? 1 : 0;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,95,for (int m = high - 1; m >= 1; m--) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,96,if (householderVectors[m][m - 1] != 0.0) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,97,for (int i = m + 1; i <= high; i++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,98,ort[i] = householderVectors[i][m - 1];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,101,for (int j = m; j <= high; j++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,102,double g = 0.0;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,104,for (int i = m; i <= high; i++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,105,g += ort[i] * pa[i][j];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,108,// Double division avoids possible underflow
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,109,g = (g / ort[m]) / householderVectors[m][m - 1];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,111,for (int i = m; i <= high; i++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,112,pa[i][j] += g * ort[i];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,118,cachedP = MatrixUtils.createRealMatrix(pa);
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,120,return cachedP;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,124,* Returns the transpose of the matrix P of the transform.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,125,"* <p>P is an unitary matrix, i.e. its inverse is also its transpose.</p>"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,127,* @return the transpose of the P matrix
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,129,public RealMatrix getPT() {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,130,if (cachedPt == null) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,131,cachedPt = getP().transpose();
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,134,// return the cached matrix
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,135,return cachedPt;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,139,* Returns the Hessenberg matrix H of the transform.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,141,* @return the H matrix
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,143,public RealMatrix getH() {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,144,if (cachedH == null) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,145,final int m = householderVectors.length;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,146,final double[][] h = new double[m][m];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,147,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,148,if (i > 0) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,149,// copy the entry of the lower sub-diagonal
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,150,h[i][i - 1] = householderVectors[i][i - 1];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,153,// copy upper triangular part of the matrix
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,154,for (int j = i; j < m; ++j) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,155,h[i][j] = householderVectors[i][j];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,158,cachedH = MatrixUtils.createRealMatrix(h);
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,161,// return the cached matrix
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,162,return cachedH;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,166,* Get the Householder vectors of the transform.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,167,"* <p>Note that since this class is only intended for internal use, it returns"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,168,"* directly a reference to its internal arrays, not a copy.</p>"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,170,* @return the main diagonal elements of the B matrix
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,172,double[][] getHouseholderVectorsRef() {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,173,return householderVectors;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,177,* Transform original matrix to Hessenberg form.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,178,* <p>Transformation is done using Householder transforms.</p>
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,180,private void transform() {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,181,final int n = householderVectors.length;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,182,final int high = n - 1;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,184,for (int m = 1; m <= high - 1; m++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,185,// Scale column.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,186,double scale = 0;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,187,for (int i = m; i <= high; i++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,188,scale += FastMath.abs(householderVectors[i][m - 1]);
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,191,"if (!Precision.equals(scale, 0)) {"
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,192,// Compute Householder transformation.
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,193,double h = 0;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,194,for (int i = high; i >= m; i--) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,195,ort[i] = householderVectors[i][m - 1] / scale;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,196,h += ort[i] * ort[i];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,198,final double g = (ort[m] > 0) ? -FastMath.sqrt(h) : FastMath.sqrt(h);
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,200,h = h - ort[m] * g;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,201,ort[m] = ort[m] - g;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,203,// Apply Householder similarity transformation
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,204,// H = (I - u*u' / h) * H * (I - u*u' / h)
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,206,for (int j = m; j < n; j++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,207,double f = 0;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,208,for (int i = high; i >= m; i--) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,209,f += ort[i] * householderVectors[i][j];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,211,f = f / h;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,212,for (int i = m; i <= high; i++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,213,householderVectors[i][j] -= f * ort[i];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,217,for (int i = 0; i <= high; i++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,218,double f = 0;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,219,for (int j = high; j >= m; j--) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,220,f += ort[j] * householderVectors[i][j];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,222,f = f / h;
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,223,for (int j = m; j <= high; j++) {
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,224,householderVectors[i][j] -= f * ort[j];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,228,ort[m] = scale * ort[m];
True,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java,229,householderVectors[m][m - 1] = scale * g;
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,18,package org.apache.commons.math3.linear;
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,20,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,23,public class HessenbergTransformerTest {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,25,private double[][] testSquare5 = {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,26,"{ 5, 4, 3, 2, 1 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,27,"{ 1, 4, 0, 3, 3 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,28,"{ 2, 0, 3, 0, 0 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,29,"{ 3, 2, 1, 2, 5 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,30,"{ 4, 2, 1, 4, 1 }"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,33,private double[][] testSquare3 = {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,34,"{  2, -1, 1 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,35,"{ -1,  2, 1 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,36,"{  1, -1, 2 }"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,39,// from http://eigen.tuxfamily.org/dox/classEigen_1_1HessenbergDecomposition.html
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,41,private double[][] testRandom = {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,42,"{  0.680,  0.823, -0.4440, -0.2700 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,43,"{ -0.211, -0.605,  0.1080,  0.0268 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,44,"{  0.566, -0.330, -0.0452,  0.9040 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,45,"{  0.597,  0.536,  0.2580,  0.8320 }"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,48,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,49,public void testNonSquare() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,50,try {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,51,new HessenbergTransformer(MatrixUtils.createRealMatrix(new double[3][2]));
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,52,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,53,} catch (NonSquareMatrixException ime) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,54,// expected behavior
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,58,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,59,public void testAEqualPHPt() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,60,checkAEqualPHPt(MatrixUtils.createRealMatrix(testSquare5));
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,61,checkAEqualPHPt(MatrixUtils.createRealMatrix(testSquare3));
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,62,checkAEqualPHPt(MatrixUtils.createRealMatrix(testRandom));
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,65,private void checkAEqualPHPt(RealMatrix matrix) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,66,HessenbergTransformer transformer = new HessenbergTransformer(matrix);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,67,RealMatrix p  = transformer.getP();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,68,RealMatrix pT = transformer.getPT();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,69,RealMatrix h  = transformer.getH();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,70,double norm = p.multiply(h).multiply(pT).subtract(matrix).getNorm();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,71,"Assert.assertEquals(0, norm, 4.0e-14);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,74,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,75,public void testPOrthogonal() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,76,checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,77,checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getP());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,80,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,81,public void testPTOrthogonal() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,82,checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getPT());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,83,checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getPT());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,86,private void checkOrthogonal(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,87,RealMatrix mTm = m.transpose().multiply(m);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,88,RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,89,"Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,92,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,93,public void testHessenbergForm() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,94,checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getH());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,95,checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getH());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,98,private void checkHessenbergForm(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,99,final int rows = m.getRowDimension();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,100,final int cols = m.getColumnDimension();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,101,for (int i = 0; i < rows; ++i) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,102,for (int j = 0; j < cols; ++j) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,103,if (i > j + 1) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,104,"Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,110,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,111,public void testMatricesValues5() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,112,"checkMatricesValues(testSquare5,"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,113,new double[][] {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,114,"{ 1.0,  0.0,                0.0,                0.0,                0.0               },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,115,"{ 0.0, -0.182574185835055,  0.784218758628863,  0.395029040913988, -0.442289115981669 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,116,"{ 0.0, -0.365148371670111, -0.337950625265477, -0.374110794088820, -0.782621974707823 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,117,"{ 0.0, -0.547722557505166,  0.402941130124223, -0.626468266309003,  0.381019628053472 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,118,"{ 0.0, -0.730296743340221, -0.329285224617644,  0.558149336547665,  0.216118545309225 }"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,120,new double[][] {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,121,"{  5.0,              -3.65148371670111,  2.59962019434982, -0.237003414680848, -3.13886458663398  },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,122,"{ -5.47722557505166,  6.9,              -2.29164066120599,  0.207283564429169,  0.703858369151728 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,123,"{  0.0,              -4.21386600008432,  2.30555659846067,  2.74935928725112,   0.857569835914113 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,124,"{  0.0,               0.0,               2.86406180891882, -1.11582249161595,   0.817995267184158 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,125,"{  0.0,               0.0,               0.0,               0.683518597386085,  1.91026589315528  }"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,129,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,130,public void testMatricesValues3() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,131,"checkMatricesValues(testSquare3,"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,132,new double[][] {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,133,"{  1.0,  0.0,               0.0               },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,134,"{  0.0, -0.707106781186547, 0.707106781186547 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,135,"{  0.0,  0.707106781186547, 0.707106781186548 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,137,new double[][] {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,138,"{  2.0,              1.41421356237309,  0.0 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,139,"{  1.41421356237310, 2.0,              -1.0 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,140,"{  0.0,              1.0,               2.0 },"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,144,"private void checkMatricesValues(double[][] matrix, double[][] pRef, double[][] hRef) {"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,146,HessenbergTransformer transformer =
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,147,new HessenbergTransformer(MatrixUtils.createRealMatrix(matrix));
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,149,// check values against known references
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,150,RealMatrix p = transformer.getP();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,151,"Assert.assertEquals(0, p.subtract(MatrixUtils.createRealMatrix(pRef)).getNorm(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,153,RealMatrix h = transformer.getH();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,154,"Assert.assertEquals(0, h.subtract(MatrixUtils.createRealMatrix(hRef)).getNorm(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,156,// check the same cached instance is returned the second time
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,157,Assert.assertTrue(p == transformer.getP());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,158,Assert.assertTrue(h == transformer.getH());

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74, @version $Revision: 1.8 $ $Date: 2003/06/16 21:38:15 $
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74,* @version $Revision: 1.9 $ $Date: 2003/06/17 17:10:15 $
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,77,ublic class UnivariateImpl
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,78,xtends AbstractStoreUnivariate
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,79,"mplements Univariate, Serializable {"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,77,"public class UnivariateImpl implements Univariate, Serializable {"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,81,** hold the window size **/
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,82,rivate int windowSize = Univariate.INFINITE_WINDOW;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,79,/** hold the window size **/
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,80,private int windowSize = Univariate.INFINITE_WINDOW;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,84,"** Just in case the windowSize is not infinite, we need to"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85,  keep an array to remember values 0 to N
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,87,rivate DoubleArray doubleArray;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,82,"/** Just in case the windowSize is not infinite, we need to"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,83,*  keep an array to remember values 0 to N
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85,private DoubleArray doubleArray;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,89,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,90,rivate int n = 0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,87,/** count of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,88,private int n = 0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,92,** sum of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,93,rivate double sum = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,90,/** min of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,91,private double min = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,95,** sum of the square of each value that has been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96,rivate double sumsq = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,93,/** max of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,94,private double max = Double.MIN_VALUE;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,98,** sum of the Cube of each value that has been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,99,rivate double sumCube = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96,/** product of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,97,private double product = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,101,** sum of the Quadrate of each value that has been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,102,rivate double sumQuad = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,99,/** mean of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,100,private double mean = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,104,** min of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,rivate double min = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,102,/** running ( variance * (n - 1) ) of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,103,private double pre_variance = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,107,** max of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,108,rivate double max = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,/** variance of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,106,private double variance = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,110,** product of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,111,rivate double product = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,108,/** running sum of values that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,109,private double sum = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,113,** mean of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,114,rivate double mean = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,111,/** running sum of squares that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,112,private double sumsq = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,116,** running ( variance * (n - 1) ) of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117,rivate double pre_variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,114,/** running sum of 3rd powers that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,115,private double sumCube = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,119,** variance of values that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,rivate double variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117,/** running sum of 4th powers that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,118,private double sumQuad = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,122,** Creates new univariate with an infinite window */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,123,ublic UnivariateImpl() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,124,uper();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,/** Creates new univariate with an infinite window */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,121,public UnivariateImpl() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,122,clear();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,** Creates a new univariate with a fixed window **/
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,128,ublic UnivariateImpl(int window) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,129,uper();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,130,etWindowSize(window);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,125,/** Creates a new univariate with a fixed window **/
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,126,public UnivariateImpl(int window) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,windowSize = window;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,128,doubleArray = new FixedDoubleArray( window );
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,133,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,134, @see org.apache.commons.math.stat.Univariate#getN()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,132,* @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,136,ublic int getN() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,137,eturn n;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,134,public void addValue(double v) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,135,insertValue(v);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,140,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,141, @see org.apache.commons.math.stat.Univariate#getSum()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,139,* @see org.apache.commons.math.stat.Univariate#getMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143,ublic double getSum() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,144,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,145,eturn super.getSum();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,141,public double getMean() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,142,return mean ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,148,eturn sum;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,146,* @see org.apache.commons.math.stat.Univariate#getGeometricMean()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,148,public double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,149,if ((product <= 0.0) || (n == 0)) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,150,return Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,151,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,152,"return Math.pow(product,( 1.0 / (double) n ) );"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,157,* @see org.apache.commons.math.stat.Univariate#getProduct()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,159,public double getProduct() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,160,return product;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,151,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,152, @see org.apache.commons.math.stat.Univariate#getSumsq()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,164,* @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,154,ublic double getSumsq() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,155,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,156,eturn super.getSumsq();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167,double variance = getVariance();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,169,if ((variance == 0.0) || (variance == Double.NaN)) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,170,return variance;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,171,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,172,return Math.sqrt(variance);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177,* Returns the variance of the values that have been added via West's
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,178,* algorithm as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,179,"* <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,180,"* J. G. Lewis 1979, <i>Communications of the ACM</i>,"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,181,"* vol. 22 no. 9, pp. 526-531.</a>."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,183,* @return The variance of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,184,*         an empty set of values and 0.0 is returned for a &lt;= 1 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,186,public double getVariance() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,187,return variance ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,191,* Returns the skewness of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,192,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (6) for k-Statistics</a>."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,194,* @return The skew of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,195,*         an empty set of values and 0.0 is returned for a &lt;= 2 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,197,public double getSkewness() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,159,eturn sumsq;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,199,if( n < 1) return Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,200,if( n <= 2 ) return 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,162,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,163, @see org.apache.commons.math.stat.Univariate#getMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165,ublic double getMean() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167,eturn super.getMean();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,170,eturn mean;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,174, Returns the variance of the values that have been added via West's
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,175, algorithm as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,176," <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177," J. G. Lewis 1979, <i>Communications of the ACM</i>,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,178," vol. 22 no. 9, pp. 526-531.</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,180, @return The variance of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,181,         an empty set of values and 0.0 is returned for a &lt;= 1 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,183,ublic double getVariance() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,184,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,185,eturn super.getVariance();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,188,eturn variance < 0 ? 0.0 : variance;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,192, Returns the skewness of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,193," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (6) for k-Statistics</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,195, @return The skew of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,196,         an empty set of values and 0.0 is returned for a &lt;= 2 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,198,ublic double getSkewness() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,199,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,200,eturn super.getSkewness();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,203,f (n == 0) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,204,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,207,f (n <= 2) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,208,"* if n <= 2, skewness to 0.0 */"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,209,eturn 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,210, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,211,* else calc the skewness */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,212,eturn (
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,213," * Math.pow(sum, 3)"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,214, 3 * sum * sumsq
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,215, ((double) (n * n)) * sumCube)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,216, ((double) (n * (n - 1) * (n - 2)));
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,221, Returns the kurtosis of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,222," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (7) for k-Statistics</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,224, @return The kurtosis of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,225,         an empty set of values and 0.0 is returned for a &lt;= 3 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,227,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,228,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,229,eturn super.getKurtosis();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,232,f (n == 0) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,233,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,236,f (n <= 3) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,237,"* if n <= 3, kurtosis to 0.0 */"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,238,eturn 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,239, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,240,* calc the kurtosis */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,241,"ouble x1 = -6 * Math.pow(sum, 4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,242,"ouble x2 = 12 * ((double) n) * Math.pow(sum, 2) * sumsq;"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,243,"ouble x3 = -3 * ((double) (n * (n - 1))) * Math.pow(sumsq, 2);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,244,ouble x4 = -4 * ((double) (n * (n + 1))) * sum * sumCube;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,245,ouble x5 =
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,246,"ath.pow(((double) n), 2) * ((double) (n + 1)) * sumQuad;"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,248,eturn (x1 + x2 + x3 + x4 + x5)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,249, ((double) (n * (n - 1) * (n - 2) * (n - 3)));
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,202,"return ( 2 * Math.pow(sum, 3) - 3 * sum * sumsq + ((double) (n * n)) * sumCube ) /"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,203,( (double) (n * (n - 1) * (n - 2)) ) ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,253,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,254, @see org.apache.commons.math.stat.Univariate#getMax()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,207,* Returns the kurtosis of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,208,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (7) for k-Statistics</a>."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,210,* @return The kurtosis of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,211,*         an empty set of values and 0.0 is returned for a &lt;= 3 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,256,ublic double getMax() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,257,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,258,eturn super.getMax();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,213,public double getKurtosis() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,261,eturn max;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,215,if( n < 1) return Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,216,if( n <= 3 ) return 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,264,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,265, @see org.apache.commons.math.stat.Univariate#getMin()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,218,"double x1 = -6 * Math.pow(sum, 4);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,219,"double x2 = 12 * ((double) n) * Math.pow(sum, 2) * sumsq;"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,220,"double x3 = -3 * ((double) (n * (n - 1))) * Math.pow(sumsq,2);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,221,double x4 = -4 * ((double) (n * (n + 1))) * sum * sumCube;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,222,"double x5 = Math.pow(((double) n),2) * ((double) (n+1)) * sumQuad;"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,224,return (x1 + x2 + x3 + x4 + x5) /
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,225,( (double) (n * (n - 1) * (n - 2) * (n - 3)) );
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,229,"* Called in ""addValue"" to insert a new value into the statistic."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,230,* @param v The value to be added.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,232,private void insertValue(double v) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,233,"// The default value of product is NaN, if you"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,234,// try to retrieve the product for a univariate with
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,235,"// no values, we return NaN."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,237,"// If this is the first call to insertValue, we want"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,238,"// to set product to 1.0, so that our first element"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,239,"// is not ""cancelled"" out by the NaN."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,241,"// For the first value added, the mean is that value,"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,242,// and the variance is zero.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,243,if( n == 0 ) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,244,product = 1.0 ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,245,mean = v ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,246,pre_variance = 0.0 ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,247,variance = 0.0 ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,250,if( windowSize != Univariate.INFINITE_WINDOW ) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,251,if( windowSize == n ) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,252,double discarded = doubleArray.addElementRolling( v );
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,254,// Remove the influence of the discarded
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,255,sum -= discarded;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,256,sumsq -= discarded * discarded;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,257,"sumCube -= Math.pow(discarded, 3);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,258,"sumQuad -= Math.pow(discarded, 4);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,260,if(discarded == min) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,261,min = doubleArray.getMin();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,262,} else if(discarded == max){
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,263,max = doubleArray.getMax();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,266,if(product != 0.0){
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,267,// can safely remove discarded value
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,268,product *= v / discarded;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,269,} else if(discarded == 0.0){
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,270,// need to recompute product
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,271,product = 1.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,272,double[] elements = doubleArray.getElements();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,273,for( int i = 0; i < elements.length; i++ ) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,274,product *= elements[i];
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,276,} // else product = 0 and will still be 0 after discard
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,278,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,279,doubleArray.addElement( v );
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,280,n += 1 ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,281,if (v < min) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,282,min = v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,284,if (v > max) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,285,max = v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,287,product *= v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,289,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,290,// If the windowSize is infinite please don't take the time to
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,291,// worry about storing any values.  We don't need to discard the
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,292,// influence of any single item.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,293,n += 1 ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,294,if (v < min) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,295,min = v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,297,if (v > max) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,298,max = v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,300,product *= v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,302,if ( n > 1 )
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,304,double deviationFromMean = v - mean ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,305,double deviationFromMean_overN = deviationFromMean / n ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,306,mean += deviationFromMean_overN ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,307,pre_variance += (n - 1) * deviationFromMean * deviationFromMean_overN ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,308,variance = pre_variance / (n - 1) ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,312,sum += v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,313,sumsq += v * v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,314,"sumCube += Math.pow(v,3);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,315,"sumQuad += Math.pow(v,4);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,318,/** Getter for property max.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,319,* @return Value of property max.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,321,public double getMax() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,322,if (n == 0) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,323,return Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,324,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,325,return max;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,329,/** Getter for property min.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,330,* @return Value of property min.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,267,ublic double getMin() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,268,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,269,eturn super.getMin();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,332,public double getMin() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,333,if (n == 0) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,334,return Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,335,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,336,return min;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,340,/** Getter for property n.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,341,* @return Value of property n.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,343,public int getN() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,344,return n;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,272,eturn min;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,347,/** Getter for property sum.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,348,* @return Value of property sum.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,350,public double getSum() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,351,return sum;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,275,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,276, @see org.apache.commons.math.stat.Univariate#getProduct()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,278,ublic double getProduct() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,279,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,280,eturn super.getProduct();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,354,/** Getter for property sumsq.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,355,* @return Value of property sumsq.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,357,public double getSumsq() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,358,return sumsq;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,283,eturn product;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,361,/** Getter for property sumCube.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,362,* @return Value of property sumCube.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,364,public double getSumCube() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,365,return sumCube;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,368,/** Getter for property sumQuad.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,369,* @return Value of property sumQuad.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,371,public double getSumQuad() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,372,return sumQuad;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,376,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,377,* univariate statistics from values that
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,378,* have been added.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,379,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,381,public String toString() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,382,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,383,"outBuffer.append(""UnivariateImpl:\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,384,"outBuffer.append(""n: "" + n + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,385,"outBuffer.append(""min: "" + min + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,386,"outBuffer.append(""max: "" + max + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,387,"outBuffer.append(""mean: "" + getMean() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,388,"outBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,389,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,390,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,391,return outBuffer.toString();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,395,"* Resets all sums, product, mean, and variance to 0; resets min and max."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,397,public void clear() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,398,this.sum = this.sumsq = this.sumCube = this.sumQuad = 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,399,this.n = 0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,400,this.min = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,401,this.max = Double.MIN_VALUE;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,402,this.product = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,403,this.mean = Double.NaN ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,404,this.variance = this.pre_variance = Double.NaN ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,287, @see org.apache.commons.math.stat.Univariate#getGeometricMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,289,ublic double getGeometricMean() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,291,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,292,eturn super.getGeometricMean();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,295,f ((product <= 0.0) || (n == 0)) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,296,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,297, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,298,"eturn Math.pow(product, (1.0 / (double) n));"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,302,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,303, @see org.apache.commons.math.stat.StoreUnivariate#getMode()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,305,ublic double getMode() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,306,f (windowSize == Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,307,"hrow new RuntimeException(""Mode is only available if windowSize is fixed"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,310,eturn super.getMode();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,313,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,314, @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,316,ublic double getPercentile(double p) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,317,f (windowSize == Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,318,"hrow new RuntimeException(""Percentiles are only available if windowSize is fixed"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,321,eturn super.getPercentile(p);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,408,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,410,public int getWindowSize() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,411,return windowSize;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,326, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,328,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,330,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,331,* then all getters deligate to AbstractStoreUnivariate
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,332, and this clause simply adds/rolls a value in the storage array
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,334,f (windowSize == n) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,335,oubleArray.addElementRolling(v);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,336, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,337,++;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,338,oubleArray.addElement(v);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,341, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,342,* If the windowSize is infinite don't store any values and there
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,343, is no need to discard the influence of any single item.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,345,++;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,347,f (n <= 1) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,348,"* if n <= 1, initialize the product, min, max, mean, variance and pre-variance */"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,349,roduct = 1.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,350,um = min = max = mean = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,351,"umsq = Math.pow(v, 2);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,352,"umCube = Math.pow(v, 3);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,353,"umQuad = Math.pow(v, 4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,354,ariance = pre_variance = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,355, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,356,* otherwise calc these values */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,357,roduct *= v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,358,um += v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,359,"umsq += Math.pow(v, 2);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,360,"umCube += Math.pow(v, 3);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,361,"umQuad += Math.pow(v, 4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,362,"in = Math.min(min, v);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,363,"ax = Math.max(max, v);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,365,ouble deviationFromMean = v - mean;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,366,ouble deviationFromMean_overN = deviationFromMean / n;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,367,ean += deviationFromMean_overN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,368,re_variance += (n - 1)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,369, deviationFromMean
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,370, deviationFromMean_overN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,371,ariance = pre_variance / (n - 1);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,377, Generates a text report displaying
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,378, univariate statistics from values that
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,379, have been added.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,380, @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,382,ublic String toString() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,383,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,384,"utBuffer.append(""UnivariateImpl:\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,385,"utBuffer.append(""n: "" + n + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,386,"utBuffer.append(""min: "" + min + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,387,"utBuffer.append(""max: "" + max + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,388,"utBuffer.append(""mean: "" + getMean() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,389,"utBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,390,"utBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,391,"utBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,392,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,395,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,396, @see org.apache.commons.math.Univariate#clear()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,415,* @see org.apache.commons.math.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,398,ublic void clear() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,399,his.n = 0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,400,his.min = this.max = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,401,his.product = this.mean = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,402,his.variance = this.pre_variance = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,404,f (doubleArray != null)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,405,oubleArray = new FixedDoubleArray(windowSize);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,408,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,409, @see org.apache.commons.math.Univariate#getWindowSize()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,411,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,412,eturn windowSize;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,415,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,416, @see org.apache.commons.math.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,418,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,419,lear();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,420,his.windowSize = windowSize;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,421,oubleArray = new FixedDoubleArray(windowSize);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,424,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,425, @see org.apache.commons.math.stat.StoreUnivariate#getValues()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,427,ublic double[] getValues() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,428,f (windowSize == Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,429,"hrow new RuntimeException(""Values are only available if windowSize is fixed"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,432,eturn this.doubleArray.getElements();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,435,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,436, @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,438,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,439,f (windowSize == Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,440,"hrow new RuntimeException(""Elements are only available if windowSize is fixed"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,443,eturn this.doubleArray.getElement(index);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,446,* (non-Javadoc)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,447, @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,449,ublic double[] getSortedValues() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,450,f (windowSize == Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,451,"hrow new RuntimeException(""SortedValues are only available if windowSize is fixed"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,454,eturn super.getSortedValues();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,418,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,419,"String msg = ""A fixed window size must be set via the "" +"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,420,"""UnivariateImpl constructor"";"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,421,throw new RuntimeException( msg );

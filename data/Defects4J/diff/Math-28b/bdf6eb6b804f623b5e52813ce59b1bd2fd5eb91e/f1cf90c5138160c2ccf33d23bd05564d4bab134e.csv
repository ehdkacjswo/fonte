is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,106, for certain cases in {@link TDistributionImpl}) or
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,106,* for certain cases in {@link TDistribution}) or
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,76, for certain cases in {@link TDistributionImpl}) or
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,76,* for certain cases in {@link TDistribution}) or
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,23,import org.apache.commons.math.special.Gamma;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,24,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,21, Interface representing the Poisson Distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,23, <p>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,24, References:
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,25, <ul>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,26," <li><a href=""http://mathworld.wolfram.com/PoissonDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,27, Poisson distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,28, </ul>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,29, </p>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,28,* Implementation of the Poisson distribution.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,30,"* @see <a href=""http://en.wikipedia.org/wiki/Poisson_distribution"">Poisson distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,31,"* @see <a href=""http://mathworld.wolfram.com/PoissonDistribution.html"">Poisson distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,33,ublic interface PoissonDistribution extends IntegerDistribution {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,34,public class PoissonDistribution extends AbstractIntegerDistribution
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,35,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,37,* Default maximum number of iterations for cumulative probability calculations.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,38,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,40,public static final int DEFAULT_MAX_ITERATIONS = 10000000;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,43,* Default convergence criterion.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,44,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,46,public static final double DEFAULT_EPSILON = 1e-12;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,48,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,49,private static final long serialVersionUID = -3349935121172596109L;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,51,/** Distribution used to compute normal approximation. */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,52,private final NormalDistribution normal;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,54,/** Mean of the distribution. */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,55,private final double mean;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,58,* Maximum number of iterations for cumulative probability. Cumulative
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,59,* probabilities are estimated using either Lanczos series approximation of
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,60,"* {@link Gamma#regularizedGammaP(double, double, double, int)}"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,61,* or continued fraction approximation of
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,62,"* {@link Gamma#regularizedGammaQ(double, double, double, int)}."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,64,private final int maxIterations;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,66,/** Convergence criterion for cumulative probability. */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,67,private final double epsilon;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,70,* Creates a new Poisson distribution with specified mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,72,* @param p the Poisson mean
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,73,* @throws NotStrictlyPositiveException if {@code p <= 0}.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,75,public PoissonDistribution(double p) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,76,"this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,80,"* Creates a new Poisson distribution with specified mean, convergence"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,81,* criterion and maximum number of iterations.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,83,* @param p Poisson mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,84,* @param epsilon Convergence criterion for cumulative probabilities.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,85,* @param maxIterations the maximum number of iterations for cumulative
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,86,* probabilities.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,87,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,89,"public PoissonDistribution(double p, double epsilon, int maxIterations) {"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,90,if (p <= 0) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,91,"throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,93,mean = p;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,94,"normal = new NormalDistribution(p, FastMath.sqrt(p));"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,95,this.epsilon = epsilon;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,96,this.maxIterations = maxIterations;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,100,* Creates a new Poisson distribution with the specified mean and
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,101,* convergence criterion.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,103,* @param p Poisson mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,104,* @param epsilon Convergence criterion for cumulative probabilities.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,105,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,107,"public PoissonDistribution(double p, double epsilon) {"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,108,"this(p, epsilon, DEFAULT_MAX_ITERATIONS);"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,112,* Creates a new Poisson distribution with the specified mean and maximum
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,113,* number of iterations.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,115,* @param p Poisson mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,116,* @param maxIterations Maximum number of iterations for cumulative
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,117,* probabilities.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,118,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,120,"public PoissonDistribution(double p, int maxIterations) {"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,121,"this(p, DEFAULT_EPSILON, maxIterations);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,39,ouble getMean();
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,129,public double getMean() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,130,return mean;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,133,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,134,public double probability(int x) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,135,double ret;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,136,if (x < 0 || x == Integer.MAX_VALUE) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,137,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,138,} else if (x == 0) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,139,ret = FastMath.exp(-mean);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,140,} else {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,141,ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x)
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,142,"- SaddlePointExpansion.getDeviancePart(x, mean))"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,143,/ FastMath.sqrt(MathUtils.TWO_PI * x);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,145,return ret;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,148,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,149,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,150,public double cumulativeProbability(int x) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,151,if (x < 0) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,152,return 0;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,154,if (x == Integer.MAX_VALUE) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,155,return 1;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,157,"return Gamma.regularizedGammaQ((double) x + 1, mean, epsilon,"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,158,maxIterations);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,162,* Calculates the Poisson distribution function using a normal
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,163,"* approximation. The {@code N(mean, sqrt(mean))} distribution is used"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,164,* to approximate the Poisson distribution. The computation uses
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,165,"* ""half-correction"" (evaluating the normal distribution function at"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,166,* {@code x + 0.5}).
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,168,"* @param x Upper bound, inclusive."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,169,* @return the distribution function value calculated using a normal
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,170,* approximation.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,172,public double normalApproximateProbability(int x)  {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,173,// calculate the probability using half-correction
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,174,return normal.cumulativeProbability(x + 0.5);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,42, Calculates the Poisson distribution function using a normal approximation.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,178,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,179,* <p>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,180,* <strong>Algorithm Description</strong>:
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,181,* <ul>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,182,"*  <li>For small means, uses simulation of a Poisson process"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,183,"*   using Uniform deviates, as described"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,184,"*   <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here</a>."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,185,*   The Poisson process (and hence value returned) is bounded by 1000 * mean.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,186,*  </li>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,187,"*  <li>For large means, uses the rejection algorithm described in"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,188,*   <quote>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,189,"*    Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,190,*    <strong>Computing</strong> vol. 26 pp. 197-207.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,191,*   </quote>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,192,*  </li>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,193,* </ul>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,194,* </p>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,196,* @return a random value.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,197,* @since 2.2
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,199,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,200,public int sample()  {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,201,"return (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,204,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,205,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,206,protected int getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,207,return 0;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,210,/** {@inheritDoc} */    @Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,211,protected int getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,212,return Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,216,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,218,* The lower bound of the support is always 0 no matter the mean parameter.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,44," @param x the upper bound, inclusive"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,45, @return the distribution function value calculated using a normal approximation
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,220,* @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,47,ouble normalApproximateProbability(int x) ;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,222,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,223,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,224,return 0;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,228,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,230,"* The upper bound of the support is positive infinity,"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,231,"* regardless of the parameter values. There is no integer infinity,"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,232,* so this method returns {@code Integer.MAX_VALUE} and
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,233,* {@link #isSupportUpperBoundInclusive()} returns {@code true}.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,235,* @return upper bound of the support (always {@code Integer.MAX_VALUE} for
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,236,* positive infinity)
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,238,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,239,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,240,return Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,244,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,246,"* For mean parameter {@code p}, the mean is {@code p}."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,248,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,249,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,250,return getMean();
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,254,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,256,"* For mean parameter {@code p}, the variance is {@code p}."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,258,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,259,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,260,return getMean();
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,263,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,264,@Override
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,265,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,266,return true;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,21,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,22,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,23,mport org.apache.commons.math.special.Gamma;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,24,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,25,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,28, Implementation for the {@link PoissonDistribution}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,30, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,32,ublic class PoissonDistributionImpl extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,33,"mplements PoissonDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,35, Default maximum number of iterations for cumulative probability calculations.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,36, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,38,ublic static final int DEFAULT_MAX_ITERATIONS = 10000000;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,40, Default convergence criterion.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,41, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,43,ublic static final double DEFAULT_EPSILON = 1e-12;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,44,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,45,rivate static final long serialVersionUID = -3349935121172596109L;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,46,** Distribution used to compute normal approximation. */
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,47,rivate final NormalDistribution normal;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,48,** Mean of the distribution. */
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,49,rivate final double mean;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,51, Maximum number of iterations for cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,53, Cumulative probabilities are estimated using either Lanczos series approximation of
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,54, Gamma#regularizedGammaP or continued fraction approximation of Gamma#regularizedGammaQ.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,56,rivate final int maxIterations;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,58, Convergence criterion for cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,60,rivate final double epsilon;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,63, Create a new Poisson distribution with the given the mean. The mean value
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,64, must be positive; otherwise an <code>IllegalArgument</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,66, @param p the Poisson mean
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,67, @throws NotStrictlyPositiveException if {@code p <= 0}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,69,ublic PoissonDistributionImpl(double p) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,70,"his(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,74," Create a new Poisson distribution with the given mean, convergence criterion"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,75, and maximum number of iterations.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,77, @param p Poisson mean.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,78, @param epsilon Convergence criterion for cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,79, @param maxIterations the maximum number of iterations for cumulative
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,80, probabilities.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,81, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,83,"ublic PoissonDistributionImpl(double p, double epsilon, int maxIterations) {"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,84,f (p <= 0) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,85,"hrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,87,ean = p;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,88,"ormal = new NormalDistribution(p, FastMath.sqrt(p));"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,89,his.epsilon = epsilon;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,90,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,94, Create a new Poisson distribution with the given mean and convergence criterion.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,96, @param p Poisson mean.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,97, @param epsilon Convergence criterion for cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,98, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,100,"ublic PoissonDistributionImpl(double p, double epsilon) {"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,101,"his(p, epsilon, DEFAULT_MAX_ITERATIONS);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,105, Create a new Poisson distribution with the given mean and maximum number of iterations.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,107, @param p Poisson mean.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,108, @param maxIterations Maximum number of iterations for cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,109, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,111,"ublic PoissonDistributionImpl(double p, int maxIterations) {"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,112,"his(p, DEFAULT_EPSILON, maxIterations);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,116, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,118,ublic double getMean() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,119,eturn mean;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,123, The probability mass function {@code P(X = x)} for a Poisson distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,125, @param x Value at which the probability density function is evaluated.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,126, @return the value of the probability mass function at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,128,ublic double probability(int x) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,129,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,130,f (x < 0 || x == Integer.MAX_VALUE) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,131,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,132, else if (x == 0) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,133,et = FastMath.exp(-mean);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,134, else {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,135,et = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,136,"addlePointExpansion.getDeviancePart(x, mean)) /"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,137,astMath.sqrt(MathUtils.TWO_PI * x);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,139,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,143, The probability distribution function {@code P(X <= x)} for a Poisson
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,144, distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,146, @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,147, @return the Poisson distribution function evaluated at {@code x}.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,148, due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,150,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,151,ublic double cumulativeProbability(int x)  {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,152,f (x < 0) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,153,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,155,f (x == Integer.MAX_VALUE) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,156,eturn 1;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,158,"eturn Gamma.regularizedGammaQ((double) x + 1, mean, epsilon, maxIterations);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,162, Calculates the Poisson distribution function using a normal
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,163," approximation. The {@code N(mean, sqrt(mean))} distribution is used"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,164, to approximate the Poisson distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,165," The computation uses ""half-correction"" (evaluating the normal"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,166, distribution function at {@code x + 0.5}).
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,168," @param x Upper bound, inclusive."
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,169, @return the distribution function value calculated using a normal
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,170, approximation.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,171, approximation.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,173,ublic double normalApproximateProbability(int x)  {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,174,/ calculate the probability using half-correction
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,175,eturn normal.cumulativeProbability(x + 0.5);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,179, Generates a random value sampled from this distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,180, <br/>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,181, <strong>Algorithm Description</strong>:
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,182, <ul>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,183,"  <li>For small means, uses simulation of a Poisson process"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,184,"   using Uniform deviates, as described"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,185,"   <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here</a>."
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,186,   The Poisson process (and hence value returned) is bounded by 1000 * mean.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,187,  </li>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,188,"  <li>For large means, uses the rejection algorithm described in"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,189,   <quote>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,190,"    Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,191,    <strong>Computing</strong> vol. 26 pp. 197-207.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,192,   </quote>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,193,  </li>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,194, </ul>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,196, @return a random value.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,197, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,199,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,200,ublic int sample()  {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,201,"eturn (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,205," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,206, bracket a CDF root. This method is used by
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,207, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,209, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,210, @return the domain lower bound.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,212,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,213,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,214,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,218," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,219, bracket a CDF root. This method is used by
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,220, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,222, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,223, @return the domain upper bound.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,225,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,226,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,227,eturn Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,231, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,233, The lower bound of the support is always 0 no matter the mean parameter.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,235, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,237,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,238,ublic int getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,239,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,243, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,245," The upper bound of the support is positive infinity,"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,246," regardless of the parameter values. There is no integer infinity,"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,247, so this method returns <code>Integer.MAX_VALUE</code> and
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,248, {@link #isSupportUpperBoundInclusive()} returns <code>true</code>.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,250, @return upper bound of the support (always <code>Integer.MAX_VALUE</code> for positive infinity)
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,252,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,253,ublic int getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,254,eturn Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,258, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,260," For mean parameter <code>p</code>, the mean is <code>p</code>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,262, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,264,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,265,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,266,eturn getMean();
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,270, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,272," For mean parameter <code>p</code>, the variance is <code>p</code>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,274, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,276,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,277,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,278,eturn getMean();
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,282, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,284,Override
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,285,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,286,eturn true;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,23,import org.apache.commons.math.special.Beta;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,24,import org.apache.commons.math.special.Gamma;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,25,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,20, Student's t-Distribution.
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,22, <p>
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,23, References:
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,24, <ul>
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,25," <li><a href=""http://mathworld.wolfram.com/Studentst-Distribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,26, Student's t-Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,27, </ul>
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,28, </p>
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,28,* Implementation of Student's t-distribution.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,30,"* @see <a href=""http://en.wikipedia.org/wiki/Student&apos;s_t-distribution"">Student's t-distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,31,"* @see <a href=""http://mathworld.wolfram.com/Studentst-Distribution.html"">Student's t-distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,32,ublic interface TDistribution extends ContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,34,public class TDistribution extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,35,implements Serializable  {
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,34, Access the number of degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,37,* Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,38,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,40,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,41,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,42,private static final long serialVersionUID = -5852615386664158222L;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,43,/** The degrees of freedom. */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,44,private final double degreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,45,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,46,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,49,* Create a t distribution using the given degrees of freedom and the
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,50,* specified inverse cumulative probability absolute accuracy.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,52,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,53,* @param inverseCumAccuracy the maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,54,* cumulative probability estimates
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,55,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,56,* @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,57,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,59,"public TDistribution(double degreesOfFreedom, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,60,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,61,if (degreesOfFreedom <= 0) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,62,"throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,63,degreesOfFreedom);
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,65,this.degreesOfFreedom = degreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,66,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,70,* Create a t distribution using the given degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,72,* @param degreesOfFreedom Degrees of freedom.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,73,* @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,75,public TDistribution(double degreesOfFreedom)
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,76,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,77,"this(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,81,* Access the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,38,ouble getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,85,public double getDegreesOfFreedom() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,86,return degreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,89,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,90,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,91,final double n = degreesOfFreedom;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,92,final double nPlus1Over2 = (n + 1) / 2;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,93,return FastMath.exp(Gamma.logGamma(nPlus1Over2)
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,94,- 0.5 * (FastMath.log(FastMath.PI)
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,95,+ FastMath.log(n))
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,96,- Gamma.logGamma(n/2)
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,97,- nPlus1Over2 * FastMath.log(1 + x * x /n));
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,100,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,101,public double cumulativeProbability(double x) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,102,double ret;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,103,if (x == 0) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,104,ret = 0.5;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,105,} else {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,106,double t =
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,107,Beta.regularizedBeta(
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,108,"degreesOfFreedom / (degreesOfFreedom + (x * x)),"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,109,"0.5 * degreesOfFreedom,"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,110,0.5);
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,111,if (x < 0.0) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,112,ret = 0.5 * t;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,113,} else {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,114,ret = 1.0 - 0.5 * t;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,118,return ret;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,122,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,124,* Returns {@code Double.NEGATIVE_INFINITY} when {@code p = 0}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,125,* and {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,127,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,128,public double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,129,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,130,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,132,if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,133,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,135,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,138,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,139,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,140,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,141,return -Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,144,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,145,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,146,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,147,return Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,150,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,151,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,152,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,153,return 0;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,156,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,157,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,158,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,159,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,163,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,165,* The lower bound of the support is always negative infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,166,* parameters.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,168,* @return lower bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,169,* {@code Double.NEGATIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,171,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,172,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,173,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,177,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,179,* The upper bound of the support is always positive infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,180,* parameters.
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,182,* @return upper bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,183,* {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,185,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,186,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,187,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,191,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,193,"* For degrees of freedom parameter {@code df}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,194,* <ul>
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,195,"*  <li>if {@code df > 1} then {@code 0},</li>"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,196,* <li>else undefined ({@code Double.NaN}).</li>
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,197,* </ul>
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,199,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,200,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,201,final double df = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,203,if (df > 1) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,204,return 0;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,207,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,211,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,213,"* For degrees of freedom parameter {@code df}, the variance is"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,214,* <ul>
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,215,"*  <li>if {@code df > 2} then {@code df / (df - 2)},</li>"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,216,*  <li>if {@code 1 < df <= 2} then positive infinity
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,217,"*  ({@code Double.POSITIVE_INFINITY}),</li>"
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,218,*  <li>else undefined ({@code Double.NaN}).</li>
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,219,* </ul>
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,221,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,222,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,223,final double df = getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,225,if (df > 2) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,226,return df / (df - 2);
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,229,if (df > 1 && df <= 2) {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,230,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,233,return Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,236,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,237,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,238,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,239,return false;
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,242,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,243,@Override
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,244,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,245,return false;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,21,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,22,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,23,mport org.apache.commons.math.special.Beta;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,24,mport org.apache.commons.math.special.Gamma;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,25,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,28, Default implementation of
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,29, {@link org.apache.commons.math.distribution.TDistribution}.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,31, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,33,ublic class TDistributionImpl
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,34,xtends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,35,"mplements TDistribution, Serializable  {"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,37, Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,38, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,40,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,41,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,42,rivate static final long serialVersionUID = -5852615386664158222L;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,43,** The degrees of freedom. */
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,44,rivate final double degreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,45,** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,46,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,49, Create a t distribution using the given degrees of freedom and the
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,50, specified inverse cumulative probability absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,52, @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,53, @param inverseCumAccuracy the maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,54, cumulative probability estimates
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,55, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,56, @throws NotStrictlyPositiveException if {@code degreesOfFreedom <= 0}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,57, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,59,"ublic TDistributionImpl(double degreesOfFreedom, double inverseCumAccuracy) {"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,60,f (degreesOfFreedom <= 0) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,61,"hrow new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,62,egreesOfFreedom);
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,64,his.degreesOfFreedom = degreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,65,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,69, Create a t distribution using the given degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,71, @param degreesOfFreedom Degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,73,ublic TDistributionImpl(double degreesOfFreedom) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,74,"his(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,78, Access the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,80, @return the degrees of freedom.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,82,ublic double getDegreesOfFreedom() {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,83,eturn degreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,87, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,89,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,90,inal double n = degreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,91,inal double nPlus1Over2 = (n + 1) / 2;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,92,eturn FastMath.exp(Gamma.logGamma(nPlus1Over2) -
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,93,.5 * (FastMath.log(FastMath.PI) + FastMath.log(n)) -
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,94,amma.logGamma(n/2) - nPlus1Over2 * FastMath.log(1 + x * x /n));
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,98, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,100,ublic double cumulativeProbability(double x) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,101,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,102,f (x == 0) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,103,et = 0.5;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,104, else {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,105,ouble t =
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,106,eta.regularizedBeta(
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,107,"egreesOfFreedom / (degreesOfFreedom + (x * x)),"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,108,".5 * degreesOfFreedom,"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,109,.5);
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,110,f (x < 0.0) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,111,et = 0.5 * t;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,112, else {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,113,et = 1.0 - 0.5 * t;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,121, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,123, It will return {@code Double.NEGATIVE_INFINITY} when {@cod p = 0}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,124, and {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,126,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,127,ublic double inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,128,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,129,eturn Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,131,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,132,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,134,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,138," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,139, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,140, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,142, @param p Desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,143," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,145,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,146,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,147,eturn -Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,151," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,152, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,153, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,155, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,156," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,158,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,159,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,160,eturn Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,164," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,165, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,166, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,168, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,169, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,171,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,172,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,173,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,177, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,178, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,180, @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,181, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,183,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,184,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,185,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,189, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,191, The lower bound of the support is always negative infinity
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,192, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,194, @return lower bound of the support (always Double.NEGATIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,196,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,197,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,198,eturn Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,202, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,204, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,205, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,207, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,209,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,210,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,211,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,215, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,217," For degrees of freedom parameter df, the mean is"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,218, <ul>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,219,  <li>if <code>df &gt; 1</code> then <code>0</code></li>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,220, <li>else <code>undefined</code></li>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,221, </ul>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,223, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,225,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,226,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,227,inal double df = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,229,f (df > 1) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,230,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,233,eturn Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,237, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,239," For degrees of freedom parameter df, the variance is"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,240, <ul>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,241,  <li>if <code>df &gt; 2</code> then <code>df / (df - 2)</code> </li>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,242,  <li>if <code>1 &lt; df &lt;= 2</code> then <code>positive infinity</code></li>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,243,  <li>else <code>undefined</code></li>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,244, </ul>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,246, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,248,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,249,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,250,inal double df = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,252,f (df > 2) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,253,eturn df / (df - 2);
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,256,f (df > 1 && df <= 2) {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,257,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,260,eturn Double.NaN;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,264, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,266,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,267,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,268,eturn false;
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,272, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,274,Override
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,275,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,276,eturn false;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,23,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,25,import org.apache.commons.math.special.Gamma;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,21, Weibull Distribution.  This interface defines the two parameter form of the
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,22, distribution as defined by
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,29,* Implementation of the Weibull distribution. This implementation uses the
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,30,* two parameter form of the distribution defined by
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,26, <p>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,27, References:
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,28, <ul>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,29," <li><a href=""http://mathworld.wolfram.com/WeibullDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,30, Weibull Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,31, </ul>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,32, </p>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,34, @since 1.1
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,34,"* @see <a href=""http://en.wikipedia.org/wiki/Weibull_distribution"">Weibull distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,35,"* @see <a href=""http://mathworld.wolfram.com/WeibullDistribution.html"">Weibull distribution (MathWorld)</a>"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,36,* @since 1.1 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,37,ublic interface WeibullDistribution extends ContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,39,public class WeibullDistribution extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,40,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,42,* Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,43,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,45,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,46,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,47,private static final long serialVersionUID = 8589540077390120676L;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,48,/** The shape parameter. */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,49,private final double shape;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,50,/** The scale parameter. */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,51,private final double scale;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,52,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,53,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,56,* Create a Weibull distribution with the given shape and scale and a
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,57,* location equal to zero.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,59,* @param alpha Shape parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,60,* @param beta Scale parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,61,* @throws NotStrictlyPositiveException if {@code alpha <= 0} or
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,62,* {@code beta <= 0}.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,64,"public WeibullDistribution(double alpha, double beta)"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,65,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,66,"this(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,70,"* Create a Weibull distribution with the given shape, scale and inverse"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,71,* cumulative probability accuracy and a location equal to zero.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,73,* @param alpha Shape parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,74,* @param beta Scale parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,75,* @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,76,* cumulative probability estimates
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,77,* (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,78,* @throws NotStrictlyPositiveException if {@code alpha <= 0} or
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,79,* {@code beta <= 0}.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,80,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,82,"public WeibullDistribution(double alpha, double beta,"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,83,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,84,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,85,if (alpha <= 0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,86,"throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE,"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,87,alpha);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,89,if (beta <= 0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,90,"throw new NotStrictlyPositiveException(LocalizedFormats.SCALE,"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,91,beta);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,93,scale = beta;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,94,shape = alpha;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,95,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,98,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,99,public double cumulativeProbability(double x) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,100,double ret;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,101,if (x <= 0.0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,102,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,103,} else {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,104,"ret = 1.0 - FastMath.exp(-FastMath.pow(x / scale, shape));"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,106,return ret;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,110,"* Access the shape parameter, {@code alpha}."
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,112,"* @return the shape parameter, {@code alpha}."
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,114,public double getShape() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,115,return shape;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,119,"* Access the scale parameter, {@code beta}."
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,121,"* @return the scale parameter, {@code beta}."
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,123,public double getScale() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,124,return scale;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,127,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,128,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,129,if (x < 0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,130,return 0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,133,final double xscale = x / scale;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,134,"final double xscalepow = FastMath.pow(xscale, shape - 1);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,137,"* FastMath.pow(x / scale, shape) ="
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,138,"* FastMath.pow(xscale, shape) ="
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,139,"* FastMath.pow(xscale, shape - 1) * xscale"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,141,final double xscalepowshape = xscalepow * xscale;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,143,return (shape / scale) * xscalepow * FastMath.exp(-xscalepowshape);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,147,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,149,* Returns {@code 0} when {@code p == 0} and
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,150,* {@code Double.POSITIVE_INFINITY} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,152,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,153,public double inverseCumulativeProbability(double p) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,154,double ret;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,155,if (p < 0.0 || p > 1.0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,156,"throw new OutOfRangeException(p, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,157,} else if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,158,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,159,} else  if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,160,ret = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,161,} else {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,162,"ret = scale * FastMath.pow(-FastMath.log(1.0 - p), 1.0 / shape);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,164,return ret;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,167,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,168,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,169,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,170,return 0;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,173,/** {@inheritDoc} */    @Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,174,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,175,return Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,178,/** {@inheritDoc} */    @Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,179,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,180,// use median
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,181,"return FastMath.pow(scale * FastMath.log(2.0), 1.0 / shape);"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,185,* Return the absolute accuracy setting of the solver used to estimate
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,186,* inverse cumulative probabilities.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,188,* @return the solver absolute accuracy.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,189,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,191,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,192,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,193,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,197,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,199,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,201,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,203,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,204,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,205,return 0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,39, Access the shape parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,209,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,41, @return the shape parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,211,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,212,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,214,* @return upper bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,215,* {@code Double.POSITIVE_INFINITY})
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,43,ouble getShape();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,217,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,218,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,219,return Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,46, Access the scale parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,223,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,48, @return the scale parameter.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,225,"* The mean is {@code scale * Gamma(1 + (1 / shape))}, where {@code Gamma()}"
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,226,* is the Gamma-function.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,50,ouble getScale();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,228,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,229,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,230,final double sh = getShape();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,231,final double sc = getScale();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,233,return sc * FastMath.exp(Gamma.logGamma(1 + (1 / sh)));
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,237,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,239,* The variance is {@code scale^2 * Gamma(1 + (2 / shape)) - mean^2}
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,240,* where {@code Gamma()} is the Gamma-function.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,242,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,243,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,244,final double sh = getShape();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,245,final double sc = getScale();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,246,final double mn = getNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,248,return (sc * sc) *
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,249,FastMath.exp(Gamma.logGamma(1 + (2 / sh))) -
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,250,(mn * mn);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,253,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,254,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,255,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,256,return true;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,259,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,260,@Override
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,261,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,262,return false;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,18,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,22,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,23,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,25,mport org.apache.commons.math.special.Gamma;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,26,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,29, Default implementation of
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,30, {@link org.apache.commons.math.distribution.WeibullDistribution}.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,32, @since 1.1
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,33, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,35,ublic class WeibullDistributionImpl extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,36,"mplements WeibullDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,38, Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,39, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,41,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,42,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,43,rivate static final long serialVersionUID = 8589540077390120676L;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,44,** The shape parameter. */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,45,rivate final double shape;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,46,** The scale parameter. */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,47,rivate final double scale;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,48,** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,49,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,52, Create a Weibull distribution with the given shape and scale and a
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,53, location equal to zero.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,55, @param alpha Shape parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,56, @param beta Scale parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,58,"ublic WeibullDistributionImpl(double alpha, double beta) {"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,59,"his(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,63," Create a Weibull distribution with the given shape, scale and inverse"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,64, cumulative probability accuracy and a location equal to zero.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,66, @param alpha Shape parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,67, @param beta Scale parameter.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,68, @param inverseCumAccuracy Maximum absolute error in inverse
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,69, cumulative probability estimates
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,70, (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,71, @throws NotStrictlyPositiveException if {@code alpha <= 0} or
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,72, {@code beta <= 0}.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,73, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,75,"ublic WeibullDistributionImpl(double alpha, double beta,"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,76,ouble inverseCumAccuracy) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,77,f (alpha <= 0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,78,"hrow new NotStrictlyPositiveException(LocalizedFormats.SHAPE,"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,79,lpha);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,81,f (beta <= 0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,82,"hrow new NotStrictlyPositiveException(LocalizedFormats.SCALE,"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,83,eta);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,85,cale = beta;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,86,hape = alpha;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,87,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,91, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,93,ublic double cumulativeProbability(double x) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,94,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,95,f (x <= 0.0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,96,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,97, else {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,98,"et = 1.0 - FastMath.exp(-FastMath.pow(x / scale, shape));"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,100,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,104, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,106,ublic double getShape() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,107,eturn shape;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,111, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,113,ublic double getScale() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,114,eturn scale;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,118, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,120,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,121,f (x < 0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,122,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,125,inal double xscale = x / scale;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,126,"inal double xscalepow = FastMath.pow(xscale, shape - 1);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,129," FastMath.pow(x / scale, shape) ="
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,130," FastMath.pow(xscale, shape) ="
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,131," FastMath.pow(xscale, shape - 1) * xscale"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,133,inal double xscalepowshape = xscalepow * xscale;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,135,eturn (shape / scale) * xscalepow * FastMath.exp(-xscalepowshape);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,139, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,141, It will return {@code 0} when {@code p = 0} and
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,142, {@code Double.POSITIVE_INFINITY} when {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,144,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,145,ublic double inverseCumulativeProbability(double p) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,146,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,147,f (p < 0.0 || p > 1.0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,148,"hrow new OutOfRangeException(p, 0.0, 1.0);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,149, else if (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,150,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,151, else  if (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,152,et = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,153, else {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,154,"et = scale * FastMath.pow(-FastMath.log(1.0 - p), 1.0 / shape);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,156,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,161," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,162, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,163, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,165, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,166," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,168,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,169,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,170,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,174," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,175, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,176, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,178, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,179," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,181,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,182,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,183,eturn Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,187," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,188, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,189, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,191, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,192, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,194,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,195,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,196,/ use median
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,197,"eturn FastMath.pow(scale * FastMath.log(2.0), 1.0 / shape);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,201, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,202, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,204, @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,205, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,207,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,208,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,209,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,213, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,215, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,217, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,219,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,220,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,221,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,225, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,227, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,228, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,230, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,232,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,233,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,234,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,238, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,240, The mean is <code>scale * Gamma(1 + (1 / shape))</code>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,241, where <code>Gamma(...)</code> is the Gamma-function
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,243, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,245,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,246,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,247,inal double sh = getShape();
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,248,inal double sc = getScale();
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,250,eturn sc * FastMath.exp(Gamma.logGamma(1 + (1 / sh)));
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,254, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,256, The variance is
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,257, <code>scale^2 * Gamma(1 + (2 / shape)) - mean^2</code>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,258, where <code>Gamma(...)</code> is the Gamma-function
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,260, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,262,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,263,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,264,inal double sh = getShape();
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,265,inal double sc = getScale();
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,266,inal double mn = getNumericalMean();
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,268,eturn (sc * sc) *
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,269,astMath.exp(Gamma.logGamma(1 + (2 / sh))) -
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,270,mn * mn);
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,274, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,276,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,277,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,278,eturn true;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,282, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,284,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,285,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,286,eturn false;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,36,mport org.apache.commons.math.distribution.TDistributionImpl;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,37,mport org.apache.commons.math.distribution.WeibullDistributionImpl;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,36,import org.apache.commons.math.distribution.TDistribution;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,37,import org.apache.commons.math.distribution.WeibullDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,787, Generates a random value from the {@link TDistributionImpl T Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,787,* Generates a random value from the {@link TDistribution T Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,796,eturn nextInversionDeviate(new TDistributionImpl(df));
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,796,return nextInversionDeviate(new TDistribution(df));
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,800, Generates a random value from the {@link WeibullDistributionImpl Weibull Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,800,* Generates a random value from the {@link WeibullDistribution Weibull Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,810,"eturn nextInversionDeviate(new WeibullDistributionImpl(shape, scale));"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,810,"return nextInversionDeviate(new WeibullDistribution(shape, scale));"
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,22,mport org.apache.commons.math.distribution.TDistributionImpl;
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,165,Distribution tDistribution = new TDistributionImpl(nObs - 2);
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,164,TDistribution tDistribution = new TDistribution(nObs - 2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,24,mport org.apache.commons.math.distribution.TDistributionImpl;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,33, Uses commons-math {@link org.apache.commons.math.distribution.TDistributionImpl}
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,32,* Uses commons-math {@link org.apache.commons.math.distribution.TDistribution}
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,942,Distribution distribution = new TDistributionImpl(n - 1);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,941,TDistribution distribution = new TDistribution(n - 1);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,968,Distribution distribution = new TDistributionImpl(degreesOfFreedom);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,967,TDistribution distribution = new TDistribution(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,993,Distribution distribution = new TDistributionImpl(degreesOfFreedom);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,992,TDistribution distribution = new TDistribution(degreesOfFreedom);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,24,mport org.apache.commons.math.distribution.TDistributionImpl;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,128,inal double fact1 = 1.0 + (double) n;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,129,inal double fact2 = ((double) n) / (1.0 + (double) n);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,127,final double fact1 = 1.0 + n;
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,128,final double fact2 = (n) / (1.0 + n);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,167,inal double fact1 = (double) n - 1.0;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,168,inal double fact2 = ((double) n) / ((double) n - 1.0);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,166,final double fact1 = n - 1.0;
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,167,final double fact2 = (n) / (n - 1.0);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,177,inal double fact1 = (double) n - 1.0;
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,176,final double fact1 = n - 1.0;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,559,etMeanSquareError() * ((1d / (double) n) + (xbar * xbar) / sumXX));
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,558,getMeanSquareError() * ((1d / n) + (xbar * xbar) / sumXX));
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,640,Distribution distribution = new TDistributionImpl(n - 2);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,639,TDistribution distribution = new TDistribution(n - 2);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,667,Distribution distribution = new TDistributionImpl(n - 2);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,666,TDistribution distribution = new TDistribution(n - 2);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,712,inal double _syy = sumYY + sumY * sumY / ((double) n);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,711,final double _syy = sumYY + sumY * sumY / (n);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,714,"se * (xbar *xbar /sumXX + 1.0 / ((double) n)),"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,713,"mse * (xbar *xbar /sumXX + 1.0 / (n)),"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,721,"inal double[] params = new double[]{ sumY/((double) n), Double.NaN };"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,720,"final double[] params = new double[]{ sumY/(n), Double.NaN };"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,724,"bar / ((double) n - 1.0),"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,723,"ybar / (n - 1.0),"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,785,inal double _mean = sumY * sumY / ((double) n);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,784,final double _mean = sumY * sumY / (n);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,789,inal double[] vcv = new double[]{ sumYY/((double)((n-1)*n)) };
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,788,final double[] vcv = new double[]{ sumYY/(((n-1)*n)) };
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,797,inal double _sxx = sumXX + sumX * sumX / ((double) n);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,798,inal double _sxy = sumXY + sumX * sumY / ((double) n);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,796,final double _sxx = sumXX + sumX * sumX / (n);
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,797,final double _sxy = sumXY + sumX * sumY / (n);
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,800,inal double _mse = _sse/((double)(n-1));
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,799,final double _mse = _sse/((n-1));
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,48,eturn new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,48,return new PoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,116,oissonDistribution dist = new PoissonDistributionImpl(100);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,116,PoissonDistribution dist = new PoissonDistribution(100);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,121,ist = new PoissonDistributionImpl(10000);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,121,dist = new PoissonDistribution(10000);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,133,oissonDistribution dist = new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,133,PoissonDistribution dist = new PoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,140,ew PoissonDistributionImpl(-1);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,140,new PoissonDistribution(-1);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,145,oissonDistribution dist = new PoissonDistributionImpl(10.0);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,145,PoissonDistribution dist = new PoissonDistribution(10.0);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,153,oissonDistribution dist = new PoissonDistributionImpl(mean);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,153,PoissonDistribution dist = new PoissonDistribution(mean);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,184,ist = new PoissonDistributionImpl(9120);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,184,dist = new PoissonDistribution(9120);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,187,ist = new PoissonDistributionImpl(5058);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,187,dist = new PoissonDistribution(5058);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,189,ist = new PoissonDistributionImpl(6986);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,189,dist = new PoissonDistribution(6986);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,205,oissonDistribution dist = new PoissonDistributionImpl(mean);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,205,PoissonDistribution dist = new PoissonDistribution(mean);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,229,ist = new PoissonDistributionImpl(1);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,229,dist = new PoissonDistribution(1);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,231,"ssert.assertEquals(dist.getNumericalVariance(), 1, tol);"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,233,ist = new PoissonDistributionImpl(11.23);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,231,"Assert.assertEquals(dist.getNumericalVariance(), 1, tol);"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,233,dist = new PoissonDistribution(11.23);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,37,eturn new TDistributionImpl(5.0);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,37,return new TDistribution(5.0);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,76,DistributionImpl td = new TDistributionImpl(5.);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,76,TDistribution td = new TDistribution(5.);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,83,etDistribution(new TDistributionImpl(1d));
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,83,setDistribution(new TDistribution(1d));
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,113,ew TDistributionImpl(0);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,113,new TDistribution(0);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,121,ist = new TDistributionImpl(1);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,121,dist = new TDistribution(1);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,125,ist = new TDistributionImpl(1.5);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,125,dist = new TDistribution(1.5);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,129,ist = new TDistributionImpl(5);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,129,dist = new TDistribution(5);
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,131,"ssert.assertEquals(dist.getNumericalVariance(), 5d / (5d - 2d), tol);"
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,131,"Assert.assertEquals(dist.getNumericalVariance(), 5d / (5d - 2d), tol);"
False,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,154,Distribution td =  new TDistributionImpl(df);
True,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,src/test/java/org/apache/commons/math/distribution/TDistributionTest.java,154,TDistribution td =  new TDistribution(df);
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,40,"eturn new WeibullDistributionImpl(1.2, 2.1);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,40,"return new WeibullDistribution(1.2, 2.1);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,76,"eibullDistribution dist = new WeibullDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,76,"WeibullDistribution dist = new WeibullDistribution(1, 2);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,79,"ist = new WeibullDistributionImpl(0, 2);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,79,"dist = new WeibullDistribution(0, 2);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,88,"eibullDistribution dist = new WeibullDistributionImpl(1, 2);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,88,"WeibullDistribution dist = new WeibullDistribution(1, 2);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,91,"ist = new WeibullDistributionImpl(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,91,"dist = new WeibullDistribution(1, 0);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,103,"ist = new WeibullDistributionImpl(2.5, 3.5);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,103,"dist = new WeibullDistribution(2.5, 3.5);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,106,"ssert.assertEquals(dist.getNumericalVariance(), (3.5 * 3.5) *"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,106,"Assert.assertEquals(dist.getNumericalVariance(), (3.5 * 3.5) *"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,108,"dist.getNumericalMean() * dist.getNumericalMean()), tol);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,110,"ist = new WeibullDistributionImpl(10.4, 2.222);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,108,"(dist.getNumericalMean() * dist.getNumericalMean()), tol);"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,110,"dist = new WeibullDistribution(10.4, 2.222);"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,112,"ssert.assertEquals(dist.getNumericalVariance(), (2.222 * 2.222) *"
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,112,"Assert.assertEquals(dist.getNumericalVariance(), (2.222 * 2.222) *"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,41,mport org.apache.commons.math.distribution.PoissonDistributionImpl;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,42,mport org.apache.commons.math.distribution.TDistributionImpl;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,43,mport org.apache.commons.math.distribution.WeibullDistributionImpl;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,41,import org.apache.commons.math.distribution.PoissonDistribution;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,42,import org.apache.commons.math.distribution.TDistribution;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,43,import org.apache.commons.math.distribution.WeibullDistribution;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,296,oissonDistribution poissonDistribution = new PoissonDistributionImpl(mean);
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,296,PoissonDistribution poissonDistribution = new PoissonDistribution(mean);
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,924,"/ Tests shape <= 1, another case in the rejection sampling"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,924,"// Tests shape <= 1, another case in the rejection sampling"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,937,ouble[] quartiles = TestUtils.getDistributionQuartiles(new TDistributionImpl(10));
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,937,double[] quartiles = TestUtils.getDistributionQuartiles(new TDistribution(10));
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,949,"ouble[] quartiles = TestUtils.getDistributionQuartiles(new WeibullDistributionImpl(1.2, 2.1));"
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,949,"double[] quartiles = TestUtils.getDistributionQuartiles(new WeibullDistribution(1.2, 2.1));"
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,21,mport org.apache.commons.math.distribution.TDistributionImpl;
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,179,nt dimension = 120;
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,178,int dimension = 120;
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,230,Distribution tDistribution = new TDistributionImpl(45);
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,229,TDistribution tDistribution = new TDistribution(45);

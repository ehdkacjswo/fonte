is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,25,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,26,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,23,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,24,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,165, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,165,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,192, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,192,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,171, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,171,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,198, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,198,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,26,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,23,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,30,   implementation classes being expected to throw {@link
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,31,   org.apache.commons.math.exception.NonPositiveDefiniteMatrixException}
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,30,*   implementation classes being expected to throw {@link NonPositiveDefiniteMatrixException}
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,21,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,22,mport org.apache.commons.math.exception.NonSymmetricMatrixException;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,23,mport org.apache.commons.math.exception.NonPositiveDefiniteMatrixException;
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,273, @throws org.apache.commons.math.exception.SingularMatrixException if
False,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,274, the decomposed matrix is singular.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,270,* @throws SingularMatrixException if the decomposed matrix is singular.
False,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,45, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,45,* @throws SingularMatrixException
False,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,57, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,57,* @throws SingularMatrixException
False,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,69, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,69,* @throws SingularMatrixException
False,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,82, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,src/main/java/org/apache/commons/math/linear/DecompositionSolver.java,82,* @throws SingularMatrixException
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,21,mport org.apache.commons.math.exception.SingularMatrixException;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,22,mport org.apache.commons.math.exception.NonSymmetricMatrixException;
False,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,47, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,47,* @throws SingularMatrixException
False,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,59, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,59,* @throws SingularMatrixException
False,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,71, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,71,* @throws SingularMatrixException
False,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,84, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java,84,* @throws SingularMatrixException
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,25,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,26,mport org.apache.commons.math.exception.SingularMatrixException;
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,66, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,66,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,76, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,76,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,204, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,204,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,238, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,238,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,263, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,263,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,288, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,288,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,313, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,313,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,337, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,337,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,360, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,360,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,426, @throws org.apache.commons.math.exception.NonSquareMatrixException
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,426,* @throws NonSquareMatrixException
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,21,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,22,mport org.apache.commons.math.exception.SingularMatrixException;
False,src/main/java/org/apache/commons/math/exception/MatrixDimensionMismatchException.java,src/main/java/org/apache/commons/math/linear/MatrixDimensionMismatchException.java,17,ackage org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/MatrixDimensionMismatchException.java,src/main/java/org/apache/commons/math/linear/MatrixDimensionMismatchException.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/exception/MatrixDimensionMismatchException.java,src/main/java/org/apache/commons/math/linear/MatrixDimensionMismatchException.java,19,import org.apache.commons.math.exception.MultiDimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,32,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java,17,ackage org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/exception/NonPositiveDefiniteMatrixException.java,src/main/java/org/apache/commons/math/linear/NonPositiveDefiniteMatrixException.java,19,import org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java,17,ackage org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/exception/NonSquareMatrixException.java,src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java,19,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/linear/NonSymmetricMatrixException.java,17,ackage org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/linear/NonSymmetricMatrixException.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/exception/NonSymmetricMatrixException.java,src/main/java/org/apache/commons/math/linear/NonSymmetricMatrixException.java,19,import org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,173, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,173,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,23,mport org.apache.commons.math.exception.SingularMatrixException;
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,237, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,237,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,262, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,262,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,287, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,287,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,312, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,312,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,337, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,337,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,362, @throws org.apache.commons.math.exception.MatrixDimensionMismatchException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,362,* @throws MatrixDimensionMismatchException
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,430, @throws org.apache.commons.math.exception.NonSquareMatrixException
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,430,* @throws NonSquareMatrixException
False,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/linear/SingularMatrixException.java,17,ackage org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/linear/SingularMatrixException.java,17,package org.apache.commons.math.linear;
True,src/main/java/org/apache/commons/math/exception/SingularMatrixException.java,src/main/java/org/apache/commons/math/linear/SingularMatrixException.java,19,import org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,22,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,61, @exception NonSquareMatrixException if the matrix is not square.
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,60,* @throws NonSquareMatrixException if the matrix is not square.
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,65,"hrow new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());"
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,64,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,65,matrix.getColumnDimension());
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,175, @throws org.apache.commons.math.exception.SingularMatrixException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,175,* @throws org.apache.commons.math.linear.SingularMatrixException
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,177, @throws org.apache.commons.math.exception.MathUserException if the jacobian
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,178, function throws one.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,177,* @throws org.apache.commons.math.exception.MathUserException if the
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,178,* jacobian function throws one.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,208, @throws org.apache.commons.math.exception.SingularMatrixException if
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,209, the covariances matrix cannot be computed.
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,208,* @throws org.apache.commons.math.linear.SingularMatrixException
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,209,* if the covariances matrix cannot be computed.
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,21,mport org.apache.commons.math.exception.SingularMatrixException;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,28,import org.apache.commons.math.linear.SingularMatrixException;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,21,mport org.apache.commons.math.exception.NonPositiveDefiniteMatrixException;
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,21,import org.apache.commons.math.linear.NonPositiveDefiniteMatrixException;
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,76,** Simple constructor.
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,77, <p>Build a correlated random vector generator from its mean
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,78, vector and covariance matrix.</p>
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,79, @param mean expected mean values for all components
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,80, @param covariance covariance matrix
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,81, @param small diagonal elements threshold under which  column are
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,77,* Builds a correlated random vector generator from its mean
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,78,* vector and covariance matrix.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,80,* @param mean Expected mean values for all components.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,81,* @param covariance Covariance matrix.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,82,* @param small Diagonal elements threshold under which  column are
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,84, components
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,85, @throws NonPositiveDefiniteMatrixException if the
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,86, covariance matrix is not strictly positive definite
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,85,* components.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,86,* @throws org.apache.commons.math.linear.NonPositiveDefiniteMatrixException
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,87,* if the covariance matrix is not strictly positive definite.
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,106,** Simple constructor.
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,107, <p>Build a null mean random correlated vector generator from its
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,108, covariance matrix.</p>
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,109, @param covariance covariance matrix
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,110, @param small diagonal elements threshold under which  column are
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,111, considered to be dependent on previous ones and are discarded
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,112, @param generator underlying generator for uncorrelated normalized
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,113, components
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,114, @exception NonPositiveDefiniteMatrixException if the
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,115, covariance matrix is not strictly positive definite
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,107,* Builds a null mean random correlated vector generator from its
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,108,* covariance matrix.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,110,* @param covariance Covariance matrix.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,111,* @param small Diagonal elements threshold under which  column are
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,112,* considered to be dependent on previous ones and are discarded.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,113,* @param generator Underlying generator for uncorrelated normalized
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,114,* components.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,115,* @throws org.apache.commons.math.linear.NonPositiveDefiniteMatrixException
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,116,* if the covariance matrix is not strictly positive definite.
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,174, @throws NonPositiveDefiniteMatrixException if the
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,175, covariance matrix is not strictly positive definite.
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,174,* @throws org.apache.commons.math.linear.NonPositiveDefiniteMatrixException
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,175,* if the covariance matrix is not strictly positive definite.
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,19,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,25,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,29,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,39,ublic final class Array2DRowRealMatrixTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,38,public final class Array2DRowRealMatrixTest {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,101,ublic Array2DRowRealMatrixTest(String name) {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,102,uper(name);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,101,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,109,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,110,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,111,"ssertTrue(""testData is square"",m.isSquare());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,112,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,113,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,114,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,105,"Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,106,"Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,107,"Assert.assertTrue(""testData is square"",m.isSquare());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,108,"Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,109,"Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,110,"Assert.assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,114,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,121,"ssertEquals(m2,m1);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,118,"Assert.assertEquals(m2,m1);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,124,"ssertEquals(m4,m3);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,121,"Assert.assertEquals(m4,m3);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,125,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,135,"ssertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,133,"Assert.assertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,141,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,148,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,147,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,154,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,158,"ssertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,159,"ssertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,158,"Assert.assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,159,"Assert.assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,163,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,166,"ssertEquals(""testData Frobenius norm"", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,167,"ssertEquals(""testData2 Frobenius norm"", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,167,"Assert.assertEquals(""testData Frobenius norm"", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,168,"Assert.assertEquals(""testData2 Frobenius norm"", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,172,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,178,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,180,"Assert.fail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,185,ublic void testMultiply() {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,187,@Test
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,188,public void testMultiply() {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,202,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,205,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,217,@Test
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,226,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,224,"ssertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,229,"Assert.assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,228,"ail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,233,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,240,@Test
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,248,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,251,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,258,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,265,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,263,"ssertEquals(a.getRowDimension(), b.length);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,264,"ssertEquals( 3.0, b[0], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,265,"ssertEquals( 7.0, b[1], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,266,"ssertEquals(11.0, b[2], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,271,"Assert.assertEquals(a.getRowDimension(), b.length);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,272,"Assert.assertEquals( 3.0, b[0], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,273,"Assert.assertEquals( 7.0, b[1], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,274,"Assert.assertEquals(11.0, b[2], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,278,@Test
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,290,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,290,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,300,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,306,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,315,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,326,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,332,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,327,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,339,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,333,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,345,"Assert.fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,351,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,341,"ssertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,354,"Assert.assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,344,"ail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,357,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,364,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,360,"ssertEquals(2, p.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,361,"ssertEquals(2, p.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,374,"Assert.assertEquals(2, p.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,375,"Assert.assertEquals(2, p.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,364,"ssertEquals(2, pInverse.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,365,"ssertEquals(2, pInverse.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,378,"Assert.assertEquals(2, pInverse.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,379,"Assert.assertEquals(2, pInverse.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,372,"ssertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,373,"ssertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,374,"ssertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,386,"Assert.assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,387,"Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,388,"Assert.assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,393,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,403,"ssertEquals(new Array2DRowRealMatrix(reference), sub);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,418,"Assert.assertEquals(new Array2DRowRealMatrix(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,405,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,420,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,427,"ssertEquals(new Array2DRowRealMatrix(reference), sub);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,442,"Assert.assertEquals(new Array2DRowRealMatrix(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,429,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,444,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,461,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,474,"ssertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,490,"Assert.assertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,476,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,492,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,501,"ssertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,517,"Assert.assertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,503,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,519,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,536,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,524,"ssertEquals(""Row0"", mRow0,"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,541,"Assert.assertEquals(""Row0"", mRow0,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,526,"ssertEquals(""Row3"", mRow3,"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,543,"Assert.assertEquals(""Row3"", mRow3,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,530,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,547,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,536,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,553,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,559,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,545,"ssertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,563,"Assert.assertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,547,"ssertEquals(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,565,"Assert.assertEquals(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,550,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,568,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,556,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,574,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,580,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,566,"ssertEquals(""Column1"", mColumn1,"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,585,"Assert.assertEquals(""Column1"", mColumn1,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,568,"ssertEquals(""Column3"", mColumn3,"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,587,"Assert.assertEquals(""Column3"", mColumn3,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,572,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,591,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,578,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,597,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,603,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,587,"ssertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,607,"Assert.assertNotSame(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,589,"ssertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,609,"Assert.assertEquals(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,592,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,612,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,598,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,618,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,624,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,608,"ssertEquals(""Row0"", mRow0, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,609,"ssertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,629,"Assert.assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,630,"Assert.assertEquals(""Row3"", mRow3, m.getRowVector(3));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,612,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,633,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,618,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,639,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,645,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,627,"ssertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,649,"Assert.assertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,629,"ssertEquals(mRow3, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,651,"Assert.assertEquals(mRow3, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,632,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,654,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,638,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,660,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,666,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,648,"ssertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,649,"ssertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,671,"Assert.assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,672,"Assert.assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,652,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,675,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,658,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,681,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,687,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,667,"ssertNotSame(mColumn3, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,691,"Assert.assertNotSame(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,669,"ssertEquals(mColumn3, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,693,"Assert.assertEquals(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,672,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,696,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,678,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,702,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,716,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,698,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,723,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,704,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,729,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,735,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,712,ssertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,738,Assert.assertTrue(subRow3[0][0] != m.getRow(0)[0]);
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,717,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,743,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,723,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,749,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,755,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,737,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,764,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,743,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,770,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,776,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,752,ssertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,780,Assert.assertTrue(mColumn3[0] != m.getColumn(1)[0]);
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,757,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,785,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,763,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,791,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,778,"ssertEquals(expected.length, actual.length);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,806,"Assert.assertEquals(expected.length, actual.length);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,780,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,808,"Assert.assertEquals(expected[i], actual[i], 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,812,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,788,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,789,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,790,"ssertEquals(m, m);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,791,"ssertEquals(m, m1);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,792,ssertFalse(m.equals(null));
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,793,ssertFalse(m.equals(mt));
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,794,ssertFalse(m.equals(new Array2DRowRealMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,817,Assert.assertTrue(m.hashCode() != mt.hashCode());
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,818,"Assert.assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,819,"Assert.assertEquals(m, m);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,820,"Assert.assertEquals(m, m1);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,821,Assert.assertFalse(m.equals(null));
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,822,Assert.assertFalse(m.equals(mt));
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,823,Assert.assertFalse(m.equals(new Array2DRowRealMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,826,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,799,"ssertEquals(""Array2DRowRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,829,"Assert.assertEquals(""Array2DRowRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,802,"ssertEquals(""Array2DRowRealMatrix{}"","
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,832,"Assert.assertEquals(""Array2DRowRealMatrix{}"","
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,836,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,811,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,842,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,816,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,847,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,821,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,852,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,826,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,857,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,833,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,864,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,839,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,870,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,847,"ail(""expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,878,"Assert.fail(""expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,854,"ail(""expecting MathIllegalStateException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,885,"Assert.fail(""expecting MathIllegalStateException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,860,"ail(""expecting MathIllegalStateException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,891,"Assert.fail(""expecting MathIllegalStateException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,868,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,899,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,876,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,907,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,913,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,891,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,922,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,897,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,928,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,899,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,900,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,930,"Assert.assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,931,"Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,903,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,904,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,934,"Assert.assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,935,"Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,911,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,942,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,917,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,948,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,919,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,920,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,950,"Assert.assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,951,"Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,923,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,924,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,954,"Assert.assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,955,"Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,931,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,962,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,937,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,968,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,939,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,940,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,970,"Assert.assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,971,"Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,943,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,944,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,974,"Assert.assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,975,"Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,951,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,982,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,957,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,988,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,959,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,960,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,990,"Assert.assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,991,"Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,963,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,964,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,994,"Assert.assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,995,"Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,999,@Test
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,971,"ssertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1002,"Assert.assertEquals(m,TestUtils.serializeAndRecover(m));"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,987,"ssertEquals(i + j / 1024.0, value, 0.0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1018,"Assert.assertEquals(i + j / 1024.0, value, 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,23,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,28,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,33,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,42,ublic final class BlockFieldMatrixTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,41,public final class BlockFieldMatrixTest {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,161,ublic BlockFieldMatrixTest(String name) {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,162,uper(name);
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,161,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,169,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,170,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,171,"ssertTrue(""testData is square"",m.isSquare());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,172,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,173,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,174,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,165,"Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,166,"Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,167,"Assert.assertTrue(""testData is square"",m.isSquare());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,168,"Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,169,"Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,170,"Assert.assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,174,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,182,"ssertEquals(m1, m2);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,179,"Assert.assertEquals(m1, m2);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,185,"ssertEquals(m3, m4);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,182,"Assert.assertEquals(m3, m4);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,186,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,196,"ssertEquals(testDataPlusInv[row][col],sumEntries[row][col]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,194,"Assert.assertEquals(testDataPlusInv[row][col],sumEntries[row][col]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,200,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,207,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,206,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,213,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,220,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,220,"Assert.fail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,227,ublic void testMultiply() {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,227,@Test
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,228,public void testMultiply() {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,239,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,240,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,246,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,256,"ssertEquals(m.getRowDimension(), mT.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,257,"ssertEquals(m.getColumnDimension(), mT.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,257,"Assert.assertEquals(m.getRowDimension(), mT.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,258,"Assert.assertEquals(m.getColumnDimension(), mT.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,260,"ssertEquals(m.getEntry(j, i), mT.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,261,"Assert.assertEquals(m.getEntry(j, i), mT.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,267,"ssertEquals(m.getEntry(i, j).multiply(new Fraction(2)), mPm.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,268,"Assert.assertEquals(m.getEntry(i, j).multiply(new Fraction(2)), mPm.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,274,"ssertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,275,"Assert.assertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,285,"ssertEquals(sum, mTm.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,286,"Assert.assertEquals(sum, mTm.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,296,"ssertEquals(sum, mmT.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,297,"Assert.assertEquals(sum, mmT.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,303,"ssertEquals(new Fraction((i + 2) * 11 + (j + 5), 11), sub1.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,304,"Assert.assertEquals(new Fraction((i + 2) * 11 + (j + 5), 11), sub1.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,310,"ssertEquals(new Fraction((i + 10) * 11 + (j + 3), 11), sub2.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,311,"Assert.assertEquals(new Fraction((i + 10) * 11 + (j + 3), 11), sub2.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,317,"ssertEquals(new Fraction((i + 30) * 11 + (j + 0), 11), sub3.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,318,"Assert.assertEquals(new Fraction((i + 30) * 11 + (j + 0), 11), sub3.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,324,"ssertEquals(new Fraction((i + 30) * 11 + (j + 32), 11), sub4.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,325,"Assert.assertEquals(new Fraction((i + 30) * 11 + (j + 32), 11), sub4.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,345,@Test
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,354,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,354,"ssertEquals(new Fraction(3),m.getTrace());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,357,"Assert.assertEquals(new Fraction(3),m.getTrace());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,358,"ail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,361,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,368,@Test
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,376,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,379,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,384,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,390,@Test
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,404,@Test
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,419,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,419,"ssertEquals(a.getRowDimension(), b.length);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,420,"ssertEquals( new Fraction(3), b[0]);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,421,"ssertEquals( new Fraction(7), b[1]);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,422,"ssertEquals(new Fraction(11), b[2]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,427,"Assert.assertEquals(a.getRowDimension(), b.length);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,428,"Assert.assertEquals( new Fraction(3), b[0]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,429,"Assert.assertEquals( new Fraction(7), b[1]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,430,"Assert.assertEquals(new Fraction(11), b[2]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,434,@Test
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,446,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,445,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,455,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,461,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,466,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,477,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,483,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,478,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,490,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,484,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,496,"Assert.fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,502,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,492,"ssertEquals(m.getEntry(0,1),new Fraction(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,505,"Assert.assertEquals(m.getEntry(0,1),new Fraction(2));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,495,"ail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,508,"Assert.fail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,515,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,518,"ssertEquals(2, p.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,519,"ssertEquals(2, p.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,532,"Assert.assertEquals(2, p.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,533,"Assert.assertEquals(2, p.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,522,"ssertEquals(2, pInverse.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,523,"ssertEquals(2, pInverse.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,536,"Assert.assertEquals(2, pInverse.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,537,"Assert.assertEquals(2, pInverse.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,534,ssertEquals(new Fraction(2).multiply(solution[0]).
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,548,Assert.assertEquals(new Fraction(2).multiply(solution[0]).
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,538,ssertEquals(new Fraction(-1).multiply(solution[0]).
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,552,Assert.assertEquals(new Fraction(-1).multiply(solution[0]).
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,542,ssertEquals(new Fraction(4).multiply(solution[0]).
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,556,Assert.assertEquals(new Fraction(4).multiply(solution[0]).
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,564,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,574,"ssertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,589,"Assert.assertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,576,"ail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,591,"Assert.fail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,603,"ssertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,618,"Assert.assertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,605,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,620,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,641,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,637,"ssertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,653,"Assert.assertEquals(new Fraction(0), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,639,"ssertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,655,"Assert.assertEquals(new Fraction(1), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,643,"ssertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,659,"Assert.assertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,662,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,675,"ssertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,691,"Assert.assertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,677,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,693,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,702,"ssertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,718,"Assert.assertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,704,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,720,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,737,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,725,"ssertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,726,"ssertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,742,"Assert.assertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,743,"Assert.assertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,729,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,746,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,735,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,752,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,758,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,744,"ssertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,762,"Assert.assertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,746,"ssertEquals(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,764,"Assert.assertEquals(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,749,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,767,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,755,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,773,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,779,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,772,"ssertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,791,"Assert.assertEquals(new Fraction(0), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,774,"ssertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,793,"Assert.assertEquals(new Fraction(1), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,778,"ssertEquals(sub, m.getRowMatrix(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,797,"Assert.assertEquals(sub, m.getRowMatrix(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,801,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,786,"ssertEquals(mColumn1, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,787,"ssertEquals(mColumn3, m.getColumnMatrix(3));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,806,"Assert.assertEquals(mColumn1, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,807,"Assert.assertEquals(mColumn3, m.getColumnMatrix(3));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,790,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,810,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,796,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,816,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,822,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,805,"ssertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,826,"Assert.assertNotSame(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,807,"ssertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,828,"Assert.assertEquals(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,810,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,831,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,816,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,837,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,843,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,833,"ssertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,855,"Assert.assertEquals(new Fraction(0), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,835,"ssertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,857,"Assert.assertEquals(new Fraction(1), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,839,"ssertEquals(sub, m.getColumnMatrix(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,861,"Assert.assertEquals(sub, m.getColumnMatrix(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,865,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,847,"ssertEquals(mRow0, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,848,"ssertEquals(mRow3, m.getRowVector(3));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,870,"Assert.assertEquals(mRow0, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,871,"Assert.assertEquals(mRow3, m.getRowVector(3));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,851,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,874,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,857,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,880,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,886,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,866,"ssertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,890,"Assert.assertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,868,"ssertEquals(mRow3, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,892,"Assert.assertEquals(mRow3, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,871,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,895,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,877,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,901,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,907,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,892,"ssertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,917,"Assert.assertEquals(new Fraction(0), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,894,"ssertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,919,"Assert.assertEquals(new Fraction(1), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,898,"ssertEquals(sub, m.getRowVector(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,923,"Assert.assertEquals(sub, m.getRowVector(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,927,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,906,"ssertEquals(mColumn1, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,907,"ssertEquals(mColumn3, m.getColumnVector(3));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,932,"Assert.assertEquals(mColumn1, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,933,"Assert.assertEquals(mColumn3, m.getColumnVector(3));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,910,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,936,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,916,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,942,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,948,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,925,"ssertNotSame(mColumn3, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,952,"Assert.assertNotSame(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,927,"ssertEquals(mColumn3, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,954,"Assert.assertEquals(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,930,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,957,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,936,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,963,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,969,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,951,"ssertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,979,"Assert.assertEquals(new Fraction(0), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,953,"ssertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,981,"Assert.assertEquals(new Fraction(1), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,957,"ssertEquals(sub, m.getColumnVector(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,985,"Assert.assertEquals(sub, m.getColumnVector(2));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,997,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,975,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1004,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,981,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1010,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1016,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,989,ssertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1019,Assert.assertTrue(subRow3[0][0] != m.getRow(0)[0]);
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,994,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1024,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1000,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1030,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1036,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1016,"ssertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1047,"Assert.assertEquals(new Fraction(0), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1018,"ssertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1049,"Assert.assertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1057,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1034,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1066,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1040,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1072,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1078,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1049,ssertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1082,Assert.assertTrue(mColumn3[0] != m.getColumn(1)[0]);
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1054,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1087,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1060,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1093,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1099,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1076,"ssertEquals(new Fraction(0), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1110,"Assert.assertEquals(new Fraction(0), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1078,"ssertEquals(new Fraction(1), m.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1112,"Assert.assertEquals(new Fraction(1), m.getEntry(i, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1095,"ssertEquals(expected.length, actual.length);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1129,"Assert.assertEquals(expected.length, actual.length);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1097,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1131,"Assert.assertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1135,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1105,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1106,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1107,"ssertEquals(m, m);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1108,"ssertEquals(m, m1);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1109,ssertFalse(m.equals(null));
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1110,ssertFalse(m.equals(mt));
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1111,ssertFalse(m.equals(new BlockFieldMatrix<Fraction>(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1140,Assert.assertTrue(m.hashCode() != mt.hashCode());
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1141,"Assert.assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1142,"Assert.assertEquals(m, m);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1143,"Assert.assertEquals(m, m1);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1144,Assert.assertFalse(m.equals(null));
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1145,Assert.assertFalse(m.equals(mt));
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1146,Assert.assertFalse(m.equals(new BlockFieldMatrix<Fraction>(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1149,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1116,"ssertEquals(""BlockFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1152,"Assert.assertEquals(""BlockFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1155,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1124,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1161,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1129,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1166,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1134,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1171,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1153,"ssertEquals(expected, matrix);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1190,"Assert.assertEquals(expected, matrix);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1158,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1195,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1165,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1202,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1171,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1208,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1179,"ail(""expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1216,"Assert.fail(""expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1187,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1224,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1195,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1232,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1238,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1210,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1247,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1216,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1253,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1218,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1219,"ssertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1255,"Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1256,"Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1222,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1223,"ssertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1259,"Assert.assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1260,"Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1230,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1267,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1236,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1273,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1238,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1239,"ssertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1275,"Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1276,"Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1242,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1243,"ssertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1279,"Assert.assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1280,"Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1250,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1287,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1256,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1293,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1258,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1259,"ssertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1295,"Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1296,"Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1262,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1263,"ssertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1299,"Assert.assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1300,"Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1270,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1307,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1276,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1313,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1278,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1279,"ssertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1315,"Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1316,"Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1282,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1283,"ssertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1319,"Assert.assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1320,"Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1325,@Test
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1290,"ssertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1328,"Assert.assertEquals(m,TestUtils.serializeAndRecover(m));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1312,"ssertEquals(new Fraction(i * 11 + j, 11), value);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1350,"Assert.assertEquals(new Fraction(i * 11 + j, 11), value);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,23,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,27,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,31,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,40,ublic final class BlockRealMatrixTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,39,public final class BlockRealMatrixTest {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,102,ublic BlockRealMatrixTest(String name) {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,103,uper(name);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,102,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,110,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,111,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,112,"ssertTrue(""testData is square"",m.isSquare());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,113,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,114,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,115,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,106,"Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,107,"Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,108,"Assert.assertTrue(""testData is square"",m.isSquare());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,109,"Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,110,"Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,111,"Assert.assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,115,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,123,"ssertEquals(m1, m2);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,120,"Assert.assertEquals(m1, m2);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,126,"ssertEquals(m3, m4);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,123,"Assert.assertEquals(m3, m4);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,127,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,137,"ssertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,135,"Assert.assertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,143,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,150,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,149,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,156,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,160,"ssertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,161,"ssertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,160,"Assert.assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,161,"Assert.assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,165,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,168,"ssertEquals(""testData Frobenius norm"", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,169,"ssertEquals(""testData2 Frobenius norm"", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,169,"Assert.assertEquals(""testData Frobenius norm"", FastMath.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,170,"Assert.assertEquals(""testData2 Frobenius norm"", FastMath.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,172,** test m-n = m + -n */
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,173,/** test m-n = m + -n */
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,174,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,179,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,181,"Assert.fail(""Expecting illegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,186,ublic void testMultiply() {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,188,@Test
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,189,public void testMultiply() {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,198,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,201,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,207,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,214,"ssertEquals(m.getRowDimension(), mT.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,215,"ssertEquals(m.getColumnDimension(), mT.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,217,"Assert.assertEquals(m.getRowDimension(), mT.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,218,"Assert.assertEquals(m.getColumnDimension(), mT.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,218,"ssertEquals(m.getEntry(j, i), mT.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,221,"Assert.assertEquals(m.getEntry(j, i), mT.getEntry(i, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,225,"ssertEquals(2 * m.getEntry(i, j), mPm.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,228,"Assert.assertEquals(2 * m.getEntry(i, j), mPm.getEntry(i, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,232,"ssertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,235,"Assert.assertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,243,"ssertEquals(sum, mTm.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,246,"Assert.assertEquals(sum, mTm.getEntry(i, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,254,"ssertEquals(sum, mmT.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,257,"Assert.assertEquals(sum, mmT.getEntry(i, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,261,"ssertEquals((i + 2) + (j + 5) / 1024.0, sub1.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,264,"Assert.assertEquals((i + 2) + (j + 5) / 1024.0, sub1.getEntry(i, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,268,"ssertEquals((i + 10) + (j + 3) / 1024.0, sub2.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,271,"Assert.assertEquals((i + 10) + (j + 3) / 1024.0, sub2.getEntry(i, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,275,"ssertEquals((i + 30) + (j + 0) / 1024.0, sub3.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,278,"Assert.assertEquals((i + 30) + (j + 0) / 1024.0, sub3.getEntry(i, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,282,"ssertEquals((i + 30) + (j + 62) / 1024.0, sub4.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,285,"Assert.assertEquals((i + 30) + (j + 62) / 1024.0, sub4.getEntry(i, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,297,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,295,ealMatrix m3 = new BlockRealMatrix(d3);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,296,ealMatrix m4 = new BlockRealMatrix(d4);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,297,ealMatrix m5 = new BlockRealMatrix(d5);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,298,"ssertClose(m3.multiply(m4), m5, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,299,RealMatrix m3 = new BlockRealMatrix(d3);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,300,RealMatrix m4 = new BlockRealMatrix(d4);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,301,RealMatrix m5 = new BlockRealMatrix(d5);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,302,"assertClose(m3.multiply(m4), m5, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,306,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,304,"ssertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,309,"Assert.assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,308,"ail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,313,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,320,@Test
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,327,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,328,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,335,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,341,@Test
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,355,@Test
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,370,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,366,"ssertEquals(a.getRowDimension(), b.length);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,367,"ssertEquals( 3.0, b[0], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,368,"ssertEquals( 7.0, b[1], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,369,"ssertEquals(11.0, b[2], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,376,"Assert.assertEquals(a.getRowDimension(), b.length);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,377,"Assert.assertEquals( 3.0, b[0], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,378,"Assert.assertEquals( 7.0, b[1], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,379,"Assert.assertEquals(11.0, b[2], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,383,@Test
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,395,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,392,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,404,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,410,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,413,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,426,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,432,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,425,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,439,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,431,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,445,"Assert.fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,451,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,439,"ssertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,454,"Assert.assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,442,"ail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,457,"Assert.fail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,464,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,458,"ssertEquals(2, p.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,459,"ssertEquals(2, p.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,474,"Assert.assertEquals(2, p.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,475,"Assert.assertEquals(2, p.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,462,"ssertEquals(2, pInverse.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,463,"ssertEquals(2, pInverse.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,478,"Assert.assertEquals(2, pInverse.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,479,"Assert.assertEquals(2, pInverse.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,470,"ssertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,471,"ssertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,472,"ssertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,486,"Assert.assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,487,"Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,488,"Assert.assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,493,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,501,"ssertEquals(new BlockRealMatrix(reference), sub);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,518,"Assert.assertEquals(new BlockRealMatrix(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,503,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,520,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,525,"ssertEquals(new BlockRealMatrix(reference), sub);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,542,"Assert.assertEquals(new BlockRealMatrix(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,527,"ail(""Expecting OutOfRangeException or NumberIsTooSmallExceptiono r NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,544,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallExceptiono r NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,561,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,553,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,571,"Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,555,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,573,"Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,559,"ssertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,577,"Assert.assertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,581,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,591,"ssertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,610,"Assert.assertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,593,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,612,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,618,"ssertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,637,"Assert.assertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,620,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,639,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,656,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,641,"ssertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,642,"ssertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,661,"Assert.assertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,662,"Assert.assertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,645,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,665,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,651,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,671,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,677,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,660,"ssertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,681,"Assert.assertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,662,"ssertEquals(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,683,"Assert.assertEquals(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,665,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,686,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,671,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,692,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,698,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,686,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,708,"Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,688,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,710,"Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,692,"ssertEquals(sub, m.getRowMatrix(2));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,714,"Assert.assertEquals(sub, m.getRowMatrix(2));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,717,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,700,"ssertEquals(mColumn1, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,701,"ssertEquals(mColumn3, m.getColumnMatrix(3));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,722,"Assert.assertEquals(mColumn1, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,723,"Assert.assertEquals(mColumn3, m.getColumnMatrix(3));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,704,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,726,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,710,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,732,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,738,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,719,"ssertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,742,"Assert.assertNotSame(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,721,"ssertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,744,"Assert.assertEquals(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,724,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,747,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,730,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,753,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,759,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,745,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,769,"Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,747,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,771,"Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,751,"ssertEquals(sub, m.getColumnMatrix(2));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,775,"Assert.assertEquals(sub, m.getColumnMatrix(2));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,779,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,759,"ssertEquals(mRow0, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,760,"ssertEquals(mRow3, m.getRowVector(3));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,784,"Assert.assertEquals(mRow0, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,785,"Assert.assertEquals(mRow3, m.getRowVector(3));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,763,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,788,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,769,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,794,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,800,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,778,"ssertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,804,"Assert.assertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,780,"ssertEquals(mRow3, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,806,"Assert.assertEquals(mRow3, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,783,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,809,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,789,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,815,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,821,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,804,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,831,"Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,806,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,833,"Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,810,"ssertEquals(sub, m.getRowVector(2));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,837,"Assert.assertEquals(sub, m.getRowVector(2));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,840,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,818,"ssertEquals(mColumn1, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,819,"ssertEquals(mColumn3, m.getColumnVector(3));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,845,"Assert.assertEquals(mColumn1, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,846,"Assert.assertEquals(mColumn3, m.getColumnVector(3));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,822,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,849,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,828,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,855,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,861,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,837,"ssertNotSame(mColumn3, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,865,"Assert.assertNotSame(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,839,"ssertEquals(mColumn3, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,867,"Assert.assertEquals(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,842,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,870,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,848,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,876,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,882,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,863,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,892,"Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,865,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,894,"Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,869,"ssertEquals(sub, m.getColumnVector(2));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,898,"Assert.assertEquals(sub, m.getColumnVector(2));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,909,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,887,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,916,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,893,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,922,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,928,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,901,ssertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,931,Assert.assertTrue(subRow3[0][0] != m.getRow(0)[0]);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,906,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,936,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,912,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,942,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,948,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,928,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,959,"Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,930,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,961,"Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,968,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,946,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,977,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,952,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,983,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,989,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,961,ssertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,993,Assert.assertTrue(mColumn3[0] != m.getColumn(1)[0]);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,966,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,998,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,972,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1004,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1010,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,988,"ssertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1021,"Assert.assertEquals(0.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,990,"ssertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1023,"Assert.assertEquals(1.0, m.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1007,"ssertEquals(expected.length, actual.length);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1039,"Assert.assertEquals(expected.length, actual.length);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1009,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1041,"Assert.assertEquals(expected[i], actual[i], 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1045,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1017,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1018,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1019,"ssertEquals(m, m);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1020,"ssertEquals(m, m1);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1021,ssertFalse(m.equals(null));
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1022,ssertFalse(m.equals(mt));
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1023,ssertFalse(m.equals(new BlockRealMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1050,Assert.assertTrue(m.hashCode() != mt.hashCode());
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1051,"Assert.assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1052,"Assert.assertEquals(m, m);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1053,"Assert.assertEquals(m, m1);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1054,Assert.assertFalse(m.equals(null));
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1055,Assert.assertFalse(m.equals(mt));
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1056,Assert.assertFalse(m.equals(new BlockRealMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1059,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1028,"ssertEquals(""BlockRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1062,"Assert.assertEquals(""BlockRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1066,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1037,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1072,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1042,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1077,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1047,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1082,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1055,"ssertEquals(expected, matrix);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1090,"Assert.assertEquals(expected, matrix);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1060,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1095,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1067,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1102,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1073,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1108,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1081,"ail(""expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1116,"Assert.fail(""expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1089,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1124,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1097,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1132,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1138,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1112,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1147,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1118,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1153,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1120,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1121,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1155,"Assert.assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1156,"Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1124,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1125,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1159,"Assert.assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1160,"Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1132,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1167,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1138,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1173,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1140,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1141,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1175,"Assert.assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1176,"Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1144,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1145,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1179,"Assert.assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1180,"Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1152,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1187,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1158,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1193,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1160,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1161,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1195,"Assert.assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1196,"Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1164,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1165,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1199,"Assert.assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1200,"Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1172,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1207,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1178,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1213,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1180,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1181,"ssertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1215,"Assert.assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1216,"Assert.assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1184,"ssertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1185,"ssertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1219,"Assert.assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1220,"Assert.assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1225,@Test
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1192,"ssertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1228,"Assert.assertEquals(m,TestUtils.serializeAndRecover(m));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1207,"ssertEquals(i + j / 1024.0, value, 0.0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1243,"Assert.assertEquals(i + j / 1024.0, value, 0.0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1218,ssertTrue(m.subtract(n).getNorm() < tolerance);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1254,Assert.assertTrue(m.subtract(n).getNorm() < tolerance);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1224,"ail(""vectors not same length"");"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1260,"Assert.fail(""vectors not same length"");"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1227,"ssertEquals(m[i], n[i], tolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1263,"Assert.assertEquals(m[i], n[i], tolerance);"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,21,mport static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,23,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,24,mport org.apache.commons.math.exception.NonPositiveDefiniteMatrixException;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,25,mport org.apache.commons.math.exception.NonSymmetricMatrixException;
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,21,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,43,"ssertEquals(testData.length, llt.getL().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,44,"ssertEquals(testData.length, llt.getL().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,45,"ssertEquals(testData.length, llt.getLT().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,46,"ssertEquals(testData.length, llt.getLT().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,38,"Assert.assertEquals(testData.length, llt.getL().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,39,"Assert.assertEquals(testData.length, llt.getL().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,40,"Assert.assertEquals(testData.length, llt.getLT().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,41,"Assert.assertEquals(testData.length, llt.getLT().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,94,"ssertEquals(0, norm, 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,89,"Assert.assertEquals(0, norm, 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,104,"ssertEquals(0.0, l.getEntry(i, j), 0.0);"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,99,"Assert.assertEquals(0.0, l.getEntry(i, j), 0.0);"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,117,"ssertEquals(0, norm, 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,112,"Assert.assertEquals(0, norm, 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,135,"ssertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,130,"Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,137,"ssertEquals(0, lt.subtract(lRef.transpose()).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,132,"Assert.assertEquals(0, lt.subtract(lRef.transpose()).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,140,ssertTrue(l  == llt.getL());
False,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,141,ssertTrue(lt == llt.getLT());
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,135,Assert.assertTrue(l  == llt.getL());
True,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,136,Assert.assertTrue(lt == llt.getLT());
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,23,mport org.apache.commons.math.exception.SingularMatrixException;
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,26,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,26,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,28,ublic class EigenSolverTest extends TestCase {
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,30,rivate double[] refValues;
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,31,rivate RealMatrix matrix;
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,33,ublic EigenSolverTest(String name) {
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,34,uper(name);
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,28,public class EigenSolverTest {
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,31,@Test
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,43,ssertFalse(es.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,37,Assert.assertFalse(es.isNonSingular());
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,46,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,40,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,47,@Test
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,58,ssertTrue(es.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,53,Assert.assertTrue(es.isNonSingular());
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,62,"ssertEquals(0, error.getNorm(), 4.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,57,"Assert.assertEquals(0, error.getNorm(), 4.0e-15);"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,61,@Test
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,63,final double[] refValues = new double[] {
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,64,"2.003, 2.002, 2.001, 1.001, 1.000, 0.001"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,66,"final RealMatrix matrix = EigenDecompositionImplTest.createTestMatrix(new Random(35992629946426l), refValues);"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,71,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,72,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,77,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,78,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,83,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,84,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,91,@Test
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,119,"ssertEquals(0, solution.subtract(xRef).getNorm(), 2.5e-12);"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,121,"Assert.assertEquals(0, solution.subtract(xRef).getNorm(), 2.5e-12);"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,123,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,125,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,130,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,132,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,139,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,141,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,146,Override
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,147,ublic void setUp() {
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,148,efValues = new double[] {
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,149,".003, 2.002, 2.001, 1.001, 1.000, 0.001"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,151,"atrix = EigenDecompositionImplTest.createTestMatrix(new Random(35992629946426l), refValues);"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,154,Override
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,155,ublic void tearDown() {
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,156,efValues = null;
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,157,atrix    = null;
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,20,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,20,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,21,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,25,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,27,ublic class FieldLUDecompositionImplTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,27,public class FieldLUDecompositionImplTest {
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,56,ublic FieldLUDecompositionImplTest(String name) {
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,57,uper(name);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,57,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,64,"ssertEquals(testData.length, LU.getL().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,65,"ssertEquals(testData.length, LU.getL().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,66,"ssertEquals(testData.length, LU.getU().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,67,"ssertEquals(testData.length, LU.getU().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,68,"ssertEquals(testData.length, LU.getP().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,69,"ssertEquals(testData.length, LU.getP().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,61,"Assert.assertEquals(testData.length, LU.getL().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,62,"Assert.assertEquals(testData.length, LU.getL().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,63,"Assert.assertEquals(testData.length, LU.getU().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,64,"Assert.assertEquals(testData.length, LU.getU().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,65,"Assert.assertEquals(testData.length, LU.getP().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,66,"Assert.assertEquals(testData.length, LU.getP().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,71,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,81,"ail(""Expected NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,79,"Assert.fail(""Expected NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,86,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,115,ssertFalse(lu.getSolver().isNonSingular());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,116,ssertNull(lu.getL());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,117,ssertNull(lu.getU());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,118,ssertNull(lu.getP());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,114,Assert.assertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,115,Assert.assertNull(lu.getL());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,116,Assert.assertNull(lu.getU());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,117,Assert.assertNull(lu.getP());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,122,ssertFalse(lu.getSolver().isNonSingular());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,123,ssertNull(lu.getL());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,124,ssertNull(lu.getU());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,125,ssertNull(lu.getP());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,121,Assert.assertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,122,Assert.assertNull(lu.getL());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,123,Assert.assertNull(lu.getU());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,124,Assert.assertNull(lu.getP());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,129,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,134,"ssertEquals(Fraction.ONE, l.getEntry(i, i));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,134,"Assert.assertEquals(Fraction.ONE, l.getEntry(i, i));"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,136,"ssertEquals(Fraction.ZERO, l.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,136,"Assert.assertEquals(Fraction.ZERO, l.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,142,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,147,"ssertEquals(Fraction.ZERO, u.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,148,"Assert.assertEquals(Fraction.ZERO, u.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,154,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,180,"ssertEquals(p.getColumnDimension() - 1, zeroCount);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,181,"ssertEquals(1, oneCount);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,182,"ssertEquals(0, otherCount);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,182,"Assert.assertEquals(p.getColumnDimension() - 1, zeroCount);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,183,"Assert.assertEquals(1, oneCount);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,184,"Assert.assertEquals(0, otherCount);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,199,"ssertEquals(p.getRowDimension() - 1, zeroCount);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,200,"ssertEquals(1, oneCount);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,201,"ssertEquals(0, otherCount);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,201,"Assert.assertEquals(p.getRowDimension() - 1, zeroCount);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,202,"Assert.assertEquals(1, oneCount);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,203,"Assert.assertEquals(0, otherCount);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,210,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,211,ssertTrue(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,214,Assert.assertTrue(lu.getSolver().isNonSingular());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,213,ssertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,216,Assert.assertFalse(lu.getSolver().isNonSingular());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,215,ssertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,218,Assert.assertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,222,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,248,"ssertEquals(pivotRef[i], pivot[i]);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,252,"Assert.assertEquals(pivotRef[i], pivot[i]);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,252,ssertTrue(l == lu.getL());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,253,ssertTrue(u == lu.getU());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,254,ssertTrue(p == lu.getP());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,256,Assert.assertTrue(l == lu.getL());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,257,Assert.assertTrue(u == lu.getU());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,258,Assert.assertTrue(p == lu.getP());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,263,@Test
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,288,"ssertEquals(pivotRef[i], pivot[i]);"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,293,"Assert.assertEquals(pivotRef[i], pivot[i]);"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,292,ssertTrue(l == lu.getL());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,293,ssertTrue(u == lu.getU());
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,294,ssertTrue(p == lu.getP());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,297,Assert.assertTrue(l == lu.getL());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,298,Assert.assertTrue(u == lu.getU());
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,299,Assert.assertTrue(p == lu.getP());
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,19,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,27,mport org.apache.commons.math.exception.MatrixDimensionMismatchException;
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,33,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,42,ublic final class FieldMatrixImplTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,41,public final class FieldMatrixImplTest {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,104,ublic FieldMatrixImplTest(String name) {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,105,uper(name);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,104,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,112,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,113,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,114,"ssertTrue(""testData is square"",m.isSquare());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,115,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,116,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,117,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,108,"Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,109,"Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,110,"Assert.assertTrue(""testData is square"",m.isSquare());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,111,"Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,112,"Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,113,"Assert.assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,117,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,124,"ssertEquals(m2,m1);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,121,"Assert.assertEquals(m2,m1);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,127,"ssertEquals(m4,m3);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,124,"Assert.assertEquals(m4,m3);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,128,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,138,"ssertEquals(testDataPlusInv[row][col],sumEntries[row][col]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,136,"Assert.assertEquals(testDataPlusInv[row][col],sumEntries[row][col]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,142,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,149,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,148,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,155,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,162,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,162,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,169,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,181,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,182,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,194,@Test
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,203,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,203,"ssertEquals(""identity trace"",new Fraction(3),m.getTrace());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,206,"Assert.assertEquals(""identity trace"",new Fraction(3),m.getTrace());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,207,"ail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,210,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,217,@Test
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,224,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,227,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,232,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,239,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,239,"ssertEquals(a.getRowDimension(), b.length);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,240,"ssertEquals( new Fraction(3), b[0]);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,241,"ssertEquals( new Fraction(7), b[1]);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,242,"ssertEquals(new Fraction(11), b[2]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,245,"Assert.assertEquals(a.getRowDimension(), b.length);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,246,"Assert.assertEquals( new Fraction(3), b[0]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,247,"Assert.assertEquals( new Fraction(7), b[1]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,248,"Assert.assertEquals(new Fraction(11), b[2]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,252,@Test
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,264,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,265,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,273,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,279,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,286,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,295,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,301,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,298,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,308,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,304,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,314,"Assert.fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,320,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,312,"ssertEquals(""get entry"", m.getEntry(0,1), new Fraction(2));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,323,"Assert.assertEquals(""get entry"", m.getEntry(0,1), new Fraction(2));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,315,"ail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,326,"Assert.fail (""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,333,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,338,"ssertEquals(2, p.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,339,"ssertEquals(2, p.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,350,"Assert.assertEquals(2, p.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,351,"Assert.assertEquals(2, p.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,342,"ssertEquals(2, pInverse.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,343,"ssertEquals(2, pInverse.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,354,"Assert.assertEquals(2, pInverse.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,355,"Assert.assertEquals(2, pInverse.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,354,ssertEquals(new Fraction(2).multiply(solution[0]).
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,366,Assert.assertEquals(new Fraction(2).multiply(solution[0]).
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,357,ssertEquals(new Fraction(-1).multiply(solution[0]).
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,369,Assert.assertEquals(new Fraction(-1).multiply(solution[0]).
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,360,ssertEquals(new Fraction(4).multiply(solution[0]).
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,372,Assert.assertEquals(new Fraction(4).multiply(solution[0]).
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,379,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,391,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,404,"Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,393,"ail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,406,"Assert.fail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,420,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,433,"Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,422,"ail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,435,"Assert.fail(""Expecting OutOfRangeException or NotStrictlyPositiveException"""
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,457,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,472,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,486,"Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,474,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,488,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,499,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,513,"Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,501,"ail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,515,"Assert.fail(""Expecting OutOfRangeException or NumberIsTooSmallException or NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,532,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,522,"ssertEquals(""Row0"", mRow0,"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,537,"Assert.assertEquals(""Row0"", mRow0,"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,524,"ssertEquals(""Row3"", mRow3,"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,539,"Assert.assertEquals(""Row3"", mRow3,"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,528,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,543,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,534,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,549,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,555,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,543,"ssertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,559,"Assert.assertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,545,"ssertEquals(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,561,"Assert.assertEquals(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,548,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,564,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,554,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,570,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,576,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,564,"ssertEquals(""Column1"", mColumn1,"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,581,"Assert.assertEquals(""Column1"", mColumn1,"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,566,"ssertEquals(""Column3"", mColumn3,"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,583,"Assert.assertEquals(""Column3"", mColumn3,"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,570,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,587,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,576,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,593,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,599,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,585,"ssertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,603,"Assert.assertNotSame(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,587,"ssertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,605,"Assert.assertEquals(mColumn3, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,590,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,608,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,596,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,614,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,620,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,606,"ssertEquals(""Row0"", mRow0, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,607,"ssertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,625,"Assert.assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,626,"Assert.assertEquals(""Row3"", mRow3, m.getRowVector(3));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,610,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,629,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,616,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,635,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,641,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,625,"ssertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,645,"Assert.assertNotSame(mRow3, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,627,"ssertEquals(mRow3, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,647,"Assert.assertEquals(mRow3, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,630,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,650,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,636,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,656,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,662,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,646,"ssertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,647,"ssertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,667,"Assert.assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,668,"Assert.assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,650,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,671,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,656,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,677,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,683,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,665,"ssertNotSame(mColumn3, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,687,"Assert.assertNotSame(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,667,"ssertEquals(mColumn3, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,689,"Assert.assertEquals(mColumn3, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,670,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,692,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,676,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,698,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,712,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,696,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,719,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,702,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,725,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,731,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,710,ssertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,734,Assert.assertTrue(subRow3[0][0] != m.getRow(0)[0]);
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,715,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,739,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,721,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,745,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,751,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,735,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,760,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,741,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,766,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,772,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,750,ssertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,776,Assert.assertTrue(mColumn3[0] != m.getColumn(1)[0]);
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,755,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,781,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,761,"ail(""Expecting MatrixDimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,787,"Assert.fail(""Expecting MatrixDimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,776,"ssertEquals(expected.length, actual.length);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,802,"Assert.assertEquals(expected.length, actual.length);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,778,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,804,"Assert.assertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,808,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,786,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,787,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,788,"ssertEquals(m, m);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,789,"ssertEquals(m, m1);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,790,ssertFalse(m.equals(null));
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,791,ssertFalse(m.equals(mt));
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,792,ssertFalse(m.equals(new Array2DRowFieldMatrix<Fraction>(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,813,Assert.assertTrue(m.hashCode() != mt.hashCode());
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,814,"Assert.assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,815,"Assert.assertEquals(m, m);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,816,"Assert.assertEquals(m, m1);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,817,Assert.assertFalse(m.equals(null));
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,818,Assert.assertFalse(m.equals(mt));
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,819,Assert.assertFalse(m.equals(new Array2DRowFieldMatrix<Fraction>(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,822,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,797,"ssertEquals(""Array2DRowFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,825,"Assert.assertEquals(""Array2DRowFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,799,"ssertEquals(""Array2DRowFieldMatrix{}"", m.toString());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,827,"Assert.assertEquals(""Array2DRowFieldMatrix{}"", m.toString());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,830,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,811,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,840,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,820,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,849,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,829,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,858,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,834,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,863,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,841,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,870,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,847,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,876,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,855,"ail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,884,"Assert.fail(""expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,862,"ail(""expecting MathIllegalStateException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,891,"Assert.fail(""expecting MathIllegalStateException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,868,"ail(""expecting MathIllegalStateException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,897,"Assert.fail(""expecting MathIllegalStateException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,876,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,905,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,884,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,913,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,920,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,900,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,930,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,906,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,936,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,908,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,909,"ssertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,938,"Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,939,"Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,912,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,913,"ssertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,942,"Assert.assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,943,"Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,920,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,950,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,926,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,956,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,928,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,929,"ssertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,958,"Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,959,"Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,932,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,933,"ssertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,962,"Assert.assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,963,"Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,940,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,970,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,946,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,976,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,948,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,949,"ssertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,978,"Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,979,"Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,952,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,953,"ssertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,982,"Assert.assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,983,"Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,960,"ssertEquals(rows * columns, getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,990,"Assert.assertEquals(rows * columns, getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,966,"ssertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,996,"Assert.assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,968,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,969,"ssertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,998,"Assert.assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,999,"Assert.assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,972,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,973,"ssertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,1002,"Assert.assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,1003,"Assert.assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,1007,@Test
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,980,"ssertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,1010,"Assert.assertEquals(m,TestUtils.serializeAndRecover(m));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,1002,"ssertEquals(new Fraction(i * 1024 + j, 1024), value);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,1032,"Assert.assertEquals(new Fraction(i * 1024 + j, 1024), value);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,20,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,21,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,20,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,21,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,23,ublic class LUDecompositionImplTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,23,public class LUDecompositionImplTest {
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,56,ublic LUDecompositionImplTest(String name) {
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,57,uper(name);
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,57,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,64,"ssertEquals(testData.length, LU.getL().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,65,"ssertEquals(testData.length, LU.getL().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,66,"ssertEquals(testData.length, LU.getU().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,67,"ssertEquals(testData.length, LU.getU().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,68,"ssertEquals(testData.length, LU.getP().getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,69,"ssertEquals(testData.length, LU.getP().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,61,"Assert.assertEquals(testData.length, LU.getL().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,62,"Assert.assertEquals(testData.length, LU.getL().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,63,"Assert.assertEquals(testData.length, LU.getU().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,64,"Assert.assertEquals(testData.length, LU.getU().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,65,"Assert.assertEquals(testData.length, LU.getP().getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,66,"Assert.assertEquals(testData.length, LU.getP().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,71,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,77,"ail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,75,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,82,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,91,"ssertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,90,"Assert.assertEquals(0, norm, normTolerance);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,99,"ssertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,98,"Assert.assertEquals(0, norm, normTolerance);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,107,"ssertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,106,"Assert.assertEquals(0, norm, normTolerance);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,111,ssertFalse(lu.getSolver().isNonSingular());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,112,ssertNull(lu.getL());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,113,ssertNull(lu.getU());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,114,ssertNull(lu.getP());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,110,Assert.assertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,111,Assert.assertNull(lu.getL());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,112,Assert.assertNull(lu.getU());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,113,Assert.assertNull(lu.getP());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,118,ssertFalse(lu.getSolver().isNonSingular());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,119,ssertNull(lu.getL());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,120,ssertNull(lu.getU());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,121,ssertNull(lu.getP());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,117,Assert.assertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,118,Assert.assertNull(lu.getL());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,119,Assert.assertNull(lu.getU());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,120,Assert.assertNull(lu.getP());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,125,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,130,"ssertEquals(l.getEntry(i, i), 1, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,130,"Assert.assertEquals(l.getEntry(i, i), 1, entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,132,"ssertEquals(l.getEntry(i, j), 0, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,132,"Assert.assertEquals(l.getEntry(i, j), 0, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,138,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,143,"ssertEquals(u.getEntry(i, j), 0, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,144,"Assert.assertEquals(u.getEntry(i, j), 0, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,150,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,155,"ssertEquals(0, ppT.subtract(id).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,157,"Assert.assertEquals(0, ppT.subtract(id).getNorm(), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,171,"ssertEquals(p.getColumnDimension() - 1, zeroCount);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,172,"ssertEquals(1, oneCount);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,173,"ssertEquals(0, otherCount);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,173,"Assert.assertEquals(p.getColumnDimension() - 1, zeroCount);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,174,"Assert.assertEquals(1, oneCount);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,175,"Assert.assertEquals(0, otherCount);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,190,"ssertEquals(p.getRowDimension() - 1, zeroCount);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,191,"ssertEquals(1, oneCount);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,192,"ssertEquals(0, otherCount);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,192,"Assert.assertEquals(p.getRowDimension() - 1, zeroCount);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,193,"Assert.assertEquals(1, oneCount);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,194,"Assert.assertEquals(0, otherCount);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,200,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,202,ssertTrue(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,204,Assert.assertTrue(lu.getSolver().isNonSingular());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,204,ssertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,206,Assert.assertFalse(lu.getSolver().isNonSingular());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,206,ssertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,208,Assert.assertFalse(lu.getSolver().isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,212,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,232,"ssertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,235,"Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,234,"ssertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,237,"Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,236,"ssertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,239,"Assert.assertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,239,"ssertEquals(pivotRef[i], pivot[i]);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,242,"Assert.assertEquals(pivotRef[i], pivot[i]);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,243,ssertTrue(l == lu.getL());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,244,ssertTrue(u == lu.getU());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,245,ssertTrue(p == lu.getP());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,246,Assert.assertTrue(l == lu.getL());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,247,Assert.assertTrue(u == lu.getU());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,248,Assert.assertTrue(p == lu.getP());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,253,@Test
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,272,"ssertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,276,"Assert.assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,274,"ssertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,278,"Assert.assertEquals(0, u.subtract(uRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,276,"ssertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,280,"Assert.assertEquals(0, p.subtract(pRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,279,"ssertEquals(pivotRef[i], pivot[i]);"
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,283,"Assert.assertEquals(pivotRef[i], pivot[i]);"
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,283,ssertTrue(l == lu.getL());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,284,ssertTrue(u == lu.getU());
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,285,ssertTrue(p == lu.getP());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,287,Assert.assertTrue(l == lu.getL());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,288,Assert.assertTrue(u == lu.getU());
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,289,Assert.assertTrue(p == lu.getP());
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,20,mport org.apache.commons.math.exception.SingularMatrixException;
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,22,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,24,ublic class LUSolverTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,25,public class LUSolverTest {
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,48,ublic LUSolverTest(String name) {
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,49,uper(name);
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,50,@Test
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,59,"ssertFalse(new LUDecompositionImpl(matrix, 1.0e-5).getSolver().isNonSingular());"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,60,"ssertTrue(new LUDecompositionImpl(matrix, 1.0e-10).getSolver().isNonSingular());"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,57,"Assert.assertFalse(new LUDecompositionImpl(matrix, 1.0e-5).getSolver().isNonSingular());"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,58,"Assert.assertTrue(new LUDecompositionImpl(matrix, 1.0e-10).getSolver().isNonSingular());"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,62,@Test
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,67,ssertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,66,Assert.assertTrue(solver.isNonSingular());
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,69,ssertFalse(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,68,Assert.assertFalse(solver.isNonSingular());
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,71,ssertFalse(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,70,Assert.assertFalse(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,74,@Test
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,81,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,81,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,87,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,87,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,93,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,93,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,100,@Test
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,106,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,107,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,112,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,113,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,118,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,119,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,124,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,125,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,132,@Test
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,142,"ssertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,144,"Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,146,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,148,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,153,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,155,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,162,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,164,"Assert.assertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,171,@Test
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,171,"ssertEquals( -1, getDeterminant(MatrixUtils.createRealMatrix(testData)), 1.0e-15);"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,172,"ssertEquals(-10, getDeterminant(MatrixUtils.createRealMatrix(luData)), 1.0e-14);"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,173,"ssertEquals(  0, getDeterminant(MatrixUtils.createRealMatrix(singular)), 1.0e-17);"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,174,"ssertEquals(  0, getDeterminant(MatrixUtils.createRealMatrix(bigSingular)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,173,"Assert.assertEquals( -1, getDeterminant(MatrixUtils.createRealMatrix(testData)), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,174,"Assert.assertEquals(-10, getDeterminant(MatrixUtils.createRealMatrix(luData)), 1.0e-14);"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,175,"Assert.assertEquals(  0, getDeterminant(MatrixUtils.createRealMatrix(singular)), 1.0e-17);"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,176,"Assert.assertEquals(  0, getDeterminant(MatrixUtils.createRealMatrix(bigSingular)), 1.0e-10);"
False,src/test/java/org/apache/commons/math/exception/MatrixDimensionMismatchExceptionTest.java,src/test/java/org/apache/commons/math/linear/MatrixDimensionMismatchExceptionTest.java,17,ackage org.apache.commons.math.exception;
True,src/test/java/org/apache/commons/math/exception/MatrixDimensionMismatchExceptionTest.java,src/test/java/org/apache/commons/math/linear/MatrixDimensionMismatchExceptionTest.java,17,package org.apache.commons.math.linear;
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,23,mport org.apache.commons.math.exception.SingularMatrixException;
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,26,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,26,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,28,ublic class QRSolverTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,28,public class QRSolverTest {
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,54,ublic QRSolverTest(String name) {
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,55,uper(name);
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,55,@Test
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,62,ssertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,59,Assert.assertTrue(solver.isNonSingular());
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,65,ssertFalse(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,62,Assert.assertFalse(solver.isNonSingular());
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,68,ssertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,65,Assert.assertTrue(solver.isNonSingular());
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,71,ssertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,68,Assert.assertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,73,@Test
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,82,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,80,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,88,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,86,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,94,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,92,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,99,@Test
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,107,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,106,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,113,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,112,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,119,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,118,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,125,@Test
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,138,"ssertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 2.0e-16 * xRef.getNorm());"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,138,"Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 2.0e-16 * xRef.getNorm());"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,144,"ssertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,144,"Assert.assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,151,"ssertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,151,"Assert.assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,160,"ssertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,160,"Assert.assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,165,@Test
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,184,"ssertEquals(0, x.subtract(xRef).getNorm(), 0.01 * noise * p * q);"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,185,"Assert.assertEquals(0, x.subtract(xRef).getNorm(), 0.01 * noise * p * q);"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,189,@Test
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,198,ssertTrue(x.subtract(xRef).getNorm() / (p * q) > 0.01);
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,200,Assert.assertTrue(x.subtract(xRef).getNorm() / (p * q) > 0.01);
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,201,"ssertEquals(0.0, x.getSubMatrix(p, q - 1, 0, x.getColumnDimension() - 1).getNorm());"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,203,"Assert.assertEquals(0.0, x.getSubMatrix(p, q - 1, 0, x.getColumnDimension() - 1).getNorm(), 0);"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,207,.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,208,Override
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,209,"ublic double visit(int row, int column, double value) {"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,210,eturn 2.0 * r.nextDouble() - 1.0;
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,208,m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,209,@Override
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,210,"public double visit(int row, int column, double value) {"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,211,return 2.0 * r.nextDouble() - 1.0;
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,19,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,29,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,37,ublic class SparseFieldMatrixTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,37,public class SparseFieldMatrixTest {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,110,ublic SparseFieldMatrixTest(String name) {
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,111,uper(name);
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,112,etupFractionArrays();
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,115,rivate void setupFractionArrays() {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,110,public SparseFieldMatrixTest() {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,128,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,138,"ssertEquals(""testData row dimension"", 3, m.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,139,"ssertEquals(""testData column dimension"", 3, m.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,140,"ssertTrue(""testData is square"", m.isSquare());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,141,"ssertEquals(""testData2 row dimension"", m2.getRowDimension(), 2);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,142,"ssertEquals(""testData2 column dimension"", m2.getColumnDimension(), 3);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,143,"ssertTrue(""testData2 is not square"", !m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,132,"Assert.assertEquals(""testData row dimension"", 3, m.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,133,"Assert.assertEquals(""testData column dimension"", 3, m.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,134,"Assert.assertTrue(""testData is square"", m.isSquare());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,135,"Assert.assertEquals(""testData2 row dimension"", m2.getRowDimension(), 2);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,136,"Assert.assertEquals(""testData2 column dimension"", m2.getColumnDimension(), 3);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,137,"Assert.assertTrue(""testData2 is not square"", !m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,141,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,150,"ssertEquals(m1.getClass(), m2.getClass());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,151,"ssertEquals((m2), m1);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,145,"Assert.assertEquals(m1.getClass(), m2.getClass());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,146,"Assert.assertEquals((m2), m1);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,154,"ssertEquals(m3.getClass(), m4.getClass());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,155,"ssertEquals((m4), m3);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,149,"Assert.assertEquals(m3.getClass(), m4.getClass());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,150,"Assert.assertEquals((m4), m3);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,154,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,166,"ssertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,162,"Assert.assertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,170,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,179,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,176,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,184,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,194,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,192,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,199,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,220,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,219,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,231,@Test
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,240,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,242,"ssertEquals(""identity trace"", 3d, m.getTrace().doubleValue(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,243,"Assert.assertEquals(""identity trace"", 3d, m.getTrace().doubleValue(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,246,"ail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,247,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,254,@Test
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,262,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,269,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,272,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,279,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,280,"ssertEquals(a.getRowDimension(), b.length);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,281,"ssertEquals(3.0, b[0].doubleValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,282,"ssertEquals(7.0, b[1].doubleValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,283,"ssertEquals(11.0, b[2].doubleValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,284,"Assert.assertEquals(a.getRowDimension(), b.length);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,285,"Assert.assertEquals(3.0, b[0].doubleValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,286,"Assert.assertEquals(7.0, b[1].doubleValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,287,"Assert.assertEquals(11.0, b[2].doubleValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,291,@Test
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,303,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,308,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,313,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,319,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,333,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,339,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,345,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,345,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,352,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,351,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,358,"Assert.fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,364,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,359,"ssertEquals(""get entry"", m.getEntry(0, 1).doubleValue(), 2d, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,367,"Assert.assertEquals(""get entry"", m.getEntry(0, 1).doubleValue(), 2d, entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,362,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,370,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,377,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,378,"ssertEquals(2, p.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,379,"ssertEquals(2, p.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,387,"Assert.assertEquals(2, p.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,388,"Assert.assertEquals(2, p.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,382,"ssertEquals(2, pInverse.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,383,"ssertEquals(2, pInverse.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,391,"Assert.assertEquals(2, pInverse.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,392,"Assert.assertEquals(2, pInverse.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,391,"ssertEquals((new Fraction(2).multiply((solution[0])).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2]))).doubleValue(),"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,400,"Assert.assertEquals((new Fraction(2).multiply((solution[0])).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2]))).doubleValue(),"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,393,"ssertEquals(((new Fraction(-1).multiply(solution[0])).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2]))).doubleValue(),"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,402,"Assert.assertEquals(((new Fraction(-1).multiply(solution[0])).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2]))).doubleValue(),"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,395,"ssertEquals(((new Fraction(4).multiply(solution[0])).subtract(new Fraction(3).multiply( solution[1])).subtract(new Fraction(5).multiply(solution[2]))).doubleValue(),"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,404,"Assert.assertEquals(((new Fraction(4).multiply(solution[0])).subtract(new Fraction(3).multiply( solution[1])).subtract(new Fraction(5).multiply(solution[2]))).doubleValue(),"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,410,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,411,"ssertEquals(""Rows23Cols00"", mRows23Cols00, m.getSubMatrix(2, 3, 0, 0));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,412,"ssertEquals(""Rows00Cols33"", mRows00Cols33, m.getSubMatrix(0, 0, 3, 3));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,413,"ssertEquals(""Rows01Cols23"", mRows01Cols23, m.getSubMatrix(0, 1, 2, 3));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,414,"ssertEquals(""Rows02Cols13"", mRows02Cols13,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,421,"Assert.assertEquals(""Rows23Cols00"", mRows23Cols00, m.getSubMatrix(2, 3, 0, 0));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,422,"Assert.assertEquals(""Rows00Cols33"", mRows00Cols33, m.getSubMatrix(0, 0, 3, 3));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,423,"Assert.assertEquals(""Rows01Cols23"", mRows01Cols23, m.getSubMatrix(0, 1, 2, 3));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,424,"Assert.assertEquals(""Rows02Cols13"", mRows02Cols13,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,416,"ssertEquals(""Rows03Cols12"", mRows03Cols12,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,426,"Assert.assertEquals(""Rows03Cols12"", mRows03Cols12,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,418,"ssertEquals(""Rows03Cols123"", mRows03Cols123,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,428,"Assert.assertEquals(""Rows03Cols123"", mRows03Cols123,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,420,"ssertEquals(""Rows20Cols123"", mRows20Cols123,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,430,"Assert.assertEquals(""Rows20Cols123"", mRows20Cols123,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,422,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,432,"Assert.assertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,424,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,434,"Assert.assertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,429,"ail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,439,"Assert.fail(""Expecting NumberIsTooSmallException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,435,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,445,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,441,"ail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,451,"Assert.fail(""Expecting NumberIsTooSmallException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,447,"ail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,457,"Assert.fail(""Expecting NumberIsTooSmallException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,453,"ail(""Expecting NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,463,"Assert.fail(""Expecting NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,459,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,469,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,475,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,469,"ssertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,470,"ssertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,480,"Assert.assertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,481,"Assert.assertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,473,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,484,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,479,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,490,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,496,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,489,"ssertEquals(""Column1"", mColumn1, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,490,"ssertEquals(""Column3"", mColumn3, m.getColumnMatrix(3));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,501,"Assert.assertEquals(""Column1"", mColumn1, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,502,"Assert.assertEquals(""Column3"", mColumn3, m.getColumnMatrix(3));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,493,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,505,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,499,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,511,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,517,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,509,"ssertEquals(""Row0"", mRow0, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,510,"ssertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,522,"Assert.assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,523,"Assert.assertEquals(""Row3"", mRow3, m.getRowVector(3));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,513,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,526,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,519,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,532,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,538,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,529,"ssertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,530,"ssertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,543,"Assert.assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,544,"Assert.assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,533,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,547,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,539,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,553,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,567,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,557,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,558,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,559,"ssertEquals(m, m);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,560,"ssertEquals(m, m1);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,561,ssertFalse(m.equals(null));
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,562,ssertFalse(m.equals(mt));
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,563,ssertFalse(m.equals(createSparseMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,572,Assert.assertTrue(m.hashCode() != mt.hashCode());
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,573,"Assert.assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,574,"Assert.assertEquals(m, m);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,575,"Assert.assertEquals(m, m1);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,576,Assert.assertFalse(m.equals(null));
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,577,Assert.assertFalse(m.equals(mt));
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,578,Assert.assertFalse(m.equals(createSparseMatrix(bigSingular)));
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,569,"ssertEquals(""SparseFieldMatrix<Fraction>{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,584,"Assert.assertEquals(""SparseFieldMatrix<Fraction>{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,572,"ssertEquals(""SparseFieldMatrix<Fraction>{{0.0}}"", m.toString());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,587,"Assert.assertEquals(""SparseFieldMatrix<Fraction>{{0.0}}"", m.toString());"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,591,@Test
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,581,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,597,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,586,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,602,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,591,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,607,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,600,"ssertEquals(expected, matrix);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,616,"Assert.assertEquals(expected, matrix);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,605,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,621,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,612,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,628,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,618,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,634,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,626,"ail(""expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,642,"Assert.fail(""expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,632,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,648,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,640,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,656,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,648,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,664,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,662,"ssertEquals(msg, m.getEntry(i,j).doubleValue(), n.getEntry(i,j).doubleValue(), tolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,677,"Assert.assertEquals(msg, m.getEntry(i,j).doubleValue(), n.getEntry(i,j).doubleValue(), tolerance);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,672,"ail(""vectors not same length"");"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,687,"Assert.fail(""vectors not same length"");"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,675,"ssertEquals(msg + "" "" + i + "" elements differ"", m[i].doubleValue(), n[i].doubleValue(),"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,690,"Assert.assertEquals(msg + "" "" + i + "" elements differ"", m[i].doubleValue(), n[i].doubleValue(),"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,19,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,19,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,25,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,34,ublic final class SparseRealMatrixTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,34,public final class SparseRealMatrixTest {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,110,ublic SparseRealMatrixTest(String name) {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,111,uper(name);
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,111,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,118,"ssertEquals(""testData row dimension"", 3, m.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,119,"ssertEquals(""testData column dimension"", 3, m.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,120,"ssertTrue(""testData is square"", m.isSquare());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,121,"ssertEquals(""testData2 row dimension"", m2.getRowDimension(), 2);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,122,"ssertEquals(""testData2 column dimension"", m2.getColumnDimension(), 3);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,123,"ssertTrue(""testData2 is not square"", !m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,115,"Assert.assertEquals(""testData row dimension"", 3, m.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,116,"Assert.assertEquals(""testData column dimension"", 3, m.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,117,"Assert.assertTrue(""testData is square"", m.isSquare());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,118,"Assert.assertEquals(""testData2 row dimension"", m2.getRowDimension(), 2);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,119,"Assert.assertEquals(""testData2 column dimension"", m2.getColumnDimension(), 3);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,120,"Assert.assertTrue(""testData2 is not square"", !m2.isSquare());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,124,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,130,"ssertEquals(m1.getClass(), m2.getClass());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,131,"ssertEquals((m2), m1);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,128,"Assert.assertEquals(m1.getClass(), m2.getClass());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,129,"Assert.assertEquals((m2), m1);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,134,"ssertEquals(m3.getClass(), m4.getClass());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,135,"ssertEquals((m4), m3);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,132,"Assert.assertEquals(m3.getClass(), m4.getClass());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,133,"Assert.assertEquals((m4), m3);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,137,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,146,"ssertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,145,"Assert.assertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,153,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,159,"ail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,159,"Assert.fail(""MathIllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,166,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,169,"ssertEquals(""testData norm"", 14d, m.getNorm(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,170,"ssertEquals(""testData2 norm"", 7d, m2.getNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,170,"Assert.assertEquals(""testData norm"", 14d, m.getNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,171,"Assert.assertEquals(""testData2 norm"", 7d, m2.getNorm(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,175,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,181,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,183,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,190,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,207,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,210,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,222,@Test
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,231,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,229,"ssertEquals(""identity trace"", 3d, m.getTrace(), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,234,"Assert.assertEquals(""identity trace"", 3d, m.getTrace(), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,233,"ail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,238,"Assert.fail(""Expecting NonSquareMatrixException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,245,@Test
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,253,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,256,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,263,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,270,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,267,"ssertEquals(a.getRowDimension(), b.length);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,268,"ssertEquals(3.0, b[0], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,269,"ssertEquals(7.0, b[1], 1.0e-12);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,270,"ssertEquals(11.0, b[2], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,275,"Assert.assertEquals(a.getRowDimension(), b.length);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,276,"Assert.assertEquals(3.0, b[0], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,277,"Assert.assertEquals(7.0, b[1], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,278,"Assert.assertEquals(11.0, b[2], 1.0e-12);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,282,@Test
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,294,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,295,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,304,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,310,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,320,"ail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,330,"Assert.fail(""Expecting illegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,336,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,332,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,343,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,338,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,349,"Assert.fail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,355,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,346,"ssertEquals(""get entry"", m.getEntry(0, 1), 2d, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,358,"Assert.assertEquals(""get entry"", m.getEntry(0, 1), 2d, entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,349,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,361,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,368,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,365,"ssertEquals(2, p.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,366,"ssertEquals(2, p.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,378,"Assert.assertEquals(2, p.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,379,"Assert.assertEquals(2, p.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,369,"ssertEquals(2, pInverse.getRowDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,370,"ssertEquals(2, pInverse.getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,382,"Assert.assertEquals(2, pInverse.getRowDimension());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,383,"Assert.assertEquals(2, pInverse.getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,378,"ssertEquals(2 * solution[0] + 3 * solution[1] - 2 * solution[2],"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,391,"Assert.assertEquals(2 * solution[0] + 3 * solution[1] - 2 * solution[2],"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,380,"ssertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2],"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,393,"Assert.assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2],"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,382,"ssertEquals(4 * solution[0] - 3 * solution[1] - 5 * solution[2],"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,395,"Assert.assertEquals(4 * solution[0] - 3 * solution[1] - 5 * solution[2],"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,401,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,398,"ssertEquals(""Rows23Cols00"", mRows23Cols00, m.getSubMatrix(2, 3, 0, 0));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,399,"ssertEquals(""Rows00Cols33"", mRows00Cols33, m.getSubMatrix(0, 0, 3, 3));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,400,"ssertEquals(""Rows01Cols23"", mRows01Cols23, m.getSubMatrix(0, 1, 2, 3));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,401,"ssertEquals(""Rows02Cols13"", mRows02Cols13,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,412,"Assert.assertEquals(""Rows23Cols00"", mRows23Cols00, m.getSubMatrix(2, 3, 0, 0));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,413,"Assert.assertEquals(""Rows00Cols33"", mRows00Cols33, m.getSubMatrix(0, 0, 3, 3));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,414,"Assert.assertEquals(""Rows01Cols23"", mRows01Cols23, m.getSubMatrix(0, 1, 2, 3));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,415,"Assert.assertEquals(""Rows02Cols13"", mRows02Cols13,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,403,"ssertEquals(""Rows03Cols12"", mRows03Cols12,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,417,"Assert.assertEquals(""Rows03Cols12"", mRows03Cols12,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,405,"ssertEquals(""Rows03Cols123"", mRows03Cols123,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,419,"Assert.assertEquals(""Rows03Cols123"", mRows03Cols123,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,407,"ssertEquals(""Rows20Cols123"", mRows20Cols123,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,421,"Assert.assertEquals(""Rows20Cols123"", mRows20Cols123,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,409,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,423,"Assert.assertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,411,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,425,"Assert.assertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,416,"ail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,430,"Assert.fail(""Expecting NumberIsTooSmallException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,422,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,436,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,428,"ail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,442,"Assert.fail(""Expecting NumberIsTooSmallException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,434,"ail(""Expecting NumberIsTooSmallException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,448,"Assert.fail(""Expecting NumberIsTooSmallException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,440,"ail(""Expecting NoDataException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,454,"Assert.fail(""Expecting NoDataException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,446,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,460,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,466,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,456,"ssertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,457,"ssertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,471,"Assert.assertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,472,"Assert.assertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,460,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,475,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,466,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,481,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,487,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,476,"ssertEquals(""Column1"", mColumn1, m.getColumnMatrix(1));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,477,"ssertEquals(""Column3"", mColumn3, m.getColumnMatrix(3));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,492,"Assert.assertEquals(""Column1"", mColumn1, m.getColumnMatrix(1));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,493,"Assert.assertEquals(""Column3"", mColumn3, m.getColumnMatrix(3));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,480,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,496,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,486,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,502,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,508,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,496,"ssertEquals(""Row0"", mRow0, m.getRowVector(0));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,497,"ssertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,513,"Assert.assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,514,"Assert.assertEquals(""Row3"", mRow3, m.getRowVector(3));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,500,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,517,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,506,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,523,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,529,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,516,"ssertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,517,"ssertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,534,"Assert.assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,535,"Assert.assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,520,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,538,"Assert.fail(""Expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,526,"ail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,544,"Assert.fail(""Expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,558,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,544,ssertTrue(m.hashCode() != mt.hashCode());
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,545,"ssertEquals(m.hashCode(), m1.hashCode());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,546,"ssertEquals(m, m);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,547,"ssertEquals(m, m1);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,548,ssertFalse(m.equals(null));
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,549,ssertFalse(m.equals(mt));
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,550,ssertFalse(m.equals(createSparseMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,563,Assert.assertTrue(m.hashCode() != mt.hashCode());
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,564,"Assert.assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,565,"Assert.assertEquals(m, m);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,566,"Assert.assertEquals(m, m1);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,567,Assert.assertFalse(m.equals(null));
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,568,Assert.assertFalse(m.equals(mt));
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,569,Assert.assertFalse(m.equals(createSparseMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,572,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,555,"ssertEquals(""OpenMapRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,575,"Assert.assertEquals(""OpenMapRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,558,"ssertEquals(""OpenMapRealMatrix{{0.0}}"", m.toString());"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,578,"Assert.assertEquals(""OpenMapRealMatrix{{0.0}}"", m.toString());"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,561,ublic void testSetSubMatrix() throws Exception {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,581,@Test
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,582,public void testSetSubMatrix() {
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,566,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,587,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,571,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,592,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,576,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,597,"Assert.assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,585,"ssertEquals(expected, matrix);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,606,"Assert.assertEquals(expected, matrix);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,590,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,611,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,597,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,618,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,603,"ail(""expecting OutOfRangeException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,624,"Assert.fail(""expecting OutOfRangeException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,611,"ail(""expecting NullPointerException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,632,"Assert.fail(""expecting NullPointerException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,617,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,638,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,625,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,646,"Assert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,633,"ail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,654,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,661,@Test
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,642,"ssertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,664,"Assert.assertEquals(m,TestUtils.serializeAndRecover(m));"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,650,"ssertTrue(msg, m.subtract(n).getNorm() < tolerance);"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,672,"Assert.assertTrue(msg, m.subtract(n).getNorm() < tolerance);"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,657,"ail(""vectors not same length"");"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,679,"Assert.fail(""vectors not same length"");"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,660,"ssertEquals(msg + "" "" + i + "" elements differ"", m[i], n[i],"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,682,"Assert.assertEquals(msg + "" "" + i + "" elements differ"", m[i], n[i],"
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,23,mport org.apache.commons.math.exception.NonSquareMatrixException;
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,25,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,25,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,27,ublic class TriDiagonalTransformerTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,27,public class TriDiagonalTransformerTest {
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,43,ublic TriDiagonalTransformerTest(String name) {
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,44,uper(name);
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,43,@Test
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,50,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,47,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,53,@Test
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,67,"ssertEquals(0, norm, 4.0e-15);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,65,"Assert.assertEquals(0, norm, 4.0e-15);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,68,@Test
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,87,"ssertEquals(0, norm, 4.0e-15);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,86,"Assert.assertEquals(0, norm, 4.0e-15);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,89,@Test
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,95,@Test
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,103,"ssertEquals(0, mTm.subtract(id).getNorm(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,104,"Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,107,@Test
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,117,"ssertEquals(0, m.getEntry(i, j), 1.0e-16);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,119,"Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,125,@Test
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,139,@Test
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,155,"ssertEquals(0, q.subtract(MatrixUtils.createRealMatrix(qRef)).getNorm(), 1.0e-14);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,159,"Assert.assertEquals(0, q.subtract(MatrixUtils.createRealMatrix(qRef)).getNorm(), 1.0e-14);"
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,168,"ssertEquals(0, t.subtract(MatrixUtils.createRealMatrix(tData)).getNorm(), 1.0e-14);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,172,"Assert.assertEquals(0, t.subtract(MatrixUtils.createRealMatrix(tData)).getNorm(), 1.0e-14);"
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,171,ssertTrue(q == transformer.getQ());
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,172,ssertTrue(t == transformer.getT());
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,175,Assert.assertTrue(q == transformer.getQ());
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,176,Assert.assertTrue(t == transformer.getT());
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,28,mport org.apache.commons.math.exception.SingularMatrixException;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,36,import org.apache.commons.math.linear.SingularMatrixException;

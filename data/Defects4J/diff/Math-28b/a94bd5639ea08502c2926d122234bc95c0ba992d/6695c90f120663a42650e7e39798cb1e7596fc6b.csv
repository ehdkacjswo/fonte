is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,21,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,22, An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,23, LU-decomposition of a real matrix.
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,24," <p>The LU-decomposition of matrix A is a set of three matrices: P, L and U"
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,25, such that P&times;A = L&times;U. P is a rows permutation matrix that is used
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,26, to rearrange the rows of A before so that it can be decomposed. L is a lower
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,27, triangular matrix with unit diagonal terms and U is an upper triangular matrix.</p>
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,28, <p>This interface is based on the class with similar name from the
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,24,* Calculates the LUP-decomposition of a square matrix.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,25,"* <p>The LUP-decomposition of a matrix A consists of three matrices L, U and"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,26,* P that satisfy: P&times;A = L&times;U. L is lower triangular (with unit
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,27,"* diagonal terms), U is upper triangular and P is a permutation matrix. All"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,28,* matrices are m&times;m.</p>
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,29,"* <p>As shown by the presence of the P matrix, this decomposition is"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,30,* implemented using partial pivoting.</p>
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,31,* <p>This class is based on the class with similar name from the
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,32,   <li>the <code>det</code> method has been renamed as {@link #getDeterminant()
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,35,*   <li>the {@code det} method has been renamed as {@link #getDeterminant()
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,34,   <li>the <code>getDoublePivot</code> method has been removed (but the int based
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,37,*   <li>the {@code getDoublePivot} method has been removed (but the int based
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,36,   <li>the <code>solve</code> and <code>isNonSingular</code> methods have been replaced
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,37,   by a {@link #getSolver() getSolver} method and the equivalent methods provided by
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,38,   the returned {@link DecompositionSolver}.</li>
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,39,*   <li>the {@code solve} and {@code isNonSingular} methods have been replaced
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,40,*   by a {@link #getSolver() getSolver} method and the equivalent methods
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,41,*   provided by the returned {@link DecompositionSolver}.</li>
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,44, @since 2.0
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,47,* @since 2.0 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,46,ublic interface LUDecomposition {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,49,public class LUDecomposition {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,50,/** Default bound to determine effective singularity in LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,51,private static final double DEFAULT_TOO_SMALL = 1e-11;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,52,/** Entries of LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,53,private final double[][] lu;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,54,/** Pivot permutation associated with LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,55,private final int[] pivot;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,56,/** Parity of the permutation associated with the LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,57,private boolean even;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,58,/** Singularity indicator. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,59,private boolean singular;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,60,/** Cached value of L. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,61,private RealMatrix cachedL;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,62,/** Cached value of U. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,63,private RealMatrix cachedU;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,64,/** Cached value of P. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,65,private RealMatrix cachedP;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,68,* Calculates the LU-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,69,* This constructor uses 1e-11 as default value for the singularity
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,70,* threshold.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,72,* @param matrix Matrix to decompose.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,73,* @throws NonSquareMatrixException if matrix is not square.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,75,public LUDecomposition(RealMatrix matrix) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,76,"this(matrix, DEFAULT_TOO_SMALL);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,80,* Calculates the LU-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,81,* @param matrix The matrix to decompose.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,82,* @param singularityThreshold threshold (based on partial row norm)
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,83,* under which a matrix is considered singular
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,84,* @throws NonSquareMatrixException if matrix is not square
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,86,"public LUDecomposition(RealMatrix matrix, double singularityThreshold) {"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,87,if (!matrix.isSquare()) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,88,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,89,matrix.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,92,final int m = matrix.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,93,lu = matrix.getData();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,94,pivot = new int[m];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,95,cachedL = null;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,96,cachedU = null;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,97,cachedP = null;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,99,// Initialize permutation array and parity
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,100,for (int row = 0; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,101,pivot[row] = row;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,103,even     = true;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,104,singular = false;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,106,// Loop over columns
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,107,for (int col = 0; col < m; col++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,109,// upper
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,110,for (int row = 0; row < col; row++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,111,final double[] luRow = lu[row];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,112,double sum = luRow[col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,113,for (int i = 0; i < row; i++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,114,sum -= luRow[i] * lu[i][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,116,luRow[col] = sum;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,119,// lower
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,120,int max = col; // permutation row
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,121,double largest = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,122,for (int row = col; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,123,final double[] luRow = lu[row];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,124,double sum = luRow[col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,125,for (int i = 0; i < col; i++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,126,sum -= luRow[i] * lu[i][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,128,luRow[col] = sum;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,130,// maintain best permutation choice
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,131,if (FastMath.abs(sum) > largest) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,132,largest = FastMath.abs(sum);
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,133,max = row;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,137,// Singularity check
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,138,if (FastMath.abs(lu[max][col]) < singularityThreshold) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,139,singular = true;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,140,return;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,143,// Pivot if necessary
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,144,if (max != col) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,145,double tmp = 0;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,146,final double[] luMax = lu[max];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,147,final double[] luCol = lu[col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,148,for (int i = 0; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,149,tmp = luMax[i];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,150,luMax[i] = luCol[i];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,151,luCol[i] = tmp;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,153,int temp = pivot[max];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,154,pivot[max] = pivot[col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,155,pivot[col] = temp;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,156,even = !even;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,159,"// Divide the lower elements by the ""winning"" diagonal elt."
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,160,final double luDiag = lu[col][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,161,for (int row = col + 1; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,162,lu[row][col] /= luDiag;
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,50, <p>L is an lower-triangular matrix</p>
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,169,* <p>L is a lower-triangular matrix</p>
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,53,ealMatrix getL();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,172,public RealMatrix getL() {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,173,if ((cachedL == null) && !singular) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,174,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,175,"cachedL = MatrixUtils.createRealMatrix(m, m);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,176,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,177,final double[] luI = lu[i];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,178,for (int j = 0; j < i; ++j) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,179,"cachedL.setEntry(i, j, luI[j]);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,181,"cachedL.setEntry(i, i, 1.0);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,184,return cachedL;
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,60,ealMatrix getU();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,192,public RealMatrix getU() {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,193,if ((cachedU == null) && !singular) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,194,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,195,"cachedU = MatrixUtils.createRealMatrix(m, m);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,196,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,197,final double[] luI = lu[i];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,198,for (int j = i; j < m; ++j) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,199,"cachedU.setEntry(i, j, luI[j]);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,203,return cachedU;
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,71,ealMatrix getP();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,215,public RealMatrix getP() {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,216,if ((cachedP == null) && !singular) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,217,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,218,"cachedP = MatrixUtils.createRealMatrix(m, m);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,219,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,220,"cachedP.setEntry(i, pivot[i], 1.0);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,223,return cachedP;
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,78,nt[] getPivot();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,231,public int[] getPivot() {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,232,return pivot.clone();
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,84,ouble getDeterminant();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,239,public double getDeterminant() {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,240,if (singular) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,241,return 0;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,242,} else {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,243,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,244,double determinant = even ? 1 : -1;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,245,for (int i = 0; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,246,determinant *= lu[i][i];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,248,return determinant;
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,87, Get a solver for finding the A &times; X = B solution in exact linear sense.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,253,* Get a solver for finding the A &times; X = B solution in exact linear
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,254,* sense.
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,90,ecompositionSolver getSolver();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,257,public DecompositionSolver getSolver() {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,258,"return new Solver(lu, pivot, singular);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,261,/** Specialized solver. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,262,private static class Solver implements DecompositionSolver {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,264,/** Entries of LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,265,private final double[][] lu;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,267,/** Pivot permutation associated with LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,268,private final int[] pivot;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,270,/** Singularity indicator. */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,271,private final boolean singular;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,274,* Build a solver from decomposed matrix.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,275,* @param lu entries of LU decomposition
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,276,* @param pivot pivot permutation associated with LU decomposition
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,277,* @param singular singularity indicator
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,279,"private Solver(final double[][] lu, final int[] pivot, final boolean singular) {"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,280,this.lu       = lu;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,281,this.pivot    = pivot;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,282,this.singular = singular;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,285,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,286,public boolean isNonSingular() {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,287,return !singular;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,290,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,291,public RealVector solve(RealVector b) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,292,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,293,if (b.getDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,294,"throw new DimensionMismatchException(b.getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,296,if (singular) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,297,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,300,final double[] bp = new double[m];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,302,// Apply permutations to b
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,303,for (int row = 0; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,304,bp[row] = b.getEntry(pivot[row]);
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,307,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,308,for (int col = 0; col < m; col++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,309,final double bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,310,for (int i = col + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,311,bp[i] -= bpCol * lu[i][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,315,// Solve UX = Y
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,316,for (int col = m - 1; col >= 0; col--) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,317,bp[col] /= lu[col][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,318,final double bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,319,for (int i = 0; i < col; i++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,320,bp[i] -= bpCol * lu[i][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,324,"return new ArrayRealVector(bp, false);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,327,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,328,public RealMatrix solve(RealMatrix b) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,330,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,331,if (b.getRowDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,332,"throw new DimensionMismatchException(b.getRowDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,334,if (singular) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,335,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,338,final int nColB = b.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,340,// Apply permutations to b
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,341,final double[][] bp = new double[m][nColB];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,342,for (int row = 0; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,343,final double[] bpRow = bp[row];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,344,final int pRow = pivot[row];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,345,for (int col = 0; col < nColB; col++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,346,"bpRow[col] = b.getEntry(pRow, col);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,350,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,351,for (int col = 0; col < m; col++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,352,final double[] bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,353,for (int i = col + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,354,final double[] bpI = bp[i];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,355,final double luICol = lu[i][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,356,for (int j = 0; j < nColB; j++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,357,bpI[j] -= bpCol[j] * luICol;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,362,// Solve UX = Y
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,363,for (int col = m - 1; col >= 0; col--) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,364,final double[] bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,365,final double luDiag = lu[col][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,366,for (int j = 0; j < nColB; j++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,367,bpCol[j] /= luDiag;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,369,for (int i = 0; i < col; i++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,370,final double[] bpI = bp[i];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,371,final double luICol = lu[i][col];
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,372,for (int j = 0; j < nColB; j++) {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,373,bpI[j] -= bpCol[j] * luICol;
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,378,"return new Array2DRowRealMatrix(bp, false);"
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,381,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,382,public RealMatrix getInverse() {
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,383,return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,20,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,21,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,24, Calculates the LUP-decomposition of a square matrix.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,25, <p>The LUP-decomposition of a matrix A consists of three matrices
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,26," L, U and P that satisfy: PA = LU, L is lower triangular, and U is"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,27, upper triangular and P is a permutation matrix. All matrices are
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,28, m&times;m.</p>
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,29," <p>As shown by the presence of the P matrix, this decomposition is"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,30, implemented using partial pivoting.</p>
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,32, @version $Id$
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,33, @since 2.0
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,35,ublic class LUDecompositionImpl implements LUDecomposition {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,36,** Default bound to determine effective singularity in LU decomposition. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,37,rivate static final double DEFAULT_TOO_SMALL = 1e-11;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,38,** Entries of LU decomposition. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,39,rivate final double lu[][];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,40,** Pivot permutation associated with LU decomposition */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,41,rivate final int[] pivot;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,42,** Parity of the permutation associated with the LU decomposition */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,43,rivate boolean even;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,44,** Singularity indicator. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,45,rivate boolean singular;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,46,** Cached value of L. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,47,rivate RealMatrix cachedL;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,48,** Cached value of U. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,49,rivate RealMatrix cachedU;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,50,** Cached value of P. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,51,rivate RealMatrix cachedP;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,54, Calculates the LU-decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,55, This constructor uses 1e-11 as default value for the singularity
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,56, threshold.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,58, @param matrix Matrix to decompose.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,59, @throws NonSquareMatrixException if matrix is not square.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,61,ublic LUDecompositionImpl(RealMatrix matrix) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,62,"his(matrix, DEFAULT_TOO_SMALL);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,66, Calculates the LU-decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,67, @param matrix The matrix to decompose.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,68, @param singularityThreshold threshold (based on partial row norm)
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,69, under which a matrix is considered singular
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,70, @throws NonSquareMatrixException if matrix is not square
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,72,"ublic LUDecompositionImpl(RealMatrix matrix, double singularityThreshold) {"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,73,f (!matrix.isSquare()) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,74,"hrow new NonSquareMatrixException(matrix.getRowDimension(),"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,75,atrix.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,78,inal int m = matrix.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,79,u = matrix.getData();
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,80,ivot = new int[m];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,81,achedL = null;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,82,achedU = null;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,83,achedP = null;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,85,/ Initialize permutation array and parity
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,86,or (int row = 0; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,87,ivot[row] = row;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,89,ven     = true;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,90,ingular = false;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,92,/ Loop over columns
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,93,or (int col = 0; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,95,/ upper
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,96,or (int row = 0; row < col; row++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,97,inal double[] luRow = lu[row];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,98,ouble sum = luRow[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,99,or (int i = 0; i < row; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,100,um -= luRow[i] * lu[i][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,102,uRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,105,/ lower
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,106,nt max = col; // permutation row
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,107,ouble largest = Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,108,or (int row = col; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,109,inal double[] luRow = lu[row];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,110,ouble sum = luRow[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,111,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,112,um -= luRow[i] * lu[i][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,114,uRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,116,/ maintain best permutation choice
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,117,f (FastMath.abs(sum) > largest) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,118,argest = FastMath.abs(sum);
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,119,ax = row;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,123,/ Singularity check
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,124,f (FastMath.abs(lu[max][col]) < singularityThreshold) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,125,ingular = true;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,126,eturn;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,129,/ Pivot if necessary
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,130,f (max != col) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,131,ouble tmp = 0;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,132,inal double[] luMax = lu[max];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,133,inal double[] luCol = lu[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,134,or (int i = 0; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,135,mp = luMax[i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,136,uMax[i] = luCol[i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,137,uCol[i] = tmp;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,139,nt temp = pivot[max];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,140,ivot[max] = pivot[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,141,ivot[col] = temp;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,142,ven = !even;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,145,"/ Divide the lower elements by the ""winning"" diagonal elt."
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,146,inal double luDiag = lu[col][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,147,or (int row = col + 1; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,148,u[row][col] /= luDiag;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,153,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,154,ublic RealMatrix getL() {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,155,f ((cachedL == null) && !singular) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,156,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,157,"achedL = MatrixUtils.createRealMatrix(m, m);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,158,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,159,inal double[] luI = lu[i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,160,or (int j = 0; j < i; ++j) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,161,"achedL.setEntry(i, j, luI[j]);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,163,"achedL.setEntry(i, i, 1.0);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,166,eturn cachedL;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,169,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,170,ublic RealMatrix getU() {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,171,f ((cachedU == null) && !singular) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,172,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,173,"achedU = MatrixUtils.createRealMatrix(m, m);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,174,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,175,inal double[] luI = lu[i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,176,or (int j = i; j < m; ++j) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,177,"achedU.setEntry(i, j, luI[j]);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,181,eturn cachedU;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,184,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,185,ublic RealMatrix getP() {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,186,f ((cachedP == null) && !singular) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,187,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,188,"achedP = MatrixUtils.createRealMatrix(m, m);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,189,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,190,"achedP.setEntry(i, pivot[i], 1.0);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,193,eturn cachedP;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,196,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,197,ublic int[] getPivot() {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,198,eturn pivot.clone();
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,201,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,202,ublic double getDeterminant() {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,203,f (singular) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,204,eturn 0;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,205, else {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,206,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,207,ouble determinant = even ? 1 : -1;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,208,or (int i = 0; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,209,eterminant *= lu[i][i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,211,eturn determinant;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,215,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,216,ublic DecompositionSolver getSolver() {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,217,"eturn new Solver(lu, pivot, singular);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,220,** Specialized solver. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,221,rivate static class Solver implements DecompositionSolver {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,223,** Entries of LU decomposition. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,224,rivate final double lu[][];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,226,** Pivot permutation associated with LU decomposition. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,227,rivate final int[] pivot;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,229,** Singularity indicator. */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,230,rivate final boolean singular;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,233, Build a solver from decomposed matrix.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,234, @param lu entries of LU decomposition
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,235, @param pivot pivot permutation associated with LU decomposition
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,236, @param singular singularity indicator
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,238,"rivate Solver(final double[][] lu, final int[] pivot, final boolean singular) {"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,239,his.lu       = lu;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,240,his.pivot    = pivot;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,241,his.singular = singular;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,244,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,245,ublic boolean isNonSingular() {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,246,eturn !singular;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,249,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,250,ublic RealVector solve(RealVector b) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,251,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,252,f (b.getDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,253,"hrow new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,255,f (singular) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,256,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,259,inal double[] bp = new double[m];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,261,/ Apply permutations to b
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,262,or (int row = 0; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,263,p[row] = b.getEntry(pivot[row]);
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,266,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,267,or (int col = 0; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,268,inal double bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,269,or (int i = col + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,270,p[i] -= bpCol * lu[i][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,274,/ Solve UX = Y
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,275,or (int col = m - 1; col >= 0; col--) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,276,p[col] /= lu[col][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,277,inal double bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,278,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,279,p[i] -= bpCol * lu[i][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,283,"eturn new ArrayRealVector(bp, false);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,286,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,287,ublic double[][] solve(double[][] b) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,289,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,290,f (b.length != m) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,291,"hrow new DimensionMismatchException(b.length, m);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,293,f (singular) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,294,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,297,inal int nColB = b[0].length;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,299,/ Apply permutations to b
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,300,inal double[][] bp = new double[m][nColB];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,301,or (int row = 0; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,302,inal double[] bpRow = bp[row];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,303,inal int pRow = pivot[row];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,304,or (int col = 0; col < nColB; col++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,305,pRow[col] = b[pRow][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,309,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,310,or (int col = 0; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,311,inal double[] bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,312,or (int i = col + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,313,inal double[] bpI = bp[i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,314,inal double luICol = lu[i][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,315,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,316,pI[j] -= bpCol[j] * luICol;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,321,/ Solve UX = Y
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,322,or (int col = m - 1; col >= 0; col--) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,323,inal double[] bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,324,inal double luDiag = lu[col][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,325,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,326,pCol[j] /= luDiag;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,328,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,329,inal double[] bpI = bp[i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,330,inal double luICol = lu[i][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,331,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,332,pI[j] -= bpCol[j] * luICol;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,337,eturn bp;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,341,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,342,ublic RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,344,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,345,f (b.getRowDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,346,"hrow new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,348,f (singular) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,349,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,352,inal int nColB = b.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,354,/ Apply permutations to b
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,355,inal double[][] bp = new double[m][nColB];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,356,or (int row = 0; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,357,inal double[] bpRow = bp[row];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,358,inal int pRow = pivot[row];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,359,or (int col = 0; col < nColB; col++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,360,"pRow[col] = b.getEntry(pRow, col);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,364,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,365,or (int col = 0; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,366,inal double[] bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,367,or (int i = col + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,368,inal double[] bpI = bp[i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,369,inal double luICol = lu[i][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,370,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,371,pI[j] -= bpCol[j] * luICol;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,376,/ Solve UX = Y
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,377,or (int col = m - 1; col >= 0; col--) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,378,inal double[] bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,379,inal double luDiag = lu[col][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,380,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,381,pCol[j] /= luDiag;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,383,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,384,inal double[] bpI = bp[i];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,385,inal double luICol = lu[i][col];
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,386,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,387,pI[j] -= bpCol[j] * luICol;
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,392,"eturn new Array2DRowRealMatrix(bp, false);"
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,395,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,396,ublic RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,397,eturn solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,25,mport org.apache.commons.math.linear.LUDecompositionImpl;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,25,import org.apache.commons.math.linear.LUDecomposition;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,215," new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj), threshold).getSolver();"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,215,"= new LUDecomposition(MatrixUtils.createRealMatrix(jTj), threshold).getSolver();"
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,25,mport org.apache.commons.math.linear.LUDecompositionImpl;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,25,import org.apache.commons.math.linear.LUDecomposition;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,147,ew LUDecompositionImpl(mA).getSolver() :
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,147,new LUDecomposition(mA).getSolver() :
False,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,19,mport org.apache.commons.math.linear.LUDecompositionImpl;
True,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,19,import org.apache.commons.math.linear.LUDecomposition;
False,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,81,megaInverse = new LUDecompositionImpl(Omega).getSolver().getInverse();
True,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,81,OmegaInverse = new LUDecomposition(Omega).getSolver().getInverse();
False,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,98,ealMatrix inverse = new LUDecompositionImpl(XTOIX).getSolver().getInverse();
True,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,98,RealMatrix inverse = new LUDecomposition(XTOIX).getSolver().getInverse();
False,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,113,eturn new LUDecompositionImpl(XTOIX).getSolver().getInverse();
True,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,113,return new LUDecomposition(XTOIX).getSolver().getInverse();
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,20,mport org.apache.commons.math.linear.LUDecompositionImpl;
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,20,import org.apache.commons.math.linear.LUDecomposition;
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,229,ealMatrix Rinv = new LUDecompositionImpl(Raug).getSolver().getInverse();
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,229,RealMatrix Rinv = new LUDecomposition(Raug).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,336,ealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,337,ealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,336,RealMatrix mIT = new LUDecomposition(m).getSolver().getInverse().transpose();
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,337,RealMatrix mTI = new LUDecomposition(m.transpose()).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,432,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,432,RealMatrix pInverse = new LUDecomposition(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,440,ealVector solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,440,RealVector solution = new LUDecomposition(coefficients).getSolver().solve(constants);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,386,ealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,387,ealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,386,RealMatrix mIT = new LUDecomposition(m).getSolver().getInverse().transpose();
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,387,RealMatrix mTI = new LUDecomposition(m.transpose()).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,477,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,477,RealMatrix pInverse = new LUDecomposition(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,485,ealVector solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,485,RealVector solution = new LUDecomposition(coefficients).getSolver().solve(constants);
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,23,ublic class LUDecompositionImplTest {
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,23,public class LUDecompositionTest {
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,60,UDecomposition LU = new LUDecompositionImpl(matrix);
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,60,LUDecomposition LU = new LUDecomposition(matrix);
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,74,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,74,new LUDecomposition(MatrixUtils.createRealMatrix(new double[3][2]));
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,85,UDecomposition lu = new LUDecompositionImpl(matrix);
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,85,LUDecomposition lu = new LUDecomposition(matrix);
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,93,u = new LUDecompositionImpl(matrix);
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,93,lu = new LUDecomposition(matrix);
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,101,u = new LUDecompositionImpl(matrix);
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,101,lu = new LUDecomposition(matrix);
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,109,u = new LUDecompositionImpl(matrix);
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,109,lu = new LUDecomposition(matrix);
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,116,u = new LUDecompositionImpl(matrix);
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,116,lu = new LUDecomposition(matrix);
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,128,ealMatrix l = new LUDecompositionImpl(matrix).getL();
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,128,RealMatrix l = new LUDecomposition(matrix).getL();
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,141,ealMatrix u = new LUDecompositionImpl(matrix).getU();
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,141,RealMatrix u = new LUDecomposition(matrix).getU();
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,153,ealMatrix p   = new LUDecompositionImpl(matrix).getP();
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,153,RealMatrix p   = new LUDecomposition(matrix).getP();
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,203,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(testData));
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,203,new LUDecomposition(MatrixUtils.createRealMatrix(testData));
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,205,u = new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular));
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,205,lu = new LUDecomposition(MatrixUtils.createRealMatrix(singular));
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,207,u = new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular));
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,207,lu = new LUDecomposition(MatrixUtils.createRealMatrix(bigSingular));
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,215,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(testData));
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,215,new LUDecomposition(MatrixUtils.createRealMatrix(testData));
False,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,256,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(luData));
True,src/test/java/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/LUDecompositionTest.java,256,new LUDecomposition(MatrixUtils.createRealMatrix(luData));
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,57,"ssert.assertFalse(new LUDecompositionImpl(matrix, 1.0e-5).getSolver().isNonSingular());"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,58,"ssert.assertTrue(new LUDecompositionImpl(matrix, 1.0e-10).getSolver().isNonSingular());"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,57,"Assert.assertFalse(new LUDecomposition(matrix, 1.0e-5).getSolver().isNonSingular());"
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,58,"Assert.assertTrue(new LUDecomposition(matrix, 1.0e-10).getSolver().isNonSingular());"
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,65,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,65,new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,67,olver = new LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)).getSolver();
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,67,solver = new LUDecomposition(MatrixUtils.createRealMatrix(singular)).getSolver();
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,69,olver = new LUDecompositionImpl(MatrixUtils.createRealMatrix(bigSingular)).getSolver();
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,69,solver = new LUDecomposition(MatrixUtils.createRealMatrix(bigSingular)).getSolver();
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,77,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,77,new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,103,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(singular)).getSolver();
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,103,new LUDecomposition(MatrixUtils.createRealMatrix(singular)).getSolver();
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,129,ew LUDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,129,new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();
False,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,167,eturn new LUDecompositionImpl(m).getDeterminant();
True,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,src/test/java/org/apache/commons/math/linear/LUSolverTest.java,167,return new LUDecomposition(m).getDeterminant();
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,286,ealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,287,ealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,286,RealMatrix mIT = new LUDecomposition(m).getSolver().getInverse().transpose();
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,287,RealMatrix mTI = new LUDecomposition(m.transpose()).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,382,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,382,RealMatrix pInverse = new LUDecomposition(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,391,ealVector solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,391,RealVector solution = new LUDecomposition(coefficients).getSolver().solve(constants);

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,567,"utputSourceMap(options, options.jsOutputFile);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,567,outputSourceMap(options);
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,580,"apOut = openSourceMapStream(options, moduleFilePrefix);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,580,"mapOut = toPrintStream(expandSourceMapPath(options, null));"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,585,apOut = openSourceMapStream(
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,586,"ptions, moduleFilePrefix + m.getName() + "".js"");"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,585,"mapOut = toPrintStream(expandSourceMapPath(options, m));"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,691, Returns a stream to give to an instance of the SourceMap class to which it
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,692, can append the source map. If no source mapping was specified in the
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,693," options, this method returns null."
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,690,* Expand a file path specified on the command-line.
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,695, @param options The options to the Compiler.
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,696, @param path The directory or a file in the directory in which to place the
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,697,        source map.
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,692,* Most file paths on the command-line allow an %outname% placeholder.
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,693,* The placeholder will expand to a different value depending on
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,694,* the current output mode. There are three scenarios:
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,696,"* 1) Single js output, single extra output: sub in jsOutputPath."
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,697,"* 2) Multiple js output, single extra output: sub in the base module name."
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,698,"* 3) Multiple js output, multiple extra output: sub in the module output file."
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,700,* Passing a JSModule to this function automatically triggers case #3.
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,701,"* Otherwise, we'll use strategy #1 or #2 based on the current output mode."
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,699,"rivate PrintStream openSourceMapStream(B options, String path)"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,700,hrows IOException {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,701,f (options.sourceMapOutputPath == null) {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,702,eturn null;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,703,private String expandCommandLinePath(
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,704,"String path, JSModule forModule) {"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,705,String sub;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,706,if (forModule != null) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,707,"sub = config.moduleOutputPathPrefix + forModule.getName() + "".js"";"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,708,} else if (!config.module.isEmpty()) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,709,sub = config.moduleOutputPathPrefix;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,710,} else {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,711,sub = config.jsOutputFile;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,713,"return path.replace(""%outname%"", sub);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,705,tring sourceMapPath = options.sourceMapOutputPath;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,706,"ourceMapPath = sourceMapPath.replace(""%outname%"", path);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,708,tring mapPath = null;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,710,"f (sourceMapPath.contains(""/"") || sourceMapPath.contains(""\\"")) {"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,711,apPath = sourceMapPath;
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,712, else {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,713,ile outputFile = new File(path);
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,714,apPath = outputFile.getParent() + File.separatorChar + sourceMapPath;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,716,/** Expansion function for source map. */
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,717,@VisibleForTesting
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,718,"String expandSourceMapPath(B options, JSModule forModule) {"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,719,if (Strings.isEmpty(options.sourceMapOutputPath)) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,720,return null;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,722,"return expandCommandLinePath(options.sourceMapOutputPath, forModule);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,717,eturn new PrintStream(new FileOutputStream(mapPath));
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,726,* Coverts a file name into a print stream.
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,727,* Returns null if the file name is null.
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,729,private PrintStream toPrintStream(String fileName) throws IOException {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,730,if (fileName == null) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,731,return null;
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,733,return new PrintStream(new FileOutputStream(fileName));
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,728,"rivate void outputSourceMap(B options, String path)"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,744,private void outputSourceMap(B options)
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,730,f (options.sourceMapOutputPath == null) {
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,746,if (Strings.isEmpty(options.sourceMapOutputPath)) {
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,734,ile outputFile = new File(path);
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,735,"rintStream out = openSourceMapStream(options, path);"
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,736,"ompiler.getSourceMap().appendTo(out, outputFile.getName());"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,750,"String outName = expandSourceMapPath(options, null);"
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,751,PrintStream out = toPrintStream(outName);
True,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,752,"compiler.getSourceMap().appendTo(out, outName);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,96,cope scope = t.getScope();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,97,f (scope.isGlobal()) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,96,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,99,Scope scope = t.getScope();
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,27,mport com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,398,"ist<DiGraphEdge<N, Branch>> edgeList ="
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,399,etCfg().getOutEdges(node.getValue());
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,400,nt outEdgeCount = edgeList.size();
True,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,397,int outEdgeCount = getCfg().getOutEdges(node.getValue()).size();
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,30,mport java.util.List;
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,98,"ist<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();"
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,97,"Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();"
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,67,/ list of possible call edge.
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,68,"rivate final Multimap<Node, DiGraphEdge<Name, Reference>>"
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,67,// list of possible call edge destinations.
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,68,"private final Multimap<Node, Name>"
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,125,"or (DiGraphEdge<Name, Reference> edge : referenceMap.get(site)) {"
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,126,ame target = edge.getDestination().getValue();
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,125,for (Name target : referenceMap.get(site)) {
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,167,"ublic GraphEdge<Name, Reference> connect(Name src, Reference ref,"
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,168,ame dest) {
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,169,"raphEdge<Name, Reference> edge = super.connect(src, ref, dest);"
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,170,"eferenceMap.put(ref.site, (DiGraphEdge<Name, Reference>) edge);"
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,171,eturn edge;
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,166,"public void connect(Name src, Reference ref, Name dest) {"
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,167,"super.connect(src, ref, dest);"
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,168,"referenceMap.put(ref.site, dest);"
False,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,19,mport java.util.List;
True,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,19,import java.util.Collection;
False,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,34,** Gets a mutable list of all nodes. */
False,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,35,"ist<GraphNode<N, E>> getNodes();"
True,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,34,/** Gets an immutable list of all nodes. */
True,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,src/com/google/javascript/jscomp/graph/AdjacencyGraph.java,35,"Collection<GraphNode<N, E>> getNodes();"
False,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,31,"ublic abstract List<DiGraphNode<N, E>> getDirectedGraphNodes();"
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,32,* Gets an immutable iterable over all the nodes in the graph.
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,34,"public abstract Iterable<DiGraphNode<N, E>> getDirectedGraphNodes();"
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,37,* Gets an immutable list of out edges of the given node.
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,42,* Gets an immutable list of in edges of the given node.
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,93,@Override
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,94,"public boolean isConnected(N n1, N n2) {"
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,95,"return isConnectedInDirection(n1, n2) || isConnectedInDirection(n2, n1);"
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,98,@Override
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,99,"public boolean isConnected(N n1, E e, N n2) {"
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,100,"return isConnectedInDirection(n1, e, n2) ||"
True,src/com/google/javascript/jscomp/graph/DiGraph.java,src/com/google/javascript/jscomp/graph/DiGraph.java,101,"isConnectedInDirection(n2, e, n1);"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,101, @return The newly created graph edge.
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,103,"ublic abstract GraphEdge<N, E> connect(N n1, E edge, N n2);"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,102,"public abstract void connect(N n1, E edge, N n2);"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,122,"raphNode<N, E> node1 = getNode(n1);"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,123,"raphNode<N, E> node2 = getNode(n2);"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,124,f (node1 == null) {
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,125,"hrow new IllegalArgumentException(n1 + "" does not exist in graph"");"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,121,"if (!isConnected(n1, edge, n2)) {"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,122,"connect(n1, edge, n2);"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,127,f (node2 == null) {
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,128,"hrow new IllegalArgumentException(n2 + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,130,"ist<GraphEdge<N, E>> edgeList = getEdges(n1, n2);"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,131,"or (GraphEdge<N, E> e : edgeList) {"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,132,/ Check == first to short circuit nulls.
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,133,f (e.getValue() == edge || e.getValue().equals(edge)) {
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,134,eturn;
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,137,"onnect(n1, edge, n2);"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,150,** Gets a mutable list of all nodes. */
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,151,"ublic abstract List<GraphNode<N, E>> getNodes();"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,136,/** Gets an immutable list of all nodes. */
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,137,"public abstract Collection<GraphNode<N, E>> getNodes();"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,153,** Gets a mutable list of all edges. */
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,139,/** Gets an immutable list of all edges. */
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,194,* Checks whether two nodes in the graph are connected by the given
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,195,* edge type.
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,197,* @param n1 Node 1.
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,198,* @param e The edge type.
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,199,* @param n2 Node 2.
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,201,"public abstract boolean isConnected(N n1, E e, N n2);"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,204,"* Gets the node of the specified type, or throws an"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,205,* IllegalArgumentException.
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,207,"@SuppressWarnings(""unchecked"")"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,208,"<T extends GraphNode<N, E>> T getNodeOrFail(N val) {"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,209,T node = (T) getNode(val);
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,210,if (node == null) {
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,211,"throw new IllegalArgumentException(val + "" does not exist in graph"");"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,213,return node;
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,304,f (!graph.hasNode(value)) {
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,305,"hrow new IllegalArgumentException(value + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,307,odes.add(graph.getNode(value));
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,313,nodes.add(graph.getNodeOrFail(value));
False,src/com/google/javascript/jscomp/graph/GraphColoring.java,src/com/google/javascript/jscomp/graph/GraphColoring.java,134,"ist<GraphNode<N, E>> worklist = graph.getNodes();"
True,src/com/google/javascript/jscomp/graph/GraphColoring.java,src/com/google/javascript/jscomp/graph/GraphColoring.java,134,"List<GraphNode<N, E>> worklist = Lists.newArrayList(graph.getNodes());"
False,src/com/google/javascript/jscomp/graph/GraphColoring.java,src/com/google/javascript/jscomp/graph/GraphColoring.java,146,orklist = Lists.newLinkedList(worklist);
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,25,import java.util.Collection;
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,26,import java.util.Collections;
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,55,"ublic GraphEdge<N, E> connect(N srcValue, E edgeValue, N destValue) {"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,56,"iGraphNode<N, E> node = getDirectedGraphNode(srcValue);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,57,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,58,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,59,"rcValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,61,"inkedDirectedGraphNode<N, E> src = (LinkedDirectedGraphNode<N, E>) node;"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,62,ode = getDirectedGraphNode(destValue);
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,63,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,64,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,65,"estValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,67,"inkedDirectedGraphNode<N, E> dest = (LinkedDirectedGraphNode<N, E>) node;"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,57,"public void connect(N srcValue, E edgeValue, N destValue) {"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,58,"LinkedDirectedGraphNode<N, E> src = getNodeOrFail(srcValue);"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,59,"LinkedDirectedGraphNode<N, E> dest = getNodeOrFail(destValue);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,72,eturn edge;
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,83,"iGraphNode<N, E> node = getDirectedGraphNode(srcValue);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,84,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,85,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,86,"rcValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,88,"inkedDirectedGraphNode<N, E> src = (LinkedDirectedGraphNode<N, E>) node;"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,89,ode = getDirectedGraphNode(destValue);
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,90,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,91,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,92,"estValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,94,"inkedDirectedGraphNode<N, E> dest = (LinkedDirectedGraphNode<N, E>) node;"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,74,"LinkedDirectedGraphNode<N, E> src = getNodeOrFail(srcValue);"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,75,"LinkedDirectedGraphNode<N, E> dest = getNodeOrFail(destValue);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,102,"ublic List<DiGraphNode<N, E>> getDirectedGraphNodes() {"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,103,"ist<DiGraphNode<N, E>> nodeList = Lists.newArrayList();"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,104,odeList.addAll(nodes.values());
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,105,eturn nodeList;
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,83,"public Iterable<DiGraphNode<N, E>> getDirectedGraphNodes() {"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,84,"return Collections.<DiGraphNode<N, E>>unmodifiableCollection("
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,85,nodes.values());
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,120,"inkedDirectedGraphNode<N, E> node = nodes.get(nodeValue);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,121,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,122,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,123,"odeValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,125,"ist<DiGraphEdge<N, E>> edgeList = Lists.newArrayList();"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,126,"or (DiGraphEdge<N, E> edge : node.getInEdges()) {"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,127,dgeList.add(edge);
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,130,eturn edgeList;
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,100,"LinkedDirectedGraphNode<N, E> node = getNodeOrFail(nodeValue);"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,101,"return Collections.<DiGraphEdge<N, E>>unmodifiableList(node.getInEdges());"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,135,"inkedDirectedGraphNode<N, E> node = nodes.get(nodeValue);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,136,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,137,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,138,"odeValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,140,"ist<DiGraphEdge<N, E>> edgeList = Lists.newArrayList();"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,141,"or (DiGraphEdge<N, E> edge : node.getOutEdges()) {"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,142,dgeList.add(edge);
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,144,eturn edgeList;
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,106,"LinkedDirectedGraphNode<N, E> node = getNodeOrFail(nodeValue);"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,107,"return Collections.<DiGraphEdge<N, E>>unmodifiableList(node.getOutEdges());"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,177,"iGraphNode<N, E> dNode1 = nodes.get(n1);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,178,f (dNode1 == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,179,"hrow new IllegalArgumentException(n1 + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,181,"iGraphNode<N, E> dNode2 = nodes.get(n2);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,182,f (dNode2 == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,183,"hrow new IllegalArgumentException(n1 + "" does not exist in graph"");"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,140,"DiGraphNode<N, E> dNode1 = getNodeOrFail(n1);"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,141,"DiGraphNode<N, E> dNode2 = getNodeOrFail(n2);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,206,"iGraphNode<N, E> dNode1 = nodes.get(n1);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,207,f (dNode1 == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,208,"hrow new IllegalArgumentException(n1 + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,210,"iGraphNode<N, E> dNode2 = nodes.get(n2);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,211,f (dNode2 == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,212,"hrow new IllegalArgumentException(n1 + "" does not exist in graph"");"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,163,"DiGraphNode<N, E> dNode1 = getNodeOrFail(n1);"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,164,"DiGraphNode<N, E> dNode2 = getNodeOrFail(n2);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,261,Override
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,262,"ublic boolean isConnected(N n1, N n2) {"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,263,"eturn isConnectedInDirection(n1, n2) || isConnectedInDirection(n2, n1);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,298,"ublic List<GraphNode<N, E>> getNodes() {"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,299,"ist<GraphNode<N, E>> list = Lists.newArrayList();"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,300,ist.addAll(nodes.values());
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,301,eturn list;
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,243,"public Collection<GraphNode<N, E>> getNodes() {"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,244,"return Collections.<GraphNode<N, E>>unmodifiableCollection(nodes.values());"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,334,eturn result;
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,277,return Collections.unmodifiableList(result);
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,339,"iGraphNode<N, E> node = getDirectedGraphNode(value);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,340,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,341,"hrow new IllegalArgumentException(value + "" not found in graph"");"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,282,"DiGraphNode<N, E> node = getNodeOrFail(value);"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,353,"rotected List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList();"
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,354,"rotected List<DiGraphEdge<N, E>> outEdgeList ="
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,293,"List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList();"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,294,"List<DiGraphEdge<N, E>> outEdgeList ="
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,370,ublic LinkedDirectedGraphNode(N nodeValue) {
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,310,LinkedDirectedGraphNode(N nodeValue) {
False,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,470,"ublic LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,"
True,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java,410,"LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,20,import com.google.common.base.Predicate;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,21,import com.google.common.base.Predicates;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,25,import java.util.Collection;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,26,import java.util.Collections;
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,46,"ublic GraphEdge<N, E> connect(N srcValue, E edgeValue, N destValue) {"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,47,"ndiGraphNode<N, E> node = getUndirectedGraphNode(srcValue);"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,48,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,49,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,50,"rcValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,52,"inkedUndirectedGraphNode<N, E> src ="
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,53,"LinkedUndirectedGraphNode<N, E>) node;"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,54,ode = getUndirectedGraphNode(destValue);
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,55,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,56,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,57,"estValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,59,"inkedUndirectedGraphNode<N, E> dest ="
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,60,"LinkedUndirectedGraphNode<N, E>) node;"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,50,"public void connect(N srcValue, E edgeValue, N destValue) {"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,51,"LinkedUndirectedGraphNode<N, E> src = getNodeOrFail(srcValue);"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,52,"LinkedUndirectedGraphNode<N, E> dest = getNodeOrFail(destValue);"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,65,eturn edge;
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,70,"ndiGraphNode<N, E> node = getUndirectedGraphNode(srcValue);"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,71,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,72,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,73,"rcValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,75,"inkedUndirectedGraphNode<N, E> src ="
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,76,"LinkedUndirectedGraphNode<N, E>) node;"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,77,ode = getUndirectedGraphNode(destValue);
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,78,f (node == null) {
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,79,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,80,"estValue + "" does not exist in graph"");"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,82,"inkedUndirectedGraphNode<N, E> dest ="
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,83,"LinkedUndirectedGraphNode<N, E>) node;"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,85,"or (UndiGraphEdge<N, E> edge :"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,61,"LinkedUndirectedGraphNode<N, E> src = getNodeOrFail(srcValue);"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,62,"LinkedUndirectedGraphNode<N, E> dest = getNodeOrFail(destValue);"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,63,"for (UndiGraphEdge<N, E> edge :"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,147,"ublic List<UndiGraphNode<N, E>> getUndirectedGraphNodes() {"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,148,"ist<UndiGraphNode<N, E>> nodeList = Lists.newArrayList();"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,149,odeList.addAll(nodes.values());
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,150,eturn nodeList;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,125,"public Collection<UndiGraphNode<N, E>> getUndirectedGraphNodes() {"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,126,"return Collections.<UndiGraphNode<N, E>>unmodifiableCollection("
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,127,nodes.values());
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,160,"ist<GraphEdge<N, E>> result = Lists.newArrayList();"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,161,"esult.addAll(getUndirectedGraphEdges(n1, n2));"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,162,eturn result;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,137,"return Collections.<GraphEdge<N, E>>unmodifiableList("
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,138,"getUndirectedGraphEdges(n1, n2));"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,148,"return isConnected(n1, Predicates.<E>alwaysTrue(), n2);"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,151,@Override
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,152,"public boolean isConnected(N n1, E e, N n2) {"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,153,"return isConnected(n1, Predicates.<E>equalTo(e), n2);"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,156,"private boolean isConnected(N n1, Predicate<E> edgePredicate, N n2) {"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,183,eturn true;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,168,if (edgePredicate.apply(outEdge.getValue())) {
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,169,return true;
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,223,"ublic List<GraphNode<N, E>> getNodes() {"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,224,"ist<GraphNode<N, E>> list = Lists.newArrayList();"
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,225,ist.addAll(nodes.values());
False,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,226,eturn list;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,210,"public Collection<GraphNode<N, E>> getNodes() {"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,211,"return Collections.<GraphNode<N, E>> unmodifiableCollection(nodes.values());"
True,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,19,import java.util.Collection;
False,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,29,"bstract List<UndiGraphNode<N, E>> getUndirectedGraphNodes();"
True,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,31,* Gets an immutable collection of all the nodes in this graph.
True,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,33,"abstract Collection<UndiGraphNode<N, E>> getUndirectedGraphNodes();"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,42,import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,62,his.parameters = parameters;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,63,his.returnType = returnType;
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,65,this.parameters = parameters == null ?
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,66,registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,67,parameters;
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,68,this.returnType = returnType == null ?
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,69,getNativeType(UNKNOWN_TYPE) : returnType;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,75,"/ If the return type is null, this is equivalent to unknown so we do not"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,76,/ base our decision on that.
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,77,f (this.returnType != null &&
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,78,hat.returnType != null &&
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,79,this.returnType.isSubtype(that.returnType)) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,81,if (!this.returnType.isSubtype(that.returnType)) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,87,"/ If the parameter list is null, this is equivalent of ?... so we do not"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,88,/ base our decision on that.
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,89,f (this.parameters != null && that.parameters != null) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,90,ode thisParam = parameters.getFirstChild();
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,91,ode thatParam = that.parameters.getFirstChild();
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,92,hile (thisParam != null && thatParam != null) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,93,SType thisParamType = thisParam.getJSType();
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,94,f (thisParamType != null) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,95,SType thatParamType = thatParam.getJSType();
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,96,f (thatParamType == null ||
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,97,thatParamType.isSubtype(thisParamType)) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,98,eturn false;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,101,oolean thisIsVarArgs = thisParam.isVarArgs();
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,102,oolean thatIsVarArgs = thatParam.isVarArgs();
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,103,/ don't advance if we have variable arguments
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,104,f (!thisIsVarArgs) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,105,hisParam = thisParam.getNext();
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,107,f (!thatIsVarArgs) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,108,hatParam = thatParam.getNext();
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,110,/ both var_args indicates the end
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,111,f (thisIsVarArgs && thatIsVarArgs) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,112,hisParam = null;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,113,hatParam = null;
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,88,Node thisParam = parameters.getFirstChild();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,89,Node thatParam = that.parameters.getFirstChild();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,90,while (thisParam != null && thatParam != null) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,91,JSType thisParamType = thisParam.getJSType();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,92,if (thisParamType != null) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,93,JSType thatParamType = thatParam.getJSType();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,94,if (thatParamType == null ||
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,95,!thatParamType.isSubtype(thisParamType)) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,96,return false;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,117,"/ Right now, the parser's type system doesn't have a good way"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,118,/ to model optional arguments.
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,120,/ Suppose we have
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,121,"/ function f(number, number) {}"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,122,/ function g(number) {}
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,123,"/ If the second arg of f is optional, then f is a subtype of g,"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,124,/ but g is not a subtype of f.
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,125,"/ If the second arg of f is required, then g is a subtype of f,"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,126,/ but f is not a subtype of g.
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,128,"/ Until we model optional params, let's just punt on this."
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,129,"/ If one type has more arguments than the other, we won't check them."
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,131,"/ NOTE(nicksantos): This is described in Draft 2 of the ES4 spec,"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,132,/ Section 3.4.6: Subtyping Function Types. It seems really
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,133,/ strange but I haven't thought a lot about the implementation.
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,99,boolean thisIsVarArgs = thisParam.isVarArgs();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,100,boolean thatIsVarArgs = thatParam.isVarArgs();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,101,// don't advance if we have variable arguments
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,102,if (!thisIsVarArgs) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,103,thisParam = thisParam.getNext();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,105,if (!thatIsVarArgs) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,106,thatParam = thatParam.getNext();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,108,// both var_args indicates the end
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,109,if (thisIsVarArgs && thatIsVarArgs) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,110,thisParam = null;
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,111,thatParam = null;
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,115,"// Right now, the parser's type system doesn't have a good way"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,116,// to model optional arguments.
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,118,// Suppose we have
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,119,"// function f(number, number) {}"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,120,// function g(number) {}
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,121,"// If the second arg of f is optional, then f is a subtype of g,"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,122,// but g is not a subtype of f.
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,123,"// If the second arg of f is required, then g is a subtype of f,"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,124,// but f is not a subtype of g.
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,126,"// Until we model optional params, let's just punt on this."
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,127,"// If one type has more arguments than the other, we won't check them."
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,129,"// NOTE(nicksantos): This is described in Draft 2 of the ES4 spec,"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,130,// Section 3.4.6: Subtyping Function Types. It seems really
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,131,// strange but I haven't thought a lot about the implementation.
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,146,"/ if both return types are specified, then they should be equal"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,147,f (returnType == null) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,148,f (that.returnType != null) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,149,eturn false;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,151, else {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,152,f (that.returnType == null) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,153,eturn false;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,155,f (!returnType.equals(that.returnType)) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,156,eturn false;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,159,"/ if both types include parameters, the lists should be the same"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,160,f (parameters == null) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,161,eturn that.parameters == null;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,162, else if (that.parameters == null) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,142,if (!returnType.equals(that.returnType)) {
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,36,private CommandLineRunner lastCommandLineRunner = null;
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,325,public void testSourceMapExpansion1() {
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,326,"args.add(""--create_source_map=%outname%.map"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,327,"testSame(""var x = 3;"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,328,"assertEquals(""/path/to/out.js.map"","
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,329,lastCommandLineRunner.expandSourceMapPath(
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,330,"lastCompiler.getOptions(), null));"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,333,public void testSourceMapExpansion2() {
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,334,useModules = true;
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,335,"args.add(""--create_source_map=%outname%.map"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,336,"args.add(""--module_output_path_prefix=foo"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,337,"testSame(new String[] {""var x = 3;"", ""var y = 5;""});"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,338,"assertEquals(""foo.map"","
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,339,lastCommandLineRunner.expandSourceMapPath(
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,340,"lastCompiler.getOptions(), null));"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,343,public void testSourceMapExpansion3() {
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,344,useModules = true;
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,345,"args.add(""--create_source_map=%outname%.map"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,346,"args.add(""--module_output_path_prefix=foo_"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,347,"testSame(new String[] {""var x = 3;"", ""var y = 5;""});"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,348,"assertEquals(""foo_m0.js.map"","
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,349,lastCommandLineRunner.expandSourceMapPath(
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,350,"lastCompiler.getOptions(),"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,351,lastCompiler.getModuleGraph().getRootModule()));
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,434,"args.add(""--js_output_file"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,435,"args.add(""/path/to/out.js"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,437,for (int i = 0; i < original.length; i++) {
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,438,"args.add(""--js"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,439,"args.add(""/path/to/input"" + i + "".js"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,440,if (useModules) {
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,441,"args.add(""--module"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,442,"args.add(""mod"" + i + "":1"" + (i > 0 ? ("":mod"" + (i - 1)) : """"));"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,449,lastCommandLineRunner = runner;
False,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,1321,"ist<DiGraphNode<Node, Branch>> cfgNodes = cfg.getDirectedGraphNodes();"
True,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,1321,"List<DiGraphNode<Node, Branch>> cfgNodes ="
True,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,1322,Lists.newArrayList(cfg.getDirectedGraphNodes());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,3,* ***** BEGIN LICENSE BLOCK *****
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,4,* Version: MPL 1.1/GPL 2.0
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,6,* The contents of this file are subject to the Mozilla Public License Version
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,7,"* 1.1 (the ""License""); you may not use this file except in compliance with"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,8,* the License. You may obtain a copy of the License at
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,9,* http://www.mozilla.org/MPL/
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,11,"* Software distributed under the License is distributed on an ""AS IS"" basis,"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,12,"* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,13,* for the specific language governing rights and limitations under the
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,14,* License.
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,16,"* The Original Code is Rhino code, released"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,17,"* May 6, 1999."
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,19,* The Initial Developer of the Original Code is
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,20,* Netscape Communications Corporation.
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,21,* Portions created by the Initial Developer are Copyright (C) 1997-1999
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,22,* the Initial Developer. All Rights Reserved.
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,24,* Contributor(s):
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,25,*   Nick Santos
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,27,"* Alternatively, the contents of this file may be used under the terms of"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,28,"* the GNU General Public License Version 2 or later (the ""GPL""), in which"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,29,* case the provisions of the GPL are applicable instead of those above. If
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,30,* you wish to allow use of your version of this file only under the terms of
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,31,* the GPL and not to allow others to use your version of this file under the
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,32,"* MPL, indicate your decision by deleting the provisions above and replacing"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,33,* them with the notice and other provisions required by the GPL. If you do
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,34,"* not delete the provisions above, a recipient may use your version of this"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,35,* file under either the MPL or the GPL.
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,37,* ***** END LICENSE BLOCK ***** */
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,39,package com.google.javascript.rhino.jstype;
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,41,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,42,import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,46,* Tests for FunctionTypes.
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,47,* @author nicksantos@google.com (Nick Santos)
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,49,public class FunctionTypeTest extends BaseJSTypeTestCase {
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,50,public void testDefaultReturnType() {
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,51,FunctionType f = new FunctionBuilder(registry).build();
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,52,"assertEquals(UNKNOWN_TYPE, f.getReturnType());"

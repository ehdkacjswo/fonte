is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,3, Copyright (c) 2003-2004 The Apache Software Foundation. All rights reserved.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,5," Licensed under the Apache License, Version 2.0 (the ""License""); you may not"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,6, use this file except in compliance with the License. You may obtain a copy
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,7, of the License at
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,9, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,12," distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,13," WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,14, License for the specific language governing permissions and limitations
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,15, under the License.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,18,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,21,mport java.util.Arrays;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,23,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,26," Represents a <a href=""http://mathworld.wolfram.com/CubicSpline.html"">cubic spline function</a>."
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,27, Arguments outside of the domain determined by the x values array passed to the constructor
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,28, cause an IllegalArgumentException.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,30, @version $Revision: 1.13 $ $Date: 2004/02/20 06:22:39 $
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,32,"ublic class CubicSplineFunction implements UnivariateRealFunction, Serializable {"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,33,** Spline segment interval delimiters. Size is N+1 for N segments. */
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,34,rivate double xval[];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,37, The spline segment's polynominal coefficients.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,38," The first index runs over the intervals, size is N."
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,39," The second index adresses the coefficients in the segment, with"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,40, index 0 being the absolute coefficient and index 3 the coefficient
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,41, for the third power.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,42, The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,44,rivate double c[][];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,47, Construct a function with the given segment delimiters and polynomial
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,48, coefficients.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,49, @param xval Spline segment interval delimiters
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,50, @param c spline segment's polynominal coefficients
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,52,"ublic CubicSplineFunction(double xval[], double c[][]) {"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,53,uper();
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,54,"/ TODO: should copy the arguments here, for safety. This could be a major overhead."
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,55,"/ Should also verify that xval[] is in correct order, and arrays have correct lengths"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,56,his.xval = xval;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,57,his.c = c;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,61, Compute the value for the function.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,62, @param x the point for which the function value should be computed
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,63, @return the value
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,64, @throws MathException if the function couldn't be computed due to
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,65,  missing additional data or other environmental problems.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,66, @see UnivariateRealFunction#value(double)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,68,ublic double value(double x) throws MathException {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,69,f (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,70,"hrow new IllegalArgumentException(""Argument outside domain"");"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,72,"nt i = Arrays.binarySearch(xval, x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,73,f (i < 0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,74, = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,76, = x - xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,77,eturn ((c[i][3] * x + c[i][2]) * x + c[i][1]) * x + c[i][0];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,81, Compute the value for the first derivative of the function.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,82, @param x the point for which the first derivative should be computed
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,83, @return the value
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,84, @throws MathException if the derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,86,ublic double firstDerivative(double x) throws MathException {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,87,f (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,88,"hrow new IllegalArgumentException(""Argument outside domain"");"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,90,"nt i = Arrays.binarySearch(xval, x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,91,f (i < 0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,92, = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,94, = x - xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,95,eturn (3 * c[i][3] * x + 2 * c[i][2]) * x + c[i][1];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,99, Compute the value for the second derivative of the function.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,100, It is recommended to provide this method only if the second derivative is
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,101, analytical. Numerical derivatives may be acceptable in some cases.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,102, An implementation should throw an UnsupportedOperationException if
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,103, this method is not implemented.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,104, @param x the point for which the first derivative should be computed
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,105, @return the value
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,106, @throws MathException if the second derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,108,ublic double secondDerivative(double x) throws MathException {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,109,f (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,110,"hrow new IllegalArgumentException(""Argument outside domain"");"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,112,"nt i = Arrays.binarySearch(xval, x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,113,f (i < 0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,114, = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,116, = x - xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,117,eturn 6 * c[i][3] * x + 2 * c[i][2];

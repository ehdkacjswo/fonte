is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,25,ublic abstract class AbstractComplexFormatTest extends TestCase {
True,src/test/org/apache/commons/math/complex/AbstractComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,25,public abstract class ComplexFormatAbstractTest extends TestCase {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,19,mport java.text.NumberFormat;
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,20,mport java.text.ParseException;
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,19,import java.util.Locale;
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,24,ublic class ComplexFormatTest extends TestCase {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,26,omplexFormat complexFormat = null;
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,27,omplexFormat complexFormatJ = null;
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,29,ublic ComplexFormatTest(String name) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,30,uper( name );
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,33,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,34,omplexFormat = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,35,"omplexFormatJ = new ComplexFormat(""j"");"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,38,ublic void testSimpleNoDecimals() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,39,"omplex c = new Complex(1, 1);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,40,"tring expected = ""1 + 1i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,41,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,42,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,45,ublic void testSimpleWithDecimals() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,46,"omplex c = new Complex(1.23, 1.43);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,47,"tring expected = ""1.23 + 1.43i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,48,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,49,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,52,ublic void testSimpleWithDecimalsTrunc() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,53,"omplex c = new Complex(1.2323, 1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,54,"tring expected = ""1.23 + 1.43i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,55,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,56,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,59,ublic void testNegativeReal() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,60,"omplex c = new Complex(-1.2323, 1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,61,"tring expected = ""-1.23 + 1.43i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,62,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,63,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,66,ublic void testNegativeImaginary() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,67,"omplex c = new Complex(1.2323, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,68,"tring expected = ""1.23 - 1.43i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,69,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,70,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,73,ublic void testNegativeBoth() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,74,"omplex c = new Complex(-1.2323, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,75,"tring expected = ""-1.23 - 1.43i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,76,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,77,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,80,ublic void testZeroReal() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,81,"omplex c = new Complex(0.0, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,82,"tring expected = ""0 - 1.43i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,83,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,84,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,87,ublic void testZeroImaginary() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,88,"omplex c = new Complex(30.233, 0);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,89,"tring expected = ""30.23"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,90,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,91,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,94,ublic void testDifferentImaginaryChar() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,95,"omplex c = new Complex(1, 1);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,96,"tring expected = ""1 + 1j"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,97,tring actual = complexFormatJ.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,98,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,101,ublic void testStaticFormatComplex() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,102,"omplex c = new Complex(232.222, -342.33);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,103,"tring expected = ""232.22 - 342.33i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,104,tring actual = ComplexFormat.formatComplex(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,105,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,108,ublic void testNan() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,109,"omplex c = new Complex(Double.NaN, Double.NaN);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,110,"tring expected = ""(NaN) + (NaN)i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,111,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,112,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,115,ublic void testPositiveInfinity() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,116,"omplex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,117,"tring expected = ""(Infinity) + (Infinity)i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,118,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,119,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,122,ublic void testNegativeInfinity() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,123,"omplex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,124,"tring expected = ""(-Infinity) - (Infinity)i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,125,tring actual = complexFormat.format(c);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,126,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,129,ublic void testParseSimpleNoDecimals() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,130,"tring source = ""1 + 1i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,131,"omplex expected = new Complex(1, 1);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,132,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,133,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,134,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,135, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,136,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,140,ublic void testParseSimpleWithDecimals() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,141,"tring source = ""1.23 + 1.43i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,142,"omplex expected = new Complex(1.23, 1.43);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,143,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,144,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,145,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,146, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,147,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,151,ublic void testParseSimpleWithDecimalsTrunc() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,152,"tring source = ""1.2323 + 1.4343i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,153,"omplex expected = new Complex(1.2323, 1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,154,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,155,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,156,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,157, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,158,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,162,ublic void testParseNegativeReal() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,163,"tring source = ""-1.2323 + 1.4343i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,164,"omplex expected = new Complex(-1.2323, 1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,165,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,166,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,167,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,168, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,169,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,173,ublic void testParseNegativeImaginary() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,174,"tring source = ""1.2323 - 1.4343i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,175,"omplex expected = new Complex(1.2323, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,176,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,177,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,178,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,179, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,180,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,184,ublic void testParseNegativeBoth() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,185,"tring source = ""-1.2323 - 1.4343i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,186,"omplex expected = new Complex(-1.2323, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,187,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,188,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,189,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,190, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,191,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,195,ublic void testParseZeroReal() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,196,"tring source = ""0.0 - 1.4343i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,197,"omplex expected = new Complex(0.0, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,198,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,199,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,200,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,201, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,202,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,206,ublic void testParseZeroImaginary() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,207,"tring source = ""-1.2323"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,208,"omplex expected = new Complex(-1.2323, 0);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,209,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,210,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,211,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,212, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,213,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,217,ublic void testParseDifferentImaginaryChar() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,218,"tring source = ""-1.2323 - 1.4343j"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,219,"omplex expected = new Complex(-1.2323, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,220,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,221,omplex actual = (Complex)complexFormatJ.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,222,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,223, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,224,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,228,ublic void testParseNan() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,229,"tring source = ""(NaN) + (NaN)i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,230,"omplex expected = new Complex(Double.NaN, Double.NaN);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,231,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,232,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,233,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,234, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,235,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,239,ublic void testParsePositiveInfinity() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,240,"tring source = ""(Infinity) + (Infinity)i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,241,"omplex expected = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,242,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,243,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,244,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,245, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,246,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,250,ublic void testPaseNegativeInfinity() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,251,"tring source = ""(-Infinity) - (Infinity)i"";"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,252,"omplex expected = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,253,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,254,omplex actual = (Complex)complexFormat.parseObject(source);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,255,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,256, catch (ParseException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,257,ail(ex.getMessage());
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,261,ublic void testConstructorSingleFormat() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,262,umberFormat nf = NumberFormat.getInstance();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,263,omplexFormat cf = new ComplexFormat(nf);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,264,ssertNotNull(cf);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,265,"ssertEquals(nf, cf.getRealFormat());"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,268,ublic void testGetImaginaryFormat() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,269,umberFormat nf = NumberFormat.getInstance();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,270,omplexFormat cf = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,272,"ssertNotSame(nf, cf.getImaginaryFormat());"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,273,f.setImaginaryFormat(nf);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,274,"ssertSame(nf, cf.getImaginaryFormat());"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,277,ublic void testSetImaginaryFormatNull() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,278,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,279,omplexFormat cf = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,280,f.setImaginaryFormat(null);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,281,ail();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,282, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,283,/ success
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,287,ublic void testSetRealFormatNull() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,288,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,289,omplexFormat cf = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,290,f.setRealFormat(null);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,291,ail();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,292, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,293,/ success
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,297,ublic void testGetRealFormat() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,298,umberFormat nf = NumberFormat.getInstance();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,299,omplexFormat cf = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,301,"ssertNotSame(nf, cf.getRealFormat());"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,302,f.setRealFormat(nf);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,303,"ssertSame(nf, cf.getRealFormat());"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,306,ublic void testSetImaginaryCharacterNull() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,307,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,308,omplexFormat cf = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,309,f.setImaginaryCharacter(null);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,310,ail();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,311, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,312,/ success
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,316,ublic void testSetImaginaryCharacterEmpty() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,317,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,318,omplexFormat cf = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,319,"f.setImaginaryCharacter("""");"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,320,ail();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,321, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,322,/ success
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,326,ublic void testFormatNumber() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,327,omplexFormat cf = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,328,ouble pi = new Double(Math.PI);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,329,tring text = cf.format(pi);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,330,"ssertEquals(""3.14"", text);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,22,public class ComplexFormatTest extends ComplexFormatAbstractTest {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,23,protected char getDecimalCharacter() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,24,return '.';
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,333,ublic void testFormatObject() {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,334,ry {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,335,omplexFormat cf = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,336,bject object = new Object();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,337,f.format(object);
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,338,ail();
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,339, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,340,/ success
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,27,protected Locale getLocale() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,28,return Locale.US;
False,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,22,ublic class FrenchComplexFormatTest extends AbstractComplexFormatTest {
True,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,src/test/org/apache/commons/math/complex/FrenchComplexFormatTest.java,22,public class FrenchComplexFormatTest extends ComplexFormatAbstractTest {

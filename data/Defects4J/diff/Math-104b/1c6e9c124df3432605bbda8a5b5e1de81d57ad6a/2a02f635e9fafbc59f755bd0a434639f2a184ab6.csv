is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,5,* reserved.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,9,* are met:
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,56,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,57,import org.apache.commons.beanutils.PropertyUtils;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,60,* Uses PropertyUtils to map a Bean getter to a double value.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,62,* @author Mark Diggory
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,64,public class BeanTransformer implements NumberTransformer {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,67,* The propertyName for this Transformer
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,69,private String propertyName;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,72,* Create a BeanTransformer
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,74,public BeanTransformer() {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,75,super();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,79,* Create a BeanTransformer with a specific PropertyName.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,80,* @param propertyName The property.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,82,public BeanTransformer(String propertyName) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,83,this.propertyName = propertyName;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,87,* @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,89,public double transform(Object o) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,90,double d = Double.NaN;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,91,try {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,92,d =
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,93,"((Number) PropertyUtils.getProperty(o, propertyName))"
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,94,.doubleValue();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,95,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,96,e.printStackTrace();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,97,} catch (InvocationTargetException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,98,e.printStackTrace();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,99,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,100,e.printStackTrace();
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,102,return d;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,106,* Get the property String
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,107,* @return the Property Name String
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,109,public String getPropertyName() {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,110,return propertyName;
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,114,* Set the propertyString
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,115,* @param string The string to set the property to.
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,117,public void setPropertyName(String string) {
True,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,118,propertyName = string;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,170,"rivate double evaluate(int n, double x, double[][] a, double[][] an,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,171,"ouble[][] f, double epsilon, int maxIterations) {"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,170,private double evaluate(
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,171,"int n,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,172,"double x,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,173,"double[][] a,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,174,"double[][] an,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,"double[][] f,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,176,"double epsilon,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,177,int maxIterations) {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,187,f (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,188,ath.abs(epsilon * f[1][0] * f[1][1])) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,193,if (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1]))
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,194,< Math.abs(epsilon * f[1][0] * f[1][1])) {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,196,"et = evaluate(n + 1, x, f /* new a */, an /* reuse an */,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,197," /* new f */, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,202,"ret = evaluate(n + 1, x, f /* new a */"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,203,", an /* reuse an */"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,204,", a /* new f */"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,205,", epsilon, maxIterations);"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,5,* reserved.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,9,* are met:
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,57,* A Default NumberTransformer for java.lang.Numbers and Numeric Strings.
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,58,* @author Mark Diggory
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,60,public class DefaultTransformer implements NumberTransformer {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,63,* @see org.apache.commons.collections.Transformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,65,public double transform(Object o) {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,66,double d = Double.NaN;
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,68,if (o instanceof Number) {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,69,return ((Number) o).doubleValue();
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,70,} else {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,71,try {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,72,d = Double.parseDouble(o.toString());
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,73,} catch (Exception e) {
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,74,e.printStackTrace();
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,77,return d;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,5, reserved.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,9, are met:
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,17,    distribution.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,20,"    any, must include the following acknowlegement:"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,58, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,59, Provides an implementation of the DoubleArray with a maximum number of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,60, elements.  Creating an array implementation with an upper limit on the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,61," number of elements allows us to support a more efficient ""rolling"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,62, mechanism to support addElementRoling(double). Please note that this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,63, implementation will not preserve the order of the values supplied to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,64," this array, calling getValues() will return an array of indeterminate"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,65, order.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,66, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,68, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,69, Values are added to this array by calling addElement(double) or
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,70, addElementRolling(double).  If addElement(double) is called on
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,71," an array that already contains the maximum number of elements, an"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,72, ArrayIndexOutOfBoundsException will be thrown to reflect an attempt to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,73, add a value beyond the boundaries of the fixed length array - in this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,74," respect a FixedDoubleArray can be considered ""full"".  Calling"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,75, addElementRolling(double) on an array which contains the maximum
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,76," number of elements will cause the array to overwrite the ""oldest"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,77, value in the array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,78, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,80, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,81, This class is called FixedDoubleArray not because it is of a fixed size.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,82, The name is appropriate because the internal storage array remains
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,83," ""fixed"" in memory, this implementation will never allocate, or copy"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,84, the internal storage array to a new array instance.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,85, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,87," @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,89,ublic class FixedDoubleArray implements DoubleArray {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,91,/ This is the internal storage array.  This array is assigned
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,92,/ a known fixed size in the constructor.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,93,ouble[] internalArray;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,95,/ Size determined the number of elements in the array at
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,96,/ any given time. When an array is created is maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,97,"/ of 100, it is of size 0, and size increases as values are"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,98,/ added.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,99,nt size = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,101,/ This index points to the location of the next update.  Next
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,102,"/ add, cycles from 0 to (maxElement-1)"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,103,nt nextAdd = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,105,/ The maximum number of elements in the FixedDoubleArray
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,106,nt maxElements = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,109, Create a fixed array for double primitives which can hold up to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,110, <code>maxElements</codec> doubles.  This implementation of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,111," DoubleArray was created to provide a more ""performance-oriented"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,112, in-place rolling mechanism for calculations which need to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,113, operate on a rolling window of values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,115, @param maxElements the maximum number of elements this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,116,        FixeddoubleArray may contain.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,118,ublic FixedDoubleArray(int maxElements) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,119,his.maxElements = maxElements;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,120,nternalArray = new double[maxElements];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,124, Create a fixed array backed by the provided double[] implementation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,125, the array should have all the elements occupied. the size and maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,126, are drawn from the array's length.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,128, This implementation of DoubleArray was created to provide a more
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,129," ""performance-oriented"" in-place rolling mechanism for calculations"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,130, which need to operate on a rolling window of values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,131, @param array the backing array
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,133,ublic FixedDoubleArray(double[] array) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,134,his.maxElements = array.length;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,135,his.size = array.length;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,136,nternalArray = array;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,140, Retrieves the current size of the array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,141, @see org.apache.commons.math.DoubleArray#getNumElements()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,143,ublic int getNumElements() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,144,eturn size;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,148, Returns the element value at the specified index.  Please note that
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,149, the size of the element array is not directly related to the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,150, maximum number of elements which this array can contain.  One can
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,151, create an instance of FixedDoubleArray with a maximum of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,152," ten elements, add three items, and get any items from index 0 to index"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,153, 2 - trying to retrieve an element outside of the current element
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,154, array will throw an ArrayIndexOutOfBoundsException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,156, @see org.apache.commons.math.DoubleArray#getElement(int)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,158,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,159,f (index > (size-1)) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,160,"tring msg = ""Attempted to retrieve an element outside of "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,161,"the element array"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,162,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,163, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,164,"/ Return the element requested, if the index supplied"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,165,/ is negative this statement may also throw an
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,166,/ ArrayIndexOutOfBoundException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,167,eturn internalArray[index];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,172, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,173, Sets the element at the specified index to the value supplied.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,174, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,176, <p>Implementation Notes:
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,177, <ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,178,  This implementation will not expand the array to the specified
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,179,  size.  Unlike the expandable double array implementation calling
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,180,"  setElement(10, 3.0) on an array with 5 elements will throw an"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,181,  ArrayIndexOutOfBoundsException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,182, </ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,183, <ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,184,  The number of elements in an array corresponds to the number
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,185,  of elements that have been added to this FixedDoubleArray.  This
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,186,  is not the same as the maximum number of elements which can be
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,187,  contained in this array.  A FixedDoubleArray instance can be
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,188,"  created with a maximum upper limit of 10 elements, until 10"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,189,"  elements have been added to this array, the size of the array"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,190,  reflects the number of elements added.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,191, </ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,192, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,194," @see org.apache.commons.math.DoubleArray#setElement(int, double)"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,196,"ublic void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,197,f (index > (size-1)) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,198,"tring msg = ""Attempted to set an element outside of"" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,199,"the element array"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,200,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,201, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,202,nternalArray[index] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,207," Add an element to the current array, testing to see if"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,208, this array has already met or exceeded the maximum number
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,209, of elements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,211, @see org.apache.commons.math.DoubleArray#addElement(double)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,213,ublic void addElement(double value) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,214,f (size < internalArray.length) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,215,ize++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,217,nternalArray[nextAdd] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,219,/ Incremenet nextAdd and then modulo it against maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,220,"/ this has the effect of repeatedly ""cycling"" nextAdd"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,221,/ between 0 and (maxElements-1) endlessly.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,222,extAdd++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,223,extAdd = nextAdd % (maxElements);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,225, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,226,"/ If the array has ALREADY reached the maximum size allowable,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,227,/ we throw an ArrayIndexOutOfBoundsException - the end-user
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,228,/ is trying to add an element beyond the boundaries of the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,229,/ fixed array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,230,"tring msg = ""Attempted to add a value to an array of fixed "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,231,"size, please use addElementRolling to avoid this exception"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,232,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,237, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,238," Adds an element by ""rolling"" the new value into the current array"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,239, while discarding the element which was added <code>maxElement</code>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,240, add operations ago.  The value replaced is returned from this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,241," method.  Until an array contains the maximum number of element, this"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,242, method has the same result as the addElement(double) operation.  Once
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,243, the maximum number of elements has been reached this implementation
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,244, inserts the new values starting at index 0 of the internal storage
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,245," array.  This allows for efficient rolling, but prevents us from"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,246, preserving the order of the added values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,247, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,249, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,250, <b>Note:</b> This function will return <code>Double.NaN</code> if
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,251, no value has been discarded in this roll.  This can happen when
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,252, the array has not met the size limitation introduced in the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,253, constructor.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,254, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,256," @return Returns the value which a has been ""removed"" from the"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,257,         database.  <b>Important:</b> If the element array has
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,258,"         not reached the maximum size, then it is possible that"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,259,         no element will be discarded from a given roll.  In this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,260,         case this method will return a <code>Double.NaN</code> value.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,262, @see org.apache.commons.math.DoubleArray#addElementRolling(double)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,264,ublic double addElementRolling(double value) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,266,/ Create the discarded primitive.  If no element is
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,267,"/ discarded by this roll, this method will return a"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,268,/ Double.NaN value.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,269,ouble discarded = Double.NaN;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,271,f (size < internalArray.length) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,272,ize++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,273, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,274,/ If we've reached the length of the internal
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,275,"/ storage array, we have to start ""discarding"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,276,/ values from the original array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,278,/ Obtain the value discarded by this overwrite
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,279,iscarded = internalArray[nextAdd];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,282,nternalArray[nextAdd] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,284,/ nextAdd cycles between 0 and (maxElements-1).
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,285,extAdd++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,286,extAdd = nextAdd % maxElements;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,288,"/ but we return the value which was ""replaced"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,289,eturn (discarded);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,293, Provides an array of double[] which contain the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,294, number of elements added to this array.  This
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,295, method will return an array from zero to maxElements in length.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,297, @return The array of elements added to this DoubleArray
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,298,         implementation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,299, @see org.apache.commons.math.DoubleArray#getElements()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,301,ublic double[] getElements() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,302,ouble[] copy = new double[size];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,303,"ystem.arraycopy(internalArray, 0, copy, 0, size);"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,304,eturn copy;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,308, Clear the array - drop all the data and start with a blank
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,309, internal array.  This implementation takes care of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,310," setting the size of the array back to zero, and reinitializing"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,311, the internal storage array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,313, @see org.apache.commons.math.DoubleArray#clear()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,315,ublic void clear() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,316,ize = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,317,extAdd = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,318,nternalArray = new double[maxElements];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,322, This method is not implemented in this implemetnation of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,323, DoubleArray.  Until the size of the element array meets the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,324, maxElements condition introduced in the constructor this is
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,325, a regular array.  When the size of the array is at a maximum
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,326, this array starts to function more as a circular list of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,327," double primitives.  In a circular ""rolling"" data structure it"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,328," make little sense to allow people to ""drop"" objects from the"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,329," ""front""."
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,331, @param i number of elements to discard.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,333, @see org.apache.commons.math.DoubleArray#discardFrontElements(int)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,335,ublic void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,336,"/ TODO: AH! implemented there is not concept of ""front"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,337,/ in an array that discards values when rolling.....  anyone?
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,338,"tring msg = ""Discarding front element not supported in "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,339,"FixedDoubleArray"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,340,hrow new RuntimeException(msg);
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,5,* reserved.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,9,* are met:
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,57,* Subclasses implementing this interface can transform Objects to doubles.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,59,* @author Mark Diggory
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,61,public interface NumberTransformer {
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,64,* Implementing this interface provides a facility to transform
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,65,* from Object to Double.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,67,* @param o the Object to be transformed.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,68,* @return the double value of the Object.
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,70,double transform(Object o);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,5,* reserved.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,9,* are met:
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,17,*    distribution.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,54,package org.apache.commons.math.util;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,56,import java.util.Collection;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,57,import java.util.HashMap;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,58,import java.util.Map;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,59,import java.util.Set;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,62,* This TansformerMap automates the transformation of of mixed object types.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,63,* It provides a means to set NumberTransformers that will be selected
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,64,* based on the Class of the object handed to the Maps
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,65,* <code>double transform(Object o)</code> method.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,67,* @author Mark Diggory
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,69,public class TransformerMap implements NumberTransformer {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,72,* A default Number Transformer for Numbers and numeric Strings.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,74,private NumberTransformer defaultTransformer = null;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,77,* The internal Map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,79,private Map map = null;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,84,public TransformerMap() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,85,map = new HashMap();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,86,defaultTransformer = new DefaultTransformer();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,90,* Tests if a Class is present in the TransformerMap.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,91,* @param key Class to check
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,92,* @return true|false
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,94,public boolean containsClass(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,95,return map.containsKey(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,99,* Tests if a NumberTransformer is present in the TransformerMap.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,100,* @param value NumberTransformer to check
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,101,* @return true|false
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,103,public boolean containsTransformer(NumberTransformer value) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,104,return map.containsValue(value);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,108,* Returns the Transformer that is mapped to a class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,109,"* if mapping is not present, this returns null."
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,110,* @param key The Class of the object
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,111,* @return the mapped NumberTransformer or null.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,113,public NumberTransformer getTransformer(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,114,return (NumberTransformer) map.get(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,118,* Sets a Class to Transformer Mapping in the Map. If
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,119,"* the Class is already present, this overwrites that"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,120,* mapping.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,121,* @param key The Class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,122,* @param transformer The NumberTransformer
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,123,* @return the replaced transformer if one is present
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,125,"public Object putTransformer(Class key, NumberTransformer transformer) {"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,126,"return map.put(key, transformer);"
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,130,* Removes a Class to Transformer Mapping in the Map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,131,* @param key The Class
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,132,* @return the removed transformer if one is present or
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,133,* null if none was present.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,135,public Object removeTransformer(Class key) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,136,return map.remove(key);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,140,* Clears all the Class to Transformer mappings.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,142,public void clear() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,143,map.clear();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,147,* Returns the Set of Classes used as keys in the map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,148,* @return Set of Classes
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,150,public Set classes() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,151,return map.keySet();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,155,* Returns the Set of NumberTransformers used as values
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,156,* in the map.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,157,* @return Set of NumberTransformers
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,159,public Collection transformers() {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,160,return map.values();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,164,* Attempts to transform the Object against the map of
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,165,* NumberTransformers. Otherwise it returns Double.NaN.
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,167,* @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,169,public double transform(Object o) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,170,double value = Double.NaN;
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,172,try {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,173,if (o instanceof Number || o instanceof String) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,174,value = defaultTransformer.transform(o);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,175,} else {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,176,NumberTransformer trans =
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,177,(NumberTransformer) this.getTransformer(o.getClass());
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,178,if (trans != null) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,179,value = trans.transform(o);
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,182,} catch (Exception e) {
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,183,e.printStackTrace();
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,186,return value;

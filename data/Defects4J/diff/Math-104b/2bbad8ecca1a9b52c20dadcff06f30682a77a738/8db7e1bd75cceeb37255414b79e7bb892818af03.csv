is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,309,nternalArray[startIndex + (numElements -1)] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,309,internalArray[startIndex + (numElements - 1)] = value;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,368,or( int i = startIndex + 1; i < numElements; i++) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,368,for( int i = startIndex + 1; i < (numElements + startIndex); i++) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,383,or( int i = startIndex + 1; i < numElements; i++) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,383,for( int i = startIndex + 1; i < (numElements + startIndex); i++) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,5,* reserved.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,9,* are met:
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,17,*    distribution.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,56,import java.util.NoSuchElementException;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,59,* Provides a fixed size implementation of the DoubleArray with
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,60,"* support to true ""rolling"" functionality.  If a program attempts to add"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,61,* a value to a fixed array which has reach a maximum number of
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,62,* elements a ArrayIndexOutOfBoundsException will be thrown.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,64,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,66,public class FixedDoubleArray implements DoubleArray {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,68,double[] internalArray;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,70,int size = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,71,int nextAdd = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,72,int maxElements = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,74,public FixedDoubleArray(int maxElements) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,75,this.maxElements = maxElements;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,76,internalArray = new double[maxElements];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,79,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,80,* @see org.apache.commons.math.DoubleArray#getNumElements()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,82,public int getNumElements() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,83,return size;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,86,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,87,* @see org.apache.commons.math.DoubleArray#getElement(int)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,89,public double getElement(int index) throws NoSuchElementException {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,90,if( index > (size-1) ) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,91,"throw new ArrayIndexOutOfBoundsException(""Attempted to retrieve an element outside of"" +"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,93,} else {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,94,return internalArray[index];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,98,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,99,"* @see org.apache.commons.math.DoubleArray#setElement(int, double)"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,101,"public void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,102,if( index > (size-1) ) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,103,"throw new ArrayIndexOutOfBoundsException(""Attempted to set an element outside of"" +"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,104,"""the element array"");"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,105,} else {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,106,internalArray[index] = value;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,110,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,111,* @see org.apache.commons.math.DoubleArray#addElement(double)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,113,public void addElement(double value) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,114,if( size < internalArray.length ) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,115,size++;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,117,internalArray[nextAdd] = value;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,119,nextAdd++;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,120,nextAdd = nextAdd % (maxElements);
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,122,} else {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,123,"throw new ArrayIndexOutOfBoundsException(""Attempted to add a value to an array of fixed size, please "" +"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,129,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,130,* @see org.apache.commons.math.DoubleArray#addElementRolling(double)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,132,public double addElementRolling(double value) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,133,if( size < internalArray.length ) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,134,size++;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,137,double discarded = internalArray[nextAdd];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,139,internalArray[nextAdd] = value;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,141,nextAdd++;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,142,nextAdd = nextAdd % maxElements;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,144,"// but we return the value which was ""replaced"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,145,return( discarded );
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,148,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,149,* @see org.apache.commons.math.DoubleArray#getElements()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,151,public double[] getElements() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,152,double[] copy = new double[internalArray.length];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,153,"System.arraycopy(internalArray, 0, copy, 0, internalArray.length);"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,154,return copy;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,157,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,158,* @see org.apache.commons.math.DoubleArray#clear()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,160,public void clear() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,161,size = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,162,nextAdd = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,163,internalArray = new double[maxElements];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,166,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,167,* @see org.apache.commons.math.DoubleArray#discardFrontElements(int)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,169,public void discardFrontElements(int i) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,170,"// TODO: AH! implemented there is not concept of ""front"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,171,// in an array that discards values when rolling.....  anyone?
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,172,"throw new RuntimeException(""Discarding front element not supported in FixedDoubleArray"");"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,175,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,176,* @see org.apache.commons.math.DoubleArray#getMin()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,178,public double getMin() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,179,double min = internalArray[0];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,180,for( int i = 1; i < size; i++) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,181,if( internalArray[i] < min ) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,182,min = internalArray[i];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,185,return min;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,188,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,189,* @see org.apache.commons.math.DoubleArray#getMax()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,191,public double getMax() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,192,double max = internalArray[0];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,193,for( int i = 1; i < size; i++) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,194,if( internalArray[i] > max ) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,195,max = internalArray[i];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,198,return max;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67, @version $Revision: 1.3 $ $Date: 2003/05/16 05:23:29 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67,* @version $Revision: 1.4 $ $Date: 2003/05/17 23:24:21 $
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,78,rivate DoubleArray doubleArray =
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,79,ew ContractableDoubleArray();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,78,private DoubleArray doubleArray;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,100,/** Create a new univariate with a fixed window **/
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,101,public UnivariateImpl(int window) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,102,windowSize = window;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,103,doubleArray = new FixedDoubleArray( window );
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,157,/ Remove the influence of the discarded
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,158,um -= discarded;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,159,umsq -= discarded * discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,162,// Remove the influence of discarded value ONLY
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,163,// if the discard value has any meaning.  In other words
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,164,"// don't discount until we ""roll""."
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,165,if( windowSize > doubleArray.getNumElements() ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,166,// Remove the influence of the discarded
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,167,sum -= discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,168,sumsq -= discarded * discarded;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,267,his.windowSize = windowSize;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,277,"throw new RuntimeException( ""A fixed window size must be set via the UnivariateImpl constructor"");"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,62,ublic class ContractableDoubleArrayTest extends DoubleArrayAbstractTest {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,62,public class ContractableDoubleArrayTest extends ExpandableDoubleArrayTest {
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,73,ra = new ContractableDoubleArray();
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,75,** Test normal operations and then test internal storage */
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,76,ublic void testAdd1000() {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,77,uper.testAdd1000();
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,78,"ssertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,79,"16 and an expansion factor of 2.0"","
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,80,"024, ((ExpandableDoubleArray) da).getInternalLength());"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,83,ublic void testSetElementArbitraryExpansion() {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,84,uper.testSetElementArbitraryExpansion();
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,85,"ssertEquals( ""The length of the internal array should now be 1001, it isn't"", ((ExpandableDoubleArray) da).getInternalLength(), 1001);"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,88,ublic void testAddElementRolling() {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,89,uper.testAddElementRolling();
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,90,"ssertTrue( ""Even though there are only 6 element, internal storage should be less than 2.5 times the number of elements"","
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,91,(ExpandableDoubleArray) da).getInternalLength() < ((int) 6 * 2.5) );
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,95,** Test ERROR conditions */
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,96,** TEST ERROR CONDITIONS **/
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,98,ublic void testIllegalInitialCapacity() {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,99,ry {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,100,"ontractableDoubleArray eDA = new ContractableDoubleArray(-3, 2.0f);"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,101,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,102,"the initialCapacity was negative, if it didn't then"" +"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,103," the range checking of initialCapacity is not working properly"" );"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,104, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,106,ry {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,107,"ontractableDoubleArray eDA = new ContractableDoubleArray(0, 2.0f);"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,108,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,109,"the initialCapacity was ZERO if it didn't then"" +"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,110," the range checking of initialCapacity is not working properly"" );"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,111, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,115,ublic void testIllegalExpansionFactor() {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,116,ry {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,117,"ontractableDoubleArray eDA = new ContractableDoubleArray(3, 0.66f);"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,118,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,119,"the expansionFactor for 0.66 which would shrink the array instead of expand the array"");"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,120, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,122,ry {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,123,"ontractableDoubleArray eDA = new ContractableDoubleArray(3, 0.0f);"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,124,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,125,"the expansionFactor for 0.0"");"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,126, catch( IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,129,ry {
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,130,"ontractableDoubleArray eDA = new ContractableDoubleArray(3, -4.35f);"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,131,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,132,"the expansionFactor for -4.35"");"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,133, catch( IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,67,// Array used to test rolling
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,68,protected DoubleArray ra = null;
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,68,uper( name );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,71,super(name);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,73,** TEST NORMAL OPERATIONS **/
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,77,or( int i = 0; i < 1000; i++) {
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,78,a.addElement( i );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,76,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,77,da.addElement(i);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,81,"ssertEquals(""Number of elements should be equal to 1000 after adding 1000 values"","
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,82,"000, da.getNumElements() );"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,85,"ssertEquals(""The element at the 56th index should be 56"","
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,86,"6.0, da.getElement(56), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,80,assertEquals(
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,81,"""Number of elements should be equal to 1000 after adding 1000 values"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,82,"1000,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,83,da.getNumElements());
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,85,assertEquals(
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,86,"""The element at the 56th index should be 56"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,87,"56.0,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,88,"da.getElement(56),"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,89,Double.MIN_VALUE);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,92,"ouble[] controlArray = {2.0, 4.0, 6.0};"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,94,"double[] controlArray = { 2.0, 4.0, 6.0 };"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,99,or( int i = 0; i < da.getNumElements(); i++) {
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,100,"ssertEquals( ""The testArray values should equal the controlArray values, index i: "" + i +"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,101," does not match"", testArray[i], controlArray[i], Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,106,ublic void testSetElementArbitraryExpansion() {
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,107,"ouble[] controlArray = {2.0, 4.0, 6.0};"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,109,a.addElement(2.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,110,a.addElement(4.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,111,a.addElement(6.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,112,"a.setElement(1, 3.0);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,114,/ Expand the array arbitrarily to 1000 items
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,115,"a.setElement(1000, 3.4);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,117,"ssertEquals( ""The number of elements should now be 1001, it isn't"", da.getNumElements(), 1001);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,119,"ssertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,120,"a.getElement( 760 ), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,122,"ssertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,123,"ssertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,127,ublic void testSetNumberOfElements() {
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,128,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,129,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,130,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,131,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,132,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,133,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,134,"ssertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,136,(ExpandableDoubleArray) da).setNumElements( 3 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,137,"ssertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,139,ry {
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,140,(ExpandableDoubleArray) da).setNumElements( -3 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,141,"ail( ""Setting number of elements to negative should've thrown an exception"");"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,142, catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,101,for (int i = 0; i < da.getNumElements(); i++) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,102,assertEquals(
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,103,"""The testArray values should equal the controlArray values, index i: """
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,104,+ i
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,105,"+ "" does not match"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,106,"testArray[i],"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,107,"controlArray[i],"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,108,Double.MIN_VALUE);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,145,(ExpandableDoubleArray) da).setNumElements(1024);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,146,"ssertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,147,"ssertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,152,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,153,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,154,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,155,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,156,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,157,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,158,a.addElementRolling( 2.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,160,"ssertEquals( ""There should be 6 elements in the eda"", da.getNumElements(), 6);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,161,"ssertEquals( ""The last element should be 2.0"", da.getElement( da.getNumElements() -1 ), 2.0, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,163,or( int i = 0; i  < 1024; i++ ) {
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,164,a.addElementRolling( i );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,114,ra.addElement(0.5);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,115,ra.addElement(1.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,116,ra.addElement(1.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,117,ra.addElement(1.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,118,ra.addElement(1.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,119,ra.addElement(1.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,120,ra.addElementRolling(2.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,122,assertEquals(
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,123,"""There should be 6 elements in the eda"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,124,"6,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,125,ra.getNumElements());
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,126,assertEquals(
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,127,"""The max element should be 2.0"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,128,"2.0,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,129,"ra.getMax(),"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,130,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,131,assertEquals(
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,132,"""The min element should be 1.0"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,133,"1.0,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,134,"ra.getMin(),"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,135,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,137,for (int i = 0; i < 1024; i++) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,138,ra.addElementRolling(i);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,167,"ssertEquals( ""We just inserted 1024 rolling elements, num elements should still be 6"", da.getNumElements(), 6);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,141,assertEquals(
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,142,"""We just inserted 1024 rolling elements, num elements should still be 6"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,143,"6,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,144,ra.getNumElements());
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,147,public void testMinMax() {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,148,da.addElement(2.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,149,da.addElement(22.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,150,da.addElement(-2.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,151,da.addElement(21.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,152,da.addElement(22.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,153,da.addElement(42.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,154,da.addElement(62.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,155,da.addElement(22.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,156,da.addElement(122.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,157,da.addElement(1212.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,159,"assertEquals(""Min should be -2.0"", -2.0, da.getMin(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,160,assertEquals(
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,161,"""Max should be 1212.0"","
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,162,"1212.0,"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,163,"da.getMax(),"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,164,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,73,ra = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,81,ra = null;
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,89,public void testSetElementArbitraryExpansion() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,90,"double[] controlArray = {2.0, 4.0, 6.0};"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,92,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,93,da.addElement(4.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,94,da.addElement(6.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,95,"da.setElement(1, 3.0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,97,// Expand the array arbitrarily to 1000 items
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,98,"da.setElement(1000, 3.4);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,100,"assertEquals( ""The number of elements should now be 1001, it isn't"", da.getNumElements(), 1001);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,102,"assertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,103,"da.getElement( 760 ), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,105,"assertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,106,"assertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,93,ublic void testSetElementArbitraryExpansion() {
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,94,uper.testSetElementArbitraryExpansion();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,95,"ssertEquals( ""The length of the internal array should now be 1001, it isn't"", ((ExpandableDoubleArray) da).getInternalLength(), 1001);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,100,"ssertEquals( ""Even though there are only 6 element, internal storage should be 2048"", ((ExpandableDoubleArray) da).getInternalLength(), 2048);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,121,public void testSetNumberOfElements() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,122,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,123,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,124,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,125,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,126,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,127,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,128,"assertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,130,((ExpandableDoubleArray) da).setNumElements( 3 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,131,"assertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,133,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,134,((ExpandableDoubleArray) da).setNumElements( -3 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,135,"fail( ""Setting number of elements to negative should've thrown an exception"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,136,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,139,((ExpandableDoubleArray) da).setNumElements(1024);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,140,"assertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,141,"assertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,108,"ssertEquals(""Initial internal length should be 2"", 2, eDA2.getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,118,"ssertEquals(""Internal length should be 2^15"", (int) Math.pow(2.0, 15.0), eDA2.getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,124,"ssertEquals(""Internal length should be 2^16"", (int) Math.pow(2.0, 16.0), eDA2.getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,130,"ssertEquals(""Initial internal length should be 3"", 3, eDA3.getInternalLength() );"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,140,"ssertEquals(""Internal length should be 3^7"", (int) Math.pow(3.0, 7.0), eDA3.getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,146,"ssertEquals(""Internal length should be 3^8"", (int) Math.pow(3.0, 8.0), eDA3.getInternalLength());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,187,public void testDiscard() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,188,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,189,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,190,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,191,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,192,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,193,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,194,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,195,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,196,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,197,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,198,da.addElement(2.0);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,199,"assertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,201,da.discardFrontElements(5);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,202,"assertEquals( ""Number of elements should be 6"", 6, da.getNumElements());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,204,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,205,da.discardFrontElements(-1);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,206,"fail( ""Trying to discard a negative number of element is not allowed"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,207,} catch( Exception e ){
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,210,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,211,da.discardFrontElements( 10000 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,212,"fail( ""You can't discard more elements than the array contains"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,213,} catch( Exception e ){
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,256,public void testSetOutOfBounds() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,257,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,258,"da.setElement( -1, 2.0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,259,"fail( ""Cannot set a negative index"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,260,} catch( Exception e ){
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,264,public void testGetOutOfBounds() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,265,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,266,da.getElement(10000);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,267,"fail( ""Cannot get an element that is larger than the number of elements"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,268,} catch( Exception e ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,271,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,272,da.getElement(-3);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,273,"fail(""Cannot get a negative index"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,274,} catch( Exception e ){
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,5,* reserved.
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,9,* are met:
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,58,* This class contains test cases for the ExpandableDoubleArray.
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,60,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,62,public class FixedDoubleArrayTest extends DoubleArrayAbstractTest {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,64,public FixedDoubleArrayTest(String name) {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,65,super( name );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,68,/* (non-Javadoc)
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,69,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,71,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,72,da = new FixedDoubleArray(4000);
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,75,/* (non-Javadoc)
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,76,* @see junit.framework.TestCase#tearDown()
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,78,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,79,da = null;
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,83,/** TEST NORMAL OPERATIONS - calling super class test and then checking internal
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,84,*   storage **/
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,86,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,87,ra = new FixedDoubleArray(6);
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,89,super.testAddElementRolling();
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,91,"assertEquals( ""FixedDoubleArray should have 6 size internal storage"","
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,92,"6, ((FixedDoubleArray) ra).internalArray.length);"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,95,public void testExceedingElements() {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,97,for( int i = 0; i < 3999; i++) {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,98,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,101,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,103,try {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,104,da.addElement( 2.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,105,"fail( "" Adding more than 4000 elements should cause an exception "");"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,106,} catch( Exception e ) {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,109,da.addElementRolling(2.0);
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,110,"assertEquals( ""This is the first rolling add, the first element should be 2.0"","
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,111,"2.0, da.getElement(0), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,114,public void testGetExceeding() {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,115,try {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,116,da.getElement(100);
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,117,"fail( ""I haven't added 100 elements to the list yet, trying to getElement(100) should "" +"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,119,} catch (Exception e ){
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,124,public void testSetElement() {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,125,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,126,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,127,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,128,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,129,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,130,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,131,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,133,"da.setElement( 2, 4.0 );"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,134,"assertEquals( ""Index 2 should be 4.0"", 4.0, da.getElement(2), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,136,try {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,137,"da.setElement(2000, 45.0);"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,138,"fail( ""The array does not contain 2000 elements yet, setting this element should"" +"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,140,} catch(Exception e) {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,145,public void testOnlyRolling() {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,146,for( int i = 0; i < 8000; i++) {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,147,da.addElementRolling( i );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,150,"assertEquals( ""The 2000th element should equal 6000"","
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,151,"6000.0, da.getElement(2000), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,154,public void testClear() {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,155,for( int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,156,da.addElementRolling(1.0);
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,159,"assertEquals( ""There should be ten elements in the array"","
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,160,"10, da.getNumElements() );"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,162,da.clear();
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,164,"assertEquals( ""There should be zero elements in the array"","
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,165,"0, da.getNumElements() );"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,167,for( int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,168,da.addElementRolling(1.0);
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,171,"assertEquals( ""There should be ten elements in the array"","
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,172,"10, da.getNumElements() );"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,176,public void testDiscardFront() {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,177,try {
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,178,da.discardFrontElements( 2 );
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,179,"fail( ""Discard front elements should throw an exception"");"
True,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/FixedDoubleArrayTest.java,180,} catch( Exception e ) {

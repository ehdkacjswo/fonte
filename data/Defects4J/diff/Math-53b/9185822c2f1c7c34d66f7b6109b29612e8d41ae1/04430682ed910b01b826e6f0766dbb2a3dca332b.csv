is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,262,ut.writeInt(currentState.length);
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,263,or (int i = 0; i < currentState.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,262,final int dimension = (currentState == null) ? -1 : currentState.length;
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,263,out.writeInt(dimension);
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,264,for (int i = 0; i < dimension; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,282,DotKLast[0] = new double[dimension];
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,283,DotKLast[1] = new double[dimension];
False,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,284,DotKLast[2] = new double[dimension];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,283,yDotKLast[0] = (dimension < 0) ? null : new double[dimension];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,284,yDotKLast[1] = (dimension < 0) ? null : new double[dimension];
True,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,285,yDotKLast[2] = (dimension < 0) ? null : new double[dimension];
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,361,inal int dimension = currentState.length;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,361,final int dimension = (currentState == null) ? -1 : currentState.length;
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,383,inal int dimension = currentState.length;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,383,final int dimension = (currentState == null) ? -1 : currentState.length;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,136,ut.writeInt(yDotK.length);
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,137,or (int k = 0; k < yDotK.length; ++k) {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,138,or (int i = 0; i < currentState.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,136,final int n = (currentState == null) ? -1 : currentState.length;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,137,final int kMax = (yDotK == null) ? -1 : yDotK.length;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,138,out.writeInt(kMax);
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,139,for (int k = 0; k < kMax; ++k) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,140,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,158,final int n = (currentState == null) ? -1 : currentState.length;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,157,DotK = new double[kMax][];
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,160,yDotK = (kMax < 0) ? null : new double[kMax][];
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,159,DotK[k] = new double[currentState.length];
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,160,or (int i = 0; i < currentState.length; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,162,yDotK[k] = (n < 0) ? null : new double[n];
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,163,for (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,167,ry {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,168,/ we can now set the interpolated time and state
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,169,etInterpolatedTime(t);
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,170, catch (DerivativeException e) {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,171,hrow MathRuntimeException.createIOException(e);
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,170,if (currentState != null) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,171,try {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,172,// we can now set the interpolated time and state
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,173,setInterpolatedTime(t);
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,174,} catch (DerivativeException e) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,175,throw MathRuntimeException.createIOException(e);
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,177,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,178,interpolatedTime = t;
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,354,ut.writeInt(currentState.length);
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,354,if (currentState == null) {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,355,out.writeInt(-1);
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,356,} else {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,357,out.writeInt(currentState.length);
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,360,or (int i = 0; i < currentState.length; ++i) {
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,361,ut.writeDouble(currentState[i]);
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,364,if (currentState != null) {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,365,for (int i = 0; i < currentState.length; ++i) {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,366,out.writeDouble(currentState[i]);
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,396,urrentState  = new double[dimension];
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,397,or (int i = 0; i < currentState.length; ++i) {
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,398,urrentState[i] = in.readDouble();
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,402,if (dimension < 0) {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,403,currentState = null;
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,404,} else {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,405,currentState  = new double[dimension];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,406,for (int i = 0; i < currentState.length; ++i) {
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,407,currentState[i] = in.readDouble();
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,403,nterpolatedState       = new double[dimension];
False,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,404,nterpolatedDerivatives = new double[dimension];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,413,interpolatedState       = (dimension < 0) ? null : new double[dimension];
True,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,414,interpolatedDerivatives = (dimension < 0) ? null : new double[dimension];

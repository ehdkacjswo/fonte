is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,18,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,21,* Extension of {@link MultivariateRealFunction} representing a differentiable
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,22,* multivariate real function.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,23,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,24,* @since 2.0
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,26,public interface DifferentiableMultivariateRealFunction extends MultivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,29,* Returns the partial derivative of the function with respect to a point coordinate.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,30,* <p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,31,* The partial derivative is defined with respect to point coordinate
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,32,* x<sub>k</sub>. If the partial derivatives with respect to all coordinates are
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,33,"* needed, it may be more efficient to use the {@link #gradient()} method which will"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,34,* compute them all at once.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,35,* </p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,36,* @param k index of the coordinate with respect to which the partial
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,37,* derivative is computed
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,38,* @return the partial derivative function with respect to k<sup>th</sup> point coordinate
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,40,MultivariateRealFunction partialDerivative(int k);
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,43,* Returns the gradient function.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,44,* <p>If only one partial derivative with respect to a specific coordinate is
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,45,"* needed, it may be more efficient to use the {@link #partialDerivative(int)} method"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,46,* which will compute only the specified component.</p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,47,* @return the gradient function
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateRealFunction.java,49,MultivariateVectorialFunction gradient();
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,18,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,22,* Extension of {@link MultivariateVectorialFunction} representing a differentiable
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,23,* multivariate vectorial function.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,24,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,25,* @since 2.0
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,27,public interface DifferentiableMultivariateVectorialFunction
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,28,extends MultivariateVectorialFunction {
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,31,* Returns the partial derivative of the function with respect to point
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,32,* coordinate x<sub>j</sub>.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,33,* <p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,34,* The partial derivative basically represents column j of the jacobian
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,35,* matrix. If the partial derivatives with respect to all coordinates are
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,36,"* needed, it may be more efficient to use the {@link #jacobian()} method"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,37,* which will compute the complete matrix at once.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,38,* </p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,39,* @param j index of the coordinate with respect to which the partial
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,40,* derivative is computed
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,41,* @return the partial derivative function with respect to point coordinate
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,42,* x<sub>i</sub>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,44,MultivariateVectorialFunction partialDerivative(int j);
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,47,* Returns the gradient function of the i<sup>th</sup> component of
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,48,* the vectorial function.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,50,* <p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,51,* The i<sup>th</sup> gradient basically represents row i of the jacobian
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,52,"* matrix. If all gradients are needed, it may be more efficient to use the"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,53,* {@link #jacobian()} method which will compute the complete matrix at once.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,54,* </p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,55,* @param i index of the function component for which the gradient is requested
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,56,* @return the gradient function of the i<sup>th</sup> component of
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,57,* the vectorial function
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,59,MultivariateVectorialFunction gradient(int i);
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,62,* Returns the jacobian function.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,63,* <p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,64,"* If only one column of the jacobian is needed, it may be more efficient to"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,65,* use the {@link #partialDerivative(int)} method which will compute only the
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,66,"* specified column. If only one row of the jacobian is needed, it may be more"
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,67,* efficient to use the {@link #gradient(int)} method which will compute only the
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,68,* specified row.
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,69,* </p>
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,70,* @return the jacobian function
True,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,72,MultivariateMatrixFunction jacobian();
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,20,* Extension of {@link UnivariateMatrixFunction} representing a differentiable univariate matrix function.
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,22,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,23,* @since 2.0
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,25,public interface DifferentiableUnivariateMatrixFunction
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,26,extends UnivariateMatrixFunction {
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,29,* Returns the derivative of the function
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,31,* @return  the derivative function
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateMatrixFunction.java,33,public UnivariateMatrixFunction derivative();
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,20,* Extension of {@link UnivariateVectorialFunction} representing a differentiable univariate vectorial function.
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,22,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,23,* @since 2.0
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,25,public interface DifferentiableUnivariateVectorialFunction
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,26,extends UnivariateVectorialFunction {
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,29,* Returns the derivative of the function
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,31,* @return  the derivative function
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateVectorialFunction.java,33,public UnivariateVectorialFunction derivative();
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,18,ackage org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,18,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,22,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,21, This interface represents a vectorial objective function that can be differentiated.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,25,* An interface representing a multivariate matrix function.
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,25,ublic interface VectorialDifferentiableObjectiveFunction extends VectorialObjectiveFunction {
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,29,public interface MultivariateMatrixFunction extends Serializable {
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,28, Compute the jacobian of the objective function.
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,29, @param variables variables set
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,30, @param value value of the objective function (already computed)
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,31, @return jacobian of the objective function
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,32, @exception ObjectiveException if no cost can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,33, @exception IllegalArgumentException if variables dimension is wrong
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,32,* Compute the value for the function at the given point.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,33,* @param point point at which the function must be evaluated
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,34,* @return function value for the given point
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,35,* @exception FunctionEvaluationException if the function evaluation fails
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,36,* @exception IllegalArgumentException if points dimension is wrong
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,35,"ouble[][] jacobian(double[] variables, double[] value)"
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,36,"hrows ObjectiveException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,38,double[][] value(double[] point)
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateMatrixFunction.java,39,"throws FunctionEvaluationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,18,ackage org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,18,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,22,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,23, This interface represents a vectorial objective function to be either minimized or maximized.
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,24, @see LeastSquaresConverter
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,25,* An interface representing a multivariate real function.
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,28,ublic interface VectorialObjectiveFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,29,public interface MultivariateRealFunction extends Serializable {
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,31, Compute the function value for the given variables set.
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,32, @param variables variables set
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,33, @return function value for the given variables set
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,34, @exception ObjectiveException if no cost can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,35, @exception IllegalArgumentException if variables dimension is wrong
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,32,* Compute the value for the function at the given point.
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,33,* @param point point at which the function must be evaluated
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,34,* @return function value for the given point
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,35,* @exception FunctionEvaluationException if the function evaluation fails
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,36,* @exception IllegalArgumentException if points dimension is wrong
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,37,ouble[] objective(double[] variables)
False,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,38,"hrows ObjectiveException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,38,double value(double[] point)
True,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,src/java/org/apache/commons/math/analysis/MultivariateRealFunction.java,39,"throws FunctionEvaluationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,18,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,25,* An interface representing a multivariate vectorial function.
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,27,* @since 2.0
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,29,public interface MultivariateVectorialFunction extends Serializable {
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,32,* Compute the value for the function at the given point.
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,33,* @param point point at which the function must be evaluated
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,34,* @return function value for the given point
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,35,* @exception FunctionEvaluationException if the function evaluation fails
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,36,* @exception IllegalArgumentException if points dimension is wrong
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,38,double[] value(double[] point)
True,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java,39,"throws FunctionEvaluationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,18,ackage org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,17,package org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,23, This interface represents a scalar objective function to be either minimized or maximized.
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,21,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,24,* An interface representing a univariate matrix function.
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,27,ublic interface ScalarObjectiveFunction extends Serializable {
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,30, Compute the function value for the given variables set.
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,31, @param variables variables set
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,32, @return function value for the given variables set
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,33, @exception ObjectiveException if no value can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,34, @exception IllegalArgumentException if variables dimension is wrong
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,29,public interface UnivariateMatrixFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,31,* Compute the value for the function.
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,32,* @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,33,* @return the value
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,34,* @throws FunctionEvaluationException if the function evaluation fails
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,36,ouble objective(double[] variables)
False,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,37,"hrows ObjectiveException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateMatrixFunction.java,36,public double[][] value(double x) throws FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,19,import java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,26,ublic interface UnivariateRealFunction {
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,28,public interface UnivariateRealFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,17,package org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,18,ackage org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,19,import java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,21, This interface represents a scalar objective function that can be differentiated.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,21,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,24,* An interface representing a univariate vectorial function.
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,25,ublic interface ScalarDifferentiableObjectiveFunction extends ScalarObjectiveFunction {
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,28, Compute the partial derivatives of the objective function.
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,29, @param variables variables set
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,30, @return partial derivatives of the objective function
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,31, @exception ObjectiveException if no value can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,32, @exception IllegalArgumentException if variables dimension is wrong
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,29,public interface UnivariateVectorialFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,31,* Compute the value for the function.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,32,* @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,33,* @return the value
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,34,* @throws FunctionEvaluationException if the function evaluation fails
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,34,ouble[] partials(double[] variables)
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,35,"hrows ObjectiveException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java,36,public double[] value(double x) throws FunctionEvaluationException;

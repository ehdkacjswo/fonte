is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,109,"achedQt = MatrixUtils.createRealMatrix(m, m);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,109,final double[][] qtData  = new double[m][m];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,115,"achedQt.setEntry(k, k, 1);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,115,qtData[k][k] = 1;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,117,final double[] qtK = qtData[k];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,118,"achedQt.setEntry(k, k, 1 + beta * hK[k]);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,119,qtK[k] = 1 + beta * hK[k];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,120,"achedQt.setEntry(k, i, beta * hK[i]);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,121,qtK[i] = beta * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,124,final double[] qtJ = qtData[j];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,125,"eta += cachedQt.getEntry(j, i) * hK[i];"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,127,beta += qtJ[i] * hK[i];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,128,"achedQt.setEntry(j, k, beta * hK[k]);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,130,qtJ[k] = beta * hK[k];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,130,"achedQt.addToEntry(j, i, beta * hK[i]);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,132,qtJ[i] += beta * hK[i];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,135,"achedQt.setEntry(0, 0, 1);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,137,qtData[0][0] = 1;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,139,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,140,"cachedQt = new RealMatrixImpl(qtData, false);"
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,153,"achedT = MatrixUtils.createRealMatrix(m, m);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,158,double[][] tData = new double[m][m];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,155,"achedT.setEntry(i, i, main[i]);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,160,double[] tDataI = tData[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,161,tDataI[i] = main[i];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,157,"achedT.setEntry(i, i - 1, secondary[i - 1]);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,163,tDataI[i - 1] = secondary[i - 1];
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,160,"achedT.setEntry(i, i + 1, secondary[i]);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,166,tDataI[i + 1] = secondary[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,170,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,171,"cachedT = new RealMatrixImpl(tData, false);"
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,369,eturn MatrixUtils.createRealMatrix(data);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,369,//return MatrixUtils.createRealMatrix(data);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,370,"return new RealMatrixImpl(data, false);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,22,import java.util.Arrays;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,47,* Get the elements type from an array.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,48,* @param d data array
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,49,* @return field to which array elements belong
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,50,* @exception IllegalArgumentException if array is empty
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,52,protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,53,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,54,if (d.length == 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,55,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,57,if (d[0].length == 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,58,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,60,return d[0][0].getField();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,64,* Get the elements type from an array.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,65,* @param d data array
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,66,* @return field to which array elements belong
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,67,* @exception IllegalArgumentException if array is empty
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,69,protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,70,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,71,if (d.length == 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,72,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,74,return d[0].getField();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,78,* <p>
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,79,* Complete arrays are filled with field.getZero()
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,80,* </p>
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,47, @param columns number of columns
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,82,* @param columns number of columns (may be negative to build partial
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,83,* arrays in the same way <code>new Field[rows][]</code> works)
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,51,"rotected T[][] buildArray(final int rows, final int columns) {"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,52,"eturn (T[][]) Array.newInstance(field.getZero().getClass(), new int[] { rows, columns });"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,87,"protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,88,"final int rows,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,89,final int columns) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,90,if (columns < 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,91,"T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,92,"return (T[][]) Array.newInstance(dummyRow.getClass(), rows);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,94,T[][] array =
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,95,"(T[][]) Array.newInstance(field.getZero().getClass(), rows, columns);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,96,for (int i = 0; i < array.length; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,97,"Arrays.fill(array[i], field.getZero());"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,99,return array;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,103,* <p>
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,104,* Arrays are filled with field.getZero()
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,105,* </p>
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,60,rotected T[] buildArray(final int length) {
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,61,"eturn (T[]) Array.newInstance(field.getZero().getClass(), length);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,110,"protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,111,final int length) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,112,"T[] array = (T[]) Array.newInstance(field.getZero().getClass(), length);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,113,"Arrays.fill(array, field.getZero());"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,114,return array;
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,212,"inal T[][] data = buildArray(getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,265,"final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,496,inal T[] out = buildArray(nCols);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,549,"final T[] out = buildArray(field, nCols);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,528,inal T[] out = buildArray(nRows);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,581,"final T[] out = buildArray(field, nRows);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,631,inal T[] out = buildArray(nRows);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,684,"final T[] out = buildArray(field, nRows);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,658,inal T[] out = buildArray(nRows);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,711,"final T[] out = buildArray(field, nRows);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,683,inal T[] out = buildArray(nCols);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,736,"final T[] out = buildArray(field, nCols);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,711,inal T[] out = buildArray(nCols);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,764,"final T[] out = buildArray(field, nCols);"

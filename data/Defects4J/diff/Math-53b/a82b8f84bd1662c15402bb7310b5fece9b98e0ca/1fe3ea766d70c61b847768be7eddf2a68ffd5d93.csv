is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,18,package org.apache.commons.math;
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,20,import java.lang.annotation.*;
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,23,* Annotation that enables test retries.
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,24,* @version $Id$
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,26,@Retention(RetentionPolicy.RUNTIME)
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,27,@Target({ElementType.METHOD})
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,28,public @interface Retry {
True,src/test/java/org/apache/commons/math/Retry.java,src/test/java/org/apache/commons/math/Retry.java,29,int value() default 2;
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,32,** Maximal number of test run attempts. */
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,33,rivate static final int MAX_ATTEMPTS = 3;
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,35,** Simple constructor.
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,36, @param testClass class to test
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,37, @throws InitializationError if default runner cannot be built
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,32,* Simple constructor.
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,34,* @param testClass Class to test.
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,35,* @throws InitializationError if default runner cannot be built.
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,45,"ublic Statement methodInvoker(FrameworkMethod method, Object test) {"
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,43,"public Statement methodInvoker(final FrameworkMethod method,"
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,44,Object test) {
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,49,** Evaluate the statement.
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,48,* Evaluate the statement.
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,56,or (int i = 0; i < MAX_ATTEMPTS; ++i) {
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,57,ry {
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,59,/ do one test run attempt
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,60,ingleTryStatement.evaluate();
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,62,"/ attempt succeeded, stop evaluation here"
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,63,eturn;
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,56,final Retry retry = method.getAnnotation(Retry.class);
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,57,if (retry == null) {
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,58,// Do a single test run attempt.
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,59,singleTryStatement.evaluate();
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,60,} else {
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,61,final int numRetries = retry.value();
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,65, catch (Throwable t) {
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,66,"/ attempt failed, store the reason why"
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,67,ailureReason = t;
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,63,for (int i = 0; i < numRetries; ++i) {
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,64,try {
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,65,// Do a single test run attempt.
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,66,singleTryStatement.evaluate();
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,67,"// Attempt succeeded, stop evaluation here."
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,68,return;
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,69,} catch (Throwable t) {
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,70,"// Attempt failed, store the reason."
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,71,failureReason = t;
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,71,/ all attempts failed
False,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,72,hrow failureReason;
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,75,// All attempts failed.
True,src/test/java/org/apache/commons/math/RetryRunner.java,src/test/java/org/apache/commons/math/RetryRunner.java,76,throw failureReason;
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,18,package org.apache.commons.math;
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,20,import java.util.Random;
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,22,import org.apache.commons.math.exception.MathRuntimeException;
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,25,import org.junit.runner.RunWith;
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,28,"* Test for the ""Retry"" functionality (retrying Junit test methods)."
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,30,@RunWith(RetryRunner.class)
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,31,public class RetryRunnerTest {
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,32,final Random rng = new Random();
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,35,* Shows that an always failing test will fail even if it is retried.
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,37,@Test(expected=MathRuntimeException.class)
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,38,@Retry
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,39,public void testRetryFailAlways() {
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,40,throw new MathRuntimeException();
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,44,* Shows that a test that sometimes fail might succeed if it is retried.
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,45,* In this case the high number of retries makes it quite unlikely that
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,46,* the exception will be thrown by all of the calls.
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,48,@Test
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,49,@Retry(100)
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,50,public void testRetryFailSometimes() {
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,51,if (rng.nextBoolean()) {
True,src/test/java/org/apache/commons/math/RetryRunnerTest.java,src/test/java/org/apache/commons/math/RetryRunnerTest.java,52,throw new MathRuntimeException();

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,335,ublic double getCurrentStepsize() {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,335,public double getCurrentSignedStepsize() {
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,70," #getCurrentStepsize()}), it is <em>not</em> thread-safe.</p>"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,70,"* #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,98,** Get the current value of the integration stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,98,/** Get the current signed value of the integration stepsize.
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,101, differential equations} problem) if the value of the current stepsize
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,101,* differential equations} problem) if the signed value of the current stepsize
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,105, @return current value of the stepsize
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,105,* @return current signed value of the stepsize
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,107,ublic double getCurrentStepsize();
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,107,public double getCurrentSignedStepsize();
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,853,tepStart += stepSize;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,853,double nextStep = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,856,"witchesHandler.stepAccepted(stepStart, y);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,856,"switchesHandler.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,862,nterpolator.storeTime(stepStart);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,862,interpolator.storeTime(nextStep);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,864,stepStart = nextStep;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,277,tepStart += stepSize;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,277,double nextStep = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,279,"witchesHandler.stepAccepted(stepStart, y);"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,279,"switchesHandler.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,283,astStep = forward ? (stepStart >= t) : (stepStart <= t);
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,283,lastStep = forward ? (nextStep >= t) : (nextStep <= t);
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,287,nterpolator.storeTime(stepStart);
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,287,interpolator.storeTime(nextStep);
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,289,stepStart = nextStep;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,222,tepStart += stepSize;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,222,double nextStep = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,224,"witchesHandler.stepAccepted(stepStart, y);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,224,"switchesHandler.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,232,nterpolator.storeTime(stepStart);
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,232,interpolator.storeTime(nextStep);
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,234,stepStart = nextStep;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,259,ublic double getCurrentStepsize() {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,260,public double getCurrentSignedStepsize() {

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,20,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,21,import org.apache.commons.math.fraction.FractionConversionException;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,22,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,28,* Test cases for the {@link SparseFieldVector} class.
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,30,"* @version $Revision: 728186 $ $Date: 2009-04-20 11:42:11 -0700 (Mon, 20 Apr 2009) $"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,32,public class SparseFieldVectorTest extends TestCase {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,35,"protected Fraction[][] ma1 = {{new Fraction(1), new Fraction(2), new Fraction(3)}, {new Fraction(4), new Fraction(5), new Fraction(6)}, {new Fraction(7), new Fraction(8), new Fraction(9)}};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,36,"protected Fraction[] vec1 = {new Fraction(1), new Fraction(2), new Fraction(3)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,37,"protected Fraction[] vec2 = {new Fraction(4), new Fraction(5), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,38,"protected Fraction[] vec3 = {new Fraction(7), new Fraction(8), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,39,"protected Fraction[] vec4 = {new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,40,"protected Fraction[] vec_null = {new Fraction(0), new Fraction(0), new Fraction(0)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,41,"protected Fraction[] dvec1 = {new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8),new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,42,"protected Fraction[][] mat1 = {{new Fraction(1), new Fraction(2), new Fraction(3)}, {new Fraction(4), new Fraction(5), new Fraction(6)},{ new Fraction(7), new Fraction(8), new Fraction(9)}};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,44,// tolerances
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,45,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,46,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,48,protected FractionField field = FractionField.getInstance();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,50,public void testMapFunctions() throws FractionConversionException {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,51,"SparseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,53,//octave =  v1 .+ 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,54,FieldVector<Fraction> v_mapAdd = v1.mapAdd(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,55,"Fraction[] result_mapAdd = {new Fraction(3), new Fraction(4), new Fraction(5)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,56,"assertEquals(""compare vectors"" ,result_mapAdd,v_mapAdd.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,58,//octave =  v1 .+ 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,59,FieldVector<Fraction> v_mapAddToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,60,v_mapAddToSelf.mapAddToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,61,"Fraction[] result_mapAddToSelf = {new Fraction(3), new Fraction(4), new Fraction(5)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,62,"assertEquals(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,64,//octave =  v1 .- 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,65,FieldVector<Fraction> v_mapSubtract = v1.mapSubtract(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,66,"Fraction[] result_mapSubtract = {new Fraction(-1), new Fraction(0), new Fraction(1)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,67,"assertEquals(""compare vectors"" ,result_mapSubtract,v_mapSubtract.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,69,//octave =  v1 .- 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,70,FieldVector<Fraction> v_mapSubtractToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,71,v_mapSubtractToSelf.mapSubtractToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,72,"Fraction[] result_mapSubtractToSelf = {new Fraction(-1), new Fraction(0), new Fraction(1)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,73,"assertEquals(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,75,//octave =  v1 .* 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,76,FieldVector<Fraction> v_mapMultiply = v1.mapMultiply(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,77,"Fraction[] result_mapMultiply = {new Fraction(2), new Fraction(4), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,78,"assertEquals(""compare vectors"" ,result_mapMultiply,v_mapMultiply.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,80,//octave =  v1 .* 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,81,FieldVector<Fraction> v_mapMultiplyToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,82,v_mapMultiplyToSelf.mapMultiplyToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,83,"Fraction[] result_mapMultiplyToSelf = {new Fraction(2), new Fraction(4), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,84,"assertEquals(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,86,//octave =  v1 ./ 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,87,FieldVector<Fraction> v_mapDivide = v1.mapDivide(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,88,"Fraction[] result_mapDivide = {new Fraction(.5d), new Fraction(1), new Fraction(1.5d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,89,"assertEquals(""compare vectors"" ,result_mapDivide,v_mapDivide.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,91,//octave =  v1 ./ 2.0
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,92,FieldVector<Fraction> v_mapDivideToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,93,v_mapDivideToSelf.mapDivideToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,94,"Fraction[] result_mapDivideToSelf = {new Fraction(.5d), new Fraction(1), new Fraction(1.5d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,95,"assertEquals(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,97,//octave =  v1 .^-1
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,98,FieldVector<Fraction> v_mapInv = v1.mapInv();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,99,"Fraction[] result_mapInv = {new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,100,"assertEquals(""compare vectors"" ,result_mapInv,v_mapInv.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,102,//octave =  v1 .^-1
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,103,FieldVector<Fraction> v_mapInvToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,104,v_mapInvToSelf.mapInvToSelf();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,105,"Fraction[] result_mapInvToSelf = {new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,106,"assertEquals(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.getData());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,111,public void testBasicFunctions() throws FractionConversionException {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,112,"SparseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,113,"SparseFieldVector<Fraction> v2 = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,115,"SparseFieldVector<Fraction> v2_t = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,117,//octave =  v1 + v2
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,118,FieldVector<Fraction> v_add = v1.add(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,119,"Fraction[] result_add = {new Fraction(5), new Fraction(7), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,120,"assertEquals(""compare vect"" ,v_add.getData(),result_add);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,122,"SparseFieldVector<Fraction> vt2 = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,123,FieldVector<Fraction> v_add_i = v1.add(vt2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,124,"Fraction[] result_add_i = {new Fraction(5), new Fraction(7), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,125,"assertEquals(""compare vect"" ,v_add_i.getData(),result_add_i);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,127,//octave =  v1 - v2
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,128,SparseFieldVector<Fraction> v_subtract = v1.subtract(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,129,"Fraction[] result_subtract = {new Fraction(-3), new Fraction(-3), new Fraction(-3)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,130,"assertClose(""compare vect"" ,v_subtract.getData(),result_subtract,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,132,FieldVector<Fraction> v_subtract_i = v1.subtract(vt2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,133,"Fraction[] result_subtract_i = {new Fraction(-3), new Fraction(-3), new Fraction(-3)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,134,"assertClose(""compare vect"" ,v_subtract_i.getData(),result_subtract_i,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,136,// octave v1 .* v2
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,137,FieldVector<Fraction>  v_ebeMultiply = v1.ebeMultiply(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,138,"Fraction[] result_ebeMultiply = {new Fraction(4), new Fraction(10), new Fraction(18)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,139,"assertClose(""compare vect"" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,141,FieldVector<Fraction>  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,142,"Fraction[] result_ebeMultiply_2 = {new Fraction(4), new Fraction(10), new Fraction(18)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,143,"assertClose(""compare vect"" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,145,// octave v1 ./ v2
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,146,FieldVector<Fraction>  v_ebeDivide = v1.ebeDivide(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,147,"Fraction[] result_ebeDivide = {new Fraction(0.25d), new Fraction(0.4d), new Fraction(0.5d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,148,"assertClose(""compare vect"" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,150,FieldVector<Fraction>  v_ebeDivide_2 = v1.ebeDivide(v2_t);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,151,"Fraction[] result_ebeDivide_2 = {new Fraction(0.25d), new Fraction(0.4d), new Fraction(0.5d)};"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,152,"assertClose(""compare vect"" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,154,"// octave  dot(v1,v2)"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,155,Fraction dot =  v1.dotProduct(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,156,"assertEquals(""compare val "",new Fraction(32), dot);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,158,"// octave  dot(v1,v2_t)"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,159,Fraction dot_2 =  v1.dotProduct(v2_t);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,160,"assertEquals(""compare val "",new Fraction(32), dot_2);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,162,FieldMatrix<Fraction> m_outerProduct = v1.outerProduct(v2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,163,"assertEquals(""compare val "",new Fraction(4), m_outerProduct.getEntry(0,0));"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,165,FieldMatrix<Fraction> m_outerProduct_2 = v1.outerProduct(v2_t);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,166,"assertEquals(""compare val "",new Fraction(4), m_outerProduct_2.getEntry(0,0));"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,171,public void testMisc() {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,172,"SparseFieldVector<Fraction> v1 = new SparseFieldVector<Fraction>(field,vec1);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,174,String out1 = v1.toString();
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,175,"assertTrue(""some output "",  out1.length()!=0);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,176,try {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,177,v1.checkVectorDimensions(2);
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,178,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,179,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,180,// expected behavior
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,181,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,182,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,188,public void testPredicates() {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,190,"SparseFieldVector<Fraction> v = new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2) });"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,192,"v.setEntry(0, field.getZero());"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,193,"assertEquals(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2) }));"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,194,"assertNotSame(v, new SparseFieldVector<Fraction>(field, new Fraction[] { new Fraction(0), new Fraction(1), new Fraction(2), new Fraction(3) }));"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,198,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,199,"protected void assertEquals(String msg, Fraction[] m, Fraction[] n) {"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,200,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,201,"fail(""vectors have different lengths"");"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,203,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,204,"assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i]);"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,208,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,209,"protected void assertClose(String msg, Fraction[] m, Fraction[] n, double tolerance) {"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,210,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,211,"fail(""vectors have different lengths"");"
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,213,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/org/apache/commons/math/linear/SparseFieldVectorTest.java,214,"assertEquals(msg + "" "" +  i + "" elements differ"", m[i].doubleValue(),n[i].doubleValue(), tolerance);"
